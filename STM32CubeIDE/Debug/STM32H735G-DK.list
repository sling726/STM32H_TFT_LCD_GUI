
STM32H735G-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019cb8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003848  08019f88  08019f88  00029f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000055c4  0801d7d0  0801d7d0  0002d7d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000003b4  08022d94  08022d94  00032d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000030  08023148  08023148  00033148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08023178  08023178  00258694  2**0
                  CONTENTS
  7 .ARM          00000000  08023178  08023178  00258694  2**0
                  CONTENTS
  8 .preinit_array 00000000  08023178  08023178  00258694  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000018  08023178  08023178  00033178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  08023190  08023190  00033190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000140  24000000  08023198  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00006cb8  24000140  080232d8  00040140  2**2
                  ALLOC
 13 ._user_heap_stack 00002000  24006df8  080232d8  00046df8  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  00258694  2**0
                  CONTENTS, READONLY
 15 ExtFlashSection 00208694  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .debug_info   000d2514  00000000  00000000  002586c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00015d90  00000000  00000000  0032abd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002e88  00000000  00000000  00340968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00004d80  00000000  00000000  003437f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000437e3  00000000  00000000  00348570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00051eac  00000000  00000000  0038bd53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0017de35  00000000  00000000  003ddbff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000d2  00000000  00000000  0055ba34  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00008870  00000000  00000000  0055bb08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loc    0002f8d8  00000000  00000000  00564378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000140 	.word	0x24000140
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08019f70 	.word	0x08019f70

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000144 	.word	0x24000144
 800030c:	08019f70 	.word	0x08019f70

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80003b0:	4901      	ldr	r1, [pc, #4]	; (80003b8 <vApplicationIdleHook+0x8>)
 80003b2:	2000      	movs	r0, #0
 80003b4:	f009 b834 	b.w	8009420 <vTaskSetApplicationTaskTag>
 80003b8:	08001545 	.word	0x08001545

080003bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80003bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 80003be:	2064      	movs	r0, #100	; 0x64
 80003c0:	f007 fbdd 	bl	8007b7e <osDelay>
  for(;;)
 80003c4:	e7fb      	b.n	80003be <StartDefaultTask+0x2>
	...

080003c8 <SystemClock_Config>:
{
 80003c8:	b510      	push	{r4, lr}
 80003ca:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003cc:	224c      	movs	r2, #76	; 0x4c
 80003ce:	2100      	movs	r1, #0
 80003d0:	a809      	add	r0, sp, #36	; 0x24
 80003d2:	f018 fddf 	bl	8018f94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d6:	2220      	movs	r2, #32
 80003d8:	2100      	movs	r1, #0
 80003da:	a801      	add	r0, sp, #4
 80003dc:	f018 fdda 	bl	8018f94 <memset>
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80003e0:	2004      	movs	r0, #4
 80003e2:	f005 ff71 	bl	80062c8 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80003e6:	2300      	movs	r3, #0
 80003e8:	9300      	str	r3, [sp, #0]
 80003ea:	4b1e      	ldr	r3, [pc, #120]	; (8000464 <SystemClock_Config+0x9c>)
 80003ec:	699a      	ldr	r2, [r3, #24]
 80003ee:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80003f2:	619a      	str	r2, [r3, #24]
 80003f4:	699a      	ldr	r2, [r3, #24]
 80003f6:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80003fa:	9200      	str	r2, [sp, #0]
 80003fc:	9a00      	ldr	r2, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003fe:	699a      	ldr	r2, [r3, #24]
 8000400:	0491      	lsls	r1, r2, #18
 8000402:	d5fc      	bpl.n	80003fe <SystemClock_Config+0x36>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000404:	4a18      	ldr	r2, [pc, #96]	; (8000468 <SystemClock_Config+0xa0>)
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000406:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000408:	212c      	movs	r1, #44	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800040a:	a809      	add	r0, sp, #36	; 0x24
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800040c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800040e:	f023 0303 	bic.w	r3, r3, #3
 8000412:	f043 0302 	orr.w	r3, r3, #2
 8000416:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000418:	2201      	movs	r2, #1
 800041a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800041e:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000420:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000424:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000426:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 800042a:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = 2;
 800042c:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000430:	230c      	movs	r3, #12
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000432:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000436:	e9cd 3419 	strd	r3, r4, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800043a:	f005 ff83 	bl	8006344 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800043e:	2103      	movs	r1, #3
 8000440:	233f      	movs	r3, #63	; 0x3f
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000442:	2208      	movs	r2, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000444:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000446:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000448:	e9cd 3101 	strd	r3, r1, [sp, #4]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800044c:	2340      	movs	r3, #64	; 0x40
 800044e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000452:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000456:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000458:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800045c:	f006 fa70 	bl	8006940 <HAL_RCC_ClockConfig>
}
 8000460:	b01c      	add	sp, #112	; 0x70
 8000462:	bd10      	pop	{r4, pc}
 8000464:	58024800 	.word	0x58024800
 8000468:	58024400 	.word	0x58024400

0800046c <PeriphCommonClock_Config>:
{
 800046c:	b500      	push	{lr}
 800046e:	b0af      	sub	sp, #188	; 0xbc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000470:	2290      	movs	r2, #144	; 0x90
 8000472:	2100      	movs	r1, #0
 8000474:	a80a      	add	r0, sp, #40	; 0x28
 8000476:	f018 fd8d 	bl	8018f94 <memset>
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 800047a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800047e:	2305      	movs	r3, #5
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000480:	2150      	movs	r1, #80	; 0x50
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000482:	2080      	movs	r0, #128	; 0x80
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8000484:	e9cd 2301 	strd	r2, r3, [sp, #4]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000488:	2302      	movs	r3, #2
 800048a:	e9cd 1303 	strd	r1, r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800048e:	e9cd 3305 	strd	r3, r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000492:	2300      	movs	r3, #0
 8000494:	e9cd 0307 	strd	r0, r3, [sp, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000498:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 800049a:	2320      	movs	r3, #32
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800049c:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 800049e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004a0:	f006 fcd4 	bl	8006e4c <HAL_RCCEx_PeriphCLKConfig>
}
 80004a4:	b02f      	add	sp, #188	; 0xbc
 80004a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080004ac <main>:
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b0a0      	sub	sp, #128	; 0x80

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80004b0:	2210      	movs	r2, #16
 80004b2:	2100      	movs	r1, #0
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x24000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80004b4:	f04f 5410 	mov.w	r4, #603979776	; 0x24000000
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80004b8:	a813      	add	r0, sp, #76	; 0x4c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80004ba:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80004bc:	f018 fd6a 	bl	8018f94 <memset>
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x70000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 80004c0:	271c      	movs	r7, #28
  HAL_MPU_Disable();
 80004c2:	f004 f839 	bl	8004538 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80004c6:	4bd8      	ldr	r3, [pc, #864]	; (8000828 <main+0x37c>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004c8:	a813      	add	r0, sp, #76	; 0x4c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80004ca:	f8ad 504c 	strh.w	r5, [sp, #76]	; 0x4c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80004ce:	2603      	movs	r6, #3
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80004d0:	e9cd 4314 	strd	r4, r3, [sp, #80]	; 0x50
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80004d4:	4bd5      	ldr	r3, [pc, #852]	; (800082c <main+0x380>)
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80004d6:	2400      	movs	r4, #0
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80004d8:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004da:	f004 f84f 	bl	800457c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x70000000;
 80004de:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004e2:	a813      	add	r0, sp, #76	; 0x4c
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80004e4:	f88d 4057 	strb.w	r4, [sp, #87]	; 0x57
  MPU_InitStruct.BaseAddress = 0x70000000;
 80004e8:	9314      	str	r3, [sp, #80]	; 0x50
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80004ea:	f8ad 405a 	strh.w	r4, [sp, #90]	; 0x5a
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80004ee:	f88d 504d 	strb.w	r5, [sp, #77]	; 0x4d
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 80004f2:	f88d 7054 	strb.w	r7, [sp, #84]	; 0x54
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004f6:	f004 f841 	bl	800457c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80004fa:	2302      	movs	r3, #2
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004fc:	a813      	add	r0, sp, #76	; 0x4c
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80004fe:	f88d 6057 	strb.w	r6, [sp, #87]	; 0x57
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000502:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8000506:	2316      	movs	r3, #22
 8000508:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800050c:	f240 1301 	movw	r3, #257	; 0x101
 8000510:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000514:	f004 f832 	bl	800457c <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000518:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800051c:	a813      	add	r0, sp, #76	; 0x4c
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800051e:	f88d 4057 	strb.w	r4, [sp, #87]	; 0x57
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000522:	9314      	str	r3, [sp, #80]	; 0x50
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000524:	f8ad 405a 	strh.w	r4, [sp, #90]	; 0x5a
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000528:	2404      	movs	r4, #4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800052a:	f88d 604d 	strb.w	r6, [sp, #77]	; 0x4d
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 800052e:	f88d 7054 	strb.w	r7, [sp, #84]	; 0x54
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000532:	f004 f823 	bl	800457c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8000536:	2319      	movs	r3, #25
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000538:	a813      	add	r0, sp, #76	; 0x4c
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 800053a:	f88d 404d 	strb.w	r4, [sp, #77]	; 0x4d
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 800053e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000542:	f88d 6057 	strb.w	r6, [sp, #87]	; 0x57
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000546:	f88d 505a 	strb.w	r5, [sp, #90]	; 0x5a
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800054a:	f004 f817 	bl	800457c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800054e:	4620      	mov	r0, r4
 8000550:	f004 f802 	bl	8004558 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000554:	4bb6      	ldr	r3, [pc, #728]	; (8000830 <main+0x384>)
 8000556:	695a      	ldr	r2, [r3, #20]
 8000558:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 800055c:	d111      	bne.n	8000582 <main+0xd6>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800055e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000562:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000566:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800056a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800056e:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000572:	695a      	ldr	r2, [r3, #20]
 8000574:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000578:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800057a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800057e:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000582:	4aab      	ldr	r2, [pc, #684]	; (8000830 <main+0x384>)
 8000584:	6953      	ldr	r3, [r2, #20]
 8000586:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 800058a:	d123      	bne.n	80005d4 <main+0x128>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800058c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000590:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000594:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000598:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800059c:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005a0:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80005a4:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005a6:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005aa:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005ac:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005b0:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005b2:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 80005b6:	d2f9      	bcs.n	80005ac <main+0x100>
    } while(sets-- != 0U);
 80005b8:	3b20      	subs	r3, #32
 80005ba:	f113 0f20 	cmn.w	r3, #32
 80005be:	d1f2      	bne.n	80005a6 <main+0xfa>
 80005c0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005c4:	6953      	ldr	r3, [r2, #20]
 80005c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005ca:	6153      	str	r3, [r2, #20]
 80005cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005d0:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80005d4:	f003 ff0c 	bl	80043f0 <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	2400      	movs	r4, #0
  SystemClock_Config();
 80005da:	f7ff fef5 	bl	80003c8 <SystemClock_Config>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	2601      	movs	r6, #1
  PeriphCommonClock_Config();
 80005e0:	f7ff ff44 	bl	800046c <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	2214      	movs	r2, #20
 80005e6:	2100      	movs	r1, #0
 80005e8:	a813      	add	r0, sp, #76	; 0x4c
 80005ea:	f018 fcd3 	bl	8018f94 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ee:	4b91      	ldr	r3, [pc, #580]	; (8000834 <main+0x388>)
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80005f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f4:	4890      	ldr	r0, [pc, #576]	; (8000838 <main+0x38c>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 80005fa:	f44f 6780 	mov.w	r7, #1024	; 0x400
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005fe:	f04f 0803 	mov.w	r8, #3
  hltdc.Instance = LTDC;
 8000602:	4d8e      	ldr	r5, [pc, #568]	; (800083c <main+0x390>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000604:	f042 0202 	orr.w	r2, r2, #2
  pLayerCfg.FBStartAdress = 0x70000000;
 8000608:	f04f 0905 	mov.w	r9, #5
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 800060c:	f04f 0a18 	mov.w	sl, #24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000610:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000614:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000618:	f002 0202 	and.w	r2, r2, #2
 800061c:	9200      	str	r2, [sp, #0]
 800061e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000620:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000628:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800062c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000630:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000634:	9201      	str	r2, [sp, #4]
 8000636:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000638:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800063c:	f042 0208 	orr.w	r2, r2, #8
 8000640:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000644:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000648:	f002 0208 	and.w	r2, r2, #8
 800064c:	9202      	str	r2, [sp, #8]
 800064e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000650:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000654:	f042 0210 	orr.w	r2, r2, #16
 8000658:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800065c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000660:	f002 0210 	and.w	r2, r2, #16
 8000664:	9203      	str	r2, [sp, #12]
 8000666:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000668:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800066c:	f042 0201 	orr.w	r2, r2, #1
 8000670:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000674:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000678:	f002 0201 	and.w	r2, r2, #1
 800067c:	9204      	str	r2, [sp, #16]
 800067e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000680:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000684:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000688:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800068c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000690:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000694:	9205      	str	r2, [sp, #20]
 8000696:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000698:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800069c:	f042 0204 	orr.w	r2, r2, #4
 80006a0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80006a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80006a8:	f002 0204 	and.w	r2, r2, #4
 80006ac:	9206      	str	r2, [sp, #24]
 80006ae:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80006b4:	f042 0220 	orr.w	r2, r2, #32
 80006b8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c2:	f003 0320 	and.w	r3, r3, #32
 80006c6:	9307      	str	r3, [sp, #28]
 80006c8:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80006ca:	f004 fa2f 	bl	8004b2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d4:	485a      	ldr	r0, [pc, #360]	; (8000840 <main+0x394>)
 80006d6:	f004 fa29 	bl	8004b2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	210c      	movs	r1, #12
 80006de:	4859      	ldr	r0, [pc, #356]	; (8000844 <main+0x398>)
 80006e0:	f004 fa24 	bl	8004b2c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80006e8:	a913      	add	r1, sp, #76	; 0x4c
 80006ea:	4853      	ldr	r0, [pc, #332]	; (8000838 <main+0x38c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	e9cd 3613 	strd	r3, r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80006f4:	f004 f88e 	bl	8004814 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80006f8:	a913      	add	r1, sp, #76	; 0x4c
 80006fa:	4851      	ldr	r0, [pc, #324]	; (8000840 <main+0x394>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	e9cd 7613 	strd	r7, r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8000704:	f004 f886 	bl	8004814 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RENDER_TIME_Pin|VSYNC_FREQ_Pin;
 8000708:	230c      	movs	r3, #12
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800070a:	a913      	add	r1, sp, #76	; 0x4c
 800070c:	484d      	ldr	r0, [pc, #308]	; (8000844 <main+0x398>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800070e:	9615      	str	r6, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000710:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000714:	e9cd 3613 	strd	r3, r6, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000718:	f004 f87c 	bl	8004814 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 800071c:	484a      	ldr	r0, [pc, #296]	; (8000848 <main+0x39c>)
 800071e:	4b4b      	ldr	r3, [pc, #300]	; (800084c <main+0x3a0>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000720:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 8000722:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000724:	6206      	str	r6, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000726:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800072a:	f003 ff4f 	bl	80045cc <HAL_CRC_Init>
  hdma2d.Init.Mode = DMA2D_R2M;
 800072e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  hdma2d.Instance = DMA2D;
 8000732:	4847      	ldr	r0, [pc, #284]	; (8000850 <main+0x3a4>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000734:	4a47      	ldr	r2, [pc, #284]	; (8000854 <main+0x3a8>)
  hdma2d.Init.OutputOffset = 0;
 8000736:	e9c0 6402 	strd	r6, r4, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 800073a:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800073e:	f003 ffa0 	bl	8004682 <HAL_DMA2D_Init>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000742:	2234      	movs	r2, #52	; 0x34
 8000744:	4621      	mov	r1, r4
 8000746:	a813      	add	r0, sp, #76	; 0x4c
 8000748:	f018 fc24 	bl	8018f94 <memset>
  hltdc.Instance = LTDC;
 800074c:	4b42      	ldr	r3, [pc, #264]	; (8000858 <main+0x3ac>)
  hltdc.Init.VerticalSync = 9;
 800074e:	2128      	movs	r1, #40	; 0x28
  hltdc.Init.AccumulatedVBP = 11;
 8000750:	2035      	movs	r0, #53	; 0x35
  hltdc.Init.AccumulatedActiveH = 283;
 8000752:	f240 2c15 	movw	ip, #533	; 0x215
  hltdc.Init.TotalHeigh = 285;
 8000756:	f240 2e35 	movw	lr, #565	; 0x235
  hltdc.Init.Backcolor.Blue = 0;
 800075a:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800075c:	612c      	str	r4, [r5, #16]
  hltdc.Init.Backcolor.Red = 0;
 800075e:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000762:	e9c5 3400 	strd	r3, r4, [r5]
  hltdc.Init.VerticalSync = 9;
 8000766:	2309      	movs	r3, #9
 8000768:	e9c5 1305 	strd	r1, r3, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
 800076c:	230b      	movs	r3, #11
 800076e:	e9c5 0307 	strd	r0, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
 8000772:	f240 131b 	movw	r3, #283	; 0x11b
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000776:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
 8000778:	e9c5 c309 	strd	ip, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
 800077c:	f240 131d 	movw	r3, #285	; 0x11d
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000780:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hltdc.Init.TotalHeigh = 285;
 8000784:	e9c5 e30b 	strd	lr, r3, [r5, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000788:	f004 fe24 	bl	80053d4 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 800078c:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.WindowY1 = 272;
 800078e:	f44f 7388 	mov.w	r3, #272	; 0x110
  pLayerCfg.WindowX1 = 480;
 8000792:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000796:	4628      	mov	r0, r5
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000798:	971a      	str	r7, [sp, #104]	; 0x68
  pLayerCfg.WindowX0 = 0;
 800079a:	9413      	str	r4, [sp, #76]	; 0x4c
  hospi1.Init.ChipSelectHighTime = 2;
 800079c:	2702      	movs	r7, #2
  pLayerCfg.Backcolor.Blue = 0;
 800079e:	f8ad 407c 	strh.w	r4, [sp, #124]	; 0x7c
  pLayerCfg.Backcolor.Red = 0;
 80007a2:	f88d 407e 	strb.w	r4, [sp, #126]	; 0x7e
  hospi1.Instance = OCTOSPI1;
 80007a6:	4d2d      	ldr	r5, [pc, #180]	; (800085c <main+0x3b0>)
  pLayerCfg.Alpha0 = 0;
 80007a8:	e9cd 1418 	strd	r1, r4, [sp, #96]	; 0x60
  pLayerCfg.FBStartAdress = 0x70000000;
 80007ac:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
  pLayerCfg.ImageHeight = 272;
 80007b0:	e9cd 231d 	strd	r2, r3, [sp, #116]	; 0x74
  pLayerCfg.FBStartAdress = 0x70000000;
 80007b4:	e9cd 911b 	strd	r9, r1, [sp, #108]	; 0x6c
  pLayerCfg.WindowY0 = 0;
 80007b8:	e9cd 2414 	strd	r2, r4, [sp, #80]	; 0x50
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80007bc:	a913      	add	r1, sp, #76	; 0x4c
 80007be:	4622      	mov	r2, r4
  hospi1.Init.FifoThreshold = 4;
 80007c0:	f04f 0904 	mov.w	r9, #4
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80007c4:	e9cd 3616 	strd	r3, r6, [sp, #88]	; 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80007c8:	f004 fecf 	bl	800556a <HAL_LTDC_ConfigLayer>
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80007cc:	4621      	mov	r1, r4
 80007ce:	4652      	mov	r2, sl
 80007d0:	a813      	add	r0, sp, #76	; 0x4c
 80007d2:	f018 fbdf 	bl	8018f94 <memset>
  hospi1.Init.FifoThreshold = 4;
 80007d6:	4b22      	ldr	r3, [pc, #136]	; (8000860 <main+0x3b4>)
  hospi1.Init.DeviceSize = 32;
 80007d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80007dc:	4628      	mov	r0, r5
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80007de:	60ac      	str	r4, [r5, #8]
  hospi1.Init.ClkChipSelectHighTime = 0;
 80007e0:	636c      	str	r4, [r5, #52]	; 0x34
  hospi1.Init.Refresh = 0;
 80007e2:	642c      	str	r4, [r5, #64]	; 0x40
  hospi1.Init.FifoThreshold = 4;
 80007e4:	e9c5 3900 	strd	r3, r9, [r5]
  hospi1.Init.DeviceSize = 32;
 80007e8:	2320      	movs	r3, #32
 80007ea:	e9c5 2303 	strd	r2, r3, [r5, #12]
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80007ee:	2308      	movs	r3, #8
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80007f0:	e9c5 7405 	strd	r7, r4, [r5, #20]
  hospi1.Init.MaxTran = 0;
 80007f4:	e9c5 340e 	strd	r3, r4, [r5, #56]	; 0x38
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80007f8:	e9c5 4407 	strd	r4, r4, [r5, #28]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80007fc:	e9c5 7409 	strd	r7, r4, [r5, #36]	; 0x24
  hospi1.Init.ChipSelectBoundary = 0;
 8000800:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000804:	f005 f834 	bl	8005870 <HAL_OSPI_Init>
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000808:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800080c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000810:	a913      	add	r1, sp, #76	; 0x4c
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000812:	9316      	str	r3, [sp, #88]	; 0x58
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000814:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000818:	4628      	mov	r0, r5
  sOspiManagerCfg.NCSPort = 1;
 800081a:	9615      	str	r6, [sp, #84]	; 0x54
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 800081c:	9317      	str	r3, [sp, #92]	; 0x5c
  sOspiManagerCfg.DQSPort = 1;
 800081e:	e9cd 6613 	strd	r6, r6, [sp, #76]	; 0x4c
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000822:	f005 faaf 	bl	8005d84 <HAL_OSPIM_Config>
 8000826:	e01d      	b.n	8000864 <main+0x3b8>
 8000828:	03000012 	.word	0x03000012
 800082c:	01010001 	.word	0x01010001
 8000830:	e000ed00 	.word	0xe000ed00
 8000834:	58024400 	.word	0x58024400
 8000838:	58021800 	.word	0x58021800
 800083c:	24006b98 	.word	0x24006b98
 8000840:	58020c00 	.word	0x58020c00
 8000844:	58020800 	.word	0x58020800
 8000848:	24006b74 	.word	0x24006b74
 800084c:	58024c00 	.word	0x58024c00
 8000850:	24006c44 	.word	0x24006c44
 8000854:	52001000 	.word	0x52001000
 8000858:	50001000 	.word	0x50001000
 800085c:	24006b14 	.word	0x24006b14
 8000860:	52005000 	.word	0x52005000
  HAL_OSPI_DeInit(&hospi1);
 8000864:	4628      	mov	r0, r5
 8000866:	f005 f879 	bl	800595c <HAL_OSPI_DeInit>
  ospi_nor_int.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 800086a:	f240 1301 	movw	r3, #257	; 0x101
  BSP_OSPI_NOR_DeInit(0);
 800086e:	4620      	mov	r0, r4
  hospi2.Instance = OCTOSPI2;
 8000870:	4d3d      	ldr	r5, [pc, #244]	; (8000968 <main+0x4bc>)
  ospi_nor_int.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8000872:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
  BSP_OSPI_NOR_DeInit(0);
 8000876:	f003 fa19 	bl	8003cac <BSP_OSPI_NOR_DeInit>
  if(BSP_OSPI_NOR_Init(0, &ospi_nor_int) != BSP_ERROR_NONE)
 800087a:	a90e      	add	r1, sp, #56	; 0x38
 800087c:	4620      	mov	r0, r4
 800087e:	f003 fb05 	bl	8003e8c <BSP_OSPI_NOR_Init>
  if(BSP_OSPI_NOR_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000882:	4620      	mov	r0, r4
 8000884:	f003 f9da 	bl	8003c3c <BSP_OSPI_NOR_EnableMemoryMappedMode>
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000888:	4652      	mov	r2, sl
 800088a:	4621      	mov	r1, r4
 800088c:	a813      	add	r0, sp, #76	; 0x4c
 800088e:	f018 fb81 	bl	8018f94 <memset>
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 8000892:	2210      	movs	r2, #16
 8000894:	4621      	mov	r1, r4
 8000896:	a80a      	add	r0, sp, #40	; 0x28
 8000898:	f018 fb7c 	bl	8018f94 <memset>
  OSPI_HyperbusCmdTypeDef sCommand = {0};
 800089c:	2214      	movs	r2, #20
 800089e:	4621      	mov	r1, r4
 80008a0:	a80e      	add	r0, sp, #56	; 0x38
 80008a2:	f018 fb77 	bl	8018f94 <memset>
  hospi2.Instance = OCTOSPI2;
 80008a6:	4b31      	ldr	r3, [pc, #196]	; (800096c <main+0x4c0>)
  hospi2.Init.ChipSelectBoundary = 23;
 80008a8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 80008ac:	4628      	mov	r0, r5
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80008ae:	60ac      	str	r4, [r5, #8]
  hospi2.Init.MaxTran = 0;
 80008b0:	63ec      	str	r4, [r5, #60]	; 0x3c
  hospi2.Init.FifoThreshold = 4;
 80008b2:	e9c5 3900 	strd	r3, r9, [r5]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 80008b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  hospi2.Init.DeviceSize = 24;
 80008ba:	e9c5 3a03 	strd	r3, sl, [r5, #12]
  hospi2.Init.ChipSelectBoundary = 23;
 80008be:	2317      	movs	r3, #23
 80008c0:	e9c5 130b 	strd	r1, r3, [r5, #44]	; 0x2c
  hospi2.Init.Refresh = 400;
 80008c4:	f44f 73c8 	mov.w	r3, #400	; 0x190
  OSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
 80008c8:	e9cd 4408 	strd	r4, r4, [sp, #32]
  hospi2.Init.Refresh = 400;
 80008cc:	642b      	str	r3, [r5, #64]	; 0x40
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80008ce:	e9c5 9405 	strd	r9, r4, [r5, #20]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80008d2:	e9c5 4407 	strd	r4, r4, [r5, #28]
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80008d6:	e9c5 7409 	strd	r7, r4, [r5, #36]	; 0x24
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 80008da:	e9c5 440d 	strd	r4, r4, [r5, #52]	; 0x34
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 80008de:	f004 ffc7 	bl	8005870 <HAL_OSPI_Init>
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 80008e2:	4b23      	ldr	r3, [pc, #140]	; (8000970 <main+0x4c4>)
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80008e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80008e8:	a913      	add	r1, sp, #76	; 0x4c
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 80008ea:	9316      	str	r3, [sp, #88]	; 0x58
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 80008ec:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80008f0:	4628      	mov	r0, r5
  sOspiManagerCfg.NCSPort = 2;
 80008f2:	9715      	str	r7, [sp, #84]	; 0x54
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 80008f4:	9317      	str	r3, [sp, #92]	; 0x5c
  sOspiManagerCfg.DQSPort = 2;
 80008f6:	e9cd 7713 	strd	r7, r7, [sp, #76]	; 0x4c
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80008fa:	f005 fa43 	bl	8005d84 <HAL_OSPIM_Config>
  sHyperBusCfg.AccessTime = 6;
 80008fe:	2306      	movs	r3, #6
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000900:	f241 3288 	movw	r2, #5000	; 0x1388
 8000904:	a90a      	add	r1, sp, #40	; 0x28
 8000906:	4628      	mov	r0, r5
  sHyperBusCfg.RWRecoveryTime = 3;
 8000908:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  sHyperBusCfg.LatencyMode = HAL_OSPI_FIXED_LATENCY;
 800090c:	960d      	str	r6, [sp, #52]	; 0x34
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_LATENCY_ON_WRITE;
 800090e:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000912:	f005 f885 	bl	8005a20 <HAL_OSPI_HyperbusCfg>
  sCommand.AddressSize  = HAL_OSPI_ADDRESS_32_BITS;
 8000916:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800091a:	f241 3288 	movw	r2, #5000	; 0x1388
 800091e:	a90e      	add	r1, sp, #56	; 0x38
  sCommand.AddressSize  = HAL_OSPI_ADDRESS_32_BITS;
 8000920:	9310      	str	r3, [sp, #64]	; 0x40
  sCommand.DQSMode      = HAL_OSPI_DQS_ENABLE;
 8000922:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000926:	4628      	mov	r0, r5
  sCommand.AddressSpace = HAL_OSPI_MEMORY_ADDRESS_SPACE;
 8000928:	940e      	str	r4, [sp, #56]	; 0x38
  sCommand.DQSMode      = HAL_OSPI_DQS_ENABLE;
 800092a:	9312      	str	r3, [sp, #72]	; 0x48
  sCommand.Address      = 0;
 800092c:	940f      	str	r4, [sp, #60]	; 0x3c
  sCommand.NbData       = 1;
 800092e:	9611      	str	r6, [sp, #68]	; 0x44
  if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000930:	f005 f89c 	bl	8005a6c <HAL_OSPI_HyperbusCmd>
  if (HAL_OSPI_MemoryMapped(&hospi2, &sMemMappedCfg) != HAL_OK)
 8000934:	a908      	add	r1, sp, #32
 8000936:	4628      	mov	r0, r5
  sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8000938:	9408      	str	r4, [sp, #32]
  if (HAL_OSPI_MemoryMapped(&hospi2, &sMemMappedCfg) != HAL_OK)
 800093a:	f005 f9af 	bl	8005c9c <HAL_OSPI_MemoryMapped>
  MX_TouchGFX_Init();
 800093e:	f000 fc0a 	bl	8001156 <MX_TouchGFX_Init>
  osKernelInitialize();
 8000942:	f007 f8a7 	bl	8007a94 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000946:	4a0b      	ldr	r2, [pc, #44]	; (8000974 <main+0x4c8>)
 8000948:	4621      	mov	r1, r4
 800094a:	480b      	ldr	r0, [pc, #44]	; (8000978 <main+0x4cc>)
 800094c:	f007 f8ce 	bl	8007aec <osThreadNew>
 8000950:	4b0a      	ldr	r3, [pc, #40]	; (800097c <main+0x4d0>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000952:	4a0b      	ldr	r2, [pc, #44]	; (8000980 <main+0x4d4>)
 8000954:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000956:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000958:	480a      	ldr	r0, [pc, #40]	; (8000984 <main+0x4d8>)
 800095a:	f007 f8c7 	bl	8007aec <osThreadNew>
 800095e:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <main+0x4dc>)
 8000960:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000962:	f007 f8a9 	bl	8007ab8 <osKernelStart>
  while (1)
 8000966:	e7fe      	b.n	8000966 <main+0x4ba>
 8000968:	24006cac 	.word	0x24006cac
 800096c:	5200a000 	.word	0x5200a000
 8000970:	00010002 	.word	0x00010002
 8000974:	0801a008 	.word	0x0801a008
 8000978:	080003bd 	.word	0x080003bd
 800097c:	24006b10 	.word	0x24006b10
 8000980:	08019fe4 	.word	0x08019fe4
 8000984:	0800115b 	.word	0x0800115b
 8000988:	24006c40 	.word	0x24006c40

0800098c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800098c:	6802      	ldr	r2, [r0, #0]
 800098e:	4b03      	ldr	r3, [pc, #12]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000990:	429a      	cmp	r2, r3
 8000992:	d101      	bne.n	8000998 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000994:	f003 bd5a 	b.w	800444c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	40001000 	.word	0x40001000

080009a0 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009a0:	4770      	bx	lr
	...

080009a4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <HAL_MspInit+0x2c>)
{
 80009a6:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009a8:	210f      	movs	r1, #15
 80009aa:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80009b2:	f042 0202 	orr.w	r2, r2, #2
 80009b6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ba:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009c0:	f003 0302 	and.w	r3, r3, #2
 80009c4:	9301      	str	r3, [sp, #4]
 80009c6:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c8:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ca:	f003 bd75 	b.w	80044b8 <HAL_NVIC_SetPriority>
 80009ce:	bf00      	nop
 80009d0:	58024400 	.word	0x58024400

080009d4 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80009d4:	6802      	ldr	r2, [r0, #0]
{
 80009d6:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <HAL_CRC_MspInit+0x2c>)
 80009da:	429a      	cmp	r2, r3
 80009dc:	d10d      	bne.n	80009fa <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80009de:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80009e2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009e6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80009ea:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80009ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009f6:	9301      	str	r3, [sp, #4]
 80009f8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80009fa:	b002      	add	sp, #8
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	58024c00 	.word	0x58024c00

08000a04 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <HAL_DMA2D_MspInit+0x40>)
{
 8000a06:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8000a08:	6802      	ldr	r2, [r0, #0]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d117      	bne.n	8000a3e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000a10:	2105      	movs	r1, #5
 8000a12:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000a14:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000a18:	f042 0210 	orr.w	r2, r2, #16
 8000a1c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000a20:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000a22:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000a26:	f003 0310 	and.w	r3, r3, #16
 8000a2a:	9301      	str	r3, [sp, #4]
 8000a2c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000a2e:	f003 fd43 	bl	80044b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000a32:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000a34:	b003      	add	sp, #12
 8000a36:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000a3a:	f003 bd6f 	b.w	800451c <HAL_NVIC_EnableIRQ>
}
 8000a3e:	b003      	add	sp, #12
 8000a40:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a44:	52001000 	.word	0x52001000
 8000a48:	58024400 	.word	0x58024400

08000a4c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a50:	b0ba      	sub	sp, #232	; 0xe8
 8000a52:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	2214      	movs	r2, #20
 8000a56:	2100      	movs	r1, #0
 8000a58:	a808      	add	r0, sp, #32
 8000a5a:	f018 fa9b 	bl	8018f94 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a5e:	22b4      	movs	r2, #180	; 0xb4
 8000a60:	2100      	movs	r1, #0
 8000a62:	a80d      	add	r0, sp, #52	; 0x34
 8000a64:	f018 fa96 	bl	8018f94 <memset>
  if(hltdc->Instance==LTDC)
 8000a68:	6822      	ldr	r2, [r4, #0]
 8000a6a:	4b77      	ldr	r3, [pc, #476]	; (8000c48 <HAL_LTDC_MspInit+0x1fc>)
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	f040 80e8 	bne.w	8000c42 <HAL_LTDC_MspInit+0x1f6>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000a72:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    PeriphClkInitStruct.PLL3.PLL3M = 25;
    PeriphClkInitStruct.PLL3.PLL3N = 288;
 8000a76:	2119      	movs	r1, #25
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 30;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8000a78:	201e      	movs	r0, #30
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000a7e:	930d      	str	r3, [sp, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 288;
 8000a80:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000a84:	e9cd 1316 	strd	r1, r3, [sp, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000a88:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000a8a:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e9cd 031a 	strd	r0, r3, [sp, #104]	; 0x68
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a94:	a80d      	add	r0, sp, #52	; 0x34
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000a96:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a9a:	f006 f9d7 	bl	8006e4c <HAL_RCCEx_PeriphCLKConfig>
 8000a9e:	b108      	cbz	r0, 8000aa4 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8000aa0:	f7ff ff7e 	bl	80009a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000aa4:	4b69      	ldr	r3, [pc, #420]	; (8000c4c <HAL_LTDC_MspInit+0x200>)
    PE11     ------> LTDC_G3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_1|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa6:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aaa:	2503      	movs	r5, #3
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000aac:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ab0:	270e      	movs	r7, #14
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab2:	a908      	add	r1, sp, #32
 8000ab4:	4866      	ldr	r0, [pc, #408]	; (8000c50 <HAL_LTDC_MspInit+0x204>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000ab6:	f042 0208 	orr.w	r2, r2, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 8000aba:	f04f 0858 	mov.w	r8, #88	; 0x58
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000abe:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8000ac2:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8000ac6:	f002 0208 	and.w	r2, r2, #8
 8000aca:	9200      	str	r2, [sp, #0]
 8000acc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ad2:	f042 0202 	orr.w	r2, r2, #2
 8000ad6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000ada:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ade:	f002 0202 	and.w	r2, r2, #2
 8000ae2:	9201      	str	r2, [sp, #4]
 8000ae4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000aea:	f042 0208 	orr.w	r2, r2, #8
 8000aee:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000af2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000af6:	f002 0208 	and.w	r2, r2, #8
 8000afa:	9202      	str	r2, [sp, #8]
 8000afc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000afe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b02:	f042 0210 	orr.w	r2, r2, #16
 8000b06:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b0a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b0e:	f002 0210 	and.w	r2, r2, #16
 8000b12:	9203      	str	r2, [sp, #12]
 8000b14:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b1a:	f042 0201 	orr.w	r2, r2, #1
 8000b1e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b22:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b26:	f002 0201 	and.w	r2, r2, #1
 8000b2a:	9204      	str	r2, [sp, #16]
 8000b2c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b2e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b36:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b3a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b3e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000b42:	9205      	str	r2, [sp, #20]
 8000b44:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b46:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b4e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b52:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b56:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000b5a:	9206      	str	r2, [sp, #24]
 8000b5c:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000b62:	f042 0204 	orr.w	r2, r2, #4
 8000b66:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b6e:	970c      	str	r7, [sp, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b70:	f003 0304 	and.w	r3, r3, #4
 8000b74:	9307      	str	r3, [sp, #28]
 8000b76:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	f240 3303 	movw	r3, #771	; 0x303
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7c:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	e9cd 3608 	strd	r3, r6, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b84:	f003 fe46 	bl	8004814 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_6;
 8000b88:	2349      	movs	r3, #73	; 0x49
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b8a:	a908      	add	r1, sp, #32
 8000b8c:	4831      	ldr	r0, [pc, #196]	; (8000c54 <HAL_LTDC_MspInit+0x208>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b8e:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b94:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b98:	f003 fe3c 	bl	8004814 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13
 8000b9c:	f64b 0303 	movw	r3, #47107	; 0xb803
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ba0:	a908      	add	r1, sp, #32
 8000ba2:	482d      	ldr	r0, [pc, #180]	; (8000c58 <HAL_LTDC_MspInit+0x20c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ba4:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bae:	f003 fe31 	bl	8004814 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000bb2:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	a908      	add	r1, sp, #32
 8000bb8:	4828      	ldr	r0, [pc, #160]	; (8000c5c <HAL_LTDC_MspInit+0x210>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8000bbe:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc0:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8000bc4:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	f003 fe25 	bl	8004814 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 8000bca:	f44f 4381 	mov.w	r3, #16512	; 0x4080
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bce:	a908      	add	r1, sp, #32
 8000bd0:	4823      	ldr	r0, [pc, #140]	; (8000c60 <HAL_LTDC_MspInit+0x214>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bd2:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd8:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bdc:	f003 fe1a 	bl	8004814 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_8
 8000be0:	f648 7308 	movw	r3, #36616	; 0x8f08
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000be4:	a908      	add	r1, sp, #32
 8000be6:	481f      	ldr	r0, [pc, #124]	; (8000c64 <HAL_LTDC_MspInit+0x218>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000be8:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bee:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bf2:	f003 fe0f 	bl	8004814 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000bf6:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf8:	a908      	add	r1, sp, #32
 8000bfa:	481b      	ldr	r0, [pc, #108]	; (8000c68 <HAL_LTDC_MspInit+0x21c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bfc:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c06:	f003 fe05 	bl	8004814 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	a908      	add	r1, sp, #32
 8000c0c:	4813      	ldr	r0, [pc, #76]	; (8000c5c <HAL_LTDC_MspInit+0x210>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c0e:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	e9cd 8608 	strd	r8, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c14:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f003 fdfc 	bl	8004814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c1c:	2310      	movs	r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c1e:	a908      	add	r1, sp, #32
 8000c20:	4810      	ldr	r0, [pc, #64]	; (8000c64 <HAL_LTDC_MspInit+0x218>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c26:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c28:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c2c:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c2e:	f003 fdf1 	bl	8004814 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000c32:	4640      	mov	r0, r8
 8000c34:	4622      	mov	r2, r4
 8000c36:	2105      	movs	r1, #5
 8000c38:	f003 fc3e 	bl	80044b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000c3c:	4640      	mov	r0, r8
 8000c3e:	f003 fc6d 	bl	800451c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8000c42:	b03a      	add	sp, #232	; 0xe8
 8000c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c48:	50001000 	.word	0x50001000
 8000c4c:	58024400 	.word	0x58024400
 8000c50:	58020400 	.word	0x58020400
 8000c54:	58020c00 	.word	0x58020c00
 8000c58:	58021000 	.word	0x58021000
 8000c5c:	58020000 	.word	0x58020000
 8000c60:	58021800 	.word	0x58021800
 8000c64:	58021c00 	.word	0x58021c00
 8000c68:	58020800 	.word	0x58020800

08000c6c <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8000c6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c70:	b091      	sub	sp, #68	; 0x44
 8000c72:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	2214      	movs	r2, #20
 8000c76:	2100      	movs	r1, #0
 8000c78:	a80b      	add	r0, sp, #44	; 0x2c
 8000c7a:	f018 f98b 	bl	8018f94 <memset>
  if(hospi->Instance==OCTOSPI1)
 8000c7e:	6823      	ldr	r3, [r4, #0]
 8000c80:	4a89      	ldr	r2, [pc, #548]	; (8000ea8 <HAL_OSPI_MspInit+0x23c>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	f040 80b1 	bne.w	8000dea <HAL_OSPI_MspInit+0x17e>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8000c88:	4a88      	ldr	r2, [pc, #544]	; (8000eac <HAL_OSPI_MspInit+0x240>)
 8000c8a:	6813      	ldr	r3, [r2, #0]
 8000c8c:	3301      	adds	r3, #1
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8000c8e:	2b01      	cmp	r3, #1
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8000c90:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8000c92:	d10c      	bne.n	8000cae <HAL_OSPI_MspInit+0x42>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8000c94:	4b86      	ldr	r3, [pc, #536]	; (8000eb0 <HAL_OSPI_MspInit+0x244>)
 8000c96:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000c9a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000c9e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000ca2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000caa:	9300      	str	r3, [sp, #0]
 8000cac:	9b00      	ldr	r3, [sp, #0]
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000cae:	4b80      	ldr	r3, [pc, #512]	; (8000eb0 <HAL_OSPI_MspInit+0x244>)
    PD12     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PB2     ------> OCTOSPIM_P1_DQS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb2:	2500      	movs	r5, #0
 8000cb4:	2403      	movs	r4, #3
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000cb6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000cba:	2709      	movs	r7, #9
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cbc:	a90b      	add	r1, sp, #44	; 0x2c
 8000cbe:	487d      	ldr	r0, [pc, #500]	; (8000eb4 <HAL_OSPI_MspInit+0x248>)
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000cc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000cc4:	f04f 080a 	mov.w	r8, #10
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cc8:	f04f 0904 	mov.w	r9, #4
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000ccc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000cd0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000cd4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000cd8:	9201      	str	r2, [sp, #4]
 8000cda:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cdc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ce0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ce4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000ce8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000cec:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000cf0:	9202      	str	r2, [sp, #8]
 8000cf2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000cf8:	f042 0208 	orr.w	r2, r2, #8
 8000cfc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000d00:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d04:	f002 0208 	and.w	r2, r2, #8
 8000d08:	9203      	str	r2, [sp, #12]
 8000d0a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d0c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d10:	f042 0210 	orr.w	r2, r2, #16
 8000d14:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000d18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d1c:	f002 0210 	and.w	r2, r2, #16
 8000d20:	9204      	str	r2, [sp, #16]
 8000d22:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d28:	f042 0220 	orr.w	r2, r2, #32
 8000d2c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000d30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d34:	f002 0220 	and.w	r2, r2, #32
 8000d38:	9205      	str	r2, [sp, #20]
 8000d3a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000d40:	f042 0202 	orr.w	r2, r2, #2
 8000d44:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4c:	f003 0302 	and.w	r3, r3, #2
 8000d50:	9306      	str	r3, [sp, #24]
 8000d52:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d58:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5c:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000d60:	970f      	str	r7, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d62:	f003 fd57 	bl	8004814 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4;
 8000d66:	23b0      	movs	r3, #176	; 0xb0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d68:	a90b      	add	r1, sp, #44	; 0x2c
 8000d6a:	4853      	ldr	r0, [pc, #332]	; (8000eb8 <HAL_OSPI_MspInit+0x24c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000d6c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d74:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d78:	f003 fd4c 	bl	8004814 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d7c:	a90b      	add	r1, sp, #44	; 0x2c
 8000d7e:	484f      	ldr	r0, [pc, #316]	; (8000ebc <HAL_OSPI_MspInit+0x250>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000d80:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	e9cd 960b 	strd	r9, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d8a:	f003 fd43 	bl	8004814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d8e:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d90:	a90b      	add	r1, sp, #44	; 0x2c
 8000d92:	4848      	ldr	r0, [pc, #288]	; (8000eb4 <HAL_OSPI_MspInit+0x248>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000d94:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9c:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000da0:	f003 fd38 	bl	8004814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_12;
 8000da4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da8:	a90b      	add	r1, sp, #44	; 0x2c
 8000daa:	4843      	ldr	r0, [pc, #268]	; (8000eb8 <HAL_OSPI_MspInit+0x24c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000dac:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db2:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db6:	f003 fd2d 	bl	8004814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000dba:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dbe:	a90b      	add	r1, sp, #44	; 0x2c
 8000dc0:	483f      	ldr	r0, [pc, #252]	; (8000ec0 <HAL_OSPI_MspInit+0x254>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000dc2:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc8:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dcc:	f003 fd22 	bl	8004814 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd0:	a90b      	add	r1, sp, #44	; 0x2c
 8000dd2:	483c      	ldr	r0, [pc, #240]	; (8000ec4 <HAL_OSPI_MspInit+0x258>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000dd4:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	e9cd 960b 	strd	r9, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ddc:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
                          |GPIO_PIN_3|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000de0:	f003 fd18 	bl	8004814 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 8000de4:	b011      	add	sp, #68	; 0x44
 8000de6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if(hospi->Instance==OCTOSPI2)
 8000dea:	4a37      	ldr	r2, [pc, #220]	; (8000ec8 <HAL_OSPI_MspInit+0x25c>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d1f9      	bne.n	8000de4 <HAL_OSPI_MspInit+0x178>
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8000df0:	4a2e      	ldr	r2, [pc, #184]	; (8000eac <HAL_OSPI_MspInit+0x240>)
 8000df2:	6813      	ldr	r3, [r2, #0]
 8000df4:	3301      	adds	r3, #1
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8000df6:	2b01      	cmp	r3, #1
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8000df8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8000dfa:	d10c      	bne.n	8000e16 <HAL_OSPI_MspInit+0x1aa>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8000dfc:	4b2c      	ldr	r3, [pc, #176]	; (8000eb0 <HAL_OSPI_MspInit+0x244>)
 8000dfe:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000e02:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000e06:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000e0a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000e0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e12:	9307      	str	r3, [sp, #28]
 8000e14:	9b07      	ldr	r3, [sp, #28]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8000e16:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <HAL_OSPI_MspInit+0x244>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e18:	2403      	movs	r4, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2500      	movs	r5, #0
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8000e1e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8000e22:	2709      	movs	r7, #9
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e24:	a90b      	add	r1, sp, #44	; 0x2c
 8000e26:	4823      	ldr	r0, [pc, #140]	; (8000eb4 <HAL_OSPI_MspInit+0x248>)
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8000e28:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e2c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000e30:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000e34:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8000e38:	9208      	str	r2, [sp, #32]
 8000e3a:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e44:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000e48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e4c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000e50:	9209      	str	r2, [sp, #36]	; 0x24
 8000e52:	9a09      	ldr	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e58:	f042 0220 	orr.w	r2, r2, #32
 8000e5c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8000e64:	970f      	str	r7, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e66:	f003 0320 	and.w	r3, r3, #32
 8000e6a:	930a      	str	r3, [sp, #40]	; 0x28
 8000e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	f640 0303 	movw	r3, #2051	; 0x803
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e72:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e7a:	f003 fccb 	bl	8004814 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000e7e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e82:	a90b      	add	r1, sp, #44	; 0x2c
 8000e84:	480b      	ldr	r0, [pc, #44]	; (8000eb4 <HAL_OSPI_MspInit+0x248>)
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 8000e86:	940f      	str	r4, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8c:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e90:	f003 fcc0 	bl	8004814 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8000e94:	f241 031f 	movw	r3, #4127	; 0x101f
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e98:	a90b      	add	r1, sp, #44	; 0x2c
 8000e9a:	4809      	ldr	r0, [pc, #36]	; (8000ec0 <HAL_OSPI_MspInit+0x254>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8000e9c:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea2:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ea6:	e79b      	b.n	8000de0 <HAL_OSPI_MspInit+0x174>
 8000ea8:	52005000 	.word	0x52005000
 8000eac:	2400015c 	.word	0x2400015c
 8000eb0:	58024400 	.word	0x58024400
 8000eb4:	58021800 	.word	0x58021800
 8000eb8:	58020c00 	.word	0x58020c00
 8000ebc:	58021000 	.word	0x58021000
 8000ec0:	58021400 	.word	0x58021400
 8000ec4:	58020400 	.word	0x58020400
 8000ec8:	5200a000 	.word	0x5200a000

08000ecc <HAL_OSPI_MspDeInit>:
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
  if(hospi->Instance==OCTOSPI1)
 8000ecc:	4a27      	ldr	r2, [pc, #156]	; (8000f6c <HAL_OSPI_MspDeInit+0xa0>)
{
 8000ece:	b508      	push	{r3, lr}
  if(hospi->Instance==OCTOSPI1)
 8000ed0:	6803      	ldr	r3, [r0, #0]
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d12a      	bne.n	8000f2c <HAL_OSPI_MspDeInit+0x60>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED--;
 8000ed6:	4b26      	ldr	r3, [pc, #152]	; (8000f70 <HAL_OSPI_MspDeInit+0xa4>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	3a01      	subs	r2, #1
 8000edc:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==0){
 8000ede:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <HAL_OSPI_MspDeInit+0xa8>)
 8000ee0:	b92a      	cbnz	r2, 8000eee <HAL_OSPI_MspDeInit+0x22>
      __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8000ee2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000ee6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8000eea:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    }
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8000eee:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    PD11     ------> OCTOSPIM_P1_IO0
    PD12     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PB2     ------> OCTOSPIM_P1_DQS
    */
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_6);
 8000ef2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000ef6:	4820      	ldr	r0, [pc, #128]	; (8000f78 <HAL_OSPI_MspDeInit+0xac>)
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8000ef8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000efc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_6);
 8000f00:	f003 fd6e 	bl	80049e0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13
 8000f04:	f643 01b0 	movw	r1, #14512	; 0x38b0
 8000f08:	481c      	ldr	r0, [pc, #112]	; (8000f7c <HAL_OSPI_MspDeInit+0xb0>)
 8000f0a:	f003 fd69 	bl	80049e0 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8000f0e:	2104      	movs	r1, #4
 8000f10:	481b      	ldr	r0, [pc, #108]	; (8000f80 <HAL_OSPI_MspDeInit+0xb4>)
 8000f12:	f003 fd65 	bl	80049e0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_10);
 8000f16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f1a:	481a      	ldr	r0, [pc, #104]	; (8000f84 <HAL_OSPI_MspDeInit+0xb8>)
 8000f1c:	f003 fd60 	bl	80049e0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 8000f20:	2104      	movs	r1, #4
 8000f22:	4819      	ldr	r0, [pc, #100]	; (8000f88 <HAL_OSPI_MspDeInit+0xbc>)
  /* USER CODE BEGIN OCTOSPI2_MspDeInit 1 */

  /* USER CODE END OCTOSPI2_MspDeInit 1 */
  }

}
 8000f24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8000f28:	f003 bd5a 	b.w	80049e0 <HAL_GPIO_DeInit>
  else if(hospi->Instance==OCTOSPI2)
 8000f2c:	4a17      	ldr	r2, [pc, #92]	; (8000f8c <HAL_OSPI_MspDeInit+0xc0>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d11a      	bne.n	8000f68 <HAL_OSPI_MspDeInit+0x9c>
    HAL_RCC_OCTOSPIM_CLK_ENABLED--;
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <HAL_OSPI_MspDeInit+0xa4>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	3a01      	subs	r2, #1
 8000f38:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==0){
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <HAL_OSPI_MspDeInit+0xa8>)
 8000f3c:	b92a      	cbnz	r2, 8000f4a <HAL_OSPI_MspDeInit+0x7e>
      __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8000f3e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000f42:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8000f46:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    __HAL_RCC_OSPI2_CLK_DISABLE();
 8000f4a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_1
 8000f4e:	f641 4103 	movw	r1, #7171	; 0x1c03
 8000f52:	4809      	ldr	r0, [pc, #36]	; (8000f78 <HAL_OSPI_MspDeInit+0xac>)
    __HAL_RCC_OSPI2_CLK_DISABLE();
 8000f54:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8000f58:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_1
 8000f5c:	f003 fd40 	bl	80049e0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8000f60:	f241 011f 	movw	r1, #4127	; 0x101f
 8000f64:	4807      	ldr	r0, [pc, #28]	; (8000f84 <HAL_OSPI_MspDeInit+0xb8>)
 8000f66:	e7dd      	b.n	8000f24 <HAL_OSPI_MspDeInit+0x58>
}
 8000f68:	bd08      	pop	{r3, pc}
 8000f6a:	bf00      	nop
 8000f6c:	52005000 	.word	0x52005000
 8000f70:	2400015c 	.word	0x2400015c
 8000f74:	58024400 	.word	0x58024400
 8000f78:	58021800 	.word	0x58021800
 8000f7c:	58020c00 	.word	0x58020c00
 8000f80:	58021000 	.word	0x58021000
 8000f84:	58021400 	.word	0x58021400
 8000f88:	58020400 	.word	0x58020400
 8000f8c:	5200a000 	.word	0x5200a000

08000f90 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f90:	280f      	cmp	r0, #15
{
 8000f92:	b510      	push	{r4, lr}
 8000f94:	4604      	mov	r4, r0
 8000f96:	b08a      	sub	sp, #40	; 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f98:	d902      	bls.n	8000fa0 <HAL_InitTick+0x10>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8000f9a:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8000f9c:	b00a      	add	sp, #40	; 0x28
 8000f9e:	bd10      	pop	{r4, pc}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000fa0:	4601      	mov	r1, r0
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2036      	movs	r0, #54	; 0x36
 8000fa6:	f003 fa87 	bl	80044b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000faa:	2036      	movs	r0, #54	; 0x36
 8000fac:	f003 fab6 	bl	800451c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000fb0:	4b18      	ldr	r3, [pc, #96]	; (8001014 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fb2:	4669      	mov	r1, sp
 8000fb4:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 8000fb6:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000fb8:	4b17      	ldr	r3, [pc, #92]	; (8001018 <HAL_InitTick+0x88>)
 8000fba:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8000fbe:	f042 0210 	orr.w	r2, r2, #16
 8000fc2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8000fc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fca:	f003 0310 	and.w	r3, r3, #16
 8000fce:	9301      	str	r3, [sp, #4]
 8000fd0:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fd2:	f005 fe21 	bl	8006c18 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000fd6:	9b07      	ldr	r3, [sp, #28]
 8000fd8:	b9c3      	cbnz	r3, 800100c <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fda:	f005 fdf9 	bl	8006bd0 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8000fde:	4c0f      	ldr	r4, [pc, #60]	; (800101c <HAL_InitTick+0x8c>)
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <HAL_InitTick+0x90>)
 8000fe2:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000fe4:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000fe8:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_InitTick+0x94>)
 8000fec:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ff0:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 8000ff2:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ff4:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000ff6:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8000ff8:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffa:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000ffc:	f006 fd08 	bl	8007a10 <HAL_TIM_Base_Init>
 8001000:	2800      	cmp	r0, #0
 8001002:	d1ca      	bne.n	8000f9a <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001004:	4620      	mov	r0, r4
 8001006:	f006 fb9b 	bl	8007740 <HAL_TIM_Base_Start_IT>
 800100a:	e7c7      	b.n	8000f9c <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800100c:	f005 fde0 	bl	8006bd0 <HAL_RCC_GetPCLK1Freq>
 8001010:	0040      	lsls	r0, r0, #1
 8001012:	e7e4      	b.n	8000fde <HAL_InitTick+0x4e>
 8001014:	24000078 	.word	0x24000078
 8001018:	58024400 	.word	0x58024400
 800101c:	24006d0c 	.word	0x24006d0c
 8001020:	40001000 	.word	0x40001000
 8001024:	000f4240 	.word	0x000f4240

08001028 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001028:	4770      	bx	lr

0800102a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <HardFault_Handler>

0800102c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <MemManage_Handler>

0800102e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800102e:	e7fe      	b.n	800102e <BusFault_Handler>

08001030 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <UsageFault_Handler>

08001032 <DebugMon_Handler>:
 8001032:	4770      	bx	lr

08001034 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001034:	4801      	ldr	r0, [pc, #4]	; (800103c <TIM6_DAC_IRQHandler+0x8>)
 8001036:	f006 bbcd 	b.w	80077d4 <HAL_TIM_IRQHandler>
 800103a:	bf00      	nop
 800103c:	24006d0c 	.word	0x24006d0c

08001040 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001040:	4801      	ldr	r0, [pc, #4]	; (8001048 <LTDC_IRQHandler+0x8>)
 8001042:	f004 ba35 	b.w	80054b0 <HAL_LTDC_IRQHandler>
 8001046:	bf00      	nop
 8001048:	24006b98 	.word	0x24006b98

0800104c <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800104c:	4801      	ldr	r0, [pc, #4]	; (8001054 <DMA2D_IRQHandler+0x8>)
 800104e:	f003 bb57 	b.w	8004700 <HAL_DMA2D_IRQHandler>
 8001052:	bf00      	nop
 8001054:	24006c44 	.word	0x24006c44

08001058 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001058:	2001      	movs	r0, #1
 800105a:	4770      	bx	lr

0800105c <_kill>:

int _kill(int pid, int sig)
{
 800105c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800105e:	f017 ff3f 	bl	8018ee0 <__errno>
 8001062:	2316      	movs	r3, #22
 8001064:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001066:	f04f 30ff 	mov.w	r0, #4294967295
 800106a:	bd08      	pop	{r3, pc}

0800106c <_exit>:

void _exit (int status)
{
 800106c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800106e:	f017 ff37 	bl	8018ee0 <__errno>
 8001072:	2316      	movs	r3, #22
 8001074:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001076:	e7fe      	b.n	8001076 <_exit+0xa>

08001078 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001078:	b570      	push	{r4, r5, r6, lr}
 800107a:	460e      	mov	r6, r1
 800107c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107e:	2500      	movs	r5, #0
 8001080:	42a5      	cmp	r5, r4
 8001082:	db01      	blt.n	8001088 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001084:	4620      	mov	r0, r4
 8001086:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001088:	f3af 8000 	nop.w
 800108c:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108e:	3501      	adds	r5, #1
 8001090:	e7f6      	b.n	8001080 <_read+0x8>

08001092 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001092:	b570      	push	{r4, r5, r6, lr}
 8001094:	460e      	mov	r6, r1
 8001096:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001098:	2500      	movs	r5, #0
 800109a:	42a5      	cmp	r5, r4
 800109c:	db01      	blt.n	80010a2 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800109e:	4620      	mov	r0, r4
 80010a0:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80010a2:	5d70      	ldrb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a4:	3501      	adds	r5, #1
		__io_putchar(*ptr++);
 80010a6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010aa:	e7f6      	b.n	800109a <_write+0x8>

080010ac <_close>:

int _close(int file)
{
	return -1;
}
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	4770      	bx	lr

080010b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80010b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80010b6:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80010b8:	604b      	str	r3, [r1, #4]
}
 80010ba:	4770      	bx	lr

080010bc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80010bc:	2001      	movs	r0, #1
 80010be:	4770      	bx	lr

080010c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80010c0:	2000      	movs	r0, #0
 80010c2:	4770      	bx	lr

080010c4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c4:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <_sbrk+0x30>)
{
 80010c6:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 80010c8:	6819      	ldr	r1, [r3, #0]
{
 80010ca:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80010cc:	b909      	cbnz	r1, 80010d2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80010ce:	490a      	ldr	r1, [pc, #40]	; (80010f8 <_sbrk+0x34>)
 80010d0:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010d2:	6818      	ldr	r0, [r3, #0]
 80010d4:	4909      	ldr	r1, [pc, #36]	; (80010fc <_sbrk+0x38>)
 80010d6:	4c0a      	ldr	r4, [pc, #40]	; (8001100 <_sbrk+0x3c>)
 80010d8:	4402      	add	r2, r0
 80010da:	1b09      	subs	r1, r1, r4
 80010dc:	428a      	cmp	r2, r1
 80010de:	d906      	bls.n	80010ee <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80010e0:	f017 fefe 	bl	8018ee0 <__errno>
 80010e4:	230c      	movs	r3, #12
 80010e6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80010ec:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80010ee:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 80010f0:	e7fc      	b.n	80010ec <_sbrk+0x28>
 80010f2:	bf00      	nop
 80010f4:	24000160 	.word	0x24000160
 80010f8:	24006df8 	.word	0x24006df8
 80010fc:	24050000 	.word	0x24050000
 8001100:	00001000 	.word	0x00001000

08001104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001104:	f8df d034 	ldr.w	sp, [pc, #52]	; 800113c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001108:	f003 f91c 	bl	8004344 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800110c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800110e:	e003      	b.n	8001118 <LoopCopyDataInit>

08001110 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001112:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001114:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001116:	3104      	adds	r1, #4

08001118 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001118:	480a      	ldr	r0, [pc, #40]	; (8001144 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800111c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800111e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001120:	d3f6      	bcc.n	8001110 <CopyDataInit>
  ldr  r2, =_sbss
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001124:	e002      	b.n	800112c <LoopFillZerobss>

08001126 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001126:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001128:	f842 3b04 	str.w	r3, [r2], #4

0800112c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800112e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001130:	d3f9      	bcc.n	8001126 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001132:	f017 feed 	bl	8018f10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001136:	f7ff f9b9 	bl	80004ac <main>
  bx  lr    
 800113a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800113c:	24050000 	.word	0x24050000
  ldr  r3, =_sidata
 8001140:	08023198 	.word	0x08023198
  ldr  r0, =_sdata
 8001144:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001148:	24000140 	.word	0x24000140
  ldr  r2, =_sbss
 800114c:	24000140 	.word	0x24000140
  ldr  r3, = _ebss
 8001150:	24006df8 	.word	0x24006df8

08001154 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001154:	e7fe      	b.n	8001154 <ADC3_IRQHandler>

08001156 <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 8001156:	f000 bc97 	b.w	8001a88 <touchgfx_init>

0800115a <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800115a:	f000 bd05 	b.w	8001b68 <touchgfx_taskEntry>

0800115e <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 800115e:	6840      	ldr	r0, [r0, #4]
    }
 8001160:	4770      	bx	lr

08001162 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001162:	6041      	str	r1, [r0, #4]
    }
 8001164:	4770      	bx	lr
	...

08001168 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8001168:	4a09      	ldr	r2, [pc, #36]	; (8001190 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 800116a:	6813      	ldr	r3, [r2, #0]
 800116c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001170:	6013      	str	r3, [r2, #0]
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8001172:	f5a2 424e 	sub.w	r2, r2, #52736	; 0xce00
 8001176:	4b07      	ldr	r3, [pc, #28]	; (8001194 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8001178:	f852 1c4c 	ldr.w	r1, [r2, #-76]
 800117c:	3a4c      	subs	r2, #76	; 0x4c
 800117e:	430b      	orrs	r3, r1
 8001180:	6013      	str	r3, [r2, #0]
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8001182:	f5a2 627b 	sub.w	r2, r2, #4016	; 0xfb0
 8001186:	6813      	ldr	r3, [r2, #0]
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6013      	str	r3, [r2, #0]
}
 800118e:	4770      	bx	lr
 8001190:	e000edfc 	.word	0xe000edfc
 8001194:	c5acce55 	.word	0xc5acce55

08001198 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001198:	1a51      	subs	r1, r2, r1
 800119a:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 800119e:	fbb1 f0f3 	udiv	r0, r1, r3
 80011a2:	4770      	bx	lr

080011a4 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 80011a4:	4b01      	ldr	r3, [pc, #4]	; (80011ac <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 80011a6:	6818      	ldr	r0, [r3, #0]
}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e0001004 	.word	0xe0001004

080011b0 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 80011b0:	4770      	bx	lr

080011b2 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 80011b2:	b510      	push	{r4, lr}
 80011b4:	4604      	mov	r4, r0
 80011b6:	210c      	movs	r1, #12
 80011b8:	f017 fe31 	bl	8018e1e <_ZdlPvj>
 80011bc:	4620      	mov	r0, r4
 80011be:	bd10      	pop	{r4, pc}

080011c0 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
 80011c0:	6803      	ldr	r3, [r0, #0]
{
 80011c2:	b510      	push	{r4, lr}
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	4604      	mov	r4, r0
    if (active) //idle task sched out
 80011c8:	b131      	cbz	r1, 80011d8 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 80011ca:	4798      	blx	r3
 80011cc:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 80011ce:	6863      	ldr	r3, [r4, #4]
 80011d0:	1a9b      	subs	r3, r3, r2
 80011d2:	4418      	add	r0, r3
 80011d4:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 80011d6:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 80011d8:	4798      	blx	r3
 80011da:	60a0      	str	r0, [r4, #8]
}
 80011dc:	e7fb      	b.n	80011d6 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

080011de <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80011de:	4770      	bx	lr

080011e0 <_ZN20STM32TouchController4initEv>:
#include <stm32h735g_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 80011e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
    hTS.Accuracy = 0;
 80011e2:	2308      	movs	r3, #8
 80011e4:	2000      	movs	r0, #0
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
    BSP_TS_Init(0, &hTS);
 80011e6:	4669      	mov	r1, sp
    hTS.Accuracy = 0;
 80011e8:	e9cd 3002 	strd	r3, r0, [sp, #8]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <_ZN20STM32TouchController4initEv+0x24>)
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	9300      	str	r3, [sp, #0]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 80011f2:	4b05      	ldr	r3, [pc, #20]	; (8001208 <_ZN20STM32TouchController4initEv+0x28>)
 80011f4:	881b      	ldrh	r3, [r3, #0]
 80011f6:	9301      	str	r3, [sp, #4]
    BSP_TS_Init(0, &hTS);
 80011f8:	f002 ffc2 	bl	8004180 <BSP_TS_Init>
}
 80011fc:	b005      	add	sp, #20
 80011fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8001202:	bf00      	nop
 8001204:	2400688e 	.word	0x2400688e
 8001208:	24006890 	.word	0x24006890

0800120c <_ZN20STM32TouchControllerD0Ev>:
 800120c:	b510      	push	{r4, lr}
 800120e:	4604      	mov	r4, r0
 8001210:	2104      	movs	r1, #4
 8001212:	f017 fe04 	bl	8018e1e <_ZdlPvj>
 8001216:	4620      	mov	r0, r4
 8001218:	bd10      	pop	{r4, pc}

0800121a <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800121a:	b530      	push	{r4, r5, lr}
 800121c:	b085      	sub	sp, #20
    TS_State_t TS_State = { 0 };
 800121e:	2000      	movs	r0, #0
{
 8001220:	460d      	mov	r5, r1
 8001222:	4614      	mov	r4, r2

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8001224:	a901      	add	r1, sp, #4
    TS_State_t TS_State = { 0 };
 8001226:	9003      	str	r0, [sp, #12]
 8001228:	e9cd 0001 	strd	r0, r0, [sp, #4]
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 800122c:	f003 f82a 	bl	8004284 <BSP_TS_GetState>
 8001230:	b140      	cbz	r0, 8001244 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>
		"	mov %0, %1												\n"	\
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
 8001232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001236:	f383 8811 	msr	BASEPRI, r3
 800123a:	f3bf 8f6f 	isb	sy
 800123e:	f3bf 8f4f 	dsb	sy
    {
        configASSERT(0);
 8001242:	e7fe      	b.n	8001242 <_ZN20STM32TouchController11sampleTouchERlS0_+0x28>
    }

    if (TS_State.TouchDetected)
 8001244:	9801      	ldr	r0, [sp, #4]
 8001246:	b120      	cbz	r0, 8001252 <_ZN20STM32TouchController11sampleTouchERlS0_+0x38>
    {
        x = TS_State.TouchX;
 8001248:	9b02      	ldr	r3, [sp, #8]
        y = TS_State.TouchY;

        return true;
 800124a:	2001      	movs	r0, #1
        x = TS_State.TouchX;
 800124c:	602b      	str	r3, [r5, #0]
        y = TS_State.TouchY;
 800124e:	9b03      	ldr	r3, [sp, #12]
 8001250:	6023      	str	r3, [r4, #0]
    }

    return false;
}
 8001252:	b005      	add	sp, #20
 8001254:	bd30      	pop	{r4, r5, pc}
	...

08001258 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001258:	b110      	cbz	r0, 8001260 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x8>
 800125a:	2801      	cmp	r0, #1
 800125c:	d009      	beq.n	8001272 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
 800125e:	4770      	bx	lr
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x28>)
 8001262:	2108      	movs	r1, #8
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	fab2 f282 	clz	r2, r2
 800126a:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 800126c:	4805      	ldr	r0, [pc, #20]	; (8001284 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2c>)
 800126e:	f003 bc5d 	b.w	8004b2c <HAL_GPIO_WritePin>
 8001272:	4b03      	ldr	r3, [pc, #12]	; (8001280 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x28>)
 8001274:	2104      	movs	r1, #4
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	fab2 f282 	clz	r2, r2
 800127c:	0952      	lsrs	r2, r2, #5
 800127e:	e7f5      	b.n	800126c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x14>
 8001280:	24000164 	.word	0x24000164
 8001284:	58020800 	.word	0x58020800

08001288 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001288:	b110      	cbz	r0, 8001290 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x8>
 800128a:	2801      	cmp	r0, #1
 800128c:	d009      	beq.n	80012a2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
 800128e:	4770      	bx	lr
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x28>)
 8001292:	2108      	movs	r1, #8
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	3a00      	subs	r2, #0
 8001298:	bf18      	it	ne
 800129a:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 800129c:	4805      	ldr	r0, [pc, #20]	; (80012b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2c>)
 800129e:	f003 bc45 	b.w	8004b2c <HAL_GPIO_WritePin>
 80012a2:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x28>)
 80012a4:	2104      	movs	r1, #4
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	3a00      	subs	r2, #0
 80012aa:	bf18      	it	ne
 80012ac:	2201      	movne	r2, #1
 80012ae:	e7f5      	b.n	800129c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x14>
 80012b0:	24000164 	.word	0x24000164
 80012b4:	58020800 	.word	0x58020800

080012b8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 80012b8:	b110      	cbz	r0, 80012c0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x8>
 80012ba:	2801      	cmp	r0, #1
 80012bc:	d004      	beq.n	80012c8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
 80012be:	4770      	bx	lr
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80012c0:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80012c2:	4802      	ldr	r0, [pc, #8]	; (80012cc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x14>)
 80012c4:	f003 bc37 	b.w	8004b36 <HAL_GPIO_TogglePin>
 80012c8:	2104      	movs	r1, #4
 80012ca:	e7fa      	b.n	80012c2 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xa>
 80012cc:	58020800 	.word	0x58020800

080012d0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 80012d0:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 80012d2:	b130      	cbz	r0, 80012e2 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
 80012d4:	2801      	cmp	r0, #1
 80012d6:	d009      	beq.n	80012ec <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x1c>
 80012d8:	2000      	movs	r0, #0
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 80012da:	1e43      	subs	r3, r0, #1
 80012dc:	4258      	negs	r0, r3
 80012de:	4158      	adcs	r0, r3
 80012e0:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80012e2:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80012e4:	4802      	ldr	r0, [pc, #8]	; (80012f0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x20>)
 80012e6:	f003 fc1b 	bl	8004b20 <HAL_GPIO_ReadPin>
        break;
 80012ea:	e7f6      	b.n	80012da <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0xa>
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80012ec:	2104      	movs	r1, #4
 80012ee:	e7f9      	b.n	80012e4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x14>
 80012f0:	58020800 	.word	0x58020800

080012f4 <_ZN8touchgfx4GPIO4initEv>:
{
 80012f4:	b570      	push	{r4, r5, r6, lr}
 80012f6:	4d08      	ldr	r5, [pc, #32]	; (8001318 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 80012f8:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 80012fa:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 80012fc:	b2e0      	uxtb	r0, r4
 80012fe:	f7ff ffe7 	bl	80012d0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001302:	b118      	cbz	r0, 800130c <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001304:	682b      	ldr	r3, [r5, #0]
 8001306:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001308:	bf18      	it	ne
 800130a:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 800130c:	3401      	adds	r4, #1
 800130e:	3504      	adds	r5, #4
 8001310:	2c05      	cmp	r4, #5
 8001312:	d1f3      	bne.n	80012fc <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001314:	bd70      	pop	{r4, r5, r6, pc}
 8001316:	bf00      	nop
 8001318:	24000164 	.word	0x24000164

0800131c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 800131c:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 800131e:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001322:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8001326:	4770      	bx	lr

08001328 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
    {
        return false;
    }
 8001328:	2000      	movs	r0, #0
 800132a:	4770      	bx	lr

0800132c <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 800132c:	2000      	movs	r0, #0
 800132e:	4770      	bx	lr

08001330 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001330:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001332:	b10b      	cbz	r3, 8001338 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001334:	4608      	mov	r0, r1
 8001336:	4718      	bx	r3
        }
    }
 8001338:	4770      	bx	lr

0800133a <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 800133a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800133e:	4770      	bx	lr

08001340 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001340:	6840      	ldr	r0, [r0, #4]
 8001342:	6803      	ldr	r3, [r0, #0]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	4718      	bx	r3

08001348 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001348:	4770      	bx	lr
	...

0800134c <_ZN11TouchGFXHAL10initializeEv>:
#include "task.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 800134c:	b538      	push	{r3, r4, r5, lr}
 800134e:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001350:	f000 fcb4 	bl	8001cbc <_ZN20TouchGFXGeneratedHAL10initializeEv>

    setFrameBufferStartAddresses((void*)0x70000000, (void*)0x70060000, (void*)0x700C0000);
 8001354:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <_ZN11TouchGFXHAL10initializeEv+0x34>)
 8001356:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 800135a:	6823      	ldr	r3, [r4, #0]
 800135c:	4620      	mov	r0, r4
 800135e:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <_ZN11TouchGFXHAL10initializeEv+0x38>)
 8001364:	47a8      	blx	r5

    GPIO::init();
    instrumentation.init();
 8001366:	f104 057c 	add.w	r5, r4, #124	; 0x7c
    GPIO::init();
 800136a:	f7ff ffc3 	bl	80012f4 <_ZN8touchgfx4GPIO4initEv>
    instrumentation.init();
 800136e:	4628      	mov	r0, r5
 8001370:	f7ff fefa 	bl	8001168 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8001374:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001376:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001378:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    setMCUInstrumentation(&instrumentation);
    enableMCULoadCalculation(true);
}
 800137c:	bd38      	pop	{r3, r4, r5, pc}
 800137e:	bf00      	nop
 8001380:	70060000 	.word	0x70060000
 8001384:	700c0000 	.word	0x700c0000

08001388 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001388:	b508      	push	{r3, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800138a:	b931      	cbnz	r1, 800139a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x12>
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 800138e:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8001392:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8001394:	480a      	ldr	r0, [pc, #40]	; (80013c0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 8001396:	f017 fd71 	bl	8018e7c <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800139a:	e9c0 120f 	strd	r1, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800139e:	3a00      	subs	r2, #0
 80013a0:	4908      	ldr	r1, [pc, #32]	; (80013c4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80013a2:	6443      	str	r3, [r0, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80013a4:	bf18      	it	ne
 80013a6:	2201      	movne	r2, #1
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80013a8:	3b00      	subs	r3, #0
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80013aa:	700a      	strb	r2, [r1, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80013ac:	bf18      	it	ne
 80013ae:	2301      	movne	r3, #1
 80013b0:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x40>)
 80013b2:	7013      	strb	r3, [r2, #0]
    }
 80013b4:	bd08      	pop	{r3, pc}
 80013b6:	bf00      	nop
 80013b8:	0801a06c 	.word	0x0801a06c
 80013bc:	0801a0a4 	.word	0x0801a0a4
 80013c0:	0801a0f2 	.word	0x0801a0f2
 80013c4:	24006892 	.word	0x24006892
 80013c8:	24006893 	.word	0x24006893

080013cc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80013cc:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 80013d0:	881b      	ldrh	r3, [r3, #0]
 80013d2:	428b      	cmp	r3, r1
 80013d4:	d803      	bhi.n	80013de <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	4293      	cmp	r3, r2
 80013dc:	d905      	bls.n	80013ea <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 80013e0:	219e      	movs	r1, #158	; 0x9e
 80013e2:	4a07      	ldr	r2, [pc, #28]	; (8001400 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 80013e4:	4807      	ldr	r0, [pc, #28]	; (8001404 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 80013e6:	f017 fd49 	bl	8018e7c <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 80013ea:	4b07      	ldr	r3, [pc, #28]	; (8001408 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 80013ec:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 80013ee:	4b07      	ldr	r3, [pc, #28]	; (800140c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 80013f0:	801a      	strh	r2, [r3, #0]
    }
 80013f2:	bd08      	pop	{r3, pc}
 80013f4:	24006888 	.word	0x24006888
 80013f8:	2400688a 	.word	0x2400688a
 80013fc:	0801a137 	.word	0x0801a137
 8001400:	0801a19a 	.word	0x0801a19a
 8001404:	0801a0f2 	.word	0x0801a0f2
 8001408:	2400688e 	.word	0x2400688e
 800140c:	24006890 	.word	0x24006890

08001410 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8001410:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
 8001412:	6803      	ldr	r3, [r0, #0]
{
 8001414:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 8001416:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001418:	4798      	blx	r3
    enableInterrupts();
 800141a:	6823      	ldr	r3, [r4, #0]
 800141c:	4620      	mov	r0, r4
 800141e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001420:	4798      	blx	r3

    OSWrappers::waitForVSync();
 8001422:	f000 f8e7 	bl	80015f4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001426:	6823      	ldr	r3, [r4, #0]
 8001428:	4620      	mov	r0, r4
 800142a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800142c:	4798      	blx	r3

    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800142e:	2201      	movs	r2, #1
 8001430:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001434:	4807      	ldr	r0, [pc, #28]	; (8001454 <_ZN11TouchGFXHAL9taskEntryEv+0x44>)
 8001436:	f003 fb79 	bl	8004b2c <HAL_GPIO_WritePin>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800143a:	2201      	movs	r2, #1
 800143c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001440:	4805      	ldr	r0, [pc, #20]	; (8001458 <_ZN11TouchGFXHAL9taskEntryEv+0x48>)
 8001442:	f003 fb73 	bl	8004b2c <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8001446:	f000 f8d5 	bl	80015f4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 800144a:	6823      	ldr	r3, [r4, #0]
 800144c:	4620      	mov	r0, r4
 800144e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001450:	4798      	blx	r3
    for (;;)
 8001452:	e7f8      	b.n	8001446 <_ZN11TouchGFXHAL9taskEntryEv+0x36>
 8001454:	58020c00 	.word	0x58020c00
 8001458:	58021800 	.word	0x58021800

0800145c <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 800145c:	b510      	push	{r4, lr}
 800145e:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001460:	f009 fdd6 	bl	800b010 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001464:	6823      	ldr	r3, [r4, #0]
 8001466:	4620      	mov	r0, r4
 8001468:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    }
 800146c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001470:	4718      	bx	r3

08001472 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001472:	f000 bc15 	b.w	8001ca0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

08001476 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001476:	f000 bc19 	b.w	8001cac <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
	...

0800147c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800147c:	b570      	push	{r4, r5, r6, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800147e:	f000 fc75 	bl	8001d6c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001482:	4a10      	ldr	r2, [pc, #64]	; (80014c4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8001484:	2300      	movs	r3, #0
 8001486:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800148a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800148e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001492:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001496:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800149a:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800149e:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80014a0:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80014a4:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80014a6:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80014aa:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80014ac:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 80014b0:	d2f9      	bcs.n	80014a6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2a>
    } while(sets-- != 0U);
 80014b2:	3b20      	subs	r3, #32
 80014b4:	f113 0f20 	cmn.w	r3, #32
 80014b8:	d1f2      	bne.n	80014a0 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x24>
 80014ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80014be:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 80014c2:	bd70      	pop	{r4, r5, r6, pc}
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 80014c8:	f000 bbc6 	b.w	8001c58 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

080014cc <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80014cc:	f000 bc70 	b.w	8001db0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

080014d0 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80014d0:	f000 bc5a 	b.w	8001d88 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

080014d4 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80014d4:	f000 bbca 	b.w	8001c6c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

080014d8 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 80014d8:	f008 bf44 	b.w	800a364 <_ZN8touchgfx3HAL16flushFrameBufferEv>

080014dc <_ZN11TouchGFXHALD0Ev>:
 80014dc:	b510      	push	{r4, lr}
 80014de:	4604      	mov	r4, r0
 80014e0:	2188      	movs	r1, #136	; 0x88
 80014e2:	f017 fc9c 	bl	8018e1e <_ZdlPvj>
 80014e6:	4620      	mov	r0, r4
 80014e8:	bd10      	pop	{r4, pc}

080014ea <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 80014ea:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 80014ee:	b11b      	cbz	r3, 80014f8 <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 80014f0:	6840      	ldr	r0, [r0, #4]
 80014f2:	6803      	ldr	r3, [r0, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4718      	bx	r3
    }
 80014f8:	4618      	mov	r0, r3
 80014fa:	4770      	bx	lr

080014fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80014fc:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
 8001500:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001502:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001504:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 8001508:	781a      	ldrb	r2, [r3, #0]
 800150a:	428c      	cmp	r4, r1
 800150c:	d009      	beq.n	8001522 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
        {
            if (DISPLAY_ROTATION == rotate0)
 800150e:	b93a      	cbnz	r2, 8001520 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001510:	490a      	ldr	r1, [pc, #40]	; (800153c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001512:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001514:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001516:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001518:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 800151a:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800151c:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 800151e:	701a      	strb	r2, [r3, #0]
        }
    }
 8001520:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001522:	2a00      	cmp	r2, #0
 8001524:	d0fc      	beq.n	8001520 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001526:	4a06      	ldr	r2, [pc, #24]	; (8001540 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001528:	4904      	ldr	r1, [pc, #16]	; (800153c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800152a:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 800152c:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800152e:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001530:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001532:	2200      	movs	r2, #0
 8001534:	e7f3      	b.n	800151e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001536:	bf00      	nop
 8001538:	2400688c 	.word	0x2400688c
 800153c:	2400688a 	.word	0x2400688a
 8001540:	24006888 	.word	0x24006888

08001544 <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
 8001544:	4601      	mov	r1, r0
 8001546:	b508      	push	{r3, lr}
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <IdleTaskHook+0x14>)
 800154a:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 800154c:	b101      	cbz	r1, 8001550 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 800154e:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001550:	f009 fd78 	bl	800b044 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8001554:	2001      	movs	r0, #1
 8001556:	bd08      	pop	{r3, pc}
 8001558:	24006894 	.word	0x24006894

0800155c <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800155c:	2101      	movs	r1, #1
 800155e:	2200      	movs	r2, #0
{
 8001560:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001562:	4608      	mov	r0, r1
 8001564:	f006 fb17 	bl	8007b96 <osSemaphoreNew>
 8001568:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 800156a:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 800156c:	b928      	cbnz	r0, 800157a <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001570:	2128      	movs	r1, #40	; 0x28
 8001572:	4a0a      	ldr	r2, [pc, #40]	; (800159c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001574:	480a      	ldr	r0, [pc, #40]	; (80015a0 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001576:	f017 fc81 	bl	8018e7c <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800157a:	2200      	movs	r2, #0
 800157c:	2104      	movs	r1, #4
 800157e:	2001      	movs	r0, #1
 8001580:	f006 fba8 	bl	8007cd4 <osMessageQueueNew>
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001586:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001588:	b918      	cbnz	r0, 8001592 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 800158a:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 800158c:	212c      	movs	r1, #44	; 0x2c
 800158e:	4a03      	ldr	r2, [pc, #12]	; (800159c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001590:	e7f0      	b.n	8001574 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001592:	bd08      	pop	{r3, pc}
 8001594:	24000178 	.word	0x24000178
 8001598:	0801a2b0 	.word	0x0801a2b0
 800159c:	0801a2f9 	.word	0x0801a2f9
 80015a0:	0801a328 	.word	0x0801a328
 80015a4:	24000174 	.word	0x24000174
 80015a8:	0801a368 	.word	0x0801a368

080015ac <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80015ac:	4b02      	ldr	r3, [pc, #8]	; (80015b8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 80015ae:	f04f 31ff 	mov.w	r1, #4294967295
 80015b2:	6818      	ldr	r0, [r3, #0]
 80015b4:	f006 bb3a 	b.w	8007c2c <osSemaphoreAcquire>
 80015b8:	24000178 	.word	0x24000178

080015bc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 80015bc:	4b01      	ldr	r3, [pc, #4]	; (80015c4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 80015be:	6818      	ldr	r0, [r3, #0]
 80015c0:	f006 bb60 	b.w	8007c84 <osSemaphoreRelease>
 80015c4:	24000178 	.word	0x24000178

080015c8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80015c8:	4b02      	ldr	r3, [pc, #8]	; (80015d4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 80015ca:	2100      	movs	r1, #0
 80015cc:	6818      	ldr	r0, [r3, #0]
 80015ce:	f006 bb2d 	b.w	8007c2c <osSemaphoreAcquire>
 80015d2:	bf00      	nop
 80015d4:	24000178 	.word	0x24000178

080015d8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 80015d8:	f7ff bff0 	b.w	80015bc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080015dc <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80015dc:	2300      	movs	r3, #0
 80015de:	4803      	ldr	r0, [pc, #12]	; (80015ec <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 80015e0:	4903      	ldr	r1, [pc, #12]	; (80015f0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 80015e2:	461a      	mov	r2, r3
 80015e4:	6800      	ldr	r0, [r0, #0]
 80015e6:	f006 bbb1 	b.w	8007d4c <osMessageQueuePut>
 80015ea:	bf00      	nop
 80015ec:	24000174 	.word	0x24000174
 80015f0:	24000004 	.word	0x24000004

080015f4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80015f4:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 80015f6:	2300      	movs	r3, #0
 80015f8:	4c07      	ldr	r4, [pc, #28]	; (8001618 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 80015fa:	a901      	add	r1, sp, #4
 80015fc:	461a      	mov	r2, r3
 80015fe:	6820      	ldr	r0, [r4, #0]
 8001600:	f006 fbd4 	bl	8007dac <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001604:	f04f 33ff 	mov.w	r3, #4294967295
 8001608:	2200      	movs	r2, #0
 800160a:	a901      	add	r1, sp, #4
 800160c:	6820      	ldr	r0, [r4, #0]
 800160e:	f006 fbcd 	bl	8007dac <osMessageQueueGet>
}
 8001612:	b002      	add	sp, #8
 8001614:	bd10      	pop	{r4, pc}
 8001616:	bf00      	nop
 8001618:	24000174 	.word	0x24000174

0800161c <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 800161c:	6803      	ldr	r3, [r0, #0]
 800161e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001620:	4718      	bx	r3

08001622 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001622:	2001      	movs	r0, #1
 8001624:	4770      	bx	lr

08001626 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001626:	6803      	ldr	r3, [r0, #0]
 8001628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162a:	4718      	bx	r3

0800162c <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 800162c:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001630:	4770      	bx	lr
	...

08001634 <DMA2D_XferCpltCallback>:
        HAL::getInstance()->signalDMAInterrupt();
 8001634:	4b02      	ldr	r3, [pc, #8]	; (8001640 <DMA2D_XferCpltCallback+0xc>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 800163a:	6803      	ldr	r3, [r0, #0]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	4718      	bx	r3
 8001640:	24006894 	.word	0x24006894

08001644 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8001644:	b508      	push	{r3, lr}
 8001646:	280b      	cmp	r0, #11
 8001648:	d80b      	bhi.n	8001662 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 800164a:	e8df f000 	tbb	[pc, r0]
 800164e:	0612      	.short	0x0612
 8001650:	0a0a0a10 	.word	0x0a0a0a10
 8001654:	0808080a 	.word	0x0808080a
 8001658:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800165a:	2001      	movs	r0, #1
}
 800165c:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 800165e:	2005      	movs	r0, #5
        break;
 8001660:	e7fc      	b.n	800165c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8001662:	4b05      	ldr	r3, [pc, #20]	; (8001678 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8001664:	2166      	movs	r1, #102	; 0x66
 8001666:	4a05      	ldr	r2, [pc, #20]	; (800167c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8001668:	4805      	ldr	r0, [pc, #20]	; (8001680 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 800166a:	f017 fc07 	bl	8018e7c <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800166e:	2000      	movs	r0, #0
 8001670:	e7f4      	b.n	800165c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8001672:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001674:	e7f2      	b.n	800165c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8001676:	bf00      	nop
 8001678:	0801a3aa 	.word	0x0801a3aa
 800167c:	0801a3c5 	.word	0x0801a3c5
 8001680:	0801a40f 	.word	0x0801a40f

08001684 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8001684:	b508      	push	{r3, lr}
 8001686:	280a      	cmp	r0, #10
 8001688:	d809      	bhi.n	800169e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 800168a:	e8df f000 	tbb	[pc, r0]
 800168e:	0610      	.short	0x0610
 8001690:	0808080e 	.word	0x0808080e
 8001694:	06060608 	.word	0x06060608
 8001698:	06          	.byte	0x06
 8001699:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800169a:	2001      	movs	r0, #1
}
 800169c:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 800169e:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 80016a0:	2187      	movs	r1, #135	; 0x87
 80016a2:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 80016a4:	4805      	ldr	r0, [pc, #20]	; (80016bc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 80016a6:	f017 fbe9 	bl	8018e7c <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80016aa:	2000      	movs	r0, #0
 80016ac:	e7f6      	b.n	800169c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 80016ae:	2002      	movs	r0, #2
    return dma2dColorMode;
 80016b0:	e7f4      	b.n	800169c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 80016b2:	bf00      	nop
 80016b4:	0801a3aa 	.word	0x0801a3aa
 80016b8:	0801a44d 	.word	0x0801a44d
 80016bc:	0801a40f 	.word	0x0801a40f

080016c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 80016c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80016c4:	f891 801d 	ldrb.w	r8, [r1, #29]
{
 80016c8:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80016ca:	4640      	mov	r0, r8
 80016cc:	f7ff ffba 	bl	8001644 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80016d0:	7fa7      	ldrb	r7, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80016d2:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80016d4:	4638      	mov	r0, r7
 80016d6:	f7ff ffb5 	bl	8001644 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 80016da:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80016dc:	4638      	mov	r0, r7
 80016de:	f7ff ffd1 	bl	8001684 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80016e2:	8aa1      	ldrh	r1, [r4, #20]
 80016e4:	8b62      	ldrh	r2, [r4, #26]
 80016e6:	4b4c      	ldr	r3, [pc, #304]	; (8001818 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 80016e8:	1a52      	subs	r2, r2, r1
 80016ea:	469e      	mov	lr, r3
 80016ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80016ee:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80016f0:	8b22      	ldrh	r2, [r4, #24]
 80016f2:	1a52      	subs	r2, r2, r1
 80016f4:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80016f6:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80016f8:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80016fa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80016fe:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001700:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001702:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001704:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001706:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8001708:	f8d4 c000 	ldr.w	ip, [r4]
 800170c:	f894 901c 	ldrb.w	r9, [r4, #28]
 8001710:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
 8001714:	ea4f 6209 	mov.w	r2, r9, lsl #24
 8001718:	d029      	beq.n	800176e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
 800171a:	d813      	bhi.n	8001744 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 800171c:	f1bc 0f20 	cmp.w	ip, #32
 8001720:	ea45 0002 	orr.w	r0, r5, r2
 8001724:	d067      	beq.n	80017f6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 8001726:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
 800172a:	d064      	beq.n	80017f6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 800172c:	f1bc 0f04 	cmp.w	ip, #4
 8001730:	d05d      	beq.n	80017ee <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001732:	432a      	orrs	r2, r5
 8001734:	4b38      	ldr	r3, [pc, #224]	; (8001818 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001736:	45b8      	cmp	r8, r7
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001738:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800173c:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 800173e:	d067      	beq.n	8001810 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8001740:	4a36      	ldr	r2, [pc, #216]	; (800181c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 8001742:	e040      	b.n	80017c6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
    switch (blitOp.operation)
 8001744:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 8001748:	d007      	beq.n	800175a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9a>
 800174a:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800174e:	d1f0      	bne.n	8001732 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x72>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001750:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001754:	f042 0209 	orr.w	r2, r2, #9
 8001758:	e003      	b.n	8001762 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800175a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800175e:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001762:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001764:	68e2      	ldr	r2, [r4, #12]
 8001766:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001768:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800176a:	6159      	str	r1, [r3, #20]
 800176c:	e02a      	b.n	80017c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800176e:	432a      	orrs	r2, r5
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8001770:	68a0      	ldr	r0, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001772:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001776:	61da      	str	r2, [r3, #28]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001778:	1d02      	adds	r2, r0, #4
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800177a:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800177c:	6159      	str	r1, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800177e:	62da      	str	r2, [r3, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8001780:	7802      	ldrb	r2, [r0, #0]
 8001782:	b142      	cbz	r2, 8001796 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd6>
 8001784:	2a01      	cmp	r2, #1
 8001786:	d020      	beq.n	80017ca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x10a>
                assert(0 && "Unsupported format");
 8001788:	4b25      	ldr	r3, [pc, #148]	; (8001820 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
 800178a:	f240 1101 	movw	r1, #257	; 0x101
 800178e:	4a25      	ldr	r2, [pc, #148]	; (8001824 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>)
 8001790:	4825      	ldr	r0, [pc, #148]	; (8001828 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>)
 8001792:	f017 fb73 	bl	8018e7c <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001796:	8842      	ldrh	r2, [r0, #2]
            bool blend = true;
 8001798:	2401      	movs	r4, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800179a:	69d9      	ldr	r1, [r3, #28]
 800179c:	1e50      	subs	r0, r2, #1
 800179e:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 80017a2:	f022 0210 	bic.w	r2, r2, #16
 80017a6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80017aa:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80017ac:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 80017ae:	69da      	ldr	r2, [r3, #28]
 80017b0:	f042 0220 	orr.w	r2, r2, #32
 80017b4:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80017b6:	69da      	ldr	r2, [r3, #28]
 80017b8:	0692      	lsls	r2, r2, #26
 80017ba:	d4fc      	bmi.n	80017b6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf6>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80017bc:	2210      	movs	r2, #16
 80017be:	609a      	str	r2, [r3, #8]
            if (blend)
 80017c0:	2c00      	cmp	r4, #0
 80017c2:	d0bd      	beq.n	8001740 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80017c4:	4a19      	ldr	r2, [pc, #100]	; (800182c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x16c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80017c6:	601a      	str	r2, [r3, #0]
        }

        break;
    }
}
 80017c8:	e020      	b.n	800180c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80017ca:	8842      	ldrh	r2, [r0, #2]
                if (blitOp.alpha == 255)
 80017cc:	f1b9 04ff 	subs.w	r4, r9, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80017d0:	69d9      	ldr	r1, [r3, #28]
 80017d2:	f102 30ff 	add.w	r0, r2, #4294967295
                if (blitOp.alpha == 255)
 80017d6:	bf18      	it	ne
 80017d8:	2401      	movne	r4, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80017da:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 80017de:	f022 0210 	bic.w	r2, r2, #16
 80017e2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80017e6:	f042 0210 	orr.w	r2, r2, #16
 80017ea:	61da      	str	r2, [r3, #28]
                break;
 80017ec:	e7de      	b.n	80017ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xec>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80017ee:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80017f2:	61d8      	str	r0, [r3, #28]
 80017f4:	e7b8      	b.n	8001768 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80017f6:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x16c>)
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80017fc:	f8ce 001c 	str.w	r0, [lr, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001800:	f8ce 6024 	str.w	r6, [lr, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001804:	f8ce 1014 	str.w	r1, [lr, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8001808:	f8ce 3000 	str.w	r3, [lr]
}
 800180c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001810:	f240 2201 	movw	r2, #513	; 0x201
 8001814:	e7d7      	b.n	80017c6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8001816:	bf00      	nop
 8001818:	52001000 	.word	0x52001000
 800181c:	00010201 	.word	0x00010201
 8001820:	0801a498 	.word	0x0801a498
 8001824:	0801a4b2 	.word	0x0801a4b2
 8001828:	0801a40f 	.word	0x0801a40f
 800182c:	00020201 	.word	0x00020201

08001830 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8001830:	b538      	push	{r3, r4, r5, lr}
 8001832:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001834:	7f88      	ldrb	r0, [r1, #30]
 8001836:	f7ff ff25 	bl	8001684 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800183a:	4b12      	ldr	r3, [pc, #72]	; (8001884 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800183c:	8aa5      	ldrh	r5, [r4, #20]
 800183e:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001840:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001842:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001846:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001848:	1b52      	subs	r2, r2, r5
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800184a:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800184c:	6921      	ldr	r1, [r4, #16]
 800184e:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001850:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8001852:	6825      	ldr	r5, [r4, #0]
 8001854:	2d08      	cmp	r5, #8
 8001856:	d10e      	bne.n	8001876 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001858:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800185a:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800185c:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 800185e:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8001860:	7f20      	ldrb	r0, [r4, #28]
 8001862:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8001866:	61da      	str	r2, [r3, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001868:	68e2      	ldr	r2, [r4, #12]
 800186a:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 800186c:	4a07      	ldr	r2, [pc, #28]	; (800188c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800186e:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001870:	60d9      	str	r1, [r3, #12]

        // set color
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001872:	601a      	str	r2, [r3, #0]
    }
}
 8001874:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8001876:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001878:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 800187a:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 800187c:	68e2      	ldr	r2, [r4, #12]
 800187e:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001880:	4a03      	ldr	r2, [pc, #12]	; (8001890 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 8001882:	e7f6      	b.n	8001872 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8001884:	52001000 	.word	0x52001000
 8001888:	00010009 	.word	0x00010009
 800188c:	00020201 	.word	0x00020201
 8001890:	00030201 	.word	0x00030201

08001894 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8001894:	4b05      	ldr	r3, [pc, #20]	; (80018ac <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001896:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800189a:	6003      	str	r3, [r0, #0]
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <_ZN8STM32DMAD1Ev+0x1c>)
 800189e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80018a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80018a6:	f3bf 8f6f 	isb	sy
}
 80018aa:	4770      	bx	lr
 80018ac:	0801a4f8 	.word	0x0801a4f8
 80018b0:	e000e100 	.word	0xe000e100

080018b4 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 80018b4:	b510      	push	{r4, lr}
 80018b6:	4604      	mov	r4, r0
}
 80018b8:	f7ff ffec 	bl	8001894 <_ZN8STM32DMAD1Ev>
 80018bc:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 80018c0:	4620      	mov	r0, r4
 80018c2:	f017 faac 	bl	8018e1e <_ZdlPvj>
 80018c6:	4620      	mov	r0, r4
 80018c8:	bd10      	pop	{r4, pc}
	...

080018cc <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80018cc:	4b0f      	ldr	r3, [pc, #60]	; (800190c <_ZN8STM32DMA10initializeEv+0x40>)
{
 80018ce:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80018d0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80018d4:	f042 0210 	orr.w	r2, r2, #16
 80018d8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80018dc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80018e0:	f002 0210 	and.w	r2, r2, #16
 80018e4:	9201      	str	r2, [sp, #4]
 80018e6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80018e8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80018ea:	f042 0210 	orr.w	r2, r2, #16
 80018ee:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80018f0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80018f2:	f022 0210 	bic.w	r2, r2, #16
 80018f6:	67da      	str	r2, [r3, #124]	; 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <_ZN8STM32DMA10initializeEv+0x44>)
 80018fa:	4a06      	ldr	r2, [pc, #24]	; (8001914 <_ZN8STM32DMA10initializeEv+0x48>)
 80018fc:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <_ZN8STM32DMA10initializeEv+0x4c>)
 8001900:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001904:	609a      	str	r2, [r3, #8]
}
 8001906:	b002      	add	sp, #8
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	58024400 	.word	0x58024400
 8001910:	24006c44 	.word	0x24006c44
 8001914:	08001635 	.word	0x08001635
 8001918:	e000e100 	.word	0xe000e100

0800191c <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 800191c:	b570      	push	{r4, r5, r6, lr}
 800191e:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8001920:	4b0a      	ldr	r3, [pc, #40]	; (800194c <_ZN8STM32DMAC1Ev+0x30>)
 8001922:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8001924:	2600      	movs	r6, #0
 8001926:	4625      	mov	r5, r4
 8001928:	2260      	movs	r2, #96	; 0x60
 800192a:	6060      	str	r0, [r4, #4]
 800192c:	7226      	strb	r6, [r4, #8]
 800192e:	7266      	strb	r6, [r4, #9]
 8001930:	f845 3b20 	str.w	r3, [r5], #32
 8001934:	4629      	mov	r1, r5
 8001936:	f009 fced 	bl	800b314 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800193a:	f504 6342 	add.w	r3, r4, #3104	; 0xc20
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
        : color(0)
 800193e:	60ee      	str	r6, [r5, #12]
 8001940:	3520      	adds	r5, #32
 8001942:	42ab      	cmp	r3, r5
 8001944:	d1fb      	bne.n	800193e <_ZN8STM32DMAC1Ev+0x22>
}
 8001946:	4620      	mov	r0, r4
 8001948:	bd70      	pop	{r4, r5, r6, pc}
 800194a:	bf00      	nop
 800194c:	0801a4f8 	.word	0x0801a4f8

08001950 <_ZN8touchgfx9TypedTextD1Ev>:
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
    {
    }
 8001950:	4770      	bx	lr

08001952 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8001952:	2001      	movs	r0, #1
 8001954:	4770      	bx	lr

08001956 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8001956:	200c      	movs	r0, #12
 8001958:	4770      	bx	lr

0800195a <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 800195a:	230c      	movs	r3, #12
 800195c:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001960:	3008      	adds	r0, #8
 8001962:	4770      	bx	lr

08001964 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8001964:	230c      	movs	r3, #12
 8001966:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800196a:	3008      	adds	r0, #8
 800196c:	4770      	bx	lr

0800196e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 800196e:	2001      	movs	r0, #1
 8001970:	4770      	bx	lr

08001972 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8001972:	f44f 7011 	mov.w	r0, #580	; 0x244
 8001976:	4770      	bx	lr

08001978 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001978:	f44f 7311 	mov.w	r3, #580	; 0x244
 800197c:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001980:	3008      	adds	r0, #8
 8001982:	4770      	bx	lr

08001984 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001984:	f44f 7311 	mov.w	r3, #580	; 0x244
 8001988:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800198c:	3008      	adds	r0, #8
 800198e:	4770      	bx	lr

08001990 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8001990:	2001      	movs	r0, #1
 8001992:	4770      	bx	lr

08001994 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8001994:	2010      	movs	r0, #16
 8001996:	4770      	bx	lr

08001998 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001998:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 800199c:	3008      	adds	r0, #8
 800199e:	4770      	bx	lr

080019a0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80019a0:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80019a4:	3008      	adds	r0, #8
 80019a6:	4770      	bx	lr

080019a8 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 80019a8:	b510      	push	{r4, lr}
 80019aa:	4604      	mov	r4, r0
    }
 80019ac:	2108      	movs	r1, #8
 80019ae:	f017 fa36 	bl	8018e1e <_ZdlPvj>
 80019b2:	4620      	mov	r0, r4
 80019b4:	bd10      	pop	{r4, pc}

080019b6 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoMainScreenNoTransition();
 80019b6:	4608      	mov	r0, r1
 80019b8:	f000 bb06 	b.w	8001fc8 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>

080019bc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 80019bc:	4b03      	ldr	r3, [pc, #12]	; (80019cc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80019be:	b510      	push	{r4, lr}
 80019c0:	4604      	mov	r4, r0
 80019c2:	6003      	str	r3, [r0, #0]
 80019c4:	f008 fa02 	bl	8009dcc <_ZN8touchgfx17AbstractPartitionD1Ev>
 80019c8:	4620      	mov	r0, r4
 80019ca:	bd10      	pop	{r4, pc}
 80019cc:	0801a5b0 	.word	0x0801a5b0

080019d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80019d0:	b510      	push	{r4, lr}
 80019d2:	4604      	mov	r4, r0
 80019d4:	f7ff fff2 	bl	80019bc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80019d8:	2114      	movs	r1, #20
 80019da:	4620      	mov	r0, r4
 80019dc:	f017 fa1f 	bl	8018e1e <_ZdlPvj>
 80019e0:	4620      	mov	r0, r4
 80019e2:	bd10      	pop	{r4, pc}

080019e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80019e6:	b510      	push	{r4, lr}
 80019e8:	4604      	mov	r4, r0
 80019ea:	6003      	str	r3, [r0, #0]
 80019ec:	f008 f9ee 	bl	8009dcc <_ZN8touchgfx17AbstractPartitionD1Ev>
 80019f0:	4620      	mov	r0, r4
 80019f2:	bd10      	pop	{r4, pc}
 80019f4:	0801a57c 	.word	0x0801a57c

080019f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80019f8:	b510      	push	{r4, lr}
 80019fa:	4604      	mov	r4, r0
 80019fc:	f7ff fff2 	bl	80019e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001a00:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8001a04:	4620      	mov	r0, r4
 8001a06:	f017 fa0a 	bl	8018e1e <_ZdlPvj>
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	bd10      	pop	{r4, pc}
	...

08001a10 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8001a10:	4b03      	ldr	r3, [pc, #12]	; (8001a20 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001a12:	b510      	push	{r4, lr}
 8001a14:	4604      	mov	r4, r0
 8001a16:	6003      	str	r3, [r0, #0]
 8001a18:	f008 f9d8 	bl	8009dcc <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	bd10      	pop	{r4, pc}
 8001a20:	0801a548 	.word	0x0801a548

08001a24 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001a24:	b510      	push	{r4, lr}
 8001a26:	4604      	mov	r4, r0
 8001a28:	f7ff fff2 	bl	8001a10 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001a2c:	2118      	movs	r1, #24
 8001a2e:	4620      	mov	r0, r4
 8001a30:	f017 f9f5 	bl	8018e1e <_ZdlPvj>
 8001a34:	4620      	mov	r0, r4
 8001a36:	bd10      	pop	{r4, pc}

08001a38 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <_ZN12FrontendHeapD1Ev+0x24>)
 8001a3a:	b510      	push	{r4, lr}
 8001a3c:	4604      	mov	r4, r0
 8001a3e:	6003      	str	r3, [r0, #0]
 8001a40:	f500 701e 	add.w	r0, r0, #632	; 0x278
 8001a44:	f7ff ffba 	bl	80019bc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001a48:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8001a4c:	f7ff ffca 	bl	80019e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001a50:	f104 0014 	add.w	r0, r4, #20
 8001a54:	f7ff ffdc 	bl	8001a10 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001a58:	4620      	mov	r0, r4
 8001a5a:	bd10      	pop	{r4, pc}
 8001a5c:	0801a5e4 	.word	0x0801a5e4

08001a60 <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8001a60:	b508      	push	{r3, lr}
 8001a62:	4802      	ldr	r0, [pc, #8]	; (8001a6c <__tcf_0+0xc>)
 8001a64:	f7ff ffe8 	bl	8001a38 <_ZN12FrontendHeapD1Ev>
 8001a68:	bd08      	pop	{r3, pc}
 8001a6a:	bf00      	nop
 8001a6c:	24000180 	.word	0x24000180

08001a70 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8001a70:	b510      	push	{r4, lr}
 8001a72:	4604      	mov	r4, r0
 8001a74:	f7ff ffe0 	bl	8001a38 <_ZN12FrontendHeapD1Ev>
 8001a78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	f017 f9ce 	bl	8018e1e <_ZdlPvj>
 8001a82:	4620      	mov	r0, r4
 8001a84:	bd10      	pop	{r4, pc}
	...

08001a88 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8001a88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8001a8c:	f000 f9e6 	bl	8001e5c <_ZN14BitmapDatabase11getInstanceEv>
 8001a90:	2400      	movs	r4, #0
 8001a92:	4605      	mov	r5, r0
 8001a94:	f000 f9e6 	bl	8001e64 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8001a98:	4623      	mov	r3, r4
 8001a9a:	4601      	mov	r1, r0
 8001a9c:	4622      	mov	r2, r4
 8001a9e:	4628      	mov	r0, r5
 8001aa0:	9400      	str	r4, [sp, #0]
 8001aa2:	f00e fdcb 	bl	801063c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8001aa6:	4b25      	ldr	r3, [pc, #148]	; (8001b3c <touchgfx_init+0xb4>)
 8001aa8:	4a25      	ldr	r2, [pc, #148]	; (8001b40 <touchgfx_init+0xb8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8001aaa:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8001aac:	4d25      	ldr	r5, [pc, #148]	; (8001b44 <touchgfx_init+0xbc>)
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	f000 fd7a 	bl	80025a8 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8001ab4:	4824      	ldr	r0, [pc, #144]	; (8001b48 <touchgfx_init+0xc0>)
 8001ab6:	f00e fcf9 	bl	80104ac <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8001aba:	782b      	ldrb	r3, [r5, #0]
 8001abc:	f3bf 8f5b 	dmb	ish
 8001ac0:	07db      	lsls	r3, r3, #31
 8001ac2:	d435      	bmi.n	8001b30 <touchgfx_init+0xa8>
 8001ac4:	4628      	mov	r0, r5
 8001ac6:	f017 f9ac 	bl	8018e22 <__cxa_guard_acquire>
 8001aca:	b388      	cbz	r0, 8001b30 <touchgfx_init+0xa8>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8001acc:	4c1f      	ldr	r4, [pc, #124]	; (8001b4c <touchgfx_init+0xc4>)
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
        app(model, *this)
 8001ace:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <touchgfx_init+0xc8>)
 8001ad0:	f504 7623 	add.w	r6, r4, #652	; 0x28c
 8001ad4:	f104 0014 	add.w	r0, r4, #20
 8001ad8:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8001adc:	f504 771e 	add.w	r7, r4, #632	; 0x278
 8001ae0:	6023      	str	r3, [r4, #0]
 8001ae2:	6060      	str	r0, [r4, #4]
 8001ae4:	f8c4 8008 	str.w	r8, [r4, #8]
 8001ae8:	60e7      	str	r7, [r4, #12]
 8001aea:	6126      	str	r6, [r4, #16]
 8001aec:	f008 f970 	bl	8009dd0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001af0:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <touchgfx_init+0xcc>)
 8001af2:	4640      	mov	r0, r8
 8001af4:	6163      	str	r3, [r4, #20]
 8001af6:	f008 f96b 	bl	8009dd0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001afa:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <touchgfx_init+0xd0>)
 8001afc:	4638      	mov	r0, r7
 8001afe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001b00:	f008 f966 	bl	8009dd0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001b04:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <touchgfx_init+0xd4>)
 8001b06:	4622      	mov	r2, r4
 8001b08:	f504 7179 	add.w	r1, r4, #996	; 0x3e4
 8001b0c:	f8c4 3278 	str.w	r3, [r4, #632]	; 0x278
 8001b10:	4630      	mov	r0, r6
 8001b12:	f001 f907 	bl	8002d24 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8001b16:	f504 7079 	add.w	r0, r4, #996	; 0x3e4
 8001b1a:	f001 f959 	bl	8002dd0 <_ZN5ModelC1Ev>
 8001b1e:	4630      	mov	r0, r6
 8001b20:	f000 fa52 	bl	8001fc8 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
        static FrontendHeap instance;
 8001b24:	4628      	mov	r0, r5
 8001b26:	f017 f988 	bl	8018e3a <__cxa_guard_release>
 8001b2a:	480d      	ldr	r0, [pc, #52]	; (8001b60 <touchgfx_init+0xd8>)
 8001b2c:	f017 f9c4 	bl	8018eb8 <atexit>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8001b30:	480c      	ldr	r0, [pc, #48]	; (8001b64 <touchgfx_init+0xdc>)
}
 8001b32:	b002      	add	sp, #8
 8001b34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8001b38:	f7ff bc08 	b.w	800134c <_ZN11TouchGFXHAL10initializeEv>
 8001b3c:	240068f0 	.word	0x240068f0
 8001b40:	24001214 	.word	0x24001214
 8001b44:	2400017c 	.word	0x2400017c
 8001b48:	24000008 	.word	0x24000008
 8001b4c:	24000180 	.word	0x24000180
 8001b50:	0801a5e4 	.word	0x0801a5e4
 8001b54:	0801a548 	.word	0x0801a548
 8001b58:	0801a57c 	.word	0x0801a57c
 8001b5c:	0801a5b0 	.word	0x0801a5b0
 8001b60:	08001a61 	.word	0x08001a61
 8001b64:	2400118c 	.word	0x2400118c

08001b68 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8001b68:	4801      	ldr	r0, [pc, #4]	; (8001b70 <touchgfx_taskEntry+0x8>)
 8001b6a:	f7ff bc51 	b.w	8001410 <_ZN11TouchGFXHAL9taskEntryEv>
 8001b6e:	bf00      	nop
 8001b70:	2400118c 	.word	0x2400118c

08001b74 <_GLOBAL__sub_I_touchgfx_init>:
}
 8001b74:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 8001b76:	4e27      	ldr	r6, [pc, #156]	; (8001c14 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
{
public:

    STM32TouchController() {}
 8001b78:	4b27      	ldr	r3, [pc, #156]	; (8001c18 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
 8001b7a:	4c28      	ldr	r4, [pc, #160]	; (8001c1c <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 8001b7c:	4630      	mov	r0, r6
static LCD24bpp display;
 8001b7e:	4d28      	ldr	r5, [pc, #160]	; (8001c20 <_GLOBAL__sub_I_touchgfx_init+0xac>)
 8001b80:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 8001b82:	f7ff fecb 	bl	800191c <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 8001b86:	4628      	mov	r0, r5
 8001b88:	f010 ffac 	bl	8012ae4 <_ZN8touchgfx8LCD24bppC1Ev>
          lastRenderMethod(HARDWARE)
 8001b8c:	4b25      	ldr	r3, [pc, #148]	; (8001c24 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f44f 7180 	mov.w	r1, #256	; 0x100
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001b94:	4824      	ldr	r0, [pc, #144]	; (8001c28 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8001b96:	851a      	strh	r2, [r3, #40]	; 0x28
 8001b98:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001b9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b9e:	861a      	strh	r2, [r3, #48]	; 0x30
          lastRenderMethod(HARDWARE)
 8001ba0:	661a      	str	r2, [r3, #96]	; 0x60
 8001ba2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8001ba6:	671a      	str	r2, [r3, #112]	; 0x70
 8001ba8:	60dc      	str	r4, [r3, #12]
 8001baa:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
 8001bae:	491f      	ldr	r1, [pc, #124]	; (8001c2c <_GLOBAL__sub_I_touchgfx_init+0xb8>)
 8001bb0:	e9c3 1219 	strd	r1, r2, [r3, #100]	; 0x64
 8001bb4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001bb8:	6759      	str	r1, [r3, #116]	; 0x74
 8001bba:	2101      	movs	r1, #1
 8001bbc:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
        instance = this;
 8001bc0:	491b      	ldr	r1, [pc, #108]	; (8001c30 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 8001bc2:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001bc4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001bc8:	8001      	strh	r1, [r0, #0]
 8001bca:	481a      	ldr	r0, [pc, #104]	; (8001c34 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
          lastRenderMethod(HARDWARE)
 8001bcc:	e9c3 2204 	strd	r2, r2, [r3, #16]
              inProgress(false)
 8001bd0:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8001bd4:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8001bd8:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
 8001bdc:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8001be0:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
 8001be4:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
 8001be8:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001bec:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001bee:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001bf2:	4811      	ldr	r0, [pc, #68]	; (8001c38 <_GLOBAL__sub_I_touchgfx_init+0xc4>)
          cc_in(0)
 8001bf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001bf8:	8001      	strh	r1, [r0, #0]
 8001bfa:	4810      	ldr	r0, [pc, #64]	; (8001c3c <_GLOBAL__sub_I_touchgfx_init+0xc8>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001c00:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 8001c02:	490f      	ldr	r1, [pc, #60]	; (8001c40 <_GLOBAL__sub_I_touchgfx_init+0xcc>)
 8001c04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001c08:	700a      	strb	r2, [r1, #0]
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8001c0a:	490e      	ldr	r1, [pc, #56]	; (8001c44 <_GLOBAL__sub_I_touchgfx_init+0xd0>)
 8001c0c:	4a0e      	ldr	r2, [pc, #56]	; (8001c48 <_GLOBAL__sub_I_touchgfx_init+0xd4>)
 8001c0e:	6019      	str	r1, [r3, #0]
 8001c10:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8001c12:	bd70      	pop	{r4, r5, r6, pc}
 8001c14:	2400056c 	.word	0x2400056c
 8001c18:	0801a05c 	.word	0x0801a05c
 8001c1c:	24000568 	.word	0x24000568
 8001c20:	24001218 	.word	0x24001218
 8001c24:	2400118c 	.word	0x2400118c
 8001c28:	24006888 	.word	0x24006888
 8001c2c:	01000001 	.word	0x01000001
 8001c30:	24006894 	.word	0x24006894
 8001c34:	2400688e 	.word	0x2400688e
 8001c38:	2400688a 	.word	0x2400688a
 8001c3c:	24006890 	.word	0x24006890
 8001c40:	2400688c 	.word	0x2400688c
 8001c44:	0801a1e8 	.word	0x0801a1e8
 8001c48:	0801a034 	.word	0x0801a034

08001c4c <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8001c4c:	4801      	ldr	r0, [pc, #4]	; (8001c54 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8001c4e:	f7ff be21 	b.w	8001894 <_ZN8STM32DMAD1Ev>
 8001c52:	bf00      	nop
 8001c54:	2400056c 	.word	0x2400056c

08001c58 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c58:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8001c5a:	2290      	movs	r2, #144	; 0x90
 8001c5c:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 8001c60:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	e000e100 	.word	0xe000e100

08001c6c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8001c6c:	4a09      	ldr	r2, [pc, #36]	; (8001c94 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8001c6e:	490a      	ldr	r1, [pc, #40]	; (8001c98 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8001c70:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8001c72:	480a      	ldr	r0, [pc, #40]	; (8001c9c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8001c74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8001c7e:	6911      	ldr	r1, [r2, #16]
 8001c80:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8001c84:	3901      	subs	r1, #1
 8001c86:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8001c88:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8001c8a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001c92:	4770      	bx	lr
 8001c94:	50001000 	.word	0x50001000
 8001c98:	24001272 	.word	0x24001272
 8001c9c:	24001270 	.word	0x24001270

08001ca0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8001ca0:	4b01      	ldr	r3, [pc, #4]	; (8001ca8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8001ca2:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	50001084 	.word	0x50001084

08001cac <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8001cac:	4b02      	ldr	r3, [pc, #8]	; (8001cb8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8001cae:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8001cb0:	6299      	str	r1, [r3, #40]	; 0x28
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8001cb2:	f843 2c60 	str.w	r2, [r3, #-96]
}
 8001cb6:	4770      	bx	lr
 8001cb8:	50001084 	.word	0x50001084

08001cbc <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8001cbc:	b570      	push	{r4, r5, r6, lr}
 8001cbe:	4604      	mov	r4, r0
    HAL::initialize();
 8001cc0:	f008 fba5 	bl	800a40e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8001cc4:	6823      	ldr	r3, [r4, #0]
 8001cc6:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8001cc8:	f00c f848 	bl	800dd5c <_ZN8touchgfx11Application11getInstanceEv>
 8001ccc:	4601      	mov	r1, r0
 8001cce:	4620      	mov	r0, r4
 8001cd0:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)0x70000000, (void*)0x70060000, (void*)0);
 8001cd2:	6823      	ldr	r3, [r4, #0]
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	4a05      	ldr	r2, [pc, #20]	; (8001cec <_ZN20TouchGFXGeneratedHAL10initializeEv+0x30>)
 8001cd8:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 8001cdc:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	46ac      	mov	ip, r5
}
 8001ce4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)0x70000000, (void*)0x70060000, (void*)0);
 8001ce8:	4760      	bx	ip
 8001cea:	bf00      	nop
 8001cec:	70060000 	.word	0x70060000

08001cf0 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 8001cf0:	f008 bb74 	b.w	800a3dc <_ZN8touchgfx3HAL10beginFrameEv>

08001cf4 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    HAL::endFrame();
 8001cf4:	f008 bb7e 	b.w	800a3f4 <_ZN8touchgfx3HAL8endFrameEv>

08001cf8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    }
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 8001cf8:	f008 bc97 	b.w	800a62a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08001cfc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0>:
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001cfc:	4a10      	ldr	r2, [pc, #64]	; (8001d40 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0+0x44>)
 8001cfe:	2300      	movs	r3, #0
}

void TouchGFXGeneratedHAL::InvalidateCache()
 8001d00:	b570      	push	{r4, r5, r6, lr}
 8001d02:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001d06:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001d0a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001d0e:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001d12:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001d16:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001d1a:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001d1c:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001d20:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001d22:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8001d26:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001d28:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8001d2c:	d2f9      	bcs.n	8001d22 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0+0x26>
    } while(sets-- != 0U);
 8001d2e:	3b20      	subs	r3, #32
 8001d30:	f113 0f20 	cmn.w	r3, #32
 8001d34:	d1f2      	bne.n	8001d1c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0+0x20>
 8001d36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d3a:	f3bf 8f6f 	isb	sy
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
    {
        SCB_CleanInvalidateDCache();
    }
}
 8001d3e:	bd70      	pop	{r4, r5, r6, pc}
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x10>)
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	03db      	lsls	r3, r3, #15
 8001d4a:	d501      	bpl.n	8001d50 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xc>
 8001d4c:	f7ff bfd6 	b.w	8001cfc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0>
}
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001d58:	4b03      	ldr	r3, [pc, #12]	; (8001d68 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x10>)
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	03db      	lsls	r3, r3, #15
 8001d5e:	d501      	bpl.n	8001d64 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xc>
 8001d60:	f7ff bfcc 	b.w	8001cfc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0>
    {
        SCB_CleanInvalidateDCache();
    }
}
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 8001d6c:	b508      	push	{r3, lr}
    HAL::flushFrameBuffer(rect);
 8001d6e:	f008 faff 	bl	800a370 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001d72:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x18>)
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	03db      	lsls	r3, r3, #15
 8001d78:	d503      	bpl.n	8001d82 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x16>
}
 8001d7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001d7e:	f7ff bfbd 	b.w	8001cfc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv.part.0>
 8001d82:	bd08      	pop	{r3, pc}
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 8001d8a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001d92:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d96:	f3bf 8f6f 	isb	sy
 8001d9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001da2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001da6:	f3bf 8f6f 	isb	sy
}
 8001daa:	4770      	bx	lr
 8001dac:	e000e100 	.word	0xe000e100

08001db0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001db0:	4b03      	ldr	r3, [pc, #12]	; (8001dc0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 8001db2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dbc:	609a      	str	r2, [r3, #8]
}
 8001dbe:	4770      	bx	lr
 8001dc0:	e000e100 	.word	0xe000e100

08001dc4 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
        if (LTDC->LIPCR == lcd_int_active_line)
 8001dc4:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <HAL_LTDC_LineEventCallback+0x50>)
 8001dc6:	4a14      	ldr	r2, [pc, #80]	; (8001e18 <HAL_LTDC_LineEventCallback+0x54>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	8811      	ldrh	r1, [r2, #0]
 8001dcc:	428b      	cmp	r3, r1
    {
 8001dce:	b510      	push	{r4, lr}
 8001dd0:	4c12      	ldr	r4, [pc, #72]	; (8001e1c <HAL_LTDC_LineEventCallback+0x58>)
        if (LTDC->LIPCR == lcd_int_active_line)
 8001dd2:	d113      	bne.n	8001dfc <HAL_LTDC_LineEventCallback+0x38>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <HAL_LTDC_LineEventCallback+0x5c>)
 8001dd6:	8819      	ldrh	r1, [r3, #0]
 8001dd8:	f003 fbf4 	bl	80055c4 <HAL_LTDC_ProgramLineEvent>
        return instance;
 8001ddc:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 8001dde:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8001de2:	3301      	adds	r3, #1
 8001de4:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8001de8:	f7ff fbf8 	bl	80015dc <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8001dec:	6820      	ldr	r0, [r4, #0]
 8001dee:	f009 f90f 	bl	800b010 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8001df2:	2000      	movs	r0, #0
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8001df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 8001df8:	f7ff ba2e 	b.w	8001258 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8001dfc:	f003 fbe2 	bl	80055c4 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001e00:	2000      	movs	r0, #0
 8001e02:	f7ff fa41 	bl	8001288 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        return instance;
 8001e06:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 8001e08:	6803      	ldr	r3, [r0, #0]
    }
 8001e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	4718      	bx	r3
 8001e12:	bf00      	nop
 8001e14:	50001000 	.word	0x50001000
 8001e18:	24001272 	.word	0x24001272
 8001e1c:	24006894 	.word	0x24006894
 8001e20:	24001270 	.word	0x24001270

08001e24 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId KEYBOARD = 1; // RobotoCondensed_Regular_20_4bpp
    static const touchgfx::FontId MODE = 2;     // RobotoCondensed_Regular_24_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8001e24:	4770      	bx	lr

08001e26 <_ZN23ApplicationFontProviderD0Ev>:
 8001e26:	b510      	push	{r4, lr}
 8001e28:	4604      	mov	r4, r0
 8001e2a:	2104      	movs	r1, #4
 8001e2c:	f016 fff7 	bl	8018e1e <_ZdlPvj>
 8001e30:	4620      	mov	r0, r4
 8001e32:	bd10      	pop	{r4, pc}

08001e34 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 8001e34:	2901      	cmp	r1, #1
{
 8001e36:	b508      	push	{r3, lr}
    switch (typography)
 8001e38:	d006      	beq.n	8001e48 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 8001e3a:	2902      	cmp	r1, #2
 8001e3c:	d008      	beq.n	8001e50 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 8001e3e:	b959      	cbnz	r1, 8001e58 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DISPLAY:
        // RobotoCondensed_Regular_28_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8001e40:	f000 fbfe 	bl	8002640 <_ZN17TypedTextDatabase8getFontsEv>
 8001e44:	6800      	ldr	r0, [r0, #0]
        // RobotoCondensed_Regular_24_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 8001e46:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8001e48:	f000 fbfa 	bl	8002640 <_ZN17TypedTextDatabase8getFontsEv>
 8001e4c:	6840      	ldr	r0, [r0, #4]
 8001e4e:	e7fa      	b.n	8001e46 <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8001e50:	f000 fbf6 	bl	8002640 <_ZN17TypedTextDatabase8getFontsEv>
 8001e54:	6880      	ldr	r0, [r0, #8]
 8001e56:	e7f6      	b.n	8001e46 <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 8001e58:	2000      	movs	r0, #0
 8001e5a:	e7f4      	b.n	8001e46 <_ZN23ApplicationFontProvider7getFontEt+0x12>

08001e5c <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8001e5c:	4800      	ldr	r0, [pc, #0]	; (8001e60 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8001e5e:	4770      	bx	lr
 8001e60:	0801a604 	.word	0x0801a604

08001e64 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8001e64:	200d      	movs	r0, #13
 8001e66:	4770      	bx	lr

08001e68 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8001e68:	b513      	push	{r0, r1, r4, lr}
 8001e6a:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8001e6c:	b151      	cbz	r1, 8001e84 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8001e6e:	6803      	ldr	r3, [r0, #0]
 8001e70:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8001e72:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8001e74:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8001e78:	689c      	ldr	r4, [r3, #8]
 8001e7a:	f10d 0303 	add.w	r3, sp, #3
 8001e7e:	47a0      	blx	r4
        return glyph;
    }
 8001e80:	b002      	add	sp, #8
 8001e82:	bd10      	pop	{r4, pc}
            return 0;
 8001e84:	4608      	mov	r0, r1
 8001e86:	e7fb      	b.n	8001e80 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08001e88 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8001e88:	8940      	ldrh	r0, [r0, #10]
 8001e8a:	4770      	bx	lr

08001e8c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8001e8c:	8980      	ldrh	r0, [r0, #12]
 8001e8e:	4770      	bx	lr

08001e90 <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 8001e90:	8880      	ldrh	r0, [r0, #4]
 8001e92:	4770      	bx	lr

08001e94 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 8001e94:	7983      	ldrb	r3, [r0, #6]
 8001e96:	8880      	ldrh	r0, [r0, #4]
 8001e98:	4418      	add	r0, r3
    }
 8001e9a:	b280      	uxth	r0, r0
 8001e9c:	4770      	bx	lr

08001e9e <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8001e9e:	79c0      	ldrb	r0, [r0, #7]
    }
 8001ea0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001ea4:	4770      	bx	lr

08001ea6 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8001ea6:	79c0      	ldrb	r0, [r0, #7]
    }
 8001ea8:	09c0      	lsrs	r0, r0, #7
 8001eaa:	4770      	bx	lr

08001eac <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
    }
 8001eac:	4770      	bx	lr

08001eae <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8001eae:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 8001eb2:	6808      	ldr	r0, [r1, #0]
 8001eb4:	6849      	ldr	r1, [r1, #4]
 8001eb6:	c303      	stmia	r3!, {r0, r1}
    }
 8001eb8:	4770      	bx	lr

08001eba <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8001eba:	4770      	bx	lr

08001ebc <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8001ebc:	4770      	bx	lr

08001ebe <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8001ebe:	6041      	str	r1, [r0, #4]
    }
 8001ec0:	4770      	bx	lr

08001ec2 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8001ec2:	4770      	bx	lr

08001ec4 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	7203      	strb	r3, [r0, #8]
    }
 8001ec8:	4770      	bx	lr

08001eca <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8001eca:	4770      	bx	lr

08001ecc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001ecc:	4770      	bx	lr

08001ece <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8001ece:	b410      	push	{r4}
    {
        (pobject->*pmemfun_0)();
 8001ed0:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8001ed2:	4603      	mov	r3, r0
        (pobject->*pmemfun_0)();
 8001ed4:	68c2      	ldr	r2, [r0, #12]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	1054      	asrs	r4, r2, #1
 8001eda:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8001ede:	07d2      	lsls	r2, r2, #31
 8001ee0:	bf48      	it	mi
 8001ee2:	590a      	ldrmi	r2, [r1, r4]
    }
 8001ee4:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun_0)();
 8001ee8:	bf48      	it	mi
 8001eea:	58d3      	ldrmi	r3, [r2, r3]
 8001eec:	4718      	bx	r3

08001eee <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8001eee:	6843      	ldr	r3, [r0, #4]
 8001ef0:	b12b      	cbz	r3, 8001efe <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 8001ef2:	6883      	ldr	r3, [r0, #8]
 8001ef4:	b92b      	cbnz	r3, 8001f02 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8001ef6:	68c0      	ldr	r0, [r0, #12]
 8001ef8:	f000 0001 	and.w	r0, r0, #1
 8001efc:	4770      	bx	lr
 8001efe:	4618      	mov	r0, r3
 8001f00:	4770      	bx	lr
 8001f02:	2001      	movs	r0, #1
    }
 8001f04:	4770      	bx	lr

08001f06 <_ZN8touchgfx12NoTransitionD0Ev>:
 8001f06:	b510      	push	{r4, lr}
 8001f08:	4604      	mov	r4, r0
 8001f0a:	210c      	movs	r1, #12
 8001f0c:	f016 ff87 	bl	8018e1e <_ZdlPvj>
 8001f10:	4620      	mov	r0, r4
 8001f12:	bd10      	pop	{r4, pc}

08001f14 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001f14:	b510      	push	{r4, lr}
 8001f16:	4604      	mov	r4, r0
 8001f18:	2110      	movs	r1, #16
 8001f1a:	f016 ff80 	bl	8018e1e <_ZdlPvj>
 8001f1e:	4620      	mov	r0, r4
 8001f20:	bd10      	pop	{r4, pc}

08001f22 <_ZN23FrontendApplicationBaseD0Ev>:
 8001f22:	b510      	push	{r4, lr}
 8001f24:	4604      	mov	r4, r0
 8001f26:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8001f2a:	f016 ff78 	bl	8018e1e <_ZdlPvj>
 8001f2e:	4620      	mov	r0, r4
 8001f30:	bd10      	pop	{r4, pc}

08001f32 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8001f32:	b510      	push	{r4, lr}
        Application::getInstance()->draw();
 8001f34:	f00b ff12 	bl	800dd5c <_ZN8touchgfx11Application11getInstanceEv>
 8001f38:	6803      	ldr	r3, [r0, #0]
    }
 8001f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->draw();
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f40:	4718      	bx	r3

08001f42 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8001f42:	b510      	push	{r4, lr}
 8001f44:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8001f46:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8001f4a:	b158      	cbz	r0, 8001f64 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8001f4c:	6803      	ldr	r3, [r0, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	4798      	blx	r3
 8001f52:	b138      	cbz	r0, 8001f64 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8001f54:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8001f58:	6803      	ldr	r3, [r0, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 8001f64:	bd10      	pop	{r4, pc}
	...

08001f68 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8001f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f6a:	4604      	mov	r4, r0
 8001f6c:	4617      	mov	r7, r2
 8001f6e:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8001f70:	f00b ff16 	bl	800dda0 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8001f74:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
          pendingScreenTransitionCallback(0)
 8001f76:	2500      	movs	r5, #0
        instance = this;
 8001f78:	601c      	str	r4, [r3, #0]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8001f7a:	4629      	mov	r1, r5
      model(m)
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 8001f7e:	e9c4 7654 	strd	r7, r6, [r4, #336]	; 0x150
        return instance;
 8001f82:	4e0f      	ldr	r6, [pc, #60]	; (8001fc0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8001f84:	6023      	str	r3, [r4, #0]
 8001f86:	6830      	ldr	r0, [r6, #0]
        : pobject(0), pmemfun_0(0)
 8001f88:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8001f8a:	e9c4 5552 	strd	r5, r5, [r4, #328]	; 0x148
 8001f8e:	e9c4 3550 	strd	r3, r5, [r4, #320]	; 0x140
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8001f92:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8001f94:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8001f9c:	4628      	mov	r0, r5
 8001f9e:	f000 fb03 	bl	80025a8 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8001fa2:	6833      	ldr	r3, [r6, #0]
 8001fa4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8001fa8:	b10a      	cbz	r2, 8001fae <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 8001faa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001fac:	b900      	cbnz	r0, 8001fb0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 8001fae:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8001fb0:	f011 fe85 	bl	8013cbe <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8001fb4:	4620      	mov	r0, r4
 8001fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fb8:	240068e0 	.word	0x240068e0
 8001fbc:	0801aa54 	.word	0x0801aa54
 8001fc0:	24006894 	.word	0x24006894
 8001fc4:	0801aa3c 	.word	0x0801aa3c

08001fc8 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001fc8:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x1c>)
 8001fca:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 8001fce:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8001fd8:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8001fdc:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	08002129 	.word	0x08002129

08001fe8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8001fe8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fec:	4607      	mov	r7, r0
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8001fee:	6890      	ldr	r0, [r2, #8]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8001ff0:	4699      	mov	r9, r3
 8001ff2:	4688      	mov	r8, r1
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8001ff4:	6803      	ldr	r3, [r0, #0]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8001ff6:	4614      	mov	r4, r2
 8001ff8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	4798      	blx	r3
 8002000:	f5b0 7f11 	cmp.w	r0, #580	; 0x244
 8002004:	d205      	bcs.n	8002012 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x2a>
 8002006:	4b42      	ldr	r3, [pc, #264]	; (8002110 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x128>)
 8002008:	21a3      	movs	r1, #163	; 0xa3
 800200a:	4a42      	ldr	r2, [pc, #264]	; (8002114 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800200c:	4842      	ldr	r0, [pc, #264]	; (8002118 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>)
 800200e:	f016 ff35 	bl	8018e7c <__assert_func>
 8002012:	6860      	ldr	r0, [r4, #4]
 8002014:	6803      	ldr	r3, [r0, #0]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	4798      	blx	r3
 800201a:	280f      	cmp	r0, #15
 800201c:	d803      	bhi.n	8002026 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x3e>
 800201e:	4b3f      	ldr	r3, [pc, #252]	; (800211c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>)
 8002020:	21a4      	movs	r1, #164	; 0xa4
 8002022:	4a3c      	ldr	r2, [pc, #240]	; (8002114 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
 8002024:	e7f2      	b.n	800200c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002026:	68e0      	ldr	r0, [r4, #12]
 8002028:	6803      	ldr	r3, [r0, #0]
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	4798      	blx	r3
 800202e:	280b      	cmp	r0, #11
 8002030:	d803      	bhi.n	800203a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x52>
 8002032:	4b3b      	ldr	r3, [pc, #236]	; (8002120 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x138>)
 8002034:	21a5      	movs	r1, #165	; 0xa5
 8002036:	4a37      	ldr	r2, [pc, #220]	; (8002114 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
 8002038:	e7e8      	b.n	800200c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24>
    Application::getInstance()->clearAllTimerWidgets();
 800203a:	f00b fe8f 	bl	800dd5c <_ZN8touchgfx11Application11getInstanceEv>
 800203e:	f00b fe93 	bl	800dd68 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8002042:	f8d9 0000 	ldr.w	r0, [r9]
 8002046:	b110      	cbz	r0, 800204e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x66>
        (*currentTrans)->tearDown();
 8002048:	6803      	ldr	r3, [r0, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4798      	blx	r3
    if (*currentTrans)
 800204e:	f8d9 0000 	ldr.w	r0, [r9]
 8002052:	b110      	cbz	r0, 800205a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x72>
        (*currentTrans)->~Transition();
 8002054:	6803      	ldr	r3, [r0, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4798      	blx	r3
    if (*currentScreen)
 800205a:	6838      	ldr	r0, [r7, #0]
 800205c:	b110      	cbz	r0, 8002064 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
        (*currentScreen)->tearDownScreen();
 800205e:	6803      	ldr	r3, [r0, #0]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	4798      	blx	r3
    if (*currentPresenter)
 8002064:	f8d8 0000 	ldr.w	r0, [r8]
 8002068:	b110      	cbz	r0, 8002070 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x88>
        (*currentPresenter)->deactivate();
 800206a:	6803      	ldr	r3, [r0, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	4798      	blx	r3
    if (*currentScreen)
 8002070:	6838      	ldr	r0, [r7, #0]
 8002072:	b110      	cbz	r0, 800207a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x92>
        (*currentScreen)->~Screen();
 8002074:	6803      	ldr	r3, [r0, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4798      	blx	r3
    if (*currentPresenter)
 800207a:	f8d8 0000 	ldr.w	r0, [r8]
 800207e:	b110      	cbz	r0, 8002086 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x9e>
        (*currentPresenter)->~Presenter();
 8002080:	6803      	ldr	r3, [r0, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002086:	68e0      	ldr	r0, [r4, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8002088:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 800208a:	f04f 0b00 	mov.w	fp, #0
 800208e:	6803      	ldr	r3, [r0, #0]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	4798      	blx	r3
 8002094:	4b23      	ldr	r3, [pc, #140]	; (8002124 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13c>)
 8002096:	4605      	mov	r5, r0
 8002098:	f8c0 b004 	str.w	fp, [r0, #4]
 800209c:	6003      	str	r3, [r0, #0]
 800209e:	4659      	mov	r1, fp
 80020a0:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80020a4:	68a0      	ldr	r0, [r4, #8]
 80020a6:	6803      	ldr	r3, [r0, #0]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	4798      	blx	r3
 80020ac:	4606      	mov	r6, r0
 80020ae:	f000 fe69 	bl	8002d84 <_ZN8MainViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80020b2:	6860      	ldr	r0, [r4, #4]
 80020b4:	4659      	mov	r1, fp
 80020b6:	6803      	ldr	r3, [r0, #0]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	4798      	blx	r3
 80020bc:	4604      	mov	r4, r0
 80020be:	4631      	mov	r1, r6
 80020c0:	f000 fe48 	bl	8002d54 <_ZN13MainPresenterC1ER8MainView>
    *currentTrans = newTransition;
 80020c4:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
 80020c8:	f8c8 4000 	str.w	r4, [r8]
    *currentScreen = newScreen;
 80020cc:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 80020ce:	b1e4      	cbz	r4, 800210a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x122>
 80020d0:	1d23      	adds	r3, r4, #4
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
    {
        modelListener = listener;
 80020d2:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 80020d6:	4630      	mov	r0, r6
 80020d8:	6833      	ldr	r3, [r6, #0]
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
    {
        model = m;
 80020da:	f8c4 a008 	str.w	sl, [r4, #8]
 80020de:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
    {
        this->presenter = &presenter;
 80020e0:	63f4      	str	r4, [r6, #60]	; 0x3c
 80020e2:	4798      	blx	r3
    newPresenter->activate();
 80020e4:	6823      	ldr	r3, [r4, #0]
 80020e6:	4620      	mov	r0, r4
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80020ec:	4629      	mov	r1, r5
 80020ee:	4630      	mov	r0, r6
 80020f0:	f00d fa18 	bl	800f524 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80020f4:	682b      	ldr	r3, [r5, #0]
 80020f6:	4628      	mov	r0, r5
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	4798      	blx	r3
    newTransition->invalidate();
 80020fc:	682b      	ldr	r3, [r5, #0]
 80020fe:	4628      	mov	r0, r5
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	4798      	blx	r3
    newScreen->bind(*newPresenter);

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
}
 8002104:	4620      	mov	r0, r4
 8002106:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    model->bind(newPresenter);
 800210a:	4623      	mov	r3, r4
 800210c:	e7e1      	b.n	80020d2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xea>
 800210e:	bf00      	nop
 8002110:	0801a718 	.word	0x0801a718
 8002114:	0801a7a6 	.word	0x0801a7a6
 8002118:	0801a8a4 	.word	0x0801a8a4
 800211c:	0801a8eb 	.word	0x0801a8eb
 8002120:	0801a98e 	.word	0x0801a98e
 8002124:	0801aa98 	.word	0x0801aa98

08002128 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002128:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
{
 800212c:	b507      	push	{r0, r1, r2, lr}
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800212e:	f500 719c 	add.w	r1, r0, #312	; 0x138
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	4b04      	ldr	r3, [pc, #16]	; (8002148 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x20>)
 8002136:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 800213a:	4804      	ldr	r0, [pc, #16]	; (800214c <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x24>)
 800213c:	f7ff ff54 	bl	8001fe8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8002140:	b003      	add	sp, #12
 8002142:	f85d fb04 	ldr.w	pc, [sp], #4
 8002146:	bf00      	nop
 8002148:	240068d4 	.word	0x240068d4
 800214c:	240068d0 	.word	0x240068d0

08002150 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8002150:	6a00      	ldr	r0, [r0, #32]
 8002152:	4770      	bx	lr

08002154 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8002154:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002156:	4770      	bx	lr

08002158 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8002158:	4770      	bx	lr

0800215a <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800215a:	888b      	ldrh	r3, [r1, #4]
 800215c:	6980      	ldr	r0, [r0, #24]
 800215e:	0adb      	lsrs	r3, r3, #11
 8002160:	680a      	ldr	r2, [r1, #0]
 8002162:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8002166:	4410      	add	r0, r2
 8002168:	4770      	bx	lr

0800216a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800216a:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 800216c:	b1c2      	cbz	r2, 80021a0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 800216e:	7b13      	ldrb	r3, [r2, #12]
 8002170:	b1b3      	cbz	r3, 80021a0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8002172:	7b54      	ldrb	r4, [r2, #13]
 8002174:	7ad2      	ldrb	r2, [r2, #11]
 8002176:	0224      	lsls	r4, r4, #8
 8002178:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800217c:	4314      	orrs	r4, r2
 800217e:	69c2      	ldr	r2, [r0, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002180:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8002182:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 8002186:	8813      	ldrh	r3, [r2, #0]
 8002188:	428b      	cmp	r3, r1
 800218a:	d102      	bne.n	8002192 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 800218c:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 8002190:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8002192:	d805      	bhi.n	80021a0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002194:	3801      	subs	r0, #1
 8002196:	3204      	adds	r2, #4
 8002198:	b280      	uxth	r0, r0
 800219a:	2800      	cmp	r0, #0
 800219c:	d1f3      	bne.n	8002186 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800219e:	e7f7      	b.n	8002190 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 80021a0:	2000      	movs	r0, #0
 80021a2:	e7f5      	b.n	8002190 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

080021a4 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80021a4:	b510      	push	{r4, lr}
 80021a6:	4604      	mov	r4, r0
 80021a8:	2128      	movs	r1, #40	; 0x28
 80021aa:	f016 fe38 	bl	8018e1e <_ZdlPvj>
 80021ae:	4620      	mov	r0, r4
 80021b0:	bd10      	pop	{r4, pc}
	...

080021b4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80021b4:	b530      	push	{r4, r5, lr}
 80021b6:	b089      	sub	sp, #36	; 0x24
 80021b8:	4604      	mov	r4, r0
      arabicTable(formsTable)
 80021ba:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80021be:	9506      	str	r5, [sp, #24]
 80021c0:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80021c4:	9505      	str	r5, [sp, #20]
 80021c6:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80021ca:	9504      	str	r5, [sp, #16]
 80021cc:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80021d0:	9503      	str	r5, [sp, #12]
 80021d2:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 80021d6:	9502      	str	r5, [sp, #8]
 80021d8:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80021dc:	9501      	str	r5, [sp, #4]
 80021de:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80021e2:	9500      	str	r5, [sp, #0]
 80021e4:	f00c fde6 	bl	800edb4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
}
 80021ea:	4620      	mov	r0, r4
      arabicTable(formsTable)
 80021ec:	6023      	str	r3, [r4, #0]
 80021ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80021f0:	61a3      	str	r3, [r4, #24]
 80021f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80021f4:	61e3      	str	r3, [r4, #28]
 80021f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80021f8:	6223      	str	r3, [r4, #32]
 80021fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80021fc:	6263      	str	r3, [r4, #36]	; 0x24
}
 80021fe:	b009      	add	sp, #36	; 0x24
 8002200:	bd30      	pop	{r4, r5, pc}
 8002202:	bf00      	nop
 8002204:	0801aabc 	.word	0x0801aabc

08002208 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002208:	2000      	movs	r0, #0
 800220a:	4770      	bx	lr

0800220c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 800220c:	8081      	strh	r1, [r0, #4]
    }
 800220e:	4770      	bx	lr

08002210 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8002210:	80c1      	strh	r1, [r0, #6]
    }
 8002212:	4770      	bx	lr

08002214 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002214:	8101      	strh	r1, [r0, #8]
    }
 8002216:	4770      	bx	lr

08002218 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002218:	8141      	strh	r1, [r0, #10]
    }
 800221a:	4770      	bx	lr

0800221c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 800221c:	4770      	bx	lr

0800221e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
    }
 800221e:	4770      	bx	lr

08002220 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
    }
 8002220:	4770      	bx	lr

08002222 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
    }
 8002222:	4770      	bx	lr

08002224 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002224:	4770      	bx	lr

08002226 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8002226:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002228:	88c4      	ldrh	r4, [r0, #6]
 800222a:	6803      	ldr	r3, [r0, #0]
 800222c:	1b12      	subs	r2, r2, r4
 800222e:	8884      	ldrh	r4, [r0, #4]
 8002230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002232:	1b09      	subs	r1, r1, r4
 8002234:	b212      	sxth	r2, r2
    }
 8002236:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 800223a:	b209      	sxth	r1, r1
 800223c:	4718      	bx	r3

0800223e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800223e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002242:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002244:	f04f 33ff 	mov.w	r3, #4294967295
 8002248:	6203      	str	r3, [r0, #32]
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 800224a:	6813      	ldr	r3, [r2, #0]
 800224c:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 800224e:	6010      	str	r0, [r2, #0]
    }
 8002250:	4770      	bx	lr

08002252 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8002252:	4770      	bx	lr

08002254 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8002254:	4770      	bx	lr

08002256 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8002256:	4770      	bx	lr

08002258 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8002258:	4770      	bx	lr

0800225a <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
    }
 800225a:	4770      	bx	lr

0800225c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 800225c:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002260:	b11a      	cbz	r2, 800226a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8002262:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002266:	b102      	cbz	r2, 800226a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002268:	6018      	str	r0, [r3, #0]
        }
    }
 800226a:	4770      	bx	lr

0800226c <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 800226c:	4770      	bx	lr

0800226e <_ZN12MainViewBase11setupScreenEv>:
}

void MainViewBase::setupScreen()
{

}
 800226e:	4770      	bx	lr

08002270 <_ZN12MainViewBaseD0Ev>:
 8002270:	b510      	push	{r4, lr}
 8002272:	4604      	mov	r4, r0
 8002274:	2198      	movs	r1, #152	; 0x98
 8002276:	f016 fdd2 	bl	8018e1e <_ZdlPvj>
 800227a:	4620      	mov	r0, r4
 800227c:	bd10      	pop	{r4, pc}

0800227e <_ZN8touchgfx8Drawable14setWidthHeightEss>:
        setWidth(width);
 800227e:	6803      	ldr	r3, [r0, #0]
    void setWidthHeight(int16_t width, int16_t height)
 8002280:	b570      	push	{r4, r5, r6, lr}
 8002282:	4604      	mov	r4, r0
        setWidth(width);
 8002284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    void setWidthHeight(int16_t width, int16_t height)
 8002286:	4615      	mov	r5, r2
        setWidth(width);
 8002288:	4798      	blx	r3
        setHeight(height);
 800228a:	6823      	ldr	r3, [r4, #0]
 800228c:	4620      	mov	r0, r4
 800228e:	4629      	mov	r1, r5
 8002290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    }
 8002292:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8002296:	4718      	bx	r3

08002298 <_ZN12MainViewBaseC1Ev>:
MainViewBase::MainViewBase()
 8002298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800229a:	4604      	mov	r4, r0
 800229c:	b085      	sub	sp, #20
        : presenter(0)
 800229e:	f00c ff95 	bl	800f1cc <_ZN8touchgfx6ScreenC1Ev>
 80022a2:	2500      	movs	r5, #0
 80022a4:	4626      	mov	r6, r4
 80022a6:	4b29      	ldr	r3, [pc, #164]	; (800234c <_ZN12MainViewBaseC1Ev+0xb4>)
 80022a8:	63e5      	str	r5, [r4, #60]	; 0x3c
 80022aa:	f104 076c 	add.w	r7, r4, #108	; 0x6c
 80022ae:	f846 3b40 	str.w	r3, [r6], #64
 80022b2:	a903      	add	r1, sp, #12
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 80022b4:	4b26      	ldr	r3, [pc, #152]	; (8002350 <_ZN12MainViewBaseC1Ev+0xb8>)
 80022b6:	4638      	mov	r0, r7
          visible(true)
 80022b8:	6625      	str	r5, [r4, #96]	; 0x60
        : color(col)
 80022ba:	66a5      	str	r5, [r4, #104]	; 0x68
        : x(0), y(0), width(0), height(0)
 80022bc:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
 80022c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022c4:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 80022c8:	23ff      	movs	r3, #255	; 0xff
 80022ca:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 80022ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022d2:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80022d6:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
 80022da:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
 80022de:	f8ad 300c 	strh.w	r3, [sp, #12]
 80022e2:	f009 f861 	bl	800b3a8 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
        setX(x);
 80022e6:	4629      	mov	r1, r5
 80022e8:	4630      	mov	r0, r6
 80022ea:	f7ff ff8f 	bl	800220c <_ZN8touchgfx8Drawable4setXEs>
        setY(y);
 80022ee:	4629      	mov	r1, r5
 80022f0:	4630      	mov	r0, r6
 80022f2:	f7ff ff8d 	bl	8002210 <_ZN8touchgfx8Drawable4setYEs>
        setWidthHeight(width, height);
 80022f6:	f44f 7288 	mov.w	r2, #272	; 0x110
 80022fa:	4630      	mov	r0, r6
 80022fc:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002300:	f7ff ffbd 	bl	800227e <_ZN8touchgfx8Drawable14setWidthHeightEss>
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
    {
        this->color = color;
 8002304:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_ONE_2_ID));
 8002308:	4638      	mov	r0, r7
 800230a:	66a3      	str	r3, [r4, #104]	; 0x68
 800230c:	230c      	movs	r3, #12
 800230e:	eb0d 0103 	add.w	r1, sp, r3
 8002312:	f8ad 300c 	strh.w	r3, [sp, #12]
 8002316:	f009 fc66 	bl	800bbe6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        rect.x = x;
 800231a:	4b0e      	ldr	r3, [pc, #56]	; (8002354 <_ZN12MainViewBaseC1Ev+0xbc>)
        setWidthHeight(width, height);
 800231c:	f240 121b 	movw	r2, #283	; 0x11b
 8002320:	4638      	mov	r0, r7
        rect.x = x;
 8002322:	6723      	str	r3, [r4, #112]	; 0x70
        setWidthHeight(width, height);
 8002324:	f240 212a 	movw	r1, #554	; 0x22a
 8002328:	f7ff ffa9 	bl	800227e <_ZN8touchgfx8Drawable14setWidthHeightEss>
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 800232c:	4629      	mov	r1, r5
 800232e:	4638      	mov	r0, r7
 8002330:	f009 f800 	bl	800b334 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8002334:	1d20      	adds	r0, r4, #4
 8002336:	4631      	mov	r1, r6
 8002338:	9001      	str	r0, [sp, #4]
 800233a:	f007 fdc1 	bl	8009ec0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800233e:	9801      	ldr	r0, [sp, #4]
 8002340:	4639      	mov	r1, r7
 8002342:	f007 fdbd 	bl	8009ec0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8002346:	4620      	mov	r0, r4
 8002348:	b005      	add	sp, #20
 800234a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800234c:	0801ab14 	.word	0x0801ab14
 8002350:	0801bdb4 	.word	0x0801bdb4
 8002354:	fff5ffb6 	.word	0xfff5ffb6

08002358 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_RobotoCondensed_Regular_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_RobotoCondensed_Regular_20_4bpp();

touchgfx::GeneratedFont& getFont_RobotoCondensed_Regular_20_4bpp()
{
    static touchgfx::GeneratedFont RobotoCondensed_Regular_20_4bpp(glyphs_RobotoCondensed_Regular_20_4bpp, 110, 20, 5, 4, 1, 1, 1, unicodes_RobotoCondensed_Regular_20_4bpp, kerning_RobotoCondensed_Regular_20_4bpp, 63, 0, 0, 0);
 8002358:	4770      	bx	lr
	...

0800235c <_Z39getFont_RobotoCondensed_Regular_20_4bppv>:
{
 800235c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont RobotoCondensed_Regular_20_4bpp(glyphs_RobotoCondensed_Regular_20_4bpp, 110, 20, 5, 4, 1, 1, 1, unicodes_RobotoCondensed_Regular_20_4bpp, kerning_RobotoCondensed_Regular_20_4bpp, 63, 0, 0, 0);
 800235e:	4d16      	ldr	r5, [pc, #88]	; (80023b8 <_Z39getFont_RobotoCondensed_Regular_20_4bppv+0x5c>)
{
 8002360:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont RobotoCondensed_Regular_20_4bpp(glyphs_RobotoCondensed_Regular_20_4bpp, 110, 20, 5, 4, 1, 1, 1, unicodes_RobotoCondensed_Regular_20_4bpp, kerning_RobotoCondensed_Regular_20_4bpp, 63, 0, 0, 0);
 8002362:	782c      	ldrb	r4, [r5, #0]
 8002364:	f3bf 8f5b 	dmb	ish
 8002368:	f014 0401 	ands.w	r4, r4, #1
 800236c:	d120      	bne.n	80023b0 <_Z39getFont_RobotoCondensed_Regular_20_4bppv+0x54>
 800236e:	4628      	mov	r0, r5
 8002370:	f016 fd57 	bl	8018e22 <__cxa_guard_acquire>
 8002374:	b1e0      	cbz	r0, 80023b0 <_Z39getFont_RobotoCondensed_Regular_20_4bppv+0x54>
 8002376:	233f      	movs	r3, #63	; 0x3f
 8002378:	2204      	movs	r2, #4
 800237a:	4910      	ldr	r1, [pc, #64]	; (80023bc <_Z39getFont_RobotoCondensed_Regular_20_4bppv+0x60>)
 800237c:	9307      	str	r3, [sp, #28]
 800237e:	4b10      	ldr	r3, [pc, #64]	; (80023c0 <_Z39getFont_RobotoCondensed_Regular_20_4bppv+0x64>)
 8002380:	4810      	ldr	r0, [pc, #64]	; (80023c4 <_Z39getFont_RobotoCondensed_Regular_20_4bppv+0x68>)
 8002382:	9306      	str	r3, [sp, #24]
 8002384:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <_Z39getFont_RobotoCondensed_Regular_20_4bppv+0x6c>)
 8002386:	9408      	str	r4, [sp, #32]
 8002388:	9305      	str	r3, [sp, #20]
 800238a:	2301      	movs	r3, #1
 800238c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002390:	9302      	str	r3, [sp, #8]
 8002392:	2305      	movs	r3, #5
 8002394:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8002398:	e9cd 3200 	strd	r3, r2, [sp]
 800239c:	2314      	movs	r3, #20
 800239e:	226e      	movs	r2, #110	; 0x6e
 80023a0:	f7ff ff08 	bl	80021b4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80023a4:	4628      	mov	r0, r5
 80023a6:	f016 fd48 	bl	8018e3a <__cxa_guard_release>
 80023aa:	4808      	ldr	r0, [pc, #32]	; (80023cc <_Z39getFont_RobotoCondensed_Regular_20_4bppv+0x70>)
 80023ac:	f016 fd84 	bl	8018eb8 <atexit>
    return RobotoCondensed_Regular_20_4bpp;
}
 80023b0:	4804      	ldr	r0, [pc, #16]	; (80023c4 <_Z39getFont_RobotoCondensed_Regular_20_4bppv+0x68>)
 80023b2:	b00d      	add	sp, #52	; 0x34
 80023b4:	bd30      	pop	{r4, r5, pc}
 80023b6:	bf00      	nop
 80023b8:	24001274 	.word	0x24001274
 80023bc:	08022128 	.word	0x08022128
 80023c0:	08022d94 	.word	0x08022d94
 80023c4:	24001278 	.word	0x24001278
 80023c8:	0802311c 	.word	0x0802311c
 80023cc:	08002359 	.word	0x08002359

080023d0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_RobotoCondensed_Regular_24_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_RobotoCondensed_Regular_24_4bpp();

touchgfx::GeneratedFont& getFont_RobotoCondensed_Regular_24_4bpp()
{
    static touchgfx::GeneratedFont RobotoCondensed_Regular_24_4bpp(glyphs_RobotoCondensed_Regular_24_4bpp, 7, 24, 0, 4, 1, 0, 0, unicodes_RobotoCondensed_Regular_24_4bpp, kerning_RobotoCondensed_Regular_24_4bpp, 0, 0, 0, 0);
 80023d0:	4770      	bx	lr
	...

080023d4 <_Z39getFont_RobotoCondensed_Regular_24_4bppv>:
{
 80023d4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont RobotoCondensed_Regular_24_4bpp(glyphs_RobotoCondensed_Regular_24_4bpp, 7, 24, 0, 4, 1, 0, 0, unicodes_RobotoCondensed_Regular_24_4bpp, kerning_RobotoCondensed_Regular_24_4bpp, 0, 0, 0, 0);
 80023d6:	4d15      	ldr	r5, [pc, #84]	; (800242c <_Z39getFont_RobotoCondensed_Regular_24_4bppv+0x58>)
{
 80023d8:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont RobotoCondensed_Regular_24_4bpp(glyphs_RobotoCondensed_Regular_24_4bpp, 7, 24, 0, 4, 1, 0, 0, unicodes_RobotoCondensed_Regular_24_4bpp, kerning_RobotoCondensed_Regular_24_4bpp, 0, 0, 0, 0);
 80023da:	782c      	ldrb	r4, [r5, #0]
 80023dc:	f3bf 8f5b 	dmb	ish
 80023e0:	f014 0401 	ands.w	r4, r4, #1
 80023e4:	d11e      	bne.n	8002424 <_Z39getFont_RobotoCondensed_Regular_24_4bppv+0x50>
 80023e6:	4628      	mov	r0, r5
 80023e8:	f016 fd1b 	bl	8018e22 <__cxa_guard_acquire>
 80023ec:	b1d0      	cbz	r0, 8002424 <_Z39getFont_RobotoCondensed_Regular_24_4bppv+0x50>
 80023ee:	4b10      	ldr	r3, [pc, #64]	; (8002430 <_Z39getFont_RobotoCondensed_Regular_24_4bppv+0x5c>)
 80023f0:	2201      	movs	r2, #1
 80023f2:	4910      	ldr	r1, [pc, #64]	; (8002434 <_Z39getFont_RobotoCondensed_Regular_24_4bppv+0x60>)
 80023f4:	9306      	str	r3, [sp, #24]
 80023f6:	4b10      	ldr	r3, [pc, #64]	; (8002438 <_Z39getFont_RobotoCondensed_Regular_24_4bppv+0x64>)
 80023f8:	4810      	ldr	r0, [pc, #64]	; (800243c <_Z39getFont_RobotoCondensed_Regular_24_4bppv+0x68>)
 80023fa:	9403      	str	r4, [sp, #12]
 80023fc:	9400      	str	r4, [sp, #0]
 80023fe:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8002402:	2304      	movs	r3, #4
 8002404:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8002408:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800240c:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8002410:	2318      	movs	r3, #24
 8002412:	2207      	movs	r2, #7
 8002414:	f7ff fece 	bl	80021b4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002418:	4628      	mov	r0, r5
 800241a:	f016 fd0e 	bl	8018e3a <__cxa_guard_release>
 800241e:	4808      	ldr	r0, [pc, #32]	; (8002440 <_Z39getFont_RobotoCondensed_Regular_24_4bppv+0x6c>)
 8002420:	f016 fd4a 	bl	8018eb8 <atexit>
    return RobotoCondensed_Regular_24_4bpp;
}
 8002424:	4805      	ldr	r0, [pc, #20]	; (800243c <_Z39getFont_RobotoCondensed_Regular_24_4bppv+0x68>)
 8002426:	b00d      	add	sp, #52	; 0x34
 8002428:	bd30      	pop	{r4, r5, pc}
 800242a:	bf00      	nop
 800242c:	240012a0 	.word	0x240012a0
 8002430:	08022f24 	.word	0x08022f24
 8002434:	0802272c 	.word	0x0802272c
 8002438:	08023130 	.word	0x08023130
 800243c:	240012a4 	.word	0x240012a4
 8002440:	080023d1 	.word	0x080023d1

08002444 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_RobotoCondensed_Regular_28_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_RobotoCondensed_Regular_28_4bpp();

touchgfx::GeneratedFont& getFont_RobotoCondensed_Regular_28_4bpp()
{
    static touchgfx::GeneratedFont RobotoCondensed_Regular_28_4bpp(glyphs_RobotoCondensed_Regular_28_4bpp, 110, 28, 7, 4, 1, 1, 1, unicodes_RobotoCondensed_Regular_28_4bpp, kerning_RobotoCondensed_Regular_28_4bpp, 63, 0, 0, 0);
 8002444:	4770      	bx	lr
	...

08002448 <_Z39getFont_RobotoCondensed_Regular_28_4bppv>:
{
 8002448:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont RobotoCondensed_Regular_28_4bpp(glyphs_RobotoCondensed_Regular_28_4bpp, 110, 28, 7, 4, 1, 1, 1, unicodes_RobotoCondensed_Regular_28_4bpp, kerning_RobotoCondensed_Regular_28_4bpp, 63, 0, 0, 0);
 800244a:	4d16      	ldr	r5, [pc, #88]	; (80024a4 <_Z39getFont_RobotoCondensed_Regular_28_4bppv+0x5c>)
{
 800244c:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont RobotoCondensed_Regular_28_4bpp(glyphs_RobotoCondensed_Regular_28_4bpp, 110, 28, 7, 4, 1, 1, 1, unicodes_RobotoCondensed_Regular_28_4bpp, kerning_RobotoCondensed_Regular_28_4bpp, 63, 0, 0, 0);
 800244e:	782c      	ldrb	r4, [r5, #0]
 8002450:	f3bf 8f5b 	dmb	ish
 8002454:	f014 0401 	ands.w	r4, r4, #1
 8002458:	d120      	bne.n	800249c <_Z39getFont_RobotoCondensed_Regular_28_4bppv+0x54>
 800245a:	4628      	mov	r0, r5
 800245c:	f016 fce1 	bl	8018e22 <__cxa_guard_acquire>
 8002460:	b1e0      	cbz	r0, 800249c <_Z39getFont_RobotoCondensed_Regular_28_4bppv+0x54>
 8002462:	233f      	movs	r3, #63	; 0x3f
 8002464:	2204      	movs	r2, #4
 8002466:	4910      	ldr	r1, [pc, #64]	; (80024a8 <_Z39getFont_RobotoCondensed_Regular_28_4bppv+0x60>)
 8002468:	9307      	str	r3, [sp, #28]
 800246a:	4b10      	ldr	r3, [pc, #64]	; (80024ac <_Z39getFont_RobotoCondensed_Regular_28_4bppv+0x64>)
 800246c:	4810      	ldr	r0, [pc, #64]	; (80024b0 <_Z39getFont_RobotoCondensed_Regular_28_4bppv+0x68>)
 800246e:	9306      	str	r3, [sp, #24]
 8002470:	4b10      	ldr	r3, [pc, #64]	; (80024b4 <_Z39getFont_RobotoCondensed_Regular_28_4bppv+0x6c>)
 8002472:	9408      	str	r4, [sp, #32]
 8002474:	9305      	str	r3, [sp, #20]
 8002476:	2301      	movs	r3, #1
 8002478:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800247c:	9302      	str	r3, [sp, #8]
 800247e:	2307      	movs	r3, #7
 8002480:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8002484:	e9cd 3200 	strd	r3, r2, [sp]
 8002488:	231c      	movs	r3, #28
 800248a:	226e      	movs	r2, #110	; 0x6e
 800248c:	f7ff fe92 	bl	80021b4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002490:	4628      	mov	r0, r5
 8002492:	f016 fcd2 	bl	8018e3a <__cxa_guard_release>
 8002496:	4808      	ldr	r0, [pc, #32]	; (80024b8 <_Z39getFont_RobotoCondensed_Regular_28_4bppv+0x70>)
 8002498:	f016 fd0e 	bl	8018eb8 <atexit>
    return RobotoCondensed_Regular_28_4bpp;
}
 800249c:	4804      	ldr	r0, [pc, #16]	; (80024b0 <_Z39getFont_RobotoCondensed_Regular_28_4bppv+0x68>)
 800249e:	b00d      	add	sp, #52	; 0x34
 80024a0:	bd30      	pop	{r4, r5, pc}
 80024a2:	bf00      	nop
 80024a4:	240012cc 	.word	0x240012cc
 80024a8:	08022790 	.word	0x08022790
 80024ac:	08022f28 	.word	0x08022f28
 80024b0:	240012d0 	.word	0x240012d0
 80024b4:	08023134 	.word	0x08023134
 80024b8:	08002445 	.word	0x08002445

080024bc <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 80024bc:	2000      	movs	r0, #0
 80024be:	4770      	bx	lr

080024c0 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 80024c0:	2000      	movs	r0, #0
 80024c2:	4770      	bx	lr

080024c4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80024c4:	b40e      	push	{r1, r2, r3}
 80024c6:	b503      	push	{r0, r1, lr}
 80024c8:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80024ca:	2100      	movs	r1, #0
{
 80024cc:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 80024d0:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80024d2:	f00c faa3 	bl	800ea1c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80024d6:	b002      	add	sp, #8
 80024d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80024dc:	b003      	add	sp, #12
 80024de:	4770      	bx	lr

080024e0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80024e0:	b40c      	push	{r2, r3}
 80024e2:	b507      	push	{r0, r1, r2, lr}
 80024e4:	ab04      	add	r3, sp, #16
 80024e6:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 80024ea:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80024ec:	f00c fa96 	bl	800ea1c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80024f0:	b003      	add	sp, #12
 80024f2:	f85d eb04 	ldr.w	lr, [sp], #4
 80024f6:	b002      	add	sp, #8
 80024f8:	4770      	bx	lr
	...

080024fc <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 80024fc:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 80024fe:	b510      	push	{r4, lr}
 8002500:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8002502:	b373      	cbz	r3, 8002562 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8002504:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8002506:	b92b      	cbnz	r3, 8002514 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8002508:	4b18      	ldr	r3, [pc, #96]	; (800256c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 800250a:	21c0      	movs	r1, #192	; 0xc0
 800250c:	4a18      	ldr	r2, [pc, #96]	; (8002570 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800250e:	4819      	ldr	r0, [pc, #100]	; (8002574 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8002510:	f016 fcb4 	bl	8018e7c <__assert_func>
            return buffer[pos];
 8002514:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8002516:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800251a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800251c:	b30b      	cbz	r3, 8002562 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 800251e:	f00d fd71 	bl	8010004 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8002522:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8002524:	2b01      	cmp	r3, #1
 8002526:	d803      	bhi.n	8002530 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8002528:	4b13      	ldr	r3, [pc, #76]	; (8002578 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 800252a:	21c5      	movs	r1, #197	; 0xc5
 800252c:	4a13      	ldr	r2, [pc, #76]	; (800257c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 800252e:	e7ee      	b.n	800250e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8002530:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8002532:	f640 103f 	movw	r0, #2367	; 0x93f
 8002536:	1c53      	adds	r3, r2, #1
 8002538:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 800253a:	2b09      	cmp	r3, #9
 800253c:	4619      	mov	r1, r3
 800253e:	bf88      	it	hi
 8002540:	f1a3 010a 	subhi.w	r1, r3, #10
 8002544:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8002548:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 800254a:	4281      	cmp	r1, r0
 800254c:	d109      	bne.n	8002562 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 800254e:	2b0a      	cmp	r3, #10
 8002550:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8002554:	bf28      	it	cs
 8002556:	2300      	movcs	r3, #0
            return buffer[pos];
 8002558:	8c50      	ldrh	r0, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 800255a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800255e:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8002560:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8002562:	4620      	mov	r0, r4
}
 8002564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8002568:	f00d bc30 	b.w	800fdcc <_ZN8touchgfx12TextProvider11getNextCharEv>
 800256c:	0801ab40 	.word	0x0801ab40
 8002570:	0801ab49 	.word	0x0801ab49
 8002574:	0801abf4 	.word	0x0801abf4
 8002578:	0801ac3e 	.word	0x0801ac3e
 800257c:	0801ac4c 	.word	0x0801ac4c

08002580 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8002580:	f00d bbdc 	b.w	800fd3c <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08002584 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8002584:	b510      	push	{r4, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	ac02      	add	r4, sp, #8
 800258a:	e884 0006 	stmia.w	r4, {r1, r2}
 800258e:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8002590:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8002592:	4621      	mov	r1, r4
    va_start(pArg, format);
 8002594:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8002596:	9301      	str	r3, [sp, #4]
 8002598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	9b08      	ldr	r3, [sp, #32]
 800259e:	f00a ff59 	bl	800d454 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80025a2:	b006      	add	sp, #24
 80025a4:	bd10      	pop	{r4, pc}
	...

080025a8 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80025a8:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 80025aa:	bb18      	cbnz	r0, 80025f4 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 80025ac:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 80025ae:	4813      	ldr	r0, [pc, #76]	; (80025fc <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4913      	ldr	r1, [pc, #76]	; (8002600 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 80025b4:	b1b3      	cbz	r3, 80025e4 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80025b6:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80025b8:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80025ba:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80025bc:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80025be:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	441a      	add	r2, r3
 80025c4:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 80025c6:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80025cc:	f000 f838 	bl	8002640 <_ZN17TypedTextDatabase8getFontsEv>
 80025d0:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80025d2:	f000 f833 	bl	800263c <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 80025d6:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80025d8:	601c      	str	r4, [r3, #0]
        fonts = f;
 80025da:	4b0c      	ldr	r3, [pc, #48]	; (800260c <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80025dc:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 80025de:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 80025e0:	8018      	strh	r0, [r3, #0]
    }
}
 80025e2:	e007      	b.n	80025f4 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 80025e6:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 80025ea:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80025ec:	4b0b      	ldr	r3, [pc, #44]	; (800261c <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 80025ee:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d1e8      	bne.n	80025c6 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 80025f4:	bd38      	pop	{r3, r4, r5, pc}
 80025f6:	bf00      	nop
 80025f8:	240012f8 	.word	0x240012f8
 80025fc:	240012fc 	.word	0x240012fc
 8002600:	24001300 	.word	0x24001300
 8002604:	24001304 	.word	0x24001304
 8002608:	240068e4 	.word	0x240068e4
 800260c:	240068ec 	.word	0x240068ec
 8002610:	240068e8 	.word	0x240068e8
 8002614:	08023154 	.word	0x08023154
 8002618:	08023148 	.word	0x08023148
 800261c:	08023174 	.word	0x08023174

08002620 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8002620:	4b04      	ldr	r3, [pc, #16]	; (8002634 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8002628:	4b03      	ldr	r3, [pc, #12]	; (8002638 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 800262a:	681b      	ldr	r3, [r3, #0]
}
 800262c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	24001300 	.word	0x24001300
 8002638:	240012fc 	.word	0x240012fc

0800263c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 800263c:	2003      	movs	r0, #3
 800263e:	4770      	bx	lr

08002640 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8002640:	4800      	ldr	r0, [pc, #0]	; (8002644 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8002642:	4770      	bx	lr
 8002644:	24001308 	.word	0x24001308

08002648 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_RobotoCondensed_Regular_24_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8002648:	b510      	push	{r4, lr}
};
 800264a:	4c05      	ldr	r4, [pc, #20]	; (8002660 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_RobotoCondensed_Regular_28_4bpp()),
 800264c:	f7ff fefc 	bl	8002448 <_Z39getFont_RobotoCondensed_Regular_28_4bppv>
};
 8002650:	6020      	str	r0, [r4, #0]
    &(getFont_RobotoCondensed_Regular_20_4bpp()),
 8002652:	f7ff fe83 	bl	800235c <_Z39getFont_RobotoCondensed_Regular_20_4bppv>
};
 8002656:	6060      	str	r0, [r4, #4]
    &(getFont_RobotoCondensed_Regular_24_4bpp())
 8002658:	f7ff febc 	bl	80023d4 <_Z39getFont_RobotoCondensed_Regular_24_4bppv>
};
 800265c:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 800265e:	bd10      	pop	{r4, pc}
 8002660:	24001308 	.word	0x24001308

08002664 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 8002664:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002666:	4770      	bx	lr

08002668 <_ZN14CustomKeyboardD1Ev>:
 */
class CustomKeyboard : public Container
{
public:
    CustomKeyboard();
    virtual ~CustomKeyboard() { }
 8002668:	4770      	bx	lr

0800266a <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800266a:	4770      	bx	lr

0800266c <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800266c:	4770      	bx	lr

0800266e <_ZN8touchgfx8CallbackI14CustomKeyboardtvvE7executeEt>:
    virtual void execute(T1 t1)
 800266e:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8002670:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8002672:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8002674:	68c2      	ldr	r2, [r0, #12]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	1055      	asrs	r5, r2, #1
 800267a:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800267e:	07d2      	lsls	r2, r2, #31
 8002680:	bf48      	it	mi
 8002682:	5962      	ldrmi	r2, [r4, r5]
    }
 8002684:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8002686:	bf48      	it	mi
 8002688:	58d3      	ldrmi	r3, [r2, r3]
 800268a:	4718      	bx	r3

0800268c <_ZNK8touchgfx8CallbackI14CustomKeyboardtvvE7isValidEv>:
        return (pobject != 0) && (pmemfun_1 != 0);
 800268c:	6843      	ldr	r3, [r0, #4]
 800268e:	b12b      	cbz	r3, 800269c <_ZNK8touchgfx8CallbackI14CustomKeyboardtvvE7isValidEv+0x10>
 8002690:	6883      	ldr	r3, [r0, #8]
 8002692:	b92b      	cbnz	r3, 80026a0 <_ZNK8touchgfx8CallbackI14CustomKeyboardtvvE7isValidEv+0x14>
 8002694:	68c0      	ldr	r0, [r0, #12]
 8002696:	f000 0001 	and.w	r0, r0, #1
 800269a:	4770      	bx	lr
 800269c:	4618      	mov	r0, r3
 800269e:	4770      	bx	lr
 80026a0:	2001      	movs	r0, #1
    }
 80026a2:	4770      	bx	lr

080026a4 <_ZN8touchgfx8CallbackI14CustomKeyboardvvvE7executeEv>:
    virtual void execute()
 80026a4:	b410      	push	{r4}
        (pobject->*pmemfun_0)();
 80026a6:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 80026a8:	4603      	mov	r3, r0
        (pobject->*pmemfun_0)();
 80026aa:	68c2      	ldr	r2, [r0, #12]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	1054      	asrs	r4, r2, #1
 80026b0:	eb01 0062 	add.w	r0, r1, r2, asr #1
 80026b4:	07d2      	lsls	r2, r2, #31
 80026b6:	bf48      	it	mi
 80026b8:	590a      	ldrmi	r2, [r1, r4]
    }
 80026ba:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun_0)();
 80026be:	bf48      	it	mi
 80026c0:	58d3      	ldrmi	r3, [r2, r3]
 80026c2:	4718      	bx	r3

080026c4 <_ZNK8touchgfx8CallbackI14CustomKeyboardvvvE7isValidEv>:
        return (pobject != 0) && (pmemfun_0 != 0);
 80026c4:	6843      	ldr	r3, [r0, #4]
 80026c6:	b12b      	cbz	r3, 80026d4 <_ZNK8touchgfx8CallbackI14CustomKeyboardvvvE7isValidEv+0x10>
 80026c8:	6883      	ldr	r3, [r0, #8]
 80026ca:	b92b      	cbnz	r3, 80026d8 <_ZNK8touchgfx8CallbackI14CustomKeyboardvvvE7isValidEv+0x14>
 80026cc:	68c0      	ldr	r0, [r0, #12]
 80026ce:	f000 0001 	and.w	r0, r0, #1
 80026d2:	4770      	bx	lr
 80026d4:	4618      	mov	r0, r3
 80026d6:	4770      	bx	lr
 80026d8:	2001      	movs	r0, #1
    }
 80026da:	4770      	bx	lr

080026dc <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80026dc:	b510      	push	{r4, lr}
 80026de:	4604      	mov	r4, r0
 80026e0:	2110      	movs	r1, #16
 80026e2:	f016 fb9c 	bl	8018e1e <_ZdlPvj>
 80026e6:	4620      	mov	r0, r4
 80026e8:	bd10      	pop	{r4, pc}

080026ea <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80026ea:	b510      	push	{r4, lr}
 80026ec:	4604      	mov	r4, r0
 80026ee:	2110      	movs	r1, #16
 80026f0:	f016 fb95 	bl	8018e1e <_ZdlPvj>
 80026f4:	4620      	mov	r0, r4
 80026f6:	bd10      	pop	{r4, pc}

080026f8 <_ZN14CustomKeyboardD0Ev>:
 80026f8:	b510      	push	{r4, lr}
 80026fa:	4604      	mov	r4, r0
 80026fc:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8002700:	f016 fb8d 	bl	8018e1e <_ZdlPvj>
 8002704:	4620      	mov	r0, r4
 8002706:	bd10      	pop	{r4, pc}

08002708 <_ZN14CustomKeyboard17setKeyMappingListEv>:
    add(keyboard);
    add(modeBtnTextArea);
}

void CustomKeyboard::setKeyMappingList()
{
 8002708:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800270a:	4604      	mov	r4, r0
 800270c:	4b13      	ldr	r3, [pc, #76]	; (800275c <_ZN14CustomKeyboard17setKeyMappingListEv+0x54>)
 800270e:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    if (alphaKeys)
 8002712:	f894 21a8 	ldrb.w	r2, [r4, #424]	; 0x1a8
 8002716:	f104 052c 	add.w	r5, r4, #44	; 0x2c
        : typedTextId(id)
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	b182      	cbz	r2, 8002740 <_ZN14CustomKeyboard17setKeyMappingListEv+0x38>
 800271e:	2302      	movs	r3, #2
    {
        modeBtnTextArea.setTypedText(TypedText(T_ALPHAMODE));
 8002720:	4669      	mov	r1, sp
 8002722:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002726:	f009 fa1e 	bl	800bb66 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
        if (uppercaseKeys)
 800272a:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
 800272e:	b12b      	cbz	r3, 800273c <_ZN14CustomKeyboard17setKeyMappingListEv+0x34>
        {
            keyboard.setKeymappingList(&keyMappingListAlphaUpper);
 8002730:	490b      	ldr	r1, [pc, #44]	; (8002760 <_ZN14CustomKeyboard17setKeyMappingListEv+0x58>)
        {
            keyboard.setKeymappingList(&keyMappingListNumUpper);
        }
        else
        {
            keyboard.setKeymappingList(&keyMappingListNumLower);
 8002732:	4628      	mov	r0, r5
 8002734:	f009 fe69 	bl	800c40a <_ZN8touchgfx8Keyboard17setKeymappingListEPKNS0_14KeyMappingListE>
        }
    }
}
 8002738:	b003      	add	sp, #12
 800273a:	bd30      	pop	{r4, r5, pc}
            keyboard.setKeymappingList(&keyMappingListAlphaLower);
 800273c:	4909      	ldr	r1, [pc, #36]	; (8002764 <_ZN14CustomKeyboard17setKeyMappingListEv+0x5c>)
 800273e:	e7f8      	b.n	8002732 <_ZN14CustomKeyboard17setKeyMappingListEv+0x2a>
 8002740:	2301      	movs	r3, #1
        modeBtnTextArea.setTypedText(TypedText(T_NUMMODE));
 8002742:	4669      	mov	r1, sp
 8002744:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002748:	f009 fa0d 	bl	800bb66 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
        if (uppercaseKeys)
 800274c:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
 8002750:	b10b      	cbz	r3, 8002756 <_ZN14CustomKeyboard17setKeyMappingListEv+0x4e>
            keyboard.setKeymappingList(&keyMappingListNumUpper);
 8002752:	4905      	ldr	r1, [pc, #20]	; (8002768 <_ZN14CustomKeyboard17setKeyMappingListEv+0x60>)
 8002754:	e7ed      	b.n	8002732 <_ZN14CustomKeyboard17setKeyMappingListEv+0x2a>
            keyboard.setKeymappingList(&keyMappingListNumLower);
 8002756:	4905      	ldr	r1, [pc, #20]	; (800276c <_ZN14CustomKeyboard17setKeyMappingListEv+0x64>)
 8002758:	e7eb      	b.n	8002732 <_ZN14CustomKeyboard17setKeyMappingListEv+0x2a>
 800275a:	bf00      	nop
 800275c:	0801a710 	.word	0x0801a710
 8002760:	0801afd4 	.word	0x0801afd4
 8002764:	0801afcc 	.word	0x0801afcc
 8002768:	0801afc4 	.word	0x0801afc4
 800276c:	0801afbc 	.word	0x0801afbc

08002770 <_ZN14CustomKeyboard23backspacePressedHandlerEv>:

void CustomKeyboard::backspacePressedHandler()
{
 8002770:	b538      	push	{r3, r4, r5, lr}
    uint16_t pos = keyboard.getBufferPosition();
 8002772:	f8b0 5062 	ldrh.w	r5, [r0, #98]	; 0x62
{
 8002776:	4604      	mov	r4, r0
    if (pos > 0)
 8002778:	b1a5      	cbz	r5, 80027a4 <_ZN14CustomKeyboard23backspacePressedHandlerEv+0x34>
    {
        //Delete the previous entry in the buffer and decrement the position.
        buffer[pos - 1] = 0;
 800277a:	f105 0383 	add.w	r3, r5, #131	; 0x83
 800277e:	2200      	movs	r2, #0
        keyboard.setBufferPosition(pos - 1);
 8002780:	1e69      	subs	r1, r5, #1
        buffer[pos - 1] = 0;
 8002782:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        keyboard.setBufferPosition(pos - 1);
 8002786:	302c      	adds	r0, #44	; 0x2c
 8002788:	b289      	uxth	r1, r1
 800278a:	f009 fe3a 	bl	800c402 <_ZN8touchgfx8Keyboard17setBufferPositionEt>

        //Change keymappings if we have reached the first position.
        if (1 == pos)
 800278e:	2d01      	cmp	r5, #1
 8002790:	d108      	bne.n	80027a4 <_ZN14CustomKeyboard23backspacePressedHandlerEv+0x34>
        {
            firstCharacterEntry = true;
            uppercaseKeys = true;
            setKeyMappingList();
 8002792:	4620      	mov	r0, r4
            firstCharacterEntry = true;
 8002794:	f884 51aa 	strb.w	r5, [r4, #426]	; 0x1aa
            uppercaseKeys = true;
 8002798:	f884 51a9 	strb.w	r5, [r4, #425]	; 0x1a9
        }
    }
}
 800279c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            setKeyMappingList();
 80027a0:	f7ff bfb2 	b.w	8002708 <_ZN14CustomKeyboard17setKeyMappingListEv>
}
 80027a4:	bd38      	pop	{r3, r4, r5, pc}

080027a6 <_ZN14CustomKeyboard22capslockPressedHandlerEv>:

void CustomKeyboard::capslockPressedHandler()
{
    uppercaseKeys = !uppercaseKeys;
 80027a6:	f890 21a9 	ldrb.w	r2, [r0, #425]	; 0x1a9
 80027aa:	f082 0201 	eor.w	r2, r2, #1
 80027ae:	f880 21a9 	strb.w	r2, [r0, #425]	; 0x1a9
    setKeyMappingList();
 80027b2:	f7ff bfa9 	b.w	8002708 <_ZN14CustomKeyboard17setKeyMappingListEv>

080027b6 <_ZN14CustomKeyboard18modePressedHandlerEv>:
}

void CustomKeyboard::modePressedHandler()
{
    alphaKeys = !alphaKeys;
 80027b6:	f890 21a8 	ldrb.w	r2, [r0, #424]	; 0x1a8

    // if we have changed back to alpha and still has no chars in the buffer,
    // we show upper case letters.
    if (firstCharacterEntry && alphaKeys)
 80027ba:	f890 11aa 	ldrb.w	r1, [r0, #426]	; 0x1aa
    alphaKeys = !alphaKeys;
 80027be:	f082 0201 	eor.w	r2, r2, #1
    if (firstCharacterEntry && alphaKeys)
 80027c2:	2900      	cmp	r1, #0
    alphaKeys = !alphaKeys;
 80027c4:	f880 21a8 	strb.w	r2, [r0, #424]	; 0x1a8
    {
        uppercaseKeys = true;
    }
    else
    {
        uppercaseKeys = false;
 80027c8:	bf08      	it	eq
 80027ca:	2200      	moveq	r2, #0
 80027cc:	f880 21a9 	strb.w	r2, [r0, #425]	; 0x1a9
    }
    setKeyMappingList();
 80027d0:	f7ff bf9a 	b.w	8002708 <_ZN14CustomKeyboard17setKeyMappingListEv>

080027d4 <_ZN14CustomKeyboard17keyPressedhandlerEt>:
}

void CustomKeyboard::keyPressedhandler(Unicode::UnicodeChar keyChar)
{
    // After the first keypress, the keyboard will shift to lowercase.
    if (firstCharacterEntry && keyChar != 0)
 80027d4:	f890 21aa 	ldrb.w	r2, [r0, #426]	; 0x1aa
 80027d8:	b13a      	cbz	r2, 80027ea <_ZN14CustomKeyboard17keyPressedhandlerEt+0x16>
 80027da:	b131      	cbz	r1, 80027ea <_ZN14CustomKeyboard17keyPressedhandlerEt+0x16>
    {
        firstCharacterEntry = false;
 80027dc:	2200      	movs	r2, #0
 80027de:	f880 21aa 	strb.w	r2, [r0, #426]	; 0x1aa
        uppercaseKeys = false;
 80027e2:	f880 21a9 	strb.w	r2, [r0, #425]	; 0x1a9
        setKeyMappingList();
 80027e6:	f7ff bf8f 	b.w	8002708 <_ZN14CustomKeyboard17setKeyMappingListEv>
    }
}
 80027ea:	4770      	bx	lr

080027ec <_ZN14CustomKeyboardC1Ev>:
CustomKeyboard::CustomKeyboard() : keyboard(),
 80027ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    firstCharacterEntry(false)
 80027f0:	4b49      	ldr	r3, [pc, #292]	; (8002918 <_ZN14CustomKeyboardC1Ev+0x12c>)
 80027f2:	2500      	movs	r5, #0
 80027f4:	4606      	mov	r6, r0
          visible(true)
 80027f6:	f44f 7780 	mov.w	r7, #256	; 0x100
CustomKeyboard::CustomKeyboard() : keyboard(),
 80027fa:	4604      	mov	r4, r0
          firstChild(0)
 80027fc:	6285      	str	r5, [r0, #40]	; 0x28
 80027fe:	8487      	strh	r7, [r0, #36]	; 0x24
    firstCharacterEntry(false)
 8002800:	f504 7896 	add.w	r8, r4, #300	; 0x12c
 8002804:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002808:	e9c0 5503 	strd	r5, r5, [r0, #12]
 800280c:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8002810:	e9c0 5507 	strd	r5, r5, [r0, #28]
 8002814:	f846 3b2c 	str.w	r3, [r6], #44
 8002818:	4630      	mov	r0, r6
 800281a:	f009 fb0f 	bl	800be3c <_ZN8touchgfx8KeyboardC1Ev>
 */
class TextArea : public Widget
{
public:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800281e:	4b3f      	ldr	r3, [pc, #252]	; (800291c <_ZN14CustomKeyboardC1Ev+0x130>)
        : pobject(pobject), pmemfun_0(pmemfun_0)
 8002820:	4a3f      	ldr	r2, [pc, #252]	; (8002920 <_ZN14CustomKeyboardC1Ev+0x134>)
    keyboard.setLayout(&layout);
 8002822:	4630      	mov	r0, r6
 8002824:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
 8002828:	4b3e      	ldr	r3, [pc, #248]	; (8002924 <_ZN14CustomKeyboardC1Ev+0x138>)
    layout.callbackAreaArray[0].callback = &capslockPressed;
 800282a:	493f      	ldr	r1, [pc, #252]	; (8002928 <_ZN14CustomKeyboardC1Ev+0x13c>)
 800282c:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
 8002830:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002834:	f8a4 7150 	strh.w	r7, [r4, #336]	; 0x150
    firstCharacterEntry(false)
 8002838:	2701      	movs	r7, #1
 800283a:	f8a4 3158 	strh.w	r3, [r4, #344]	; 0x158
 800283e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
        : color(col)
 8002842:	f8c4 515c 	str.w	r5, [r4, #348]	; 0x15c
 8002846:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
 800284a:	4b38      	ldr	r3, [pc, #224]	; (800292c <_ZN14CustomKeyboardC1Ev+0x140>)
 800284c:	f8a4 5164 	strh.w	r5, [r4, #356]	; 0x164
 8002850:	f8a4 71a8 	strh.w	r7, [r4, #424]	; 0x1a8
 8002854:	e9c4 345a 	strd	r3, r4, [r4, #360]	; 0x168
 8002858:	e9c4 345e 	strd	r3, r4, [r4, #376]	; 0x178
 800285c:	e9c4 3462 	strd	r3, r4, [r4, #392]	; 0x188
 8002860:	4b33      	ldr	r3, [pc, #204]	; (8002930 <_ZN14CustomKeyboardC1Ev+0x144>)
 8002862:	e9c4 3564 	strd	r3, r5, [r4, #400]	; 0x190
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8002866:	4b33      	ldr	r3, [pc, #204]	; (8002934 <_ZN14CustomKeyboardC1Ev+0x148>)
        : pobject(pobject), pmemfun_0(pmemfun_0)
 8002868:	e9c4 255c 	strd	r2, r5, [r4, #368]	; 0x170
        : pobject(pobject), pmemfun_1(pmemfun_1)
 800286c:	e9c4 3466 	strd	r3, r4, [r4, #408]	; 0x198
        : pobject(pobject), pmemfun_0(pmemfun_0)
 8002870:	4a31      	ldr	r2, [pc, #196]	; (8002938 <_ZN14CustomKeyboardC1Ev+0x14c>)
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8002872:	4b32      	ldr	r3, [pc, #200]	; (800293c <_ZN14CustomKeyboardC1Ev+0x150>)
        : pobject(pobject), pmemfun_0(pmemfun_0)
 8002874:	e9c4 2560 	strd	r2, r5, [r4, #384]	; 0x180
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8002878:	e9c4 3568 	strd	r3, r5, [r4, #416]	; 0x1a0
    layout.callbackAreaArray[0].callback = &capslockPressed;
 800287c:	f504 72b4 	add.w	r2, r4, #360	; 0x168
        : x(0), y(0), width(0), height(0)
 8002880:	e9c4 554c 	strd	r5, r5, [r4, #304]	; 0x130
 8002884:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
 8002888:	e9c4 5550 	strd	r5, r5, [r4, #320]	; 0x140
 800288c:	e9c4 5552 	strd	r5, r5, [r4, #328]	; 0x148
    firstCharacterEntry(false)
 8002890:	f884 51aa 	strb.w	r5, [r4, #426]	; 0x1aa
    layout.callbackAreaArray[0].callback = &capslockPressed;
 8002894:	68cb      	ldr	r3, [r1, #12]
 8002896:	609a      	str	r2, [r3, #8]
    layout.callbackAreaArray[1].callback = &backspacePressed;
 8002898:	f504 72bc 	add.w	r2, r4, #376	; 0x178
 800289c:	619a      	str	r2, [r3, #24]
    layout.callbackAreaArray[2].callback = &modePressed;
 800289e:	f504 72c4 	add.w	r2, r4, #392	; 0x188
 80028a2:	629a      	str	r2, [r3, #40]	; 0x28
    keyboard.setLayout(&layout);
 80028a4:	f009 fb39 	bl	800bf1a <_ZN8touchgfx8Keyboard9setLayoutEPKNS0_6LayoutE>
    keyboard.setKeyListener(keyPressed);
 80028a8:	f504 73cc 	add.w	r3, r4, #408	; 0x198
        setWidthHeight(width, height);
 80028ac:	22f0      	movs	r2, #240	; 0xf0
 80028ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
     *
     * @note Backspace, shift and mode keys report a 0 as value.
     */
    void setKeyListener(GenericCallback<Unicode::UnicodeChar>& callback)
    {
        keyListener = &callback;
 80028b2:	65a3      	str	r3, [r4, #88]	; 0x58
 80028b4:	4630      	mov	r0, r6
        rect.x = x;
 80028b6:	6325      	str	r5, [r4, #48]	; 0x30
        setWidthHeight(width, height);
 80028b8:	f7ff fce1 	bl	800227e <_ZN8touchgfx8Drawable14setWidthHeightEss>
    keyboard.setTextIndentation();
 80028bc:	4630      	mov	r0, r6
 80028be:	f009 fb5d 	bl	800bf7c <_ZN8touchgfx8Keyboard18setTextIndentationEv>
    memset(buffer, 0, sizeof(buffer));
 80028c2:	f504 7384 	add.w	r3, r4, #264	; 0x108
 80028c6:	4629      	mov	r1, r5
 80028c8:	2224      	movs	r2, #36	; 0x24
 80028ca:	4618      	mov	r0, r3
 80028cc:	f016 fb62 	bl	8018f94 <memset>
    keyboard.setBuffer(buffer, BUFFER_SIZE);
 80028d0:	2212      	movs	r2, #18
 80028d2:	4601      	mov	r1, r0
 80028d4:	4630      	mov	r0, r6
 80028d6:	f009 fb15 	bl	800bf04 <_ZN8touchgfx8Keyboard9setBufferEPtt>
        rect.x = x;
 80028da:	4b19      	ldr	r3, [pc, #100]	; (8002940 <_ZN14CustomKeyboardC1Ev+0x154>)
        setWidthHeight(width, height);
 80028dc:	2228      	movs	r2, #40	; 0x28
 80028de:	2138      	movs	r1, #56	; 0x38
 80028e0:	4640      	mov	r0, r8
        rect.x = x;
 80028e2:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    uppercaseKeys = true;
 80028e6:	f884 71a9 	strb.w	r7, [r4, #425]	; 0x1a9
    firstCharacterEntry = true;
 80028ea:	f884 71aa 	strb.w	r7, [r4, #426]	; 0x1aa
        setWidthHeight(width, height);
 80028ee:	f7ff fcc6 	bl	800227e <_ZN8touchgfx8Drawable14setWidthHeightEss>
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 80028f2:	f04f 33ff 	mov.w	r3, #4294967295
    setKeyMappingList();
 80028f6:	4620      	mov	r0, r4
 80028f8:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
 80028fc:	f7ff ff04 	bl	8002708 <_ZN14CustomKeyboard17setKeyMappingListEv>
    add(keyboard);
 8002900:	4631      	mov	r1, r6
 8002902:	4620      	mov	r0, r4
 8002904:	f007 fadc 	bl	8009ec0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(modeBtnTextArea);
 8002908:	4620      	mov	r0, r4
 800290a:	4641      	mov	r1, r8
 800290c:	f007 fad8 	bl	8009ec0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8002910:	4620      	mov	r0, r4
 8002912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002916:	bf00      	nop
 8002918:	0801ad58 	.word	0x0801ad58
 800291c:	0801bd0c 	.word	0x0801bd0c
 8002920:	080027a7 	.word	0x080027a7
 8002924:	0801a710 	.word	0x0801a710
 8002928:	2400000c 	.word	0x2400000c
 800292c:	0801ad28 	.word	0x0801ad28
 8002930:	080027b7 	.word	0x080027b7
 8002934:	0801ad40 	.word	0x0801ad40
 8002938:	08002771 	.word	0x08002771
 800293c:	080027d5 	.word	0x080027d5
 8002940:	00c40005 	.word	0x00c40005

08002944 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev>:
    {26, Rect(63 + 28 * 3, 149, 26, 40), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {27, Rect(63 + 28 * 4, 149, 26, 40), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {28, Rect(63 + 28 * 5, 149, 26, 40), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {29, Rect(63 + 28 * 6, 149, 26, 40), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {30, Rect(62, 193, 252, 40), BITMAP_KEYBOARD_SPACE_HIGHLIGHTED_ID}
};
 8002944:	4be4      	ldr	r3, [pc, #912]	; (8002cd8 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x394>)
 8002946:	2201      	movs	r2, #1
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
        : x(x), y(y), width(width), height(height)
 8002948:	2128      	movs	r1, #40	; 0x28
 800294a:	201a      	movs	r0, #26
 800294c:	f04f 0c5b 	mov.w	ip, #91	; 0x5b

void CustomKeyboard::setTouchable(bool touch)
{
    Container::setTouchable(touch);
    keyboard.setTouchable(touch);
}
 8002950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002954:	2502      	movs	r5, #2
 8002956:	243d      	movs	r4, #61	; 0x3d
 8002958:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 800295c:	2693      	movs	r6, #147	; 0x93
 800295e:	731d      	strb	r5, [r3, #12]
 8002960:	2503      	movs	r5, #3
 8002962:	f04f 0823 	mov.w	r8, #35	; 0x23
 8002966:	2777      	movs	r7, #119	; 0x77
 8002968:	761d      	strb	r5, [r3, #24]
 800296a:	2504      	movs	r5, #4
 800296c:	701a      	strb	r2, [r3, #0]
 800296e:	f04f 0908 	mov.w	r9, #8
 8002972:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
 8002976:	2505      	movs	r5, #5
 8002978:	2207      	movs	r2, #7
 800297a:	809c      	strh	r4, [r3, #4]
 800297c:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
 8002980:	f04f 0506 	mov.w	r5, #6
 8002984:	805a      	strh	r2, [r3, #2]
 8002986:	f04f 0a09 	mov.w	sl, #9
 800298a:	80d8      	strh	r0, [r3, #6]
 800298c:	f04f 0b0d 	mov.w	fp, #13
 8002990:	8119      	strh	r1, [r3, #8]
 8002992:	815a      	strh	r2, [r3, #10]
 8002994:	f8a3 800e 	strh.w	r8, [r3, #14]
 8002998:	821c      	strh	r4, [r3, #16]
 800299a:	8258      	strh	r0, [r3, #18]
 800299c:	8299      	strh	r1, [r3, #20]
 800299e:	82da      	strh	r2, [r3, #22]
 80029a0:	f8a3 e01a 	strh.w	lr, [r3, #26]
 80029a4:	839c      	strh	r4, [r3, #28]
 80029a6:	83d8      	strh	r0, [r3, #30]
 80029a8:	8419      	strh	r1, [r3, #32]
 80029aa:	845a      	strh	r2, [r3, #34]	; 0x22
 80029ac:	f8a3 c026 	strh.w	ip, [r3, #38]	; 0x26
 80029b0:	851c      	strh	r4, [r3, #40]	; 0x28
 80029b2:	8558      	strh	r0, [r3, #42]	; 0x2a
 80029b4:	8599      	strh	r1, [r3, #44]	; 0x2c
 80029b6:	85da      	strh	r2, [r3, #46]	; 0x2e
 80029b8:	869c      	strh	r4, [r3, #52]	; 0x34
 80029ba:	86d8      	strh	r0, [r3, #54]	; 0x36
 80029bc:	8719      	strh	r1, [r3, #56]	; 0x38
 80029be:	875a      	strh	r2, [r3, #58]	; 0x3a
 80029c0:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
 80029c4:	f04f 05af 	mov.w	r5, #175	; 0xaf
 80029c8:	865f      	strh	r7, [r3, #50]	; 0x32
 80029ca:	87de      	strh	r6, [r3, #62]	; 0x3e
 80029cc:	f883 9054 	strb.w	r9, [r3, #84]	; 0x54
 80029d0:	f04f 09cb 	mov.w	r9, #203	; 0xcb
 80029d4:	f883 a060 	strb.w	sl, [r3, #96]	; 0x60
 80029d8:	f04f 0a0a 	mov.w	sl, #10
 80029dc:	f8a3 9056 	strh.w	r9, [r3, #86]	; 0x56
 80029e0:	f04f 090b 	mov.w	r9, #11
 80029e4:	f8a3 504a 	strh.w	r5, [r3, #74]	; 0x4a
 80029e8:	25e7      	movs	r5, #231	; 0xe7
 80029ea:	f883 a06c 	strb.w	sl, [r3, #108]	; 0x6c
 80029ee:	f240 1a03 	movw	sl, #259	; 0x103
 80029f2:	f883 9078 	strb.w	r9, [r3, #120]	; 0x78
 80029f6:	f240 191f 	movw	r9, #287	; 0x11f
 80029fa:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
 80029fe:	f8a3 0042 	strh.w	r0, [r3, #66]	; 0x42
 8002a02:	f8a3 1044 	strh.w	r1, [r3, #68]	; 0x44
 8002a06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002a0a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8002a0e:	f8a3 404c 	strh.w	r4, [r3, #76]	; 0x4c
 8002a12:	f8a3 004e 	strh.w	r0, [r3, #78]	; 0x4e
 8002a16:	f8a3 1050 	strh.w	r1, [r3, #80]	; 0x50
 8002a1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8002a1e:	f8a3 4058 	strh.w	r4, [r3, #88]	; 0x58
 8002a22:	f8a3 005a 	strh.w	r0, [r3, #90]	; 0x5a
 8002a26:	f8a3 105c 	strh.w	r1, [r3, #92]	; 0x5c
 8002a2a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8002a2e:	f8a3 4064 	strh.w	r4, [r3, #100]	; 0x64
 8002a32:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
 8002a36:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
 8002a3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8002a3e:	f8a3 a06e 	strh.w	sl, [r3, #110]	; 0x6e
 8002a42:	f8a3 4070 	strh.w	r4, [r3, #112]	; 0x70
 8002a46:	f8a3 0072 	strh.w	r0, [r3, #114]	; 0x72
 8002a4a:	f8a3 1074 	strh.w	r1, [r3, #116]	; 0x74
 8002a4e:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 8002a52:	f8a3 407c 	strh.w	r4, [r3, #124]	; 0x7c
 8002a56:	240c      	movs	r4, #12
 8002a58:	f8a3 007e 	strh.w	r0, [r3, #126]	; 0x7e
 8002a5c:	f8a3 5062 	strh.w	r5, [r3, #98]	; 0x62
 8002a60:	f8a3 907a 	strh.w	r9, [r3, #122]	; 0x7a
 8002a64:	f8a3 1080 	strh.w	r1, [r3, #128]	; 0x80
 8002a68:	f883 b090 	strb.w	fp, [r3, #144]	; 0x90
 8002a6c:	f04f 0b10 	mov.w	fp, #16
 8002a70:	f8a3 8092 	strh.w	r8, [r3, #146]	; 0x92
 8002a74:	f04f 080e 	mov.w	r8, #14
 8002a78:	f883 b0b4 	strb.w	fp, [r3, #180]	; 0xb4
 8002a7c:	f04f 0b11 	mov.w	fp, #17
 8002a80:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
 8002a84:	2469      	movs	r4, #105	; 0x69
 8002a86:	f883 809c 	strb.w	r8, [r3, #156]	; 0x9c
 8002a8a:	f04f 080f 	mov.w	r8, #15
 8002a8e:	f883 b0c0 	strb.w	fp, [r3, #192]	; 0xc0
 8002a92:	f04f 0b12 	mov.w	fp, #18
 8002a96:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 8002a9a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8002a9e:	f8a3 4088 	strh.w	r4, [r3, #136]	; 0x88
 8002aa2:	f8a3 008a 	strh.w	r0, [r3, #138]	; 0x8a
 8002aa6:	f8a3 108c 	strh.w	r1, [r3, #140]	; 0x8c
 8002aaa:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
 8002aae:	f8a3 4094 	strh.w	r4, [r3, #148]	; 0x94
 8002ab2:	f8a3 0096 	strh.w	r0, [r3, #150]	; 0x96
 8002ab6:	f8a3 1098 	strh.w	r1, [r3, #152]	; 0x98
 8002aba:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8002abe:	f8a3 e09e 	strh.w	lr, [r3, #158]	; 0x9e
 8002ac2:	f8a3 40a0 	strh.w	r4, [r3, #160]	; 0xa0
 8002ac6:	f8a3 00a2 	strh.w	r0, [r3, #162]	; 0xa2
 8002aca:	f8a3 10a4 	strh.w	r1, [r3, #164]	; 0xa4
 8002ace:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
 8002ad2:	f8a3 c0aa 	strh.w	ip, [r3, #170]	; 0xaa
 8002ad6:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 8002ada:	f8a3 00ae 	strh.w	r0, [r3, #174]	; 0xae
 8002ade:	f8a3 10b0 	strh.w	r1, [r3, #176]	; 0xb0
 8002ae2:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8002ae6:	f8a3 40b8 	strh.w	r4, [r3, #184]	; 0xb8
 8002aea:	f8a3 00ba 	strh.w	r0, [r3, #186]	; 0xba
 8002aee:	f8a3 10bc 	strh.w	r1, [r3, #188]	; 0xbc
 8002af2:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 8002af6:	f883 80a8 	strb.w	r8, [r3, #168]	; 0xa8
 8002afa:	f8a3 70b6 	strh.w	r7, [r3, #182]	; 0xb6
 8002afe:	f8a3 60c2 	strh.w	r6, [r3, #194]	; 0xc2
 8002b02:	f883 b0cc 	strb.w	fp, [r3, #204]	; 0xcc
 8002b06:	f04f 0baf 	mov.w	fp, #175	; 0xaf
 8002b0a:	f8a3 a0f2 	strh.w	sl, [r3, #242]	; 0xf2
 8002b0e:	f04f 0a16 	mov.w	sl, #22
 8002b12:	f8a3 b0ce 	strh.w	fp, [r3, #206]	; 0xce
 8002b16:	f04f 0b13 	mov.w	fp, #19
 8002b1a:	f8a3 40c4 	strh.w	r4, [r3, #196]	; 0xc4
 8002b1e:	f883 b0d8 	strb.w	fp, [r3, #216]	; 0xd8
 8002b22:	f04f 0bcb 	mov.w	fp, #203	; 0xcb
 8002b26:	f8a3 00c6 	strh.w	r0, [r3, #198]	; 0xc6
 8002b2a:	f8a3 b0da 	strh.w	fp, [r3, #218]	; 0xda
 8002b2e:	f04f 0b14 	mov.w	fp, #20
 8002b32:	f8a3 10c8 	strh.w	r1, [r3, #200]	; 0xc8
 8002b36:	f883 b0e4 	strb.w	fp, [r3, #228]	; 0xe4
 8002b3a:	f04f 0b15 	mov.w	fp, #21
 8002b3e:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 8002b42:	f8a3 40d0 	strh.w	r4, [r3, #208]	; 0xd0
 8002b46:	f8a3 00d2 	strh.w	r0, [r3, #210]	; 0xd2
 8002b4a:	f8a3 10d4 	strh.w	r1, [r3, #212]	; 0xd4
 8002b4e:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
 8002b52:	f8a3 40dc 	strh.w	r4, [r3, #220]	; 0xdc
 8002b56:	f8a3 00de 	strh.w	r0, [r3, #222]	; 0xde
 8002b5a:	f8a3 10e0 	strh.w	r1, [r3, #224]	; 0xe0
 8002b5e:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
 8002b62:	f8a3 40e8 	strh.w	r4, [r3, #232]	; 0xe8
 8002b66:	f8a3 00ea 	strh.w	r0, [r3, #234]	; 0xea
 8002b6a:	f8a3 10ec 	strh.w	r1, [r3, #236]	; 0xec
 8002b6e:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
 8002b72:	f883 b0f0 	strb.w	fp, [r3, #240]	; 0xf0
 8002b76:	f04f 0baf 	mov.w	fp, #175	; 0xaf
 8002b7a:	f8a3 40f4 	strh.w	r4, [r3, #244]	; 0xf4
 8002b7e:	f8a3 00f6 	strh.w	r0, [r3, #246]	; 0xf6
 8002b82:	f8a3 10f8 	strh.w	r1, [r3, #248]	; 0xf8
 8002b86:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
 8002b8a:	f8a3 4100 	strh.w	r4, [r3, #256]	; 0x100
 8002b8e:	2417      	movs	r4, #23
 8002b90:	f8a3 0102 	strh.w	r0, [r3, #258]	; 0x102
 8002b94:	f8a3 50e6 	strh.w	r5, [r3, #230]	; 0xe6
 8002b98:	f883 a0fc 	strb.w	sl, [r3, #252]	; 0xfc
 8002b9c:	f8a3 90fe 	strh.w	r9, [r3, #254]	; 0xfe
 8002ba0:	f8a3 1104 	strh.w	r1, [r3, #260]	; 0x104
 8002ba4:	f8a3 612e 	strh.w	r6, [r3, #302]	; 0x12e
 8002ba8:	261b      	movs	r6, #27
 8002baa:	f883 4108 	strb.w	r4, [r3, #264]	; 0x108
 8002bae:	2495      	movs	r4, #149	; 0x95
 8002bb0:	f8a3 e10a 	strh.w	lr, [r3, #266]	; 0x10a
 8002bb4:	f04f 0e18 	mov.w	lr, #24
 8002bb8:	f8a3 c116 	strh.w	ip, [r3, #278]	; 0x116
 8002bbc:	f04f 0c19 	mov.w	ip, #25
 8002bc0:	f883 6138 	strb.w	r6, [r3, #312]	; 0x138
 8002bc4:	261c      	movs	r6, #28
 8002bc6:	f8a3 b13a 	strh.w	fp, [r3, #314]	; 0x13a
 8002bca:	f04f 0bcb 	mov.w	fp, #203	; 0xcb
 8002bce:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
 8002bd2:	f8a3 410c 	strh.w	r4, [r3, #268]	; 0x10c
 8002bd6:	f8a3 010e 	strh.w	r0, [r3, #270]	; 0x10e
 8002bda:	f8a3 1110 	strh.w	r1, [r3, #272]	; 0x110
 8002bde:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
 8002be2:	f8a3 4118 	strh.w	r4, [r3, #280]	; 0x118
 8002be6:	f8a3 011a 	strh.w	r0, [r3, #282]	; 0x11a
 8002bea:	f8a3 111c 	strh.w	r1, [r3, #284]	; 0x11c
 8002bee:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e
 8002bf2:	f8a3 4124 	strh.w	r4, [r3, #292]	; 0x124
 8002bf6:	f8a3 0126 	strh.w	r0, [r3, #294]	; 0x126
 8002bfa:	f8a3 1128 	strh.w	r1, [r3, #296]	; 0x128
 8002bfe:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
 8002c02:	f883 012c 	strb.w	r0, [r3, #300]	; 0x12c
 8002c06:	f8a3 4130 	strh.w	r4, [r3, #304]	; 0x130
 8002c0a:	f8a3 0132 	strh.w	r0, [r3, #306]	; 0x132
 8002c0e:	f8a3 1134 	strh.w	r1, [r3, #308]	; 0x134
 8002c12:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
 8002c16:	f8a3 413c 	strh.w	r4, [r3, #316]	; 0x13c
 8002c1a:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
 8002c1e:	f8a3 1140 	strh.w	r1, [r3, #320]	; 0x140
 8002c22:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
 8002c26:	f883 6144 	strb.w	r6, [r3, #324]	; 0x144
 8002c2a:	261d      	movs	r6, #29
 8002c2c:	f883 e114 	strb.w	lr, [r3, #276]	; 0x114
 8002c30:	f883 c120 	strb.w	ip, [r3, #288]	; 0x120
 8002c34:	f8a3 7122 	strh.w	r7, [r3, #290]	; 0x122
 8002c38:	f8a3 b146 	strh.w	fp, [r3, #326]	; 0x146
 8002c3c:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
 8002c40:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
 8002c44:	221e      	movs	r2, #30
 8002c46:	f8a3 4148 	strh.w	r4, [r3, #328]	; 0x148
 8002c4a:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
 8002c4e:	223e      	movs	r2, #62	; 0x3e
 8002c50:	f8a3 014a 	strh.w	r0, [r3, #330]	; 0x14a
 8002c54:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e
 8002c58:	22c1      	movs	r2, #193	; 0xc1
 8002c5a:	f8a3 114c 	strh.w	r1, [r3, #332]	; 0x14c
 8002c5e:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
 8002c62:	22fc      	movs	r2, #252	; 0xfc
 8002c64:	f8a3 4154 	strh.w	r4, [r3, #340]	; 0x154
static Keyboard::CallbackArea callbackAreas[3] =
{
    {Rect(5, 149, 56, 40), 0, BITMAP_KEYBOARD_KEY_SHIFT_HIGHLIGHTED_ID},     // caps-lock
    {Rect(258, 149, 56, 40), 0, BITMAP_KEYBOARD_KEY_DELETE_HIGHLIGHTED_ID},  // backspace
    {Rect(5, 193, 56, 40), 0, BITMAP_KEYBOARD_KEY_NUM_HIGHLIGHTED_ID},       // mode
};
 8002c68:	f04f 0409 	mov.w	r4, #9
 8002c6c:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
};
 8002c70:	f04f 020a 	mov.w	r2, #10
 8002c74:	f8a3 0156 	strh.w	r0, [r3, #342]	; 0x156
 8002c78:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
 8002c7c:	f8a3 1164 	strh.w	r1, [r3, #356]	; 0x164
 8002c80:	f8a3 2166 	strh.w	r2, [r3, #358]	; 0x166
 8002c84:	f883 6150 	strb.w	r6, [r3, #336]	; 0x150
 8002c88:	f8a3 5152 	strh.w	r5, [r3, #338]	; 0x152
 8002c8c:	4b13      	ldr	r3, [pc, #76]	; (8002cdc <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x398>)
 8002c8e:	4814      	ldr	r0, [pc, #80]	; (8002ce0 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x39c>)
};
 8002c90:	819c      	strh	r4, [r3, #12]
 8002c92:	4c14      	ldr	r4, [pc, #80]	; (8002ce4 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x3a0>)
 8002c94:	4a14      	ldr	r2, [pc, #80]	; (8002ce8 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x3a4>)
 8002c96:	e9c3 4004 	strd	r4, r0, [r3, #16]
 8002c9a:	f04f 0406 	mov.w	r4, #6
 8002c9e:	839c      	strh	r4, [r3, #28]
 8002ca0:	4c12      	ldr	r4, [pc, #72]	; (8002cec <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x3a8>)
 8002ca2:	e9c3 2000 	strd	r2, r0, [r3]
 8002ca6:	e9c3 4008 	strd	r4, r0, [r3, #32]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f04f 0008 	mov.w	r0, #8
 8002cb0:	619a      	str	r2, [r3, #24]
 8002cb2:	8598      	strh	r0, [r3, #44]	; 0x2c
 8002cb4:	609a      	str	r2, [r3, #8]
 8002cb6:	629a      	str	r2, [r3, #40]	; 0x28
 8002cb8:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x3ac>)
 8002cba:	480e      	ldr	r0, [pc, #56]	; (8002cf4 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x3b0>)
 8002cbc:	8319      	strh	r1, [r3, #24]
 8002cbe:	490e      	ldr	r1, [pc, #56]	; (8002cf8 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x3b4>)
 8002cc0:	f8a3 8012 	strh.w	r8, [r3, #18]
 8002cc4:	61d9      	str	r1, [r3, #28]
        : color(col)
 8002cc6:	f64f 71ff 	movw	r1, #65535	; 0xffff
        : x(x), y(y), width(width), height(height)
 8002cca:	6158      	str	r0, [r3, #20]
 8002ccc:	841a      	strh	r2, [r3, #32]
        : color(col)
 8002cce:	6259      	str	r1, [r3, #36]	; 0x24
 8002cd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cd6:	bf00      	nop
 8002cd8:	24001344 	.word	0x24001344
 8002cdc:	24001314 	.word	0x24001314
 8002ce0:	00280038 	.word	0x00280038
 8002ce4:	00950102 	.word	0x00950102
 8002ce8:	00950005 	.word	0x00950005
 8002cec:	00c10005 	.word	0x00c10005
 8002cf0:	2400000c 	.word	0x2400000c
 8002cf4:	0134000a 	.word	0x0134000a
 8002cf8:	0801a710 	.word	0x0801a710

08002cfc <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8002cfc:	4770      	bx	lr

08002cfe <_ZN19FrontendApplicationD0Ev>:
 8002cfe:	b510      	push	{r4, lr}
 8002d00:	4604      	mov	r4, r0
 8002d02:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002d06:	f016 f88a 	bl	8018e1e <_ZdlPvj>
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	bd10      	pop	{r4, pc}

08002d0e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8002d0e:	b510      	push	{r4, lr}
 8002d10:	4604      	mov	r4, r0
    {
        model.tick();
 8002d12:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 8002d16:	f000 f85e 	bl	8002dd6 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8002d1a:	4620      	mov	r0, r4
    }
 8002d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8002d20:	f00a bf12 	b.w	800db48 <_ZN8touchgfx11Application15handleTickEventEv>

08002d24 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8002d24:	b510      	push	{r4, lr}
 8002d26:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8002d28:	f7ff f91e 	bl	8001f68 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8002d2c:	4b01      	ldr	r3, [pc, #4]	; (8002d34 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{
}
 8002d2e:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8002d30:	6023      	str	r3, [r4, #0]
}
 8002d32:	bd10      	pop	{r4, pc}
 8002d34:	0801afe4 	.word	0x0801afe4

08002d38 <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 8002d38:	4770      	bx	lr

08002d3a <_ZThn4_N13MainPresenterD1Ev>:
 8002d3a:	3804      	subs	r0, #4
 8002d3c:	4770      	bx	lr

08002d3e <_ZN13MainPresenter10deactivateEv>:
{
}

void MainPresenter::activate()
{
}
 8002d3e:	4770      	bx	lr

08002d40 <_ZN13MainPresenterD0Ev>:
 8002d40:	b510      	push	{r4, lr}
 8002d42:	4604      	mov	r4, r0
 8002d44:	2110      	movs	r1, #16
 8002d46:	f016 f86a 	bl	8018e1e <_ZdlPvj>
 8002d4a:	4620      	mov	r0, r4
 8002d4c:	bd10      	pop	{r4, pc}

08002d4e <_ZThn4_N13MainPresenterD0Ev>:
 8002d4e:	f1a0 0004 	sub.w	r0, r0, #4
 8002d52:	e7f5      	b.n	8002d40 <_ZN13MainPresenterD0Ev>

08002d54 <_ZN13MainPresenterC1ER8MainView>:
    ModelListener() : model(0) {}
 8002d54:	2200      	movs	r2, #0
    : view(v)
 8002d56:	60c1      	str	r1, [r0, #12]
 8002d58:	6082      	str	r2, [r0, #8]
 8002d5a:	4a04      	ldr	r2, [pc, #16]	; (8002d6c <_ZN13MainPresenterC1ER8MainView+0x18>)
MainPresenter::MainPresenter(MainView& v)
 8002d5c:	b510      	push	{r4, lr}
    : view(v)
 8002d5e:	f102 0408 	add.w	r4, r2, #8
 8002d62:	3220      	adds	r2, #32
 8002d64:	6004      	str	r4, [r0, #0]
 8002d66:	6042      	str	r2, [r0, #4]
}
 8002d68:	bd10      	pop	{r4, pc}
 8002d6a:	bf00      	nop
 8002d6c:	0801b020 	.word	0x0801b020

08002d70 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 8002d70:	4770      	bx	lr

08002d72 <_ZN8MainView11setupScreenEv>:
    add(keyboard);
}

void MainView::setupScreen()
{
}
 8002d72:	4770      	bx	lr

08002d74 <_ZN8MainViewD0Ev>:
 8002d74:	b510      	push	{r4, lr}
 8002d76:	4604      	mov	r4, r0
 8002d78:	f44f 7111 	mov.w	r1, #580	; 0x244
 8002d7c:	f016 f84f 	bl	8018e1e <_ZdlPvj>
 8002d80:	4620      	mov	r0, r4
 8002d82:	bd10      	pop	{r4, pc}

08002d84 <_ZN8MainViewC1Ev>:
MainView::MainView()
 8002d84:	b538      	push	{r3, r4, r5, lr}
 8002d86:	4604      	mov	r4, r0
 8002d88:	f7ff fa86 	bl	8002298 <_ZN12MainViewBaseC1Ev>
 8002d8c:	4b0e      	ldr	r3, [pc, #56]	; (8002dc8 <_ZN8MainViewC1Ev+0x44>)
 8002d8e:	4625      	mov	r5, r4
 8002d90:	f845 3b98 	str.w	r3, [r5], #152
 8002d94:	4628      	mov	r0, r5
 8002d96:	f7ff fd29 	bl	80027ec <_ZN14CustomKeyboardC1Ev>
        rect.x = x;
 8002d9a:	4a0c      	ldr	r2, [pc, #48]	; (8002dcc <_ZN8MainViewC1Ev+0x48>)
        setX(x);
 8002d9c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
        setWidth(width);
 8002da0:	4628      	mov	r0, r5
        rect.x = x;
 8002da2:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
        setWidth(width);
 8002da6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dac:	4798      	blx	r3
        setHeight(height);
 8002dae:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8002db2:	4628      	mov	r0, r5
 8002db4:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8002db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dba:	4798      	blx	r3
 8002dbc:	1d20      	adds	r0, r4, #4
 8002dbe:	4629      	mov	r1, r5
 8002dc0:	f007 f87e 	bl	8009ec0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8002dc4:	4620      	mov	r0, r4
 8002dc6:	bd38      	pop	{r3, r4, r5, pc}
 8002dc8:	0801b050 	.word	0x0801b050
 8002dcc:	0021009d 	.word	0x0021009d

08002dd0 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	6002      	str	r2, [r0, #0]
{
}
 8002dd4:	4770      	bx	lr

08002dd6 <_ZN5Model4tickEv>:

void Model::tick()
{
}
 8002dd6:	4770      	bx	lr

08002dd8 <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8002dd8:	f240 1301 	movw	r3, #257	; 0x101
  Capabilities->Gesture    = 1;
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8002ddc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0

  return FT5336_OK;
}
 8002de0:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 8002de2:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8002de4:	2305      	movs	r3, #5
 8002de6:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8002de8:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002dec:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 8002df0:	4770      	bx	lr

08002df2 <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
 8002df2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002df6:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 8002df8:	bf04      	itt	eq
 8002dfa:	2300      	moveq	r3, #0
 8002dfc:	f880 3024 	strbeq.w	r3, [r0, #36]	; 0x24
  }

  return ret;
}
 8002e00:	2000      	movs	r0, #0
 8002e02:	4770      	bx	lr

08002e04 <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 8002e04:	2000      	movs	r0, #0
 8002e06:	4770      	bx	lr

08002e08 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8002e08:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002e0a:	6904      	ldr	r4, [r0, #16]
 8002e0c:	8900      	ldrh	r0, [r0, #8]
 8002e0e:	46a4      	mov	ip, r4
}
 8002e10:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002e14:	4760      	bx	ip

08002e16 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8002e16:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002e18:	68c4      	ldr	r4, [r0, #12]
 8002e1a:	8900      	ldrh	r0, [r0, #8]
 8002e1c:	46a4      	mov	ip, r4
}
 8002e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002e22:	4760      	bx	ip

08002e24 <FT5336_GestureConfig>:
{
 8002e24:	e92d 4320 	stmdb	sp!, {r5, r8, r9, lr}
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8002e28:	f100 0818 	add.w	r8, r0, #24
{
 8002e2c:	4689      	mov	r9, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8002e2e:	7809      	ldrb	r1, [r1, #0]
 8002e30:	4640      	mov	r0, r8
 8002e32:	f000 f8fb 	bl	800302c <ft5336_radian_value>
 8002e36:	4605      	mov	r5, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8002e38:	f899 1004 	ldrb.w	r1, [r9, #4]
 8002e3c:	4640      	mov	r0, r8
 8002e3e:	f000 f901 	bl	8003044 <ft5336_offset_left_right>
 8002e42:	4405      	add	r5, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8002e44:	f899 1008 	ldrb.w	r1, [r9, #8]
 8002e48:	4640      	mov	r0, r8
 8002e4a:	f000 f907 	bl	800305c <ft5336_offset_up_down>
 8002e4e:	4405      	add	r5, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8002e50:	f899 100c 	ldrb.w	r1, [r9, #12]
 8002e54:	4640      	mov	r0, r8
 8002e56:	f000 f90d 	bl	8003074 <ft5336_disatnce_left_right>
 8002e5a:	4405      	add	r5, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8002e5c:	f899 1010 	ldrb.w	r1, [r9, #16]
 8002e60:	4640      	mov	r0, r8
 8002e62:	f000 f913 	bl	800308c <ft5336_distance_up_down>
 8002e66:	4405      	add	r5, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8002e68:	f899 1014 	ldrb.w	r1, [r9, #20]
 8002e6c:	4640      	mov	r0, r8
 8002e6e:	f000 f919 	bl	80030a4 <ft5336_distance_zoom>
  if(ret != FT5336_OK)
 8002e72:	42c5      	cmn	r5, r0
}
 8002e74:	bf14      	ite	ne
 8002e76:	f04f 30ff 	movne.w	r0, #4294967295
 8002e7a:	2000      	moveq	r0, #0
 8002e7c:	e8bd 8320 	ldmia.w	sp!, {r5, r8, r9, pc}

08002e80 <FT5336_ReadID>:
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8002e80:	3018      	adds	r0, #24
 8002e82:	f000 b927 	b.w	80030d4 <ft5336_chip_id>

08002e86 <FT5336_GetMultiTouchState>:
{
 8002e86:	b570      	push	{r4, r5, r6, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8002e88:	f100 0518 	add.w	r5, r0, #24
{
 8002e8c:	b088      	sub	sp, #32
 8002e8e:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8002e90:	4628      	mov	r0, r5
 8002e92:	4669      	mov	r1, sp
 8002e94:	f000 f8bd 	bl	8003012 <ft5336_td_status>
 8002e98:	bb98      	cbnz	r0, 8002f02 <FT5336_GetMultiTouchState+0x7c>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8002e9a:	f89d 3000 	ldrb.w	r3, [sp]
      ret = (int32_t)nb_touch;
 8002e9e:	2b05      	cmp	r3, #5
 8002ea0:	bf98      	it	ls
 8002ea2:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8002ea4:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8002ea6:	231e      	movs	r3, #30
 8002ea8:	466a      	mov	r2, sp
 8002eaa:	2103      	movs	r1, #3
 8002eac:	4628      	mov	r0, r5
 8002eae:	f000 f89d 	bl	8002fec <ft5336_read_reg>
 8002eb2:	bb48      	cbnz	r0, 8002f08 <FT5336_GetMultiTouchState+0x82>
 8002eb4:	466b      	mov	r3, sp
 8002eb6:	1d22      	adds	r2, r4, #4
 8002eb8:	f104 0118 	add.w	r1, r4, #24
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8002ebc:	781d      	ldrb	r5, [r3, #0]
 8002ebe:	3306      	adds	r3, #6
 8002ec0:	f813 6c05 	ldrb.w	r6, [r3, #-5]
 8002ec4:	022c      	lsls	r4, r5, #8
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8002ec6:	09ad      	lsrs	r5, r5, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8002ec8:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
 8002ecc:	4334      	orrs	r4, r6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8002ece:	f813 6c03 	ldrb.w	r6, [r3, #-3]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8002ed2:	f842 4b04 	str.w	r4, [r2], #4
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8002ed6:	4291      	cmp	r1, r2
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8002ed8:	f813 4c04 	ldrb.w	r4, [r3, #-4]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8002edc:	6395      	str	r5, [r2, #56]	; 0x38
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8002ede:	ea4f 2404 	mov.w	r4, r4, lsl #8
 8002ee2:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
 8002ee6:	ea44 0406 	orr.w	r4, r4, r6
 8002eea:	6114      	str	r4, [r2, #16]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 8002eec:	f813 4c02 	ldrb.w	r4, [r3, #-2]
 8002ef0:	6254      	str	r4, [r2, #36]	; 0x24
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8002ef2:	f813 4c01 	ldrb.w	r4, [r3, #-1]
 8002ef6:	ea4f 1414 	mov.w	r4, r4, lsr #4
 8002efa:	64d4      	str	r4, [r2, #76]	; 0x4c
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8002efc:	d1de      	bne.n	8002ebc <FT5336_GetMultiTouchState+0x36>
}
 8002efe:	b008      	add	sp, #32
 8002f00:	bd70      	pop	{r4, r5, r6, pc}
    ret = FT5336_ERROR;
 8002f02:	f04f 30ff 	mov.w	r0, #4294967295
 8002f06:	e7cd      	b.n	8002ea4 <FT5336_GetMultiTouchState+0x1e>
    ret = FT5336_ERROR;
 8002f08:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8002f0c:	e7f7      	b.n	8002efe <FT5336_GetMultiTouchState+0x78>

08002f0e <FT5336_GetGesture>:
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8002f0e:	3018      	adds	r0, #24
 8002f10:	f000 b87a 	b.w	8003008 <ft5336_gest_id>

08002f14 <FT5336_EnableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8002f14:	2101      	movs	r1, #1
 8002f16:	3018      	adds	r0, #24
 8002f18:	f000 b8d0 	b.w	80030bc <ft5336_g_mode>

08002f1c <FT5336_DisableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	3018      	adds	r0, #24
 8002f20:	f000 b8cc 	b.w	80030bc <ft5336_g_mode>

08002f24 <FT5336_Init>:
{
 8002f24:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8002f26:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8002f2a:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8002f2c:	b96b      	cbnz	r3, 8002f4a <FT5336_Init+0x26>
    pObj->IO.Init();
 8002f2e:	6803      	ldr	r3, [r0, #0]
 8002f30:	4798      	blx	r3
    ret += FT5336_DisableIT(pObj);
 8002f32:	4620      	mov	r0, r4
 8002f34:	f7ff fff2 	bl	8002f1c <FT5336_DisableIT>
  if(ret != FT5336_OK)
 8002f38:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 8002f3a:	f04f 0301 	mov.w	r3, #1
  if(ret != FT5336_OK)
 8002f3e:	bf18      	it	ne
 8002f40:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8002f42:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if(ret != FT5336_OK)
 8002f46:	4240      	negs	r0, r0
}
 8002f48:	bd10      	pop	{r4, pc}
  int32_t ret = FT5336_OK;
 8002f4a:	2000      	movs	r0, #0
  return ret;
 8002f4c:	e7fc      	b.n	8002f48 <FT5336_Init+0x24>

08002f4e <FT5336_ClearIT>:
 8002f4e:	2000      	movs	r0, #0
 8002f50:	4770      	bx	lr

08002f52 <FT5336_GetState>:
{
 8002f52:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8002f54:	f100 0518 	add.w	r5, r0, #24
{
 8002f58:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8002f5a:	a901      	add	r1, sp, #4
 8002f5c:	4628      	mov	r0, r5
 8002f5e:	f000 f858 	bl	8003012 <ft5336_td_status>
 8002f62:	bb08      	cbnz	r0, 8002fa8 <FT5336_GetState+0x56>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8002f64:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8002f68:	2b05      	cmp	r3, #5
 8002f6a:	bf98      	it	ls
 8002f6c:	4618      	movls	r0, r3
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8002f6e:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8002f70:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8002f72:	2103      	movs	r1, #3
 8002f74:	4628      	mov	r0, r5
 8002f76:	eb0d 0203 	add.w	r2, sp, r3
 8002f7a:	f000 f837 	bl	8002fec <ft5336_read_reg>
 8002f7e:	b9b0      	cbnz	r0, 8002fae <FT5336_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8002f80:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002f84:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002f88:	021b      	lsls	r3, r3, #8
 8002f8a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002f8e:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8002f90:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8002f94:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8002f96:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002f9a:	021b      	lsls	r3, r3, #8
 8002f9c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	60a3      	str	r3, [r4, #8]
}
 8002fa4:	b003      	add	sp, #12
 8002fa6:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 8002fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fac:	e7df      	b.n	8002f6e <FT5336_GetState+0x1c>
    ret = FT5336_ERROR;
 8002fae:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8002fb2:	e7f7      	b.n	8002fa4 <FT5336_GetState+0x52>

08002fb4 <FT5336_RegisterBusIO>:
  if (pObj == NULL)
 8002fb4:	b190      	cbz	r0, 8002fdc <FT5336_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8002fb6:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8002fb8:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002fba:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8002fbc:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8002fbe:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8002fc0:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002fc2:	68ca      	ldr	r2, [r1, #12]
 8002fc4:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002fc6:	690a      	ldr	r2, [r1, #16]
 8002fc8:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8002fca:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8002fcc:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 8002fce:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8002fd0:	4a04      	ldr	r2, [pc, #16]	; (8002fe4 <FT5336_RegisterBusIO+0x30>)
 8002fd2:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8002fd4:	4a04      	ldr	r2, [pc, #16]	; (8002fe8 <FT5336_RegisterBusIO+0x34>)
 8002fd6:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8002fd8:	b103      	cbz	r3, 8002fdc <FT5336_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8002fda:	4718      	bx	r3
}
 8002fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	08002e09 	.word	0x08002e09
 8002fe8:	08002e17 	.word	0x08002e17

08002fec <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8002fec:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8002fee:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8002ff2:	46a4      	mov	ip, r4
}
 8002ff4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8002ff8:	4760      	bx	ip

08002ffa <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8002ffa:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8002ffc:	6804      	ldr	r4, [r0, #0]
 8002ffe:	6880      	ldr	r0, [r0, #8]
 8003000:	46a4      	mov	ip, r4
}
 8003002:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8003006:	4760      	bx	ip

08003008 <ft5336_gest_id>:
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8003008:	2301      	movs	r3, #1
{
 800300a:	460a      	mov	r2, r1
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 800300c:	4619      	mov	r1, r3
 800300e:	f7ff bfed 	b.w	8002fec <ft5336_read_reg>

08003012 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8003012:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8003014:	460a      	mov	r2, r1
{
 8003016:	460c      	mov	r4, r1
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8003018:	2301      	movs	r3, #1
 800301a:	2102      	movs	r1, #2
 800301c:	f7ff ffe6 	bl	8002fec <ft5336_read_reg>
  
  if(ret == 0)
 8003020:	b918      	cbnz	r0, 800302a <ft5336_td_status+0x18>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8003022:	7823      	ldrb	r3, [r4, #0]
 8003024:	f003 030f 	and.w	r3, r3, #15
 8003028:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 800302a:	bd10      	pop	{r4, pc}

0800302c <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 800302c:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 800302e:	2301      	movs	r3, #1
{
 8003030:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8003034:	f10d 0207 	add.w	r2, sp, #7
 8003038:	2191      	movs	r1, #145	; 0x91
 800303a:	f7ff ffde 	bl	8002ffa <ft5336_write_reg>
}
 800303e:	b003      	add	sp, #12
 8003040:	f85d fb04 	ldr.w	pc, [sp], #4

08003044 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8003044:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8003046:	2301      	movs	r3, #1
{
 8003048:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 800304c:	f10d 0207 	add.w	r2, sp, #7
 8003050:	2192      	movs	r1, #146	; 0x92
 8003052:	f7ff ffd2 	bl	8002ffa <ft5336_write_reg>
}
 8003056:	b003      	add	sp, #12
 8003058:	f85d fb04 	ldr.w	pc, [sp], #4

0800305c <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800305c:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 800305e:	2301      	movs	r3, #1
{
 8003060:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8003064:	f10d 0207 	add.w	r2, sp, #7
 8003068:	2193      	movs	r1, #147	; 0x93
 800306a:	f7ff ffc6 	bl	8002ffa <ft5336_write_reg>
}
 800306e:	b003      	add	sp, #12
 8003070:	f85d fb04 	ldr.w	pc, [sp], #4

08003074 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8003074:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8003076:	2301      	movs	r3, #1
{
 8003078:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 800307c:	f10d 0207 	add.w	r2, sp, #7
 8003080:	2194      	movs	r1, #148	; 0x94
 8003082:	f7ff ffba 	bl	8002ffa <ft5336_write_reg>
}
 8003086:	b003      	add	sp, #12
 8003088:	f85d fb04 	ldr.w	pc, [sp], #4

0800308c <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800308c:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 800308e:	2301      	movs	r3, #1
{
 8003090:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8003094:	f10d 0207 	add.w	r2, sp, #7
 8003098:	2195      	movs	r1, #149	; 0x95
 800309a:	f7ff ffae 	bl	8002ffa <ft5336_write_reg>
}
 800309e:	b003      	add	sp, #12
 80030a0:	f85d fb04 	ldr.w	pc, [sp], #4

080030a4 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 80030a4:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 80030a6:	2301      	movs	r3, #1
{
 80030a8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 80030ac:	f10d 0207 	add.w	r2, sp, #7
 80030b0:	2196      	movs	r1, #150	; 0x96
 80030b2:	f7ff ffa2 	bl	8002ffa <ft5336_write_reg>
}
 80030b6:	b003      	add	sp, #12
 80030b8:	f85d fb04 	ldr.w	pc, [sp], #4

080030bc <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 80030bc:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 80030be:	2301      	movs	r3, #1
{
 80030c0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 80030c4:	f10d 0207 	add.w	r2, sp, #7
 80030c8:	21a4      	movs	r1, #164	; 0xa4
 80030ca:	f7ff ff96 	bl	8002ffa <ft5336_write_reg>
}
 80030ce:	b003      	add	sp, #12
 80030d0:	f85d fb04 	ldr.w	pc, [sp], #4

080030d4 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 80030d4:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 80030d6:	2301      	movs	r3, #1
 80030d8:	21a8      	movs	r1, #168	; 0xa8
 80030da:	f7ff bf87 	b.w	8002fec <ft5336_read_reg>

080030de <MX25LM51245G_GetFlashInfo>:
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 80030de:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80030e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 80030e6:	f44f 7180 	mov.w	r1, #256	; 0x100
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 80030ea:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 80030ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030f6:	e9c0 3202 	strd	r3, r2, [r0, #8]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 80030fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 80030fe:	e9c0 3204 	strd	r3, r2, [r0, #16]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8003102:	6183      	str	r3, [r0, #24]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 8003104:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003108:	e9c0 1307 	strd	r1, r3, [r0, #28]

  return MX25LM51245G_OK;
};
 800310c:	2000      	movs	r0, #0
 800310e:	4770      	bx	lr

08003110 <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8003110:	b570      	push	{r4, r5, r6, lr}
 8003112:	b09a      	sub	sp, #104	; 0x68
 8003114:	460d      	mov	r5, r1
 8003116:	4606      	mov	r6, r0
  OSPI_RegularCmdTypeDef  s_command = {0};
 8003118:	2100      	movs	r1, #0
{
 800311a:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef  s_command = {0};
 800311c:	a806      	add	r0, sp, #24
 800311e:	2250      	movs	r2, #80	; 0x50
 8003120:	f015 ff38 	bl	8018f94 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8003124:	2214      	movs	r2, #20
 8003126:	2100      	movs	r1, #0
 8003128:	a801      	add	r0, sp, #4
 800312a:	f015 ff33 	bl	8018f94 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800312e:	b92d      	cbnz	r5, 800313c <MX25LM51245G_AutoPollingMemReady+0x2c>
 8003130:	2c01      	cmp	r4, #1
 8003132:	d103      	bne.n	800313c <MX25LM51245G_AutoPollingMemReady+0x2c>
  {
    return MX25LM51245G_ERROR;
 8003134:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8003138:	b01a      	add	sp, #104	; 0x68
 800313a:	bd70      	pop	{r4, r5, r6, pc}
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800313c:	2300      	movs	r3, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800313e:	a906      	add	r1, sp, #24
 8003140:	4630      	mov	r0, r6
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003142:	429d      	cmp	r5, r3
  s_command.Address            = 0U;
 8003144:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8003146:	9311      	str	r3, [sp, #68]	; 0x44
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003148:	bf0c      	ite	eq
 800314a:	2201      	moveq	r2, #1
 800314c:	2204      	movne	r2, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800314e:	2c01      	cmp	r4, #1
  s_config.Match         = 0U;
 8003150:	9301      	str	r3, [sp, #4]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003152:	9209      	str	r2, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003154:	bf14      	ite	ne
 8003156:	461a      	movne	r2, r3
 8003158:	2208      	moveq	r2, #8
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800315a:	429d      	cmp	r5, r3
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800315c:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800315e:	bf0c      	ite	eq
 8003160:	461a      	moveq	r2, r3
 8003162:	2210      	movne	r2, #16
 8003164:	920a      	str	r2, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8003166:	f240 52fa 	movw	r2, #1530	; 0x5fa
 800316a:	bf08      	it	eq
 800316c:	2205      	moveq	r2, #5
 800316e:	9208      	str	r2, [sp, #32]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8003170:	bf0c      	ite	eq
 8003172:	461a      	moveq	r2, r3
 8003174:	f44f 6280 	movne.w	r2, #1024	; 0x400
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003178:	2c01      	cmp	r4, #1
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800317a:	920d      	str	r2, [sp, #52]	; 0x34
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800317c:	bf14      	ite	ne
 800317e:	461a      	movne	r2, r3
 8003180:	f44f 6200 	moveq.w	r2, #2048	; 0x800
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003184:	429d      	cmp	r5, r3
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003186:	920f      	str	r2, [sp, #60]	; 0x3c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8003188:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800318c:	920e      	str	r2, [sp, #56]	; 0x38
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800318e:	bf0c      	ite	eq
 8003190:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
 8003194:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8003198:	2c01      	cmp	r4, #1
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800319a:	9214      	str	r2, [sp, #80]	; 0x50
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800319c:	bf14      	ite	ne
 800319e:	461a      	movne	r2, r3
 80031a0:	f04f 6200 	moveq.w	r2, #134217728	; 0x8000000
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80031a4:	429d      	cmp	r5, r3
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80031a6:	9216      	str	r2, [sp, #88]	; 0x58
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80031a8:	bf0c      	ite	eq
 80031aa:	461a      	moveq	r2, r3
 80031ac:	2205      	movne	r2, #5
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80031ae:	2c01      	cmp	r4, #1
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80031b0:	9217      	str	r2, [sp, #92]	; 0x5c
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80031b2:	bf0c      	ite	eq
 80031b4:	2202      	moveq	r2, #2
 80031b6:	2201      	movne	r2, #1
 80031b8:	9215      	str	r2, [sp, #84]	; 0x54
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80031ba:	bf14      	ite	ne
 80031bc:	461a      	movne	r2, r3
 80031be:	f04f 5200 	moveq.w	r2, #536870912	; 0x20000000
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80031c2:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  s_config.Mask          = MX25LM51245G_SR_WIP;
 80031c6:	2201      	movs	r2, #1
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80031c8:	e9cd 3306 	strd	r3, r3, [sp, #24]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 80031cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80031d0:	2210      	movs	r2, #16
 80031d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031d6:	e9cd 3204 	strd	r3, r2, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80031da:	f241 3288 	movw	r2, #5000	; 0x1388
 80031de:	f002 fbd0 	bl	8005982 <HAL_OSPI_Command>
 80031e2:	2800      	cmp	r0, #0
 80031e4:	d1a6      	bne.n	8003134 <MX25LM51245G_AutoPollingMemReady+0x24>
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80031e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ea:	a901      	add	r1, sp, #4
 80031ec:	4630      	mov	r0, r6
 80031ee:	f002 fd05 	bl	8005bfc <HAL_OSPI_AutoPolling>
 80031f2:	3800      	subs	r0, #0
 80031f4:	bf18      	it	ne
 80031f6:	2001      	movne	r0, #1
 80031f8:	4240      	negs	r0, r0
 80031fa:	e79d      	b.n	8003138 <MX25LM51245G_AutoPollingMemReady+0x28>

080031fc <MX25LM51245G_EnableSTRMemoryMappedMode>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableSTRMemoryMappedMode(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 80031fc:	b570      	push	{r4, r5, r6, lr}
 80031fe:	b096      	sub	sp, #88	; 0x58
 8003200:	460c      	mov	r4, r1
 8003202:	4606      	mov	r6, r0
 8003204:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef      s_command = {0};
 8003206:	2100      	movs	r1, #0
 8003208:	2250      	movs	r2, #80	; 0x50
 800320a:	a802      	add	r0, sp, #8
 800320c:	f015 fec2 	bl	8018f94 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8003210:	2300      	movs	r3, #0

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 8003212:	2c01      	cmp	r4, #1
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8003214:	e9cd 3300 	strd	r3, r3, [sp]
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 8003218:	d104      	bne.n	8003224 <MX25LM51245G_EnableSTRMemoryMappedMode+0x28>
 800321a:	b91d      	cbnz	r5, 8003224 <MX25LM51245G_EnableSTRMemoryMappedMode+0x28>
  {
    return MX25LM51245G_ERROR;
 800321c:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8003220:	b016      	add	sp, #88	; 0x58
 8003222:	bd70      	pop	{r4, r5, r6, pc}
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8003224:	2300      	movs	r3, #0
 8003226:	2101      	movs	r1, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003228:	429c      	cmp	r4, r3
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800322a:	9307      	str	r3, [sp, #28]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800322c:	bf0c      	ite	eq
 800322e:	2201      	moveq	r2, #1
 8003230:	2204      	movne	r2, #4
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8003232:	e9cd 1302 	strd	r1, r3, [sp, #8]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003236:	bf18      	it	ne
 8003238:	2310      	movne	r3, #16
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800323a:	9205      	str	r2, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800323c:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 800323e:	d146      	bne.n	80032ce <MX25LM51245G_EnableSTRMemoryMappedMode+0xd2>
 8003240:	2d00      	cmp	r5, #0
 8003242:	bf0c      	ite	eq
 8003244:	230b      	moveq	r3, #11
 8003246:	230c      	movne	r3, #12
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8003248:	2c00      	cmp	r4, #0
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 800324a:	9304      	str	r3, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800324c:	a902      	add	r1, sp, #8
 800324e:	4630      	mov	r0, r6
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8003250:	bf0c      	ite	eq
 8003252:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8003256:	f44f 6380 	movne.w	r3, #1024	; 0x400
 800325a:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800325c:	2300      	movs	r3, #0
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 800325e:	429d      	cmp	r5, r3
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003260:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8003262:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8003264:	bf0c      	ite	eq
 8003266:	f44f 5200 	moveq.w	r2, #8192	; 0x2000
 800326a:	f44f 5240 	movne.w	r2, #12288	; 0x3000
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800326e:	429c      	cmp	r4, r3
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8003270:	9312      	str	r3, [sp, #72]	; 0x48
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8003272:	920a      	str	r2, [sp, #40]	; 0x28
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003274:	bf0c      	ite	eq
 8003276:	f04f 7280 	moveq.w	r2, #16777216	; 0x1000000
 800327a:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800327e:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003280:	9210      	str	r2, [sp, #64]	; 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8003282:	bf0c      	ite	eq
 8003284:	2208      	moveq	r2, #8
 8003286:	2206      	movne	r2, #6
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8003288:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800328c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003290:	f002 fb77 	bl	8005982 <HAL_OSPI_Command>
 8003294:	2800      	cmp	r0, #0
 8003296:	d1c1      	bne.n	800321c <MX25LM51245G_EnableSTRMemoryMappedMode+0x20>
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 8003298:	2302      	movs	r3, #2
 800329a:	9302      	str	r3, [sp, #8]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 800329c:	b9d4      	cbnz	r4, 80032d4 <MX25LM51245G_EnableSTRMemoryMappedMode+0xd8>
 800329e:	2d00      	cmp	r5, #0
 80032a0:	bf18      	it	ne
 80032a2:	2312      	movne	r3, #18
 80032a4:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles        = 0U;
 80032a6:	2300      	movs	r3, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80032a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ac:	a902      	add	r1, sp, #8
 80032ae:	4630      	mov	r0, r6
  s_command.DummyCycles        = 0U;
 80032b0:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80032b2:	f002 fb66 	bl	8005982 <HAL_OSPI_Command>
 80032b6:	2800      	cmp	r0, #0
 80032b8:	d1b0      	bne.n	800321c <MX25LM51245G_EnableSTRMemoryMappedMode+0x20>
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 80032ba:	9000      	str	r0, [sp, #0]
  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 80032bc:	4669      	mov	r1, sp
 80032be:	4630      	mov	r0, r6
 80032c0:	f002 fcec 	bl	8005c9c <HAL_OSPI_MemoryMapped>
 80032c4:	3800      	subs	r0, #0
 80032c6:	bf18      	it	ne
 80032c8:	2001      	movne	r0, #1
 80032ca:	4240      	negs	r0, r0
 80032cc:	e7a8      	b.n	8003220 <MX25LM51245G_EnableSTRMemoryMappedMode+0x24>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 80032ce:	f64e 4313 	movw	r3, #60435	; 0xec13
 80032d2:	e7b9      	b.n	8003248 <MX25LM51245G_EnableSTRMemoryMappedMode+0x4c>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 80032d4:	f241 23ed 	movw	r3, #4845	; 0x12ed
 80032d8:	e7e4      	b.n	80032a4 <MX25LM51245G_EnableSTRMemoryMappedMode+0xa8>

080032da <MX25LM51245G_EnableDTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableDTRMemoryMappedMode(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 80032da:	b510      	push	{r4, lr}
 80032dc:	b096      	sub	sp, #88	; 0x58
 80032de:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 80032e0:	2228      	movs	r2, #40	; 0x28
 80032e2:	2100      	movs	r1, #0
 80032e4:	a808      	add	r0, sp, #32
 80032e6:	f015 fe55 	bl	8018f94 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 80032ea:	2300      	movs	r3, #0

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 80032ec:	2201      	movs	r2, #1
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 80032ee:	2008      	movs	r0, #8
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80032f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 80032f4:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80032f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 80032fc:	2204      	movs	r2, #4
 80032fe:	9205      	str	r2, [sp, #20]
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 8003300:	2210      	movs	r2, #16
 8003302:	e9cd 2006 	strd	r2, r0, [sp, #24]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 8003306:	f64e 6211 	movw	r2, #60945	; 0xee11
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800330a:	4620      	mov	r0, r4
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 800330c:	9204      	str	r2, [sp, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 800330e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003312:	9209      	str	r2, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8003314:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003318:	e9cd 210a 	strd	r2, r1, [sp, #40]	; 0x28
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 800331c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003320:	a902      	add	r1, sp, #8
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 8003322:	9210      	str	r2, [sp, #64]	; 0x40
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8003324:	2206      	movs	r2, #6
 8003326:	e9cd c212 	strd	ip, r2, [sp, #72]	; 0x48
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 800332a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800332e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003332:	f241 3288 	movw	r2, #5000	; 0x1388
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8003336:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800333a:	f002 fb22 	bl	8005982 <HAL_OSPI_Command>
 800333e:	b118      	cbz	r0, 8003348 <MX25LM51245G_EnableDTRMemoryMappedMode+0x6e>
  {
    return MX25LM51245G_ERROR;
 8003340:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8003344:	b016      	add	sp, #88	; 0x58
 8003346:	bd10      	pop	{r4, pc}
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8003348:	2302      	movs	r3, #2
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800334a:	f241 3288 	movw	r2, #5000	; 0x1388
 800334e:	a902      	add	r1, sp, #8
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8003350:	9302      	str	r3, [sp, #8]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8003352:	f241 23ed 	movw	r3, #4845	; 0x12ed
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 8003356:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800335a:	4620      	mov	r0, r4
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 800335c:	9304      	str	r3, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800335e:	f002 fb10 	bl	8005982 <HAL_OSPI_Command>
 8003362:	2800      	cmp	r0, #0
 8003364:	d1ec      	bne.n	8003340 <MX25LM51245G_EnableDTRMemoryMappedMode+0x66>
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8003366:	9000      	str	r0, [sp, #0]
  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8003368:	4669      	mov	r1, sp
 800336a:	4620      	mov	r0, r4
 800336c:	f002 fc96 	bl	8005c9c <HAL_OSPI_MemoryMapped>
 8003370:	3800      	subs	r0, #0
 8003372:	bf18      	it	ne
 8003374:	2001      	movne	r0, #1
 8003376:	4240      	negs	r0, r0
 8003378:	e7e4      	b.n	8003344 <MX25LM51245G_EnableDTRMemoryMappedMode+0x6a>

0800337a <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800337a:	b570      	push	{r4, r5, r6, lr}
 800337c:	b09a      	sub	sp, #104	; 0x68
 800337e:	460c      	mov	r4, r1
 8003380:	4606      	mov	r6, r0
  OSPI_RegularCmdTypeDef     s_command = {0};
 8003382:	2100      	movs	r1, #0
{
 8003384:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef     s_command = {0};
 8003386:	a806      	add	r0, sp, #24
 8003388:	2250      	movs	r2, #80	; 0x50
 800338a:	f015 fe03 	bl	8018f94 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 800338e:	2214      	movs	r2, #20
 8003390:	2100      	movs	r1, #0
 8003392:	a801      	add	r0, sp, #4
 8003394:	f015 fdfe 	bl	8018f94 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8003398:	b92c      	cbnz	r4, 80033a6 <MX25LM51245G_WriteEnable+0x2c>
 800339a:	2d01      	cmp	r5, #1
 800339c:	d103      	bne.n	80033a6 <MX25LM51245G_WriteEnable+0x2c>
  {
    return MX25LM51245G_ERROR;
 800339e:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80033a2:	b01a      	add	sp, #104	; 0x68
 80033a4:	bd70      	pop	{r4, r5, r6, pc}
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80033a6:	2300      	movs	r3, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80033a8:	a906      	add	r1, sp, #24
 80033aa:	4630      	mov	r0, r6
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80033ac:	429c      	cmp	r4, r3
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80033ae:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80033b0:	9311      	str	r3, [sp, #68]	; 0x44
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80033b2:	bf0c      	ite	eq
 80033b4:	2201      	moveq	r2, #1
 80033b6:	2204      	movne	r2, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80033b8:	2d01      	cmp	r5, #1
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 80033ba:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80033bc:	9209      	str	r2, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80033be:	bf0c      	ite	eq
 80033c0:	2208      	moveq	r2, #8
 80033c2:	461a      	movne	r2, r3
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80033c4:	429c      	cmp	r4, r3
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80033c6:	9319      	str	r3, [sp, #100]	; 0x64
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80033c8:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80033ca:	bf0c      	ite	eq
 80033cc:	461a      	moveq	r2, r3
 80033ce:	2210      	movne	r2, #16
 80033d0:	920a      	str	r2, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 80033d2:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80033d6:	bf08      	it	eq
 80033d8:	2206      	moveq	r2, #6
 80033da:	9208      	str	r2, [sp, #32]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80033dc:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80033e0:	e9cd 3306 	strd	r3, r3, [sp, #24]
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80033e4:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80033e8:	f002 facb 	bl	8005982 <HAL_OSPI_Command>
 80033ec:	2800      	cmp	r0, #0
 80033ee:	d1d6      	bne.n	800339e <MX25LM51245G_WriteEnable+0x24>
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80033f0:	2c00      	cmp	r4, #0
 80033f2:	f240 53fa 	movw	r3, #1530	; 0x5fa
  s_command.Address        = 0U;
 80033f6:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80033f8:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80033fc:	bf08      	it	eq
 80033fe:	2305      	moveq	r3, #5
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003400:	a906      	add	r1, sp, #24
 8003402:	4630      	mov	r0, r6
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8003404:	9308      	str	r3, [sp, #32]
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8003406:	bf0c      	ite	eq
 8003408:	2300      	moveq	r3, #0
 800340a:	f44f 6380 	movne.w	r3, #1024	; 0x400
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800340e:	2d01      	cmp	r5, #1
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8003410:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003412:	bf0c      	ite	eq
 8003414:	f44f 6300 	moveq.w	r3, #2048	; 0x800
 8003418:	2300      	movne	r3, #0
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800341a:	2c00      	cmp	r4, #0
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800341c:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 800341e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003422:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003424:	bf0c      	ite	eq
 8003426:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 800342a:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800342e:	2d01      	cmp	r5, #1
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003430:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8003432:	bf0c      	ite	eq
 8003434:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
 8003438:	2300      	movne	r3, #0
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800343a:	2c00      	cmp	r4, #0
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800343c:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800343e:	bf0c      	ite	eq
 8003440:	2300      	moveq	r3, #0
 8003442:	2305      	movne	r3, #5
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8003444:	2d01      	cmp	r5, #1
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8003446:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8003448:	bf0c      	ite	eq
 800344a:	2302      	moveq	r3, #2
 800344c:	2301      	movne	r3, #1
 800344e:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8003450:	bf0c      	ite	eq
 8003452:	f04f 5300 	moveq.w	r3, #536870912	; 0x20000000
 8003456:	2300      	movne	r3, #0
 8003458:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800345a:	f002 fa92 	bl	8005982 <HAL_OSPI_Command>
 800345e:	2800      	cmp	r0, #0
 8003460:	d19d      	bne.n	800339e <MX25LM51245G_WriteEnable+0x24>
  s_config.Match           = 2U;
 8003462:	2302      	movs	r3, #2
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8003464:	2210      	movs	r2, #16
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 8003466:	9003      	str	r0, [sp, #12]
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003468:	a901      	add	r1, sp, #4
 800346a:	4630      	mov	r0, r6
  s_config.Mask            = 2U;
 800346c:	e9cd 3301 	strd	r3, r3, [sp, #4]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8003470:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003474:	e9cd 3204 	strd	r3, r2, [sp, #16]
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003478:	f241 3288 	movw	r2, #5000	; 0x1388
 800347c:	f002 fbbe 	bl	8005bfc <HAL_OSPI_AutoPolling>
 8003480:	3800      	subs	r0, #0
 8003482:	bf18      	it	ne
 8003484:	2001      	movne	r0, #1
 8003486:	4240      	negs	r0, r0
 8003488:	e78b      	b.n	80033a2 <MX25LM51245G_WriteEnable+0x28>

0800348a <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 800348a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800348c:	b095      	sub	sp, #84	; 0x54
 800348e:	460d      	mov	r5, r1
 8003490:	4606      	mov	r6, r0
 8003492:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8003494:	2100      	movs	r1, #0
 8003496:	2250      	movs	r2, #80	; 0x50
 8003498:	4668      	mov	r0, sp
{
 800349a:	461f      	mov	r7, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 800349c:	f015 fd7a 	bl	8018f94 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80034a0:	b92d      	cbnz	r5, 80034ae <MX25LM51245G_WriteCfg2Register+0x24>
 80034a2:	2c01      	cmp	r4, #1
 80034a4:	d103      	bne.n	80034ae <MX25LM51245G_WriteCfg2Register+0x24>
  {
    return MX25LM51245G_ERROR;
 80034a6:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80034aa:	b015      	add	sp, #84	; 0x54
 80034ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80034ae:	2200      	movs	r2, #0
  s_command.Address            = WriteAddr;
 80034b0:	9706      	str	r7, [sp, #24]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80034b2:	4295      	cmp	r5, r2
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80034b4:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80034b6:	bf0c      	ite	eq
 80034b8:	2301      	moveq	r3, #1
 80034ba:	2304      	movne	r3, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80034bc:	2c01      	cmp	r4, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80034be:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80034c0:	bf0c      	ite	eq
 80034c2:	2308      	moveq	r3, #8
 80034c4:	4613      	movne	r3, r2
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80034c6:	4295      	cmp	r5, r2
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80034c8:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80034ca:	bf0c      	ite	eq
 80034cc:	4613      	moveq	r3, r2
 80034ce:	2310      	movne	r3, #16
 80034d0:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 80034d2:	f247 238d 	movw	r3, #29325	; 0x728d
 80034d6:	bf08      	it	eq
 80034d8:	2372      	moveq	r3, #114	; 0x72
 80034da:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80034dc:	bf0c      	ite	eq
 80034de:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80034e2:	f44f 6380 	movne.w	r3, #1024	; 0x400
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80034e6:	2c01      	cmp	r4, #1
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80034e8:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80034ea:	bf0c      	ite	eq
 80034ec:	f44f 6300 	moveq.w	r3, #2048	; 0x800
 80034f0:	4613      	movne	r3, r2
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80034f2:	4295      	cmp	r5, r2
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80034f4:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80034f6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80034fa:	9308      	str	r3, [sp, #32]
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80034fc:	bf0c      	ite	eq
 80034fe:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 8003502:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8003506:	2c01      	cmp	r4, #1
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003508:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800350a:	bf0c      	ite	eq
 800350c:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
 8003510:	4613      	movne	r3, r2
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8003512:	e9cd 2200 	strd	r2, r2, [sp]
  s_command.DummyCycles        = 0U;
 8003516:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 800351a:	b1d5      	cbz	r5, 8003552 <MX25LM51245G_WriteCfg2Register+0xc8>
 800351c:	2c01      	cmp	r4, #1
 800351e:	bf14      	ite	ne
 8003520:	2301      	movne	r3, #1
 8003522:	2302      	moveq	r3, #2
 8003524:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8003526:	2300      	movs	r3, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003528:	f241 3288 	movw	r2, #5000	; 0x1388
 800352c:	4669      	mov	r1, sp
 800352e:	4630      	mov	r0, r6
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8003530:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003534:	f002 fa25 	bl	8005982 <HAL_OSPI_Command>
 8003538:	2800      	cmp	r0, #0
 800353a:	d1b4      	bne.n	80034a6 <MX25LM51245G_WriteCfg2Register+0x1c>
  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800353c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003540:	a91a      	add	r1, sp, #104	; 0x68
 8003542:	4630      	mov	r0, r6
 8003544:	f002 fac8 	bl	8005ad8 <HAL_OSPI_Transmit>
 8003548:	3800      	subs	r0, #0
 800354a:	bf18      	it	ne
 800354c:	2001      	movne	r0, #1
 800354e:	4240      	negs	r0, r0
 8003550:	e7ab      	b.n	80034aa <MX25LM51245G_WriteCfg2Register+0x20>
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 8003552:	2301      	movs	r3, #1
 8003554:	e7e6      	b.n	8003524 <MX25LM51245G_WriteCfg2Register+0x9a>

08003556 <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 8003556:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003558:	b095      	sub	sp, #84	; 0x54
 800355a:	460d      	mov	r5, r1
 800355c:	4606      	mov	r6, r0
 800355e:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8003560:	2100      	movs	r1, #0
 8003562:	2250      	movs	r2, #80	; 0x50
 8003564:	4668      	mov	r0, sp
{
 8003566:	461f      	mov	r7, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 8003568:	f015 fd14 	bl	8018f94 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800356c:	b92d      	cbnz	r5, 800357a <MX25LM51245G_ReadCfg2Register+0x24>
 800356e:	2c01      	cmp	r4, #1
 8003570:	d103      	bne.n	800357a <MX25LM51245G_ReadCfg2Register+0x24>
  {
    return MX25LM51245G_ERROR;
 8003572:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8003576:	b015      	add	sp, #84	; 0x54
 8003578:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800357a:	2200      	movs	r2, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800357c:	4669      	mov	r1, sp
 800357e:	4630      	mov	r0, r6
  s_command.Address            = ReadAddr;
 8003580:	9706      	str	r7, [sp, #24]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003582:	4295      	cmp	r5, r2
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8003584:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003586:	bf0c      	ite	eq
 8003588:	2301      	moveq	r3, #1
 800358a:	2304      	movne	r3, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800358c:	2c01      	cmp	r4, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800358e:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003590:	bf14      	ite	ne
 8003592:	4613      	movne	r3, r2
 8003594:	2308      	moveq	r3, #8
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003596:	4295      	cmp	r5, r2
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003598:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800359a:	bf0c      	ite	eq
 800359c:	4613      	moveq	r3, r2
 800359e:	2310      	movne	r3, #16
 80035a0:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 80035a2:	f247 138e 	movw	r3, #29070	; 0x718e
 80035a6:	bf08      	it	eq
 80035a8:	2371      	moveq	r3, #113	; 0x71
 80035aa:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80035ac:	bf0c      	ite	eq
 80035ae:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80035b2:	f44f 6380 	movne.w	r3, #1024	; 0x400
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80035b6:	2c01      	cmp	r4, #1
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80035b8:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80035ba:	bf14      	ite	ne
 80035bc:	4613      	movne	r3, r2
 80035be:	f44f 6300 	moveq.w	r3, #2048	; 0x800
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80035c2:	4295      	cmp	r5, r2
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80035c4:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80035c6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80035ca:	9308      	str	r3, [sp, #32]
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80035cc:	bf0c      	ite	eq
 80035ce:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 80035d2:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80035d6:	2c01      	cmp	r4, #1
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80035d8:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80035da:	bf14      	ite	ne
 80035dc:	4613      	movne	r3, r2
 80035de:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80035e2:	4295      	cmp	r5, r2
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80035e4:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80035e6:	bf0c      	ite	eq
 80035e8:	4613      	moveq	r3, r2
 80035ea:	2305      	movne	r3, #5
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80035ec:	2c01      	cmp	r4, #1
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80035ee:	9311      	str	r3, [sp, #68]	; 0x44
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80035f0:	bf0c      	ite	eq
 80035f2:	2302      	moveq	r3, #2
 80035f4:	2301      	movne	r3, #1
 80035f6:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80035f8:	bf14      	ite	ne
 80035fa:	4613      	movne	r3, r2
 80035fc:	f04f 5300 	moveq.w	r3, #536870912	; 0x20000000
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8003600:	e9cd 2200 	strd	r2, r2, [sp]
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8003604:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003608:	f241 3288 	movw	r2, #5000	; 0x1388
 800360c:	f002 f9b9 	bl	8005982 <HAL_OSPI_Command>
 8003610:	2800      	cmp	r0, #0
 8003612:	d1ae      	bne.n	8003572 <MX25LM51245G_ReadCfg2Register+0x1c>
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003614:	f241 3288 	movw	r2, #5000	; 0x1388
 8003618:	991a      	ldr	r1, [sp, #104]	; 0x68
 800361a:	4630      	mov	r0, r6
 800361c:	f002 fa9c 	bl	8005b58 <HAL_OSPI_Receive>
 8003620:	3800      	subs	r0, #0
 8003622:	bf18      	it	ne
 8003624:	2001      	movne	r0, #1
 8003626:	4240      	negs	r0, r0
 8003628:	e7a5      	b.n	8003576 <MX25LM51245G_ReadCfg2Register+0x20>

0800362a <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800362a:	b570      	push	{r4, r5, r6, lr}
 800362c:	b094      	sub	sp, #80	; 0x50
 800362e:	460c      	mov	r4, r1
 8003630:	4606      	mov	r6, r0
 8003632:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8003634:	2100      	movs	r1, #0
 8003636:	2250      	movs	r2, #80	; 0x50
 8003638:	4668      	mov	r0, sp
 800363a:	f015 fcab 	bl	8018f94 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800363e:	b90c      	cbnz	r4, 8003644 <MX25LM51245G_ResetEnable+0x1a>
 8003640:	2d01      	cmp	r5, #1
 8003642:	d028      	beq.n	8003696 <MX25LM51245G_ResetEnable+0x6c>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8003644:	2300      	movs	r3, #0
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003646:	4669      	mov	r1, sp
 8003648:	4630      	mov	r0, r6
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800364a:	429c      	cmp	r4, r3
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800364c:	9307      	str	r3, [sp, #28]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800364e:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003650:	bf0c      	ite	eq
 8003652:	2201      	moveq	r2, #1
 8003654:	2204      	movne	r2, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003656:	2d01      	cmp	r5, #1
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8003658:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800365a:	9203      	str	r2, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800365c:	bf14      	ite	ne
 800365e:	461a      	movne	r2, r3
 8003660:	2208      	moveq	r2, #8
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003662:	429c      	cmp	r4, r3
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8003664:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003666:	9205      	str	r2, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003668:	bf0c      	ite	eq
 800366a:	461a      	moveq	r2, r3
 800366c:	2210      	movne	r2, #16
 800366e:	9204      	str	r2, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 8003670:	f246 6299 	movw	r2, #26265	; 0x6699
 8003674:	bf08      	it	eq
 8003676:	2266      	moveq	r2, #102	; 0x66
 8003678:	9202      	str	r2, [sp, #8]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800367a:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800367e:	e9cd 3300 	strd	r3, r3, [sp]
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8003682:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003686:	f002 f97c 	bl	8005982 <HAL_OSPI_Command>
 800368a:	3800      	subs	r0, #0
 800368c:	bf18      	it	ne
 800368e:	2001      	movne	r0, #1
 8003690:	4240      	negs	r0, r0
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8003692:	b014      	add	sp, #80	; 0x50
 8003694:	bd70      	pop	{r4, r5, r6, pc}
    return MX25LM51245G_ERROR;
 8003696:	f04f 30ff 	mov.w	r0, #4294967295
 800369a:	e7fa      	b.n	8003692 <MX25LM51245G_ResetEnable+0x68>

0800369c <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800369c:	b570      	push	{r4, r5, r6, lr}
 800369e:	b094      	sub	sp, #80	; 0x50
 80036a0:	460c      	mov	r4, r1
 80036a2:	4606      	mov	r6, r0
 80036a4:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 80036a6:	2100      	movs	r1, #0
 80036a8:	2250      	movs	r2, #80	; 0x50
 80036aa:	4668      	mov	r0, sp
 80036ac:	f015 fc72 	bl	8018f94 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80036b0:	b90c      	cbnz	r4, 80036b6 <MX25LM51245G_ResetMemory+0x1a>
 80036b2:	2d01      	cmp	r5, #1
 80036b4:	d028      	beq.n	8003708 <MX25LM51245G_ResetMemory+0x6c>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80036b6:	2300      	movs	r3, #0
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80036b8:	4669      	mov	r1, sp
 80036ba:	4630      	mov	r0, r6
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80036bc:	429c      	cmp	r4, r3
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80036be:	9307      	str	r3, [sp, #28]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80036c0:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80036c2:	bf0c      	ite	eq
 80036c4:	2201      	moveq	r2, #1
 80036c6:	2204      	movne	r2, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80036c8:	2d01      	cmp	r5, #1
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 80036ca:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80036cc:	9203      	str	r2, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80036ce:	bf14      	ite	ne
 80036d0:	461a      	movne	r2, r3
 80036d2:	2208      	moveq	r2, #8
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80036d4:	429c      	cmp	r4, r3
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80036d6:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80036d8:	9205      	str	r2, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80036da:	bf0c      	ite	eq
 80036dc:	461a      	moveq	r2, r3
 80036de:	2210      	movne	r2, #16
 80036e0:	9204      	str	r2, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 80036e2:	f649 1266 	movw	r2, #39270	; 0x9966
 80036e6:	bf08      	it	eq
 80036e8:	2299      	moveq	r2, #153	; 0x99
 80036ea:	9202      	str	r2, [sp, #8]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80036ec:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80036f0:	e9cd 3300 	strd	r3, r3, [sp]
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80036f4:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80036f8:	f002 f943 	bl	8005982 <HAL_OSPI_Command>
 80036fc:	3800      	subs	r0, #0
 80036fe:	bf18      	it	ne
 8003700:	2001      	movne	r0, #1
 8003702:	4240      	negs	r0, r0
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8003704:	b014      	add	sp, #80	; 0x50
 8003706:	bd70      	pop	{r4, r5, r6, pc}
    return MX25LM51245G_ERROR;
 8003708:	f04f 30ff 	mov.w	r0, #4294967295
 800370c:	e7fa      	b.n	8003704 <MX25LM51245G_ResetMemory+0x68>
	...

08003710 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  if (I2c4InitCounter > 0U)
 8003710:	4a11      	ldr	r2, [pc, #68]	; (8003758 <BSP_I2C4_DeInit+0x48>)
{
 8003712:	b508      	push	{r3, lr}
  if (I2c4InitCounter > 0U)
 8003714:	6813      	ldr	r3, [r2, #0]
 8003716:	b90b      	cbnz	r3, 800371c <BSP_I2C4_DeInit+0xc>
  int32_t ret  = BSP_ERROR_NONE;
 8003718:	2000      	movs	r0, #0
      }
    }
  }

  return ret;
}
 800371a:	bd08      	pop	{r3, pc}
    if (--I2c4InitCounter == 0U)
 800371c:	3b01      	subs	r3, #1
 800371e:	6013      	str	r3, [r2, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1f9      	bne.n	8003718 <BSP_I2C4_DeInit+0x8>
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8003724:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003728:	480c      	ldr	r0, [pc, #48]	; (800375c <BSP_I2C4_DeInit+0x4c>)
 800372a:	f001 f959 	bl	80049e0 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800372e:	480b      	ldr	r0, [pc, #44]	; (800375c <BSP_I2C4_DeInit+0x4c>)
 8003730:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003734:	f001 f954 	bl	80049e0 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8003738:	4a09      	ldr	r2, [pc, #36]	; (8003760 <BSP_I2C4_DeInit+0x50>)
      if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800373a:	480a      	ldr	r0, [pc, #40]	; (8003764 <BSP_I2C4_DeInit+0x54>)
  BUS_I2C4_CLK_DISABLE();
 800373c:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 8003740:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003744:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
      if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8003748:	f001 fbe3 	bl	8004f12 <HAL_I2C_DeInit>
 800374c:	2800      	cmp	r0, #0
 800374e:	d0e3      	beq.n	8003718 <BSP_I2C4_DeInit+0x8>
        ret = BSP_ERROR_BUS_FAILURE;
 8003750:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8003754:	e7e1      	b.n	800371a <BSP_I2C4_DeInit+0xa>
 8003756:	bf00      	nop
 8003758:	240014ac 	.word	0x240014ac
 800375c:	58021400 	.word	0x58021400
 8003760:	58024400 	.word	0x58024400
 8003764:	24006d58 	.word	0x24006d58

08003768 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003768:	2300      	movs	r3, #0
 800376a:	2201      	movs	r2, #1
{
 800376c:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 800376e:	6041      	str	r1, [r0, #4]
{
 8003770:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003772:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003774:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8003778:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800377c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8003780:	f001 fb75 	bl	8004e6e <HAL_I2C_Init>
 8003784:	4601      	mov	r1, r0
 8003786:	b108      	cbz	r0, 800378c <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 8003788:	2001      	movs	r0, #1
}
 800378a:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800378c:	4620      	mov	r0, r4
 800378e:	f001 fd50 	bl	8005232 <HAL_I2CEx_ConfigAnalogFilter>
 8003792:	4601      	mov	r1, r0
 8003794:	2800      	cmp	r0, #0
 8003796:	d1f7      	bne.n	8003788 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8003798:	4620      	mov	r0, r4
 800379a:	f001 fd70 	bl	800527e <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
 800379e:	3800      	subs	r0, #0
 80037a0:	bf18      	it	ne
 80037a2:	2001      	movne	r0, #1
 80037a4:	e7f1      	b.n	800378a <MX_I2C4_Init+0x22>
	...

080037a8 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 80037a8:	4ba3      	ldr	r3, [pc, #652]	; (8003a38 <BSP_I2C4_Init+0x290>)
 80037aa:	48a4      	ldr	r0, [pc, #656]	; (8003a3c <BSP_I2C4_Init+0x294>)
{
 80037ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 80037b0:	6003      	str	r3, [r0, #0]
{
 80037b2:	b093      	sub	sp, #76	; 0x4c
  if (I2c4InitCounter++ == 0U)
 80037b4:	4ba2      	ldr	r3, [pc, #648]	; (8003a40 <BSP_I2C4_Init+0x298>)
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	9200      	str	r2, [sp, #0]
 80037ba:	3201      	adds	r2, #1
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	9b00      	ldr	r3, [sp, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f040 80c9 	bne.w	8003958 <BSP_I2C4_Init+0x1b0>
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 80037c6:	f001 fd2f 	bl	8005228 <HAL_I2C_GetState>
 80037ca:	2800      	cmp	r0, #0
 80037cc:	f040 80c4 	bne.w	8003958 <BSP_I2C4_Init+0x1b0>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80037d0:	4d9c      	ldr	r5, [pc, #624]	; (8003a44 <BSP_I2C4_Init+0x29c>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80037d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 80037d6:	2101      	movs	r1, #1
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80037d8:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80037da:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80037de:	489a      	ldr	r0, [pc, #616]	; (8003a48 <BSP_I2C4_Init+0x2a0>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80037e0:	f043 0320 	orr.w	r3, r3, #32
 80037e4:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80037e8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80037ec:	f003 0320 	and.w	r3, r3, #32
 80037f0:	930a      	str	r3, [sp, #40]	; 0x28
 80037f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80037f4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80037f8:	f043 0320 	orr.w	r3, r3, #32
 80037fc:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8003800:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8003804:	9611      	str	r6, [sp, #68]	; 0x44
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8003806:	f003 0320 	and.w	r3, r3, #32
 800380a:	930b      	str	r3, [sp, #44]	; 0x2c
 800380c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800380e:	2312      	movs	r3, #18
 8003810:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8003814:	2302      	movs	r3, #2
 8003816:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800381a:	a90d      	add	r1, sp, #52	; 0x34
 800381c:	f000 fffa 	bl	8004814 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8003820:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8003824:	a90d      	add	r1, sp, #52	; 0x34
 8003826:	4888      	ldr	r0, [pc, #544]	; (8003a48 <BSP_I2C4_Init+0x2a0>)
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8003828:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800382a:	9611      	str	r6, [sp, #68]	; 0x44
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800382c:	f000 fff2 	bl	8004814 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 8003830:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8003834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003838:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 800383c:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8003840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003844:	930c      	str	r3, [sp, #48]	; 0x30
 8003846:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  BUS_I2C4_FORCE_RESET();
 8003848:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 800384c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003850:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
 8003854:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8003858:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800385c:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8003860:	f003 f9c8 	bl	8006bf4 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8003864:	2800      	cmp	r0, #0
 8003866:	d071      	beq.n	800394c <BSP_I2C4_Init+0x1a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003868:	4b78      	ldr	r3, [pc, #480]	; (8003a4c <BSP_I2C4_Init+0x2a4>)
  uint32_t prev_presc = I2C_PRESC_MAX;
 800386a:	f04f 0e10 	mov.w	lr, #16
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800386e:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 8003a54 <BSP_I2C4_Init+0x2ac>
 8003872:	f04f 0a14 	mov.w	sl, #20
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003876:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 800387a:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800387e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003882:	f640 13f6 	movw	r3, #2550	; 0x9f6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003886:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003888:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800388c:	eba3 0380 	sub.w	r3, r3, r0, lsl #2
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003890:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8003894:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003898:	32e2      	adds	r2, #226	; 0xe2
  if (tsdadel_min <= 0)
 800389a:	9302      	str	r3, [sp, #8]
 800389c:	4b6c      	ldr	r3, [pc, #432]	; (8003a50 <BSP_I2C4_Init+0x2a8>)
 800389e:	ea22 7be2 	bic.w	fp, r2, r2, asr #31
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80038a2:	9a00      	ldr	r2, [sp, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4690      	mov	r8, r2
{
 80038a8:	468c      	mov	ip, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80038aa:	2600      	movs	r6, #0
      if (tscldel >= (uint32_t)tscldel_min)
 80038ac:	f240 3479 	movw	r4, #889	; 0x379
 80038b0:	9601      	str	r6, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80038b2:	3601      	adds	r6, #1
      if (tscldel >= (uint32_t)tscldel_min)
 80038b4:	45a4      	cmp	ip, r4
 80038b6:	d95a      	bls.n	800396e <BSP_I2C4_Init+0x1c6>
 80038b8:	2500      	movs	r5, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80038ba:	462f      	mov	r7, r5
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80038bc:	45ab      	cmp	fp, r5
 80038be:	d852      	bhi.n	8003966 <BSP_I2C4_Init+0x1be>
 80038c0:	9c02      	ldr	r4, [sp, #8]
 80038c2:	42ac      	cmp	r4, r5
 80038c4:	d34f      	bcc.n	8003966 <BSP_I2C4_Init+0x1be>
            if(presc != prev_presc)
 80038c6:	4596      	cmp	lr, r2
 80038c8:	d04d      	beq.n	8003966 <BSP_I2C4_Init+0x1be>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80038ca:	fb0a f803 	mul.w	r8, sl, r3
              I2c_valid_timing_nbr ++;
 80038ce:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80038d0:	9c01      	ldr	r4, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80038d2:	eb09 0e08 	add.w	lr, r9, r8
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80038d6:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80038d8:	f849 2008 	str.w	r2, [r9, r8]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80038dc:	e9ce 4701 	strd	r4, r7, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80038e0:	d93e      	bls.n	8003960 <BSP_I2C4_Init+0x1b8>
 80038e2:	4a5b      	ldr	r2, [pc, #364]	; (8003a50 <BSP_I2C4_Init+0x2a8>)
 80038e4:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80038e6:	4b5a      	ldr	r3, [pc, #360]	; (8003a50 <BSP_I2C4_Init+0x2a8>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80038e8:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 80038ec:	4a59      	ldr	r2, [pc, #356]	; (8003a54 <BSP_I2C4_Init+0x2ac>)
 80038ee:	2600      	movs	r6, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80038f0:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80038f2:	f04f 38ff 	mov.w	r8, #4294967295
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80038f6:	9306      	str	r3, [sp, #24]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80038f8:	f242 7310 	movw	r3, #10000	; 0x2710
 80038fc:	9303      	str	r3, [sp, #12]
 80038fe:	f10b 0332 	add.w	r3, fp, #50	; 0x32
 8003902:	9309      	str	r3, [sp, #36]	; 0x24
 8003904:	f5ab 5311 	sub.w	r3, fp, #9280	; 0x2440
 8003908:	3b0a      	subs	r3, #10
 800390a:	9302      	str	r3, [sp, #8]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800390c:	9b06      	ldr	r3, [sp, #24]
 800390e:	429e      	cmp	r6, r3
 8003910:	d138      	bne.n	8003984 <BSP_I2C4_Init+0x1dc>
        if (idx < I2C_VALID_TIMING_NBR)
 8003912:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 8003916:	d819      	bhi.n	800394c <BSP_I2C4_Init+0x1a4>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003918:	2314      	movs	r3, #20
 800391a:	fb03 f808 	mul.w	r8, r3, r8
 800391e:	4b4d      	ldr	r3, [pc, #308]	; (8003a54 <BSP_I2C4_Init+0x2ac>)
 8003920:	eb03 0208 	add.w	r2, r3, r8
 8003924:	f853 3008 	ldr.w	r3, [r3, r8]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8003928:	7c14      	ldrb	r4, [r2, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800392a:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800392e:	6853      	ldr	r3, [r2, #4]
 8003930:	051b      	lsls	r3, r3, #20
 8003932:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003936:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8003938:	6893      	ldr	r3, [r2, #8]
 800393a:	041b      	lsls	r3, r3, #16
 800393c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003940:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8003942:	68d3      	ldr	r3, [r2, #12]
 8003944:	021b      	lsls	r3, r3, #8
 8003946:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003948:	4323      	orrs	r3, r4
 800394a:	9300      	str	r3, [sp, #0]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800394c:	9900      	ldr	r1, [sp, #0]
 800394e:	483b      	ldr	r0, [pc, #236]	; (8003a3c <BSP_I2C4_Init+0x294>)
 8003950:	f7ff ff0a 	bl	8003768 <MX_I2C4_Init>
 8003954:	2800      	cmp	r0, #0
 8003956:	d16b      	bne.n	8003a30 <BSP_I2C4_Init+0x288>
  int32_t ret = BSP_ERROR_NONE;
 8003958:	2000      	movs	r0, #0
}
 800395a:	b013      	add	sp, #76	; 0x4c
 800395c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003960:	4696      	mov	lr, r2
 8003962:	f04f 0801 	mov.w	r8, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003966:	3701      	adds	r7, #1
 8003968:	440d      	add	r5, r1
 800396a:	2f10      	cmp	r7, #16
 800396c:	d1a6      	bne.n	80038bc <BSP_I2C4_Init+0x114>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800396e:	2e10      	cmp	r6, #16
 8003970:	448c      	add	ip, r1
 8003972:	d19b      	bne.n	80038ac <BSP_I2C4_Init+0x104>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003974:	3201      	adds	r2, #1
 8003976:	4401      	add	r1, r0
 8003978:	2a10      	cmp	r2, #16
 800397a:	d195      	bne.n	80038a8 <BSP_I2C4_Init+0x100>
 800397c:	f1b8 0f00 	cmp.w	r8, #0
 8003980:	d1af      	bne.n	80038e2 <BSP_I2C4_Init+0x13a>
 8003982:	e7b0      	b.n	80038e6 <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8003984:	6813      	ldr	r3, [r2, #0]
 8003986:	f06f 0401 	mvn.w	r4, #1
 800398a:	9909      	ldr	r1, [sp, #36]	; 0x24
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800398c:	2700      	movs	r7, #0
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800398e:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003992:	4419      	add	r1, r3
 8003994:	9104      	str	r1, [sp, #16]
 8003996:	eb03 010b 	add.w	r1, r3, fp
 800399a:	4361      	muls	r1, r4
 800399c:	9c02      	ldr	r4, [sp, #8]
 800399e:	9101      	str	r1, [sp, #4]
 80039a0:	441c      	add	r4, r3
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80039a2:	9904      	ldr	r1, [sp, #16]
 80039a4:	9408      	str	r4, [sp, #32]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80039a6:	f241 245c 	movw	r4, #4700	; 0x125c
 80039aa:	9707      	str	r7, [sp, #28]
 80039ac:	f1a1 0532 	sub.w	r5, r1, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80039b0:	3701      	adds	r7, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80039b2:	42a1      	cmp	r1, r4
 80039b4:	d931      	bls.n	8003a1a <BSP_I2C4_Init+0x272>
 80039b6:	ebb0 0f95 	cmp.w	r0, r5, lsr #2
 80039ba:	d22e      	bcs.n	8003a1a <BSP_I2C4_Init+0x272>
 80039bc:	9c01      	ldr	r4, [sp, #4]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80039be:	f04f 0c00 	mov.w	ip, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80039c2:	f8dd e010 	ldr.w	lr, [sp, #16]
 80039c6:	f504 5910 	add.w	r9, r4, #9216	; 0x2400
 80039ca:	9c08      	ldr	r4, [sp, #32]
 80039cc:	f109 0918 	add.w	r9, r9, #24
 80039d0:	1865      	adds	r5, r4, r1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80039d2:	f205 6a83 	addw	sl, r5, #1667	; 0x683
 80039d6:	f241 0447 	movw	r4, #4167	; 0x1047
 80039da:	f8cd c014 	str.w	ip, [sp, #20]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80039de:	f10c 0c01 	add.w	ip, ip, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80039e2:	45a2      	cmp	sl, r4
 80039e4:	d812      	bhi.n	8003a0c <BSP_I2C4_Init+0x264>
 80039e6:	f5be 6f7a 	cmp.w	lr, #4000	; 0xfa0
 80039ea:	d30f      	bcc.n	8003a0c <BSP_I2C4_Init+0x264>
 80039ec:	4570      	cmp	r0, lr
 80039ee:	d20d      	bcs.n	8003a0c <BSP_I2C4_Init+0x264>
              error = -error;
 80039f0:	ea35 0a25 	bics.w	sl, r5, r5, asr #32
 80039f4:	bf28      	it	cs
 80039f6:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 80039f8:	9c03      	ldr	r4, [sp, #12]
 80039fa:	4554      	cmp	r4, sl
 80039fc:	d906      	bls.n	8003a0c <BSP_I2C4_Init+0x264>
              I2c_valid_timing[count].scll = scll;
 80039fe:	9c07      	ldr	r4, [sp, #28]
              I2c_valid_timing[count].sclh = sclh;
 8003a00:	46b0      	mov	r8, r6
 8003a02:	f8cd a00c 	str.w	sl, [sp, #12]
              I2c_valid_timing[count].scll = scll;
 8003a06:	6114      	str	r4, [r2, #16]
              I2c_valid_timing[count].sclh = sclh;
 8003a08:	9c05      	ldr	r4, [sp, #20]
 8003a0a:	60d4      	str	r4, [r2, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003a0c:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 8003a10:	eba9 0903 	sub.w	r9, r9, r3
 8003a14:	441d      	add	r5, r3
 8003a16:	449e      	add	lr, r3
 8003a18:	d1db      	bne.n	80039d2 <BSP_I2C4_Init+0x22a>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003a1a:	9c01      	ldr	r4, [sp, #4]
 8003a1c:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 8003a20:	4419      	add	r1, r3
 8003a22:	eba4 0403 	sub.w	r4, r4, r3
 8003a26:	9401      	str	r4, [sp, #4]
 8003a28:	d1bd      	bne.n	80039a6 <BSP_I2C4_Init+0x1fe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003a2a:	3601      	adds	r6, #1
 8003a2c:	3214      	adds	r2, #20
 8003a2e:	e76d      	b.n	800390c <BSP_I2C4_Init+0x164>
          ret = BSP_ERROR_BUS_FAILURE;
 8003a30:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8003a34:	e791      	b.n	800395a <BSP_I2C4_Init+0x1b2>
 8003a36:	bf00      	nop
 8003a38:	58001c00 	.word	0x58001c00
 8003a3c:	24006d58 	.word	0x24006d58
 8003a40:	240014ac 	.word	0x240014ac
 8003a44:	58024400 	.word	0x58024400
 8003a48:	58021400 	.word	0x58021400
 8003a4c:	3b9aca00 	.word	0x3b9aca00
 8003a50:	24001eb0 	.word	0x24001eb0
 8003a54:	240014b0 	.word	0x240014b0

08003a58 <BSP_I2C4_WriteReg>:
{
 8003a58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003a5a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8003a5e:	9200      	str	r2, [sp, #0]
 8003a60:	460a      	mov	r2, r1
 8003a62:	4601      	mov	r1, r0
 8003a64:	4808      	ldr	r0, [pc, #32]	; (8003a88 <BSP_I2C4_WriteReg+0x30>)
 8003a66:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	f001 fa6a 	bl	8004f44 <HAL_I2C_Mem_Write>
 8003a70:	b140      	cbz	r0, 8003a84 <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8003a72:	4805      	ldr	r0, [pc, #20]	; (8003a88 <BSP_I2C4_WriteReg+0x30>)
 8003a74:	f001 fbdb 	bl	800522e <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003a78:	2804      	cmp	r0, #4
 8003a7a:	bf0c      	ite	eq
 8003a7c:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8003a80:	f06f 0003 	mvnne.w	r0, #3
}
 8003a84:	b004      	add	sp, #16
 8003a86:	bd10      	pop	{r4, pc}
 8003a88:	24006d58 	.word	0x24006d58

08003a8c <BSP_I2C4_ReadReg>:
{
 8003a8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Reg        The target register address to read
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003a8e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8003a92:	9200      	str	r2, [sp, #0]
 8003a94:	460a      	mov	r2, r1
 8003a96:	4601      	mov	r1, r0
 8003a98:	4808      	ldr	r0, [pc, #32]	; (8003abc <BSP_I2C4_ReadReg+0x30>)
 8003a9a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	f001 fb06 	bl	80050b0 <HAL_I2C_Mem_Read>
 8003aa4:	b140      	cbz	r0, 8003ab8 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8003aa6:	4805      	ldr	r0, [pc, #20]	; (8003abc <BSP_I2C4_ReadReg+0x30>)
 8003aa8:	f001 fbc1 	bl	800522e <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003aac:	2804      	cmp	r0, #4
 8003aae:	bf0c      	ite	eq
 8003ab0:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8003ab4:	f06f 0003 	mvnne.w	r0, #3
}
 8003ab8:	b004      	add	sp, #16
 8003aba:	bd10      	pop	{r4, pc}
 8003abc:	24006d58 	.word	0x24006d58

08003ac0 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8003ac0:	f000 bcd0 	b.w	8004464 <HAL_GetTick>

08003ac4 <OSPI_NOR_EnterSOPIMode.constprop.0>:
/**
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
 8003ac4:	b530      	push	{r4, r5, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8003ac6:	4c21      	ldr	r4, [pc, #132]	; (8003b4c <OSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
 8003ac8:	b085      	sub	sp, #20
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8003aca:	4821      	ldr	r0, [pc, #132]	; (8003b50 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8003acc:	78a2      	ldrb	r2, [r4, #2]
 8003ace:	7861      	ldrb	r1, [r4, #1]
 8003ad0:	f7ff fc53 	bl	800337a <MX25LM51245G_WriteEnable>
 8003ad4:	b118      	cbz	r0, 8003ade <OSPI_NOR_EnterSOPIMode.constprop.0+0x1a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003ad6:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 8003ada:	b005      	add	sp, #20
 8003adc:	bd30      	pop	{r4, r5, pc}
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, CONF_OSPI_DUMMY_CYCLES) != MX25LM51245G_OK)
 8003ade:	2303      	movs	r3, #3
 8003ae0:	481b      	ldr	r0, [pc, #108]	; (8003b50 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003ae8:	78a2      	ldrb	r2, [r4, #2]
 8003aea:	7861      	ldrb	r1, [r4, #1]
 8003aec:	f7ff fccd 	bl	800348a <MX25LM51245G_WriteCfg2Register>
 8003af0:	2800      	cmp	r0, #0
 8003af2:	d1f0      	bne.n	8003ad6 <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8003af4:	78a2      	ldrb	r2, [r4, #2]
 8003af6:	7861      	ldrb	r1, [r4, #1]
 8003af8:	4815      	ldr	r0, [pc, #84]	; (8003b50 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8003afa:	f7ff fc3e 	bl	800337a <MX25LM51245G_WriteEnable>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2800      	cmp	r0, #0
 8003b02:	d1e8      	bne.n	8003ad6 <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 8003b04:	2501      	movs	r5, #1
 8003b06:	4812      	ldr	r0, [pc, #72]	; (8003b50 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8003b08:	9500      	str	r5, [sp, #0]
 8003b0a:	78a2      	ldrb	r2, [r4, #2]
 8003b0c:	7861      	ldrb	r1, [r4, #1]
 8003b0e:	f7ff fcbc 	bl	800348a <MX25LM51245G_WriteCfg2Register>
 8003b12:	4604      	mov	r4, r0
 8003b14:	2800      	cmp	r0, #0
 8003b16:	d1de      	bne.n	8003ad6 <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8003b18:	2028      	movs	r0, #40	; 0x28
 8003b1a:	f000 fca9 	bl	8004470 <HAL_Delay>
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8003b1e:	4622      	mov	r2, r4
 8003b20:	4629      	mov	r1, r5
 8003b22:	480b      	ldr	r0, [pc, #44]	; (8003b50 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8003b24:	f7ff faf4 	bl	8003110 <MX25LM51245G_AutoPollingMemReady>
 8003b28:	2800      	cmp	r0, #0
 8003b2a:	d1d4      	bne.n	8003ad6 <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8003b2c:	ab03      	add	r3, sp, #12
 8003b2e:	4602      	mov	r2, r0
 8003b30:	4629      	mov	r1, r5
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	4603      	mov	r3, r0
 8003b36:	4806      	ldr	r0, [pc, #24]	; (8003b50 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8003b38:	f7ff fd0d 	bl	8003556 <MX25LM51245G_ReadCfg2Register>
 8003b3c:	2800      	cmp	r0, #0
 8003b3e:	d1ca      	bne.n	8003ad6 <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (reg[0] != MX25LM51245G_CR2_SOPI)
 8003b40:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8003b44:	42ab      	cmp	r3, r5
 8003b46:	d0c8      	beq.n	8003ada <OSPI_NOR_EnterSOPIMode.constprop.0+0x16>
 8003b48:	e7c5      	b.n	8003ad6 <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
 8003b4a:	bf00      	nop
 8003b4c:	24001eb4 	.word	0x24001eb4
 8003b50:	24001ebc 	.word	0x24001ebc

08003b54 <OSPI_NOR_EnterDOPIMode.constprop.0>:
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
 8003b54:	b530      	push	{r4, r5, lr}
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8003b56:	4d27      	ldr	r5, [pc, #156]	; (8003bf4 <OSPI_NOR_EnterDOPIMode.constprop.0+0xa0>)
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
 8003b58:	b085      	sub	sp, #20
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8003b5a:	4c27      	ldr	r4, [pc, #156]	; (8003bf8 <OSPI_NOR_EnterDOPIMode.constprop.0+0xa4>)
 8003b5c:	78aa      	ldrb	r2, [r5, #2]
 8003b5e:	7869      	ldrb	r1, [r5, #1]
 8003b60:	4620      	mov	r0, r4
 8003b62:	f7ff fc0a 	bl	800337a <MX25LM51245G_WriteEnable>
 8003b66:	b118      	cbz	r0, 8003b70 <OSPI_NOR_EnterDOPIMode.constprop.0+0x1c>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003b68:	f06f 0004 	mvn.w	r0, #4
}
 8003b6c:	b005      	add	sp, #20
 8003b6e:	bd30      	pop	{r4, r5, pc}
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, CONF_OSPI_DUMMY_CYCLES) != MX25LM51245G_OK)
 8003b70:	2303      	movs	r3, #3
 8003b72:	78aa      	ldrb	r2, [r5, #2]
 8003b74:	7869      	ldrb	r1, [r5, #1]
 8003b76:	4620      	mov	r0, r4
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b7e:	f7ff fc84 	bl	800348a <MX25LM51245G_WriteCfg2Register>
 8003b82:	2800      	cmp	r0, #0
 8003b84:	d1f0      	bne.n	8003b68 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8003b86:	78aa      	ldrb	r2, [r5, #2]
 8003b88:	4620      	mov	r0, r4
 8003b8a:	7869      	ldrb	r1, [r5, #1]
 8003b8c:	f7ff fbf5 	bl	800337a <MX25LM51245G_WriteEnable>
 8003b90:	2800      	cmp	r0, #0
 8003b92:	d1e9      	bne.n	8003b68 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 8003b94:	2302      	movs	r3, #2
 8003b96:	78aa      	ldrb	r2, [r5, #2]
 8003b98:	7869      	ldrb	r1, [r5, #1]
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	4620      	mov	r0, r4
 8003ba0:	f7ff fc73 	bl	800348a <MX25LM51245G_WriteCfg2Register>
 8003ba4:	2800      	cmp	r0, #0
 8003ba6:	d1df      	bne.n	8003b68 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8003ba8:	2028      	movs	r0, #40	; 0x28
 8003baa:	f000 fc61 	bl	8004470 <HAL_Delay>
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8003bae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8003bb2:	4620      	mov	r0, r4
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8003bb4:	60e3      	str	r3, [r4, #12]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8003bb6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003bba:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8003bbc:	f001 fe58 	bl	8005870 <HAL_OSPI_Init>
 8003bc0:	b9a8      	cbnz	r0, 8003bee <OSPI_NOR_EnterDOPIMode.constprop.0+0x9a>
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	4620      	mov	r0, r4
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	f7ff faa2 	bl	8003110 <MX25LM51245G_AutoPollingMemReady>
 8003bcc:	2800      	cmp	r0, #0
 8003bce:	d1cb      	bne.n	8003b68 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8003bd0:	ab03      	add	r3, sp, #12
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	4603      	mov	r3, r0
 8003bda:	4620      	mov	r0, r4
 8003bdc:	f7ff fcbb 	bl	8003556 <MX25LM51245G_ReadCfg2Register>
 8003be0:	2800      	cmp	r0, #0
 8003be2:	d1c1      	bne.n	8003b68 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (reg[0] != MX25LM51245G_CR2_DOPI)
 8003be4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d0bf      	beq.n	8003b6c <OSPI_NOR_EnterDOPIMode.constprop.0+0x18>
 8003bec:	e7bc      	b.n	8003b68 <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003bee:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8003bf2:	e7bb      	b.n	8003b6c <OSPI_NOR_EnterDOPIMode.constprop.0+0x18>
 8003bf4:	24001eb4 	.word	0x24001eb4
 8003bf8:	24001ebc 	.word	0x24001ebc

08003bfc <MX_OSPI_NOR_Init>:
  hospi->Init.FifoThreshold      = 4;
 8003bfc:	4a0e      	ldr	r2, [pc, #56]	; (8003c38 <MX_OSPI_NOR_Init+0x3c>)
 8003bfe:	2304      	movs	r3, #4
 8003c00:	e9c0 2300 	strd	r2, r3, [r0]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 8003c04:	680a      	ldr	r2, [r1, #0]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8003c06:	2300      	movs	r3, #0
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 8003c08:	6102      	str	r2, [r0, #16]
  hospi->Init.ChipSelectHighTime = 2;
 8003c0a:	2202      	movs	r2, #2
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8003c0c:	6083      	str	r3, [r0, #8]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 8003c0e:	e9c0 2305 	strd	r2, r3, [r0, #20]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8003c12:	684a      	ldr	r2, [r1, #4]
 8003c14:	6242      	str	r2, [r0, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 8003c16:	688a      	ldr	r2, [r1, #8]
  hospi->Init.ChipSelectBoundary = 0;
 8003c18:	6303      	str	r3, [r0, #48]	; 0x30
  hospi->Init.SampleShifting     = Config->SampleShifting;
 8003c1a:	6282      	str	r2, [r0, #40]	; 0x28
  if (Config->TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8003c1c:	68ca      	ldr	r2, [r1, #12]
 8003c1e:	2a01      	cmp	r2, #1
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8003c20:	e9c0 3307 	strd	r3, r3, [r0, #28]
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8003c24:	bf09      	itett	eq
 8003c26:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8003c2a:	60c3      	strne	r3, [r0, #12]
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8003c2c:	60c3      	streq	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8003c2e:	f04f 5380 	moveq.w	r3, #268435456	; 0x10000000
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8003c32:	62c3      	str	r3, [r0, #44]	; 0x2c
  return HAL_OSPI_Init(hospi);
 8003c34:	f001 be1c 	b.w	8005870 <HAL_OSPI_Init>
 8003c38:	52005000 	.word	0x52005000

08003c3c <BSP_OSPI_NOR_EnableMemoryMappedMode>:
{
 8003c3c:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8003c3e:	b998      	cbnz	r0, 8003c68 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x2c>
    if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8003c40:	4c0b      	ldr	r4, [pc, #44]	; (8003c70 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x34>)
 8003c42:	78a2      	ldrb	r2, [r4, #2]
 8003c44:	7861      	ldrb	r1, [r4, #1]
 8003c46:	b95a      	cbnz	r2, 8003c60 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x24>
      if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 8003c48:	2201      	movs	r2, #1
 8003c4a:	480a      	ldr	r0, [pc, #40]	; (8003c74 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x38>)
 8003c4c:	f7ff fad6 	bl	80031fc <MX25LM51245G_EnableSTRMemoryMappedMode>
 8003c50:	b110      	cbz	r0, 8003c58 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1c>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003c52:	f06f 0004 	mvn.w	r0, #4
}
 8003c56:	bd10      	pop	{r4, pc}
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8003c58:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 8003c5a:	2000      	movs	r0, #0
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8003c5c:	7023      	strb	r3, [r4, #0]
 8003c5e:	e7fa      	b.n	8003c56 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
      if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 8003c60:	4804      	ldr	r0, [pc, #16]	; (8003c74 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x38>)
 8003c62:	f7ff fb3a 	bl	80032da <MX25LM51245G_EnableDTRMemoryMappedMode>
 8003c66:	e7f3      	b.n	8003c50 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x14>
    ret = BSP_ERROR_WRONG_PARAM;
 8003c68:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8003c6c:	e7f3      	b.n	8003c56 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
 8003c6e:	bf00      	nop
 8003c70:	24001eb4 	.word	0x24001eb4
 8003c74:	24001ebc 	.word	0x24001ebc

08003c78 <BSP_OSPI_NOR_DisableMemoryMappedMode>:
{
 8003c78:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8003c7a:	b950      	cbnz	r0, 8003c92 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x1a>
    if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 8003c7c:	4c09      	ldr	r4, [pc, #36]	; (8003ca4 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2c>)
 8003c7e:	7823      	ldrb	r3, [r4, #0]
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d109      	bne.n	8003c98 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x20>
    else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 8003c84:	4808      	ldr	r0, [pc, #32]	; (8003ca8 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x30>)
 8003c86:	f002 f838 	bl	8005cfa <HAL_OSPI_Abort>
 8003c8a:	b940      	cbnz	r0, 8003c9e <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	7023      	strb	r3, [r4, #0]
}
 8003c90:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8003c92:	f06f 0001 	mvn.w	r0, #1
 8003c96:	e7fb      	b.n	8003c90 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
      ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 8003c98:	f06f 001a 	mvn.w	r0, #26
 8003c9c:	e7f8      	b.n	8003c90 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003c9e:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8003ca2:	e7f5      	b.n	8003c90 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
 8003ca4:	24001eb4 	.word	0x24001eb4
 8003ca8:	24001ebc 	.word	0x24001ebc

08003cac <BSP_OSPI_NOR_DeInit>:
{
 8003cac:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8003cae:	2800      	cmp	r0, #0
 8003cb0:	d156      	bne.n	8003d60 <BSP_OSPI_NOR_DeInit+0xb4>
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8003cb2:	4c2d      	ldr	r4, [pc, #180]	; (8003d68 <BSP_OSPI_NOR_DeInit+0xbc>)
 8003cb4:	7823      	ldrb	r3, [r4, #0]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d04b      	beq.n	8003d52 <BSP_OSPI_NOR_DeInit+0xa6>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8003cba:	2300      	movs	r3, #0
  HAL_GPIO_DeInit(OSPI_NOR_CLK_GPIO_PORT, OSPI_NOR_CLK_PIN);
 8003cbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003cc0:	482a      	ldr	r0, [pc, #168]	; (8003d6c <BSP_OSPI_NOR_DeInit+0xc0>)
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8003cc2:	8023      	strh	r3, [r4, #0]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 8003cc4:	70a3      	strb	r3, [r4, #2]
  HAL_GPIO_DeInit(OSPI_NOR_CLK_GPIO_PORT, OSPI_NOR_CLK_PIN);
 8003cc6:	f000 fe8b 	bl	80049e0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_DQS_GPIO_PORT, OSPI_NOR_DQS_PIN);
 8003cca:	2104      	movs	r1, #4
 8003ccc:	4828      	ldr	r0, [pc, #160]	; (8003d70 <BSP_OSPI_NOR_DeInit+0xc4>)
 8003cce:	f000 fe87 	bl	80049e0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_CS_GPIO_PORT, OSPI_NOR_CS_PIN);
 8003cd2:	2140      	movs	r1, #64	; 0x40
 8003cd4:	4827      	ldr	r0, [pc, #156]	; (8003d74 <BSP_OSPI_NOR_DeInit+0xc8>)
 8003cd6:	f000 fe83 	bl	80049e0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D0_GPIO_PORT, OSPI_NOR_D0_PIN);
 8003cda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003cde:	4826      	ldr	r0, [pc, #152]	; (8003d78 <BSP_OSPI_NOR_DeInit+0xcc>)
 8003ce0:	f000 fe7e 	bl	80049e0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D1_GPIO_PORT, OSPI_NOR_D1_PIN);
 8003ce4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ce8:	4823      	ldr	r0, [pc, #140]	; (8003d78 <BSP_OSPI_NOR_DeInit+0xcc>)
 8003cea:	f000 fe79 	bl	80049e0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D2_GPIO_PORT, OSPI_NOR_D2_PIN);
 8003cee:	2104      	movs	r1, #4
 8003cf0:	4822      	ldr	r0, [pc, #136]	; (8003d7c <BSP_OSPI_NOR_DeInit+0xd0>)
 8003cf2:	f000 fe75 	bl	80049e0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D3_GPIO_PORT, OSPI_NOR_D3_PIN);
 8003cf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003cfa:	481f      	ldr	r0, [pc, #124]	; (8003d78 <BSP_OSPI_NOR_DeInit+0xcc>)
 8003cfc:	f000 fe70 	bl	80049e0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D4_GPIO_PORT, OSPI_NOR_D4_PIN);
 8003d00:	2110      	movs	r1, #16
 8003d02:	481d      	ldr	r0, [pc, #116]	; (8003d78 <BSP_OSPI_NOR_DeInit+0xcc>)
 8003d04:	f000 fe6c 	bl	80049e0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D5_GPIO_PORT, OSPI_NOR_D5_PIN);
 8003d08:	2120      	movs	r1, #32
 8003d0a:	481b      	ldr	r0, [pc, #108]	; (8003d78 <BSP_OSPI_NOR_DeInit+0xcc>)
 8003d0c:	f000 fe68 	bl	80049e0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D6_GPIO_PORT, OSPI_NOR_D6_PIN);
 8003d10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d14:	4817      	ldr	r0, [pc, #92]	; (8003d74 <BSP_OSPI_NOR_DeInit+0xc8>)
 8003d16:	f000 fe63 	bl	80049e0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D7_GPIO_PORT, OSPI_NOR_D7_PIN);
 8003d1a:	2180      	movs	r1, #128	; 0x80
 8003d1c:	4816      	ldr	r0, [pc, #88]	; (8003d78 <BSP_OSPI_NOR_DeInit+0xcc>)
 8003d1e:	f000 fe5f 	bl	80049e0 <HAL_GPIO_DeInit>
  OSPI_NOR_FORCE_RESET();
 8003d22:	4b17      	ldr	r3, [pc, #92]	; (8003d80 <BSP_OSPI_NOR_DeInit+0xd4>)
    if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 8003d24:	4817      	ldr	r0, [pc, #92]	; (8003d84 <BSP_OSPI_NOR_DeInit+0xd8>)
  OSPI_NOR_FORCE_RESET();
 8003d26:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003d28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d2c:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_RELEASE_RESET();
 8003d2e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003d30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d34:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_CLK_DISABLE();
 8003d36:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8003d3a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d3e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 8003d42:	f001 fe0b 	bl	800595c <HAL_OSPI_DeInit>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003d46:	2800      	cmp	r0, #0
 8003d48:	bf0c      	ite	eq
 8003d4a:	2000      	moveq	r0, #0
 8003d4c:	f06f 0003 	mvnne.w	r0, #3
}
 8003d50:	bd10      	pop	{r4, pc}
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 8003d52:	f7ff ff91 	bl	8003c78 <BSP_OSPI_NOR_DisableMemoryMappedMode>
 8003d56:	2800      	cmp	r0, #0
 8003d58:	d0af      	beq.n	8003cba <BSP_OSPI_NOR_DeInit+0xe>
        return BSP_ERROR_COMPONENT_FAILURE;
 8003d5a:	f06f 0004 	mvn.w	r0, #4
 8003d5e:	e7f7      	b.n	8003d50 <BSP_OSPI_NOR_DeInit+0xa4>
    ret = BSP_ERROR_WRONG_PARAM;
 8003d60:	f06f 0001 	mvn.w	r0, #1
 8003d64:	e7f4      	b.n	8003d50 <BSP_OSPI_NOR_DeInit+0xa4>
 8003d66:	bf00      	nop
 8003d68:	24001eb4 	.word	0x24001eb4
 8003d6c:	58021400 	.word	0x58021400
 8003d70:	58020400 	.word	0x58020400
 8003d74:	58021800 	.word	0x58021800
 8003d78:	58020c00 	.word	0x58020c00
 8003d7c:	58021000 	.word	0x58021000
 8003d80:	58024400 	.word	0x58024400
 8003d84:	24001ebc 	.word	0x24001ebc

08003d88 <BSP_OSPI_NOR_ConfigFlash>:
{
 8003d88:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003d8c:	460d      	mov	r5, r1
 8003d8e:	4616      	mov	r6, r2
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8003d90:	2800      	cmp	r0, #0
 8003d92:	d156      	bne.n	8003e42 <BSP_OSPI_NOR_ConfigFlash+0xba>
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8003d94:	4c2e      	ldr	r4, [pc, #184]	; (8003e50 <BSP_OSPI_NOR_ConfigFlash+0xc8>)
 8003d96:	7823      	ldrb	r3, [r4, #0]
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d055      	beq.n	8003e48 <BSP_OSPI_NOR_ConfigFlash+0xc0>
      switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 8003d9c:	7863      	ldrb	r3, [r4, #1]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d146      	bne.n	8003e30 <BSP_OSPI_NOR_ConfigFlash+0xa8>
        if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 8003da2:	2901      	cmp	r1, #1
 8003da4:	78a2      	ldrb	r2, [r4, #2]
 8003da6:	d109      	bne.n	8003dbc <BSP_OSPI_NOR_ConfigFlash+0x34>
 8003da8:	4296      	cmp	r6, r2
 8003daa:	d107      	bne.n	8003dbc <BSP_OSPI_NOR_ConfigFlash+0x34>
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8003dac:	2301      	movs	r3, #1
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8003dae:	2000      	movs	r0, #0
        Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 8003db0:	7065      	strb	r5, [r4, #1]
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8003db2:	7023      	strb	r3, [r4, #0]
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8003db4:	70a6      	strb	r6, [r4, #2]
}
 8003db6:	b004      	add	sp, #16
 8003db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8003dbc:	4f25      	ldr	r7, [pc, #148]	; (8003e54 <BSP_OSPI_NOR_ConfigFlash+0xcc>)
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	4638      	mov	r0, r7
 8003dc2:	f7ff fada 	bl	800337a <MX25LM51245G_WriteEnable>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	bb78      	cbnz	r0, 8003e2a <BSP_OSPI_NOR_ConfigFlash+0xa2>
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 8003dca:	f8ad 000c 	strh.w	r0, [sp, #12]
    reg[1] = 0;
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 8003dce:	9000      	str	r0, [sp, #0]
 8003dd0:	4638      	mov	r0, r7
 8003dd2:	78a2      	ldrb	r2, [r4, #2]
 8003dd4:	7861      	ldrb	r1, [r4, #1]
 8003dd6:	f7ff fb58 	bl	800348a <MX25LM51245G_WriteCfg2Register>
 8003dda:	4680      	mov	r8, r0
 8003ddc:	bb28      	cbnz	r0, 8003e2a <BSP_OSPI_NOR_ConfigFlash+0xa2>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8003dde:	2028      	movs	r0, #40	; 0x28
 8003de0:	f000 fb46 	bl	8004470 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8003de4:	78a3      	ldrb	r3, [r4, #2]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d106      	bne.n	8003df8 <BSP_OSPI_NOR_ConfigFlash+0x70>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8003dea:	4638      	mov	r0, r7
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8003dec:	f8c7 800c 	str.w	r8, [r7, #12]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8003df0:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8003df4:	f001 fd3c 	bl	8005870 <HAL_OSPI_Init>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	4816      	ldr	r0, [pc, #88]	; (8003e54 <BSP_OSPI_NOR_ConfigFlash+0xcc>)
 8003dfc:	4611      	mov	r1, r2
 8003dfe:	f7ff f987 	bl	8003110 <MX25LM51245G_AutoPollingMemReady>
 8003e02:	b990      	cbnz	r0, 8003e2a <BSP_OSPI_NOR_ConfigFlash+0xa2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8003e04:	ab03      	add	r3, sp, #12
 8003e06:	4602      	mov	r2, r0
 8003e08:	4601      	mov	r1, r0
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	4811      	ldr	r0, [pc, #68]	; (8003e54 <BSP_OSPI_NOR_ConfigFlash+0xcc>)
 8003e10:	f7ff fba1 	bl	8003556 <MX25LM51245G_ReadCfg2Register>
 8003e14:	b948      	cbnz	r0, 8003e2a <BSP_OSPI_NOR_ConfigFlash+0xa2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if (reg[0] != 0)
 8003e16:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8003e1a:	b933      	cbnz	r3, 8003e2a <BSP_OSPI_NOR_ConfigFlash+0xa2>
          if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8003e1c:	2d01      	cmp	r5, #1
 8003e1e:	d1c5      	bne.n	8003dac <BSP_OSPI_NOR_ConfigFlash+0x24>
            if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8003e20:	78a3      	ldrb	r3, [r4, #2]
 8003e22:	b94b      	cbnz	r3, 8003e38 <BSP_OSPI_NOR_ConfigFlash+0xb0>
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 8003e24:	f7ff fe96 	bl	8003b54 <OSPI_NOR_EnterDOPIMode.constprop.0>
 8003e28:	e008      	b.n	8003e3c <BSP_OSPI_NOR_ConfigFlash+0xb4>
          if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8003e2a:	f06f 0004 	mvn.w	r0, #4
 8003e2e:	e7c2      	b.n	8003db6 <BSP_OSPI_NOR_ConfigFlash+0x2e>
        if(Mode == BSP_OSPI_NOR_OPI_MODE)
 8003e30:	2901      	cmp	r1, #1
 8003e32:	d1bb      	bne.n	8003dac <BSP_OSPI_NOR_ConfigFlash+0x24>
          if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 8003e34:	2a00      	cmp	r2, #0
 8003e36:	d1f5      	bne.n	8003e24 <BSP_OSPI_NOR_ConfigFlash+0x9c>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 8003e38:	f7ff fe44 	bl	8003ac4 <OSPI_NOR_EnterSOPIMode.constprop.0>
      if(ret == BSP_ERROR_NONE)
 8003e3c:	2800      	cmp	r0, #0
 8003e3e:	d1ba      	bne.n	8003db6 <BSP_OSPI_NOR_ConfigFlash+0x2e>
 8003e40:	e7b4      	b.n	8003dac <BSP_OSPI_NOR_ConfigFlash+0x24>
    ret = BSP_ERROR_WRONG_PARAM;
 8003e42:	f06f 0001 	mvn.w	r0, #1
 8003e46:	e7b6      	b.n	8003db6 <BSP_OSPI_NOR_ConfigFlash+0x2e>
      ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 8003e48:	f06f 0019 	mvn.w	r0, #25
  return ret;
 8003e4c:	e7b3      	b.n	8003db6 <BSP_OSPI_NOR_ConfigFlash+0x2e>
 8003e4e:	bf00      	nop
 8003e50:	24001eb4 	.word	0x24001eb4
 8003e54:	24001ebc 	.word	0x24001ebc

08003e58 <MX_OSPI_ClockConfig>:
{
 8003e58:	b500      	push	{lr}
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 8003e5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
{
 8003e5e:	b0af      	sub	sp, #188	; 0xbc
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8003e60:	2250      	movs	r2, #80	; 0x50
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 8003e62:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8003e64:	2320      	movs	r3, #32
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003e66:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8003e68:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8003e6a:	2305      	movs	r3, #5
 8003e6c:	e9cd 3202 	strd	r3, r2, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8003e70:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003e72:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8003e74:	e9cd 3305 	strd	r3, r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003e78:	2300      	movs	r3, #0
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8003e7a:	e9cd 3308 	strd	r3, r3, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8003e7e:	9307      	str	r3, [sp, #28]
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003e80:	f002 ffe4 	bl	8006e4c <HAL_RCCEx_PeriphCLKConfig>
}
 8003e84:	b02f      	add	sp, #188	; 0xbc
 8003e86:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003e8c <BSP_OSPI_NOR_Init>:
{
 8003e8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e90:	460e      	mov	r6, r1
 8003e92:	b09b      	sub	sp, #108	; 0x6c
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8003e94:	2800      	cmp	r0, #0
 8003e96:	f040 8160 	bne.w	800415a <BSP_OSPI_NOR_Init+0x2ce>
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 8003e9a:	4cb1      	ldr	r4, [pc, #708]	; (8004160 <BSP_OSPI_NOR_Init+0x2d4>)
 8003e9c:	7825      	ldrb	r5, [r4, #0]
 8003e9e:	2d00      	cmp	r5, #0
 8003ea0:	f040 8159 	bne.w	8004156 <BSP_OSPI_NOR_Init+0x2ca>
  OSPI_NOR_CLK_ENABLE();
 8003ea4:	4baf      	ldr	r3, [pc, #700]	; (8004164 <BSP_OSPI_NOR_Init+0x2d8>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003ea6:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Alternate = OSPI_NOR_CS_PIN_AF;
 8003eaa:	f04f 080a 	mov.w	r8, #10
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8003eae:	a911      	add	r1, sp, #68	; 0x44
  OSPI_NOR_CLK_ENABLE();
 8003eb0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin       = OSPI_NOR_DQS_PIN;
 8003eb4:	2704      	movs	r7, #4
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8003eb6:	48ac      	ldr	r0, [pc, #688]	; (8004168 <BSP_OSPI_NOR_Init+0x2dc>)
  OSPI_NOR_CLK_ENABLE();
 8003eb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ebc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8003ec0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8003ec4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003ec8:	9201      	str	r2, [sp, #4]
 8003eca:	9a01      	ldr	r2, [sp, #4]
  OSPI_NOR_FORCE_RESET();
 8003ecc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003ece:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ed2:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_RELEASE_RESET();
 8003ed4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003ed6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003eda:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_CLK_GPIO_CLK_ENABLE();
 8003edc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003ee0:	f042 0220 	orr.w	r2, r2, #32
 8003ee4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003ee8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003eec:	f002 0220 	and.w	r2, r2, #32
 8003ef0:	9202      	str	r2, [sp, #8]
 8003ef2:	9a02      	ldr	r2, [sp, #8]
  OSPI_NOR_DQS_GPIO_CLK_ENABLE();
 8003ef4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003ef8:	f042 0202 	orr.w	r2, r2, #2
 8003efc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003f00:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003f04:	f002 0202 	and.w	r2, r2, #2
 8003f08:	9203      	str	r2, [sp, #12]
 8003f0a:	9a03      	ldr	r2, [sp, #12]
  OSPI_NOR_CS_GPIO_CLK_ENABLE();
 8003f0c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003f10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f14:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003f18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003f1c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003f20:	9204      	str	r2, [sp, #16]
 8003f22:	9a04      	ldr	r2, [sp, #16]
  OSPI_NOR_D0_GPIO_CLK_ENABLE();
 8003f24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003f28:	f042 0208 	orr.w	r2, r2, #8
 8003f2c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003f30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003f34:	f002 0208 	and.w	r2, r2, #8
 8003f38:	9205      	str	r2, [sp, #20]
 8003f3a:	9a05      	ldr	r2, [sp, #20]
  OSPI_NOR_D1_GPIO_CLK_ENABLE();
 8003f3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003f40:	f042 0208 	orr.w	r2, r2, #8
 8003f44:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003f48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003f4c:	f002 0208 	and.w	r2, r2, #8
 8003f50:	9206      	str	r2, [sp, #24]
 8003f52:	9a06      	ldr	r2, [sp, #24]
  OSPI_NOR_D2_GPIO_CLK_ENABLE();
 8003f54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003f58:	f042 0210 	orr.w	r2, r2, #16
 8003f5c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003f60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003f64:	f002 0210 	and.w	r2, r2, #16
 8003f68:	9207      	str	r2, [sp, #28]
 8003f6a:	9a07      	ldr	r2, [sp, #28]
  OSPI_NOR_D3_GPIO_CLK_ENABLE();
 8003f6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003f70:	f042 0208 	orr.w	r2, r2, #8
 8003f74:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003f78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003f7c:	f002 0208 	and.w	r2, r2, #8
 8003f80:	9208      	str	r2, [sp, #32]
 8003f82:	9a08      	ldr	r2, [sp, #32]
  OSPI_NOR_D4_GPIO_CLK_ENABLE();
 8003f84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003f88:	f042 0208 	orr.w	r2, r2, #8
 8003f8c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003f90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003f94:	f002 0208 	and.w	r2, r2, #8
 8003f98:	9209      	str	r2, [sp, #36]	; 0x24
 8003f9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  OSPI_NOR_D5_GPIO_CLK_ENABLE();
 8003f9c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003fa0:	f042 0208 	orr.w	r2, r2, #8
 8003fa4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003fa8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003fac:	f002 0208 	and.w	r2, r2, #8
 8003fb0:	920a      	str	r2, [sp, #40]	; 0x28
 8003fb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  OSPI_NOR_D6_GPIO_CLK_ENABLE();
 8003fb4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003fb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fbc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003fc0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003fc4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003fc8:	920b      	str	r2, [sp, #44]	; 0x2c
 8003fca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  OSPI_NOR_D7_GPIO_CLK_ENABLE();
 8003fcc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003fd0:	f042 0208 	orr.w	r2, r2, #8
 8003fd4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fd8:	2201      	movs	r2, #1
  OSPI_NOR_D7_GPIO_CLK_ENABLE();
 8003fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fde:	f003 0308 	and.w	r3, r3, #8
 8003fe2:	930c      	str	r3, [sp, #48]	; 0x30
 8003fe4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003fe6:	2340      	movs	r3, #64	; 0x40
 8003fe8:	e9cd 3911 	strd	r3, r9, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fec:	2303      	movs	r3, #3
  GPIO_InitStruct.Alternate = OSPI_NOR_CS_PIN_AF;
 8003fee:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ff2:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8003ff6:	f000 fc0d 	bl	8004814 <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
 8003ffa:	a911      	add	r1, sp, #68	; 0x44
 8003ffc:	485b      	ldr	r0, [pc, #364]	; (800416c <BSP_OSPI_NOR_Init+0x2e0>)
  GPIO_InitStruct.Pin       = OSPI_NOR_DQS_PIN;
 8003ffe:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8004000:	9513      	str	r5, [sp, #76]	; 0x4c
  GPIO_InitStruct.Alternate = OSPI_NOR_DQS_PIN_AF;
 8004002:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
 8004006:	f000 fc05 	bl	8004814 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_CLK_PIN;
 800400a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800400e:	9513      	str	r5, [sp, #76]	; 0x4c
  GPIO_InitStruct.Alternate = OSPI_NOR_CLK_PIN_AF;
 8004010:	2509      	movs	r5, #9
  HAL_GPIO_Init(OSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
 8004012:	a911      	add	r1, sp, #68	; 0x44
 8004014:	4856      	ldr	r0, [pc, #344]	; (8004170 <BSP_OSPI_NOR_Init+0x2e4>)
  GPIO_InitStruct.Pin       = OSPI_NOR_CLK_PIN;
 8004016:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_CLK_PIN_AF;
 8004018:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
 800401a:	f000 fbfb 	bl	8004814 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D0_PIN;
 800401e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(OSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
 8004022:	a911      	add	r1, sp, #68	; 0x44
 8004024:	4853      	ldr	r0, [pc, #332]	; (8004174 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D0_PIN;
 8004026:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D0_PIN_AF;
 8004028:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
 800402a:	f000 fbf3 	bl	8004814 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D1_PIN;
 800402e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(OSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
 8004032:	a911      	add	r1, sp, #68	; 0x44
 8004034:	484f      	ldr	r0, [pc, #316]	; (8004174 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D1_PIN;
 8004036:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D1_PIN_AF;
 8004038:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
 800403a:	f000 fbeb 	bl	8004814 <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
 800403e:	a911      	add	r1, sp, #68	; 0x44
 8004040:	484d      	ldr	r0, [pc, #308]	; (8004178 <BSP_OSPI_NOR_Init+0x2ec>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D2_PIN;
 8004042:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Pin       = OSPI_NOR_D5_PIN;
 8004044:	2720      	movs	r7, #32
  GPIO_InitStruct.Alternate = OSPI_NOR_D2_PIN_AF;
 8004046:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
 8004048:	f000 fbe4 	bl	8004814 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D3_PIN;
 800404c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(OSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
 8004050:	a911      	add	r1, sp, #68	; 0x44
 8004052:	4848      	ldr	r0, [pc, #288]	; (8004174 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D3_PIN;
 8004054:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D3_PIN_AF;
 8004056:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
 8004058:	f000 fbdc 	bl	8004814 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D4_PIN;
 800405c:	2310      	movs	r3, #16
  HAL_GPIO_Init(OSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
 800405e:	a911      	add	r1, sp, #68	; 0x44
 8004060:	4844      	ldr	r0, [pc, #272]	; (8004174 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D4_PIN;
 8004062:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D4_PIN_AF;
 8004064:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
 8004068:	f000 fbd4 	bl	8004814 <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
 800406c:	a911      	add	r1, sp, #68	; 0x44
 800406e:	4841      	ldr	r0, [pc, #260]	; (8004174 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D5_PIN;
 8004070:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D5_PIN_AF;
 8004072:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
 8004076:	f000 fbcd 	bl	8004814 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D6_PIN;
 800407a:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(OSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
 800407e:	a911      	add	r1, sp, #68	; 0x44
 8004080:	4839      	ldr	r0, [pc, #228]	; (8004168 <BSP_OSPI_NOR_Init+0x2dc>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D6_PIN;
 8004082:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D6_PIN_AF;
 8004084:	9515      	str	r5, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
 8004086:	f000 fbc5 	bl	8004814 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D7_PIN;
 800408a:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(OSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
 800408c:	a911      	add	r1, sp, #68	; 0x44
 800408e:	4839      	ldr	r0, [pc, #228]	; (8004174 <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D7_PIN;
 8004090:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D7_PIN_AF;
 8004092:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
 8004096:	f000 fbbd 	bl	8004814 <HAL_GPIO_Init>
      (void)MX25LM51245G_GetFlashInfo(&pInfo);
 800409a:	a811      	add	r0, sp, #68	; 0x44
 800409c:	f7ff f81f 	bl	80030de <MX25LM51245G_GetFlashInfo>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
      ospi_config.ClockPrescaler = 2U;
 80040a2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80040a6:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80040aa:	b10b      	cbz	r3, 80040b0 <BSP_OSPI_NOR_Init+0x224>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80040ac:	fab3 f783 	clz	r7, r3
      ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80040b0:	2300      	movs	r3, #0
      if (MX_OSPI_ClockConfig(&hospi_nor[Instance]) != HAL_OK)
 80040b2:	4832      	ldr	r0, [pc, #200]	; (800417c <BSP_OSPI_NOR_Init+0x2f0>)
      ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 80040b4:	970d      	str	r7, [sp, #52]	; 0x34
      ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80040b6:	930f      	str	r3, [sp, #60]	; 0x3c
      ospi_config.TransferRate   = Init->TransferRate;
 80040b8:	7873      	ldrb	r3, [r6, #1]
 80040ba:	9310      	str	r3, [sp, #64]	; 0x40
      if (MX_OSPI_ClockConfig(&hospi_nor[Instance]) != HAL_OK)
 80040bc:	f7ff fecc 	bl	8003e58 <MX_OSPI_ClockConfig>
 80040c0:	b120      	cbz	r0, 80040cc <BSP_OSPI_NOR_Init+0x240>
        ret = BSP_ERROR_PERIPH_FAILURE;
 80040c2:	f06f 0003 	mvn.w	r0, #3
}
 80040c6:	b01b      	add	sp, #108	; 0x6c
 80040c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      else if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 80040cc:	a90d      	add	r1, sp, #52	; 0x34
 80040ce:	482b      	ldr	r0, [pc, #172]	; (800417c <BSP_OSPI_NOR_Init+0x2f0>)
 80040d0:	f7ff fd94 	bl	8003bfc <MX_OSPI_NOR_Init>
 80040d4:	4602      	mov	r2, r0
 80040d6:	2800      	cmp	r0, #0
 80040d8:	d1f3      	bne.n	80040c2 <BSP_OSPI_NOR_Init+0x236>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80040da:	4601      	mov	r1, r0
 80040dc:	4827      	ldr	r0, [pc, #156]	; (800417c <BSP_OSPI_NOR_Init+0x2f0>)
 80040de:	f7ff faa4 	bl	800362a <MX25LM51245G_ResetEnable>
 80040e2:	4602      	mov	r2, r0
 80040e4:	b110      	cbz	r0, 80040ec <BSP_OSPI_NOR_Init+0x260>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80040e6:	f06f 0004 	mvn.w	r0, #4
 80040ea:	e7ec      	b.n	80040c6 <BSP_OSPI_NOR_Init+0x23a>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80040ec:	4601      	mov	r1, r0
 80040ee:	4823      	ldr	r0, [pc, #140]	; (800417c <BSP_OSPI_NOR_Init+0x2f0>)
 80040f0:	f7ff fad4 	bl	800369c <MX25LM51245G_ResetMemory>
 80040f4:	4602      	mov	r2, r0
 80040f6:	2800      	cmp	r0, #0
 80040f8:	d1f5      	bne.n	80040e6 <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80040fa:	2101      	movs	r1, #1
 80040fc:	481f      	ldr	r0, [pc, #124]	; (800417c <BSP_OSPI_NOR_Init+0x2f0>)
 80040fe:	f7ff fa94 	bl	800362a <MX25LM51245G_ResetEnable>
 8004102:	4602      	mov	r2, r0
 8004104:	2800      	cmp	r0, #0
 8004106:	d1ee      	bne.n	80040e6 <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004108:	2101      	movs	r1, #1
 800410a:	481c      	ldr	r0, [pc, #112]	; (800417c <BSP_OSPI_NOR_Init+0x2f0>)
 800410c:	f7ff fac6 	bl	800369c <MX25LM51245G_ResetMemory>
 8004110:	2800      	cmp	r0, #0
 8004112:	d1e8      	bne.n	80040e6 <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8004114:	2201      	movs	r2, #1
 8004116:	4819      	ldr	r0, [pc, #100]	; (800417c <BSP_OSPI_NOR_Init+0x2f0>)
 8004118:	4611      	mov	r1, r2
 800411a:	f7ff fa86 	bl	800362a <MX25LM51245G_ResetEnable>
 800411e:	2800      	cmp	r0, #0
 8004120:	d1e1      	bne.n	80040e6 <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8004122:	2201      	movs	r2, #1
 8004124:	4815      	ldr	r0, [pc, #84]	; (800417c <BSP_OSPI_NOR_Init+0x2f0>)
 8004126:	4611      	mov	r1, r2
 8004128:	f7ff fab8 	bl	800369c <MX25LM51245G_ResetMemory>
 800412c:	2800      	cmp	r0, #0
 800412e:	d1da      	bne.n	80040e6 <BSP_OSPI_NOR_Init+0x25a>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 8004130:	2301      	movs	r3, #1
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 8004132:	70a0      	strb	r0, [r4, #2]
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 8004134:	2064      	movs	r0, #100	; 0x64
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 8004136:	8023      	strh	r3, [r4, #0]
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 8004138:	f000 f99a 	bl	8004470 <HAL_Delay>
      else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800413c:	78a2      	ldrb	r2, [r4, #2]
 800413e:	7861      	ldrb	r1, [r4, #1]
 8004140:	480e      	ldr	r0, [pc, #56]	; (800417c <BSP_OSPI_NOR_Init+0x2f0>)
 8004142:	f7fe ffe5 	bl	8003110 <MX25LM51245G_AutoPollingMemReady>
 8004146:	2800      	cmp	r0, #0
 8004148:	d1cd      	bne.n	80040e6 <BSP_OSPI_NOR_Init+0x25a>
      else if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800414a:	7872      	ldrb	r2, [r6, #1]
 800414c:	7831      	ldrb	r1, [r6, #0]
 800414e:	f7ff fe1b 	bl	8003d88 <BSP_OSPI_NOR_ConfigFlash>
 8004152:	2800      	cmp	r0, #0
 8004154:	d1c7      	bne.n	80040e6 <BSP_OSPI_NOR_Init+0x25a>
        ret = BSP_ERROR_NONE;
 8004156:	2000      	movs	r0, #0
 8004158:	e7b5      	b.n	80040c6 <BSP_OSPI_NOR_Init+0x23a>
    ret = BSP_ERROR_WRONG_PARAM;
 800415a:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800415e:	e7b2      	b.n	80040c6 <BSP_OSPI_NOR_Init+0x23a>
 8004160:	24001eb4 	.word	0x24001eb4
 8004164:	58024400 	.word	0x58024400
 8004168:	58021800 	.word	0x58021800
 800416c:	58020400 	.word	0x58020400
 8004170:	58021400 	.word	0x58021400
 8004174:	58020c00 	.word	0x58020c00
 8004178:	58021000 	.word	0x58021000
 800417c:	24001ebc 	.word	0x24001ebc

08004180 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8004180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004184:	460c      	mov	r4, r1
 8004186:	b088      	sub	sp, #32
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8004188:	2800      	cmp	r0, #0
 800418a:	d163      	bne.n	8004254 <BSP_TS_Init+0xd4>
 800418c:	680b      	ldr	r3, [r1, #0]
 800418e:	1e5a      	subs	r2, r3, #1
 8004190:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
 8004194:	d25e      	bcs.n	8004254 <BSP_TS_Init+0xd4>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8004196:	684a      	ldr	r2, [r1, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8004198:	1e51      	subs	r1, r2, #1
 800419a:	f5b1 7f88 	cmp.w	r1, #272	; 0x110
 800419e:	d259      	bcs.n	8004254 <BSP_TS_Init+0xd4>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 80041a0:	4293      	cmp	r3, r2
 80041a2:	bf28      	it	cs
 80041a4:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80041a6:	68e2      	ldr	r2, [r4, #12]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d853      	bhi.n	8004254 <BSP_TS_Init+0xd4>
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 80041ac:	2370      	movs	r3, #112	; 0x70
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 80041ae:	4d2b      	ldr	r5, [pc, #172]	; (800425c <BSP_TS_Init+0xdc>)
  uint32_t ft5336_id       = 0;
 80041b0:	9001      	str	r0, [sp, #4]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 80041b2:	a902      	add	r1, sp, #8
  IOCtx.Address     = TS_I2C_ADDRESS;
 80041b4:	f8ad 3010 	strh.w	r3, [sp, #16]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 80041b8:	4628      	mov	r0, r5
  IOCtx.Init        = BSP_I2C4_Init;
 80041ba:	4b29      	ldr	r3, [pc, #164]	; (8004260 <BSP_TS_Init+0xe0>)
 80041bc:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 80041be:	4b29      	ldr	r3, [pc, #164]	; (8004264 <BSP_TS_Init+0xe4>)
 80041c0:	9303      	str	r3, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 80041c2:	4b29      	ldr	r3, [pc, #164]	; (8004268 <BSP_TS_Init+0xe8>)
 80041c4:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 80041c6:	4b29      	ldr	r3, [pc, #164]	; (800426c <BSP_TS_Init+0xec>)
 80041c8:	9305      	str	r3, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
 80041ca:	4b29      	ldr	r3, [pc, #164]	; (8004270 <BSP_TS_Init+0xf0>)
 80041cc:	9307      	str	r3, [sp, #28]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 80041ce:	f7fe fef1 	bl	8002fb4 <FT5336_RegisterBusIO>
 80041d2:	b128      	cbz	r0, 80041e0 <BSP_TS_Init+0x60>
      ret = BSP_ERROR_NO_INIT;
 80041d4:	f04f 35ff 	mov.w	r5, #4294967295
}
 80041d8:	4628      	mov	r0, r5
 80041da:	b008      	add	sp, #32
 80041dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 80041e0:	a901      	add	r1, sp, #4
 80041e2:	4628      	mov	r0, r5
 80041e4:	f7fe fe4c 	bl	8002e80 <FT5336_ReadID>
 80041e8:	2800      	cmp	r0, #0
 80041ea:	d1f3      	bne.n	80041d4 <BSP_TS_Init+0x54>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
 80041ec:	9b01      	ldr	r3, [sp, #4]
 80041ee:	2b51      	cmp	r3, #81	; 0x51
 80041f0:	d1f0      	bne.n	80041d4 <BSP_TS_Init+0x54>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 80041f2:	4b20      	ldr	r3, [pc, #128]	; (8004274 <BSP_TS_Init+0xf4>)

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 80041f4:	4628      	mov	r0, r5
    Ts_CompObj[Instance] = &FT5336Obj;
 80041f6:	4f20      	ldr	r7, [pc, #128]	; (8004278 <BSP_TS_Init+0xf8>)
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 80041f8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8004280 <BSP_TS_Init+0x100>
    Ts_CompObj[Instance] = &FT5336Obj;
 80041fc:	603d      	str	r5, [r7, #0]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 80041fe:	f8c8 3000 	str.w	r3, [r8]
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4798      	blx	r3
 8004206:	4605      	mov	r5, r0
 8004208:	2800      	cmp	r0, #0
 800420a:	d1e3      	bne.n	80041d4 <BSP_TS_Init+0x54>
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 800420c:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800420e:	a902      	add	r1, sp, #8
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 8004210:	4e1a      	ldr	r6, [pc, #104]	; (800427c <BSP_TS_Init+0xfc>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8004212:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 8004214:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 8004216:	6863      	ldr	r3, [r4, #4]
 8004218:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 800421a:	68a3      	ldr	r3, [r4, #8]
 800421c:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 800421e:	68e3      	ldr	r3, [r4, #12]
 8004220:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8004222:	f8d8 3000 	ldr.w	r3, [r8]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	4798      	blx	r3
 800422a:	2800      	cmp	r0, #0
 800422c:	db0f      	blt.n	800424e <BSP_TS_Init+0xce>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800422e:	9b03      	ldr	r3, [sp, #12]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8004230:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8004232:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8004234:	9b04      	ldr	r3, [sp, #16]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8004236:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8004238:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800423a:	68e3      	ldr	r3, [r4, #12]
 800423c:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800423e:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8004240:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8004242:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8004244:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8004246:	6273      	str	r3, [r6, #36]	; 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8004248:	e9c6 2307 	strd	r2, r3, [r6, #28]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800424c:	e7c4      	b.n	80041d8 <BSP_TS_Init+0x58>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800424e:	f06f 0504 	mvn.w	r5, #4
 8004252:	e7c1      	b.n	80041d8 <BSP_TS_Init+0x58>
    ret = BSP_ERROR_WRONG_PARAM;
 8004254:	f06f 0501 	mvn.w	r5, #1
  return ret;
 8004258:	e7be      	b.n	80041d8 <BSP_TS_Init+0x58>
 800425a:	bf00      	nop
 800425c:	24001f1c 	.word	0x24001f1c
 8004260:	080037a9 	.word	0x080037a9
 8004264:	08003711 	.word	0x08003711
 8004268:	08003a8d 	.word	0x08003a8d
 800426c:	08003a59 	.word	0x08003a59
 8004270:	08003ac1 	.word	0x08003ac1
 8004274:	2400003c 	.word	0x2400003c
 8004278:	24001f44 	.word	0x24001f44
 800427c:	24001f48 	.word	0x24001f48
 8004280:	24001f70 	.word	0x24001f70

08004284 <BSP_TS_GetState>:
{
 8004284:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004288:	460c      	mov	r4, r1
  if(Instance >= TS_INSTANCES_NBR)
 800428a:	2800      	cmp	r0, #0
 800428c:	d151      	bne.n	8004332 <BSP_TS_GetState+0xae>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800428e:	4b2a      	ldr	r3, [pc, #168]	; (8004338 <BSP_TS_GetState+0xb4>)
 8004290:	a901      	add	r1, sp, #4
 8004292:	4a2a      	ldr	r2, [pc, #168]	; (800433c <BSP_TS_GetState+0xb8>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6810      	ldr	r0, [r2, #0]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	4798      	blx	r3
 800429c:	2800      	cmp	r0, #0
 800429e:	db45      	blt.n	800432c <BSP_TS_GetState+0xa8>
    else if(state.TouchDetected != 0U)
 80042a0:	4b27      	ldr	r3, [pc, #156]	; (8004340 <BSP_TS_GetState+0xbc>)
 80042a2:	9801      	ldr	r0, [sp, #4]
 80042a4:	f8d3 c018 	ldr.w	ip, [r3, #24]
 80042a8:	6a1f      	ldr	r7, [r3, #32]
 80042aa:	2800      	cmp	r0, #0
 80042ac:	d03a      	beq.n	8004324 <BSP_TS_GetState+0xa0>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 80042ae:	689e      	ldr	r6, [r3, #8]
 80042b0:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80042b4:	0732      	lsls	r2, r6, #28
      y_oriented = state.TouchY;
 80042b6:	e9dd e102 	ldrd	lr, r1, [sp, #8]
        x_oriented = state.TouchY;
 80042ba:	bf4b      	itete	mi
 80042bc:	460d      	movmi	r5, r1
      x_oriented = state.TouchX;
 80042be:	4675      	movpl	r5, lr
        y_oriented = state.TouchX;
 80042c0:	4672      	movmi	r2, lr
      y_oriented = state.TouchY;
 80042c2:	460a      	movpl	r2, r1
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 80042c4:	f016 0f02 	tst.w	r6, #2
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 80042c8:	bf1c      	itt	ne
 80042ca:	f108 35ff 	addne.w	r5, r8, #4294967295
 80042ce:	eba5 050e 	subne.w	r5, r5, lr
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 80042d2:	f8d3 e014 	ldr.w	lr, [r3, #20]
 80042d6:	0776      	lsls	r6, r6, #29
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80042d8:	681e      	ldr	r6, [r3, #0]
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 80042da:	bf48      	it	mi
 80042dc:	ebae 0201 	submi.w	r2, lr, r1
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80042e0:	4375      	muls	r5, r6
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80042e2:	6859      	ldr	r1, [r3, #4]
      TS_State->TouchDetected = state.TouchDetected;
 80042e4:	6020      	str	r0, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80042e6:	434a      	muls	r2, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80042e8:	68d8      	ldr	r0, [r3, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80042ea:	fbb5 f5f8 	udiv	r5, r5, r8
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80042ee:	fbb2 f2fe 	udiv	r2, r2, lr
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80042f2:	4565      	cmp	r5, ip
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80042f4:	6065      	str	r5, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80042f6:	60a2      	str	r2, [r4, #8]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80042f8:	bf8c      	ite	hi
 80042fa:	eba5 060c 	subhi.w	r6, r5, ip
 80042fe:	ebac 0605 	subls.w	r6, ip, r5
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8004302:	42ba      	cmp	r2, r7
 8004304:	bf8c      	ite	hi
 8004306:	1bd1      	subhi	r1, r2, r7
 8004308:	1ab9      	subls	r1, r7, r2
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800430a:	42b0      	cmp	r0, r6
 800430c:	d301      	bcc.n	8004312 <BSP_TS_GetState+0x8e>
 800430e:	4288      	cmp	r0, r1
 8004310:	d205      	bcs.n	800431e <BSP_TS_GetState+0x9a>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8004312:	619d      	str	r5, [r3, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8004314:	621a      	str	r2, [r3, #32]
  int32_t ret = BSP_ERROR_NONE;
 8004316:	2000      	movs	r0, #0
}
 8004318:	b004      	add	sp, #16
 800431a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800431e:	e9c4 c701 	strd	ip, r7, [r4, #4]
 8004322:	e7f8      	b.n	8004316 <BSP_TS_GetState+0x92>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8004324:	e9c4 0c00 	strd	r0, ip, [r4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8004328:	60a7      	str	r7, [r4, #8]
 800432a:	e7f5      	b.n	8004318 <BSP_TS_GetState+0x94>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800432c:	f06f 0004 	mvn.w	r0, #4
 8004330:	e7f2      	b.n	8004318 <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 8004332:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8004336:	e7ef      	b.n	8004318 <BSP_TS_GetState+0x94>
 8004338:	24001f70 	.word	0x24001f70
 800433c:	24001f44 	.word	0x24001f44
 8004340:	24001f48 	.word	0x24001f48

08004344 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004344:	4a22      	ldr	r2, [pc, #136]	; (80043d0 <SystemInit+0x8c>)
 8004346:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800434a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800434e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004352:	4a20      	ldr	r2, [pc, #128]	; (80043d4 <SystemInit+0x90>)
 8004354:	6813      	ldr	r3, [r2, #0]
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	2b06      	cmp	r3, #6
 800435c:	d805      	bhi.n	800436a <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800435e:	6813      	ldr	r3, [r2, #0]
 8004360:	f023 030f 	bic.w	r3, r3, #15
 8004364:	f043 0307 	orr.w	r3, r3, #7
 8004368:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800436a:	4b1b      	ldr	r3, [pc, #108]	; (80043d8 <SystemInit+0x94>)
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	f042 0201 	orr.w	r2, r2, #1
 8004372:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004374:	2200      	movs	r2, #0
 8004376:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004378:	4a18      	ldr	r2, [pc, #96]	; (80043dc <SystemInit+0x98>)
 800437a:	6819      	ldr	r1, [r3, #0]
 800437c:	400a      	ands	r2, r1
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800437e:	4915      	ldr	r1, [pc, #84]	; (80043d4 <SystemInit+0x90>)
  RCC->CR &= 0xEAF6ED7FU;
 8004380:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004382:	680a      	ldr	r2, [r1, #0]
 8004384:	0712      	lsls	r2, r2, #28
 8004386:	d505      	bpl.n	8004394 <SystemInit+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004388:	680a      	ldr	r2, [r1, #0]
 800438a:	f022 020f 	bic.w	r2, r2, #15
 800438e:	f042 0207 	orr.w	r2, r2, #7
 8004392:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004394:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004396:	4912      	ldr	r1, [pc, #72]	; (80043e0 <SystemInit+0x9c>)
  RCC->D1CFGR = 0x00000000;
 8004398:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800439a:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800439c:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800439e:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80043a0:	4910      	ldr	r1, [pc, #64]	; (80043e4 <SystemInit+0xa0>)
 80043a2:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80043a4:	4910      	ldr	r1, [pc, #64]	; (80043e8 <SystemInit+0xa4>)
 80043a6:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80043a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80043aa:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80043ac:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80043ae:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80043b0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80043b2:	6819      	ldr	r1, [r3, #0]
 80043b4:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80043b8:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80043ba:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80043bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80043c0:	4b0a      	ldr	r3, [pc, #40]	; (80043ec <SystemInit+0xa8>)
 80043c2:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80043c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80043c8:	4b01      	ldr	r3, [pc, #4]	; (80043d0 <SystemInit+0x8c>)
 80043ca:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	e000ed00 	.word	0xe000ed00
 80043d4:	52002000 	.word	0x52002000
 80043d8:	58024400 	.word	0x58024400
 80043dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80043e0:	02020200 	.word	0x02020200
 80043e4:	01ff0000 	.word	0x01ff0000
 80043e8:	01010280 	.word	0x01010280
 80043ec:	52004000 	.word	0x52004000

080043f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043f0:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043f2:	2003      	movs	r0, #3
 80043f4:	f000 f84e 	bl	8004494 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80043f8:	f002 fa02 	bl	8006800 <HAL_RCC_GetSysClockFreq>
 80043fc:	490f      	ldr	r1, [pc, #60]	; (800443c <HAL_Init+0x4c>)
 80043fe:	4a10      	ldr	r2, [pc, #64]	; (8004440 <HAL_Init+0x50>)
 8004400:	698b      	ldr	r3, [r1, #24]
 8004402:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004406:	5cd3      	ldrb	r3, [r2, r3]
 8004408:	f003 031f 	and.w	r3, r3, #31
 800440c:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800440e:	698b      	ldr	r3, [r1, #24]
 8004410:	f003 030f 	and.w	r3, r3, #15
 8004414:	5cd3      	ldrb	r3, [r2, r3]
 8004416:	4a0b      	ldr	r2, [pc, #44]	; (8004444 <HAL_Init+0x54>)
 8004418:	f003 031f 	and.w	r3, r3, #31
 800441c:	fa20 f303 	lsr.w	r3, r0, r3
 8004420:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004422:	4b09      	ldr	r3, [pc, #36]	; (8004448 <HAL_Init+0x58>)
 8004424:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004426:	2000      	movs	r0, #0
 8004428:	f7fc fdb2 	bl	8000f90 <HAL_InitTick>
 800442c:	4604      	mov	r4, r0
 800442e:	b918      	cbnz	r0, 8004438 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004430:	f7fc fab8 	bl	80009a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8004434:	4620      	mov	r0, r4
 8004436:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004438:	2401      	movs	r4, #1
 800443a:	e7fb      	b.n	8004434 <HAL_Init+0x44>
 800443c:	58024400 	.word	0x58024400
 8004440:	0801b07c 	.word	0x0801b07c
 8004444:	24000070 	.word	0x24000070
 8004448:	2400006c 	.word	0x2400006c

0800444c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800444c:	4a03      	ldr	r2, [pc, #12]	; (800445c <HAL_IncTick+0x10>)
 800444e:	4b04      	ldr	r3, [pc, #16]	; (8004460 <HAL_IncTick+0x14>)
 8004450:	6811      	ldr	r1, [r2, #0]
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	440b      	add	r3, r1
 8004456:	6013      	str	r3, [r2, #0]
}
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	24006da4 	.word	0x24006da4
 8004460:	24000074 	.word	0x24000074

08004464 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004464:	4b01      	ldr	r3, [pc, #4]	; (800446c <HAL_GetTick+0x8>)
 8004466:	6818      	ldr	r0, [r3, #0]
}
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	24006da4 	.word	0x24006da4

08004470 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004470:	b538      	push	{r3, r4, r5, lr}
 8004472:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004474:	f7ff fff6 	bl	8004464 <HAL_GetTick>
 8004478:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800447a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800447c:	bf1e      	ittt	ne
 800447e:	4b04      	ldrne	r3, [pc, #16]	; (8004490 <HAL_Delay+0x20>)
 8004480:	781b      	ldrbne	r3, [r3, #0]
 8004482:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004484:	f7ff ffee 	bl	8004464 <HAL_GetTick>
 8004488:	1b43      	subs	r3, r0, r5
 800448a:	42a3      	cmp	r3, r4
 800448c:	d3fa      	bcc.n	8004484 <HAL_Delay+0x14>
  {
  }
}
 800448e:	bd38      	pop	{r3, r4, r5, pc}
 8004490:	24000074 	.word	0x24000074

08004494 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004494:	4907      	ldr	r1, [pc, #28]	; (80044b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004496:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004498:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800449a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800449e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044a2:	0412      	lsls	r2, r2, #16
 80044a4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80044b0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80044b2:	4770      	bx	lr
 80044b4:	e000ed00 	.word	0xe000ed00

080044b8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044b8:	4b16      	ldr	r3, [pc, #88]	; (8004514 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044ba:	b530      	push	{r4, r5, lr}
 80044bc:	68dc      	ldr	r4, [r3, #12]
 80044be:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044c2:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044c6:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044c8:	2d04      	cmp	r5, #4
 80044ca:	bf28      	it	cs
 80044cc:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044ce:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044d0:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044d4:	bf8c      	ite	hi
 80044d6:	3c03      	subhi	r4, #3
 80044d8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044da:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 80044de:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044e0:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044e4:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044e8:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044ec:	fa01 f104 	lsl.w	r1, r1, r4
 80044f0:	ea41 0302 	orr.w	r3, r1, r2
 80044f4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80044f8:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80044fa:	db06      	blt.n	800450a <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044fc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004500:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004504:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004508:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800450a:	f000 000f 	and.w	r0, r0, #15
 800450e:	4a02      	ldr	r2, [pc, #8]	; (8004518 <HAL_NVIC_SetPriority+0x60>)
 8004510:	5413      	strb	r3, [r2, r0]
 8004512:	e7f9      	b.n	8004508 <HAL_NVIC_SetPriority+0x50>
 8004514:	e000ed00 	.word	0xe000ed00
 8004518:	e000ed14 	.word	0xe000ed14

0800451c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800451c:	2800      	cmp	r0, #0
 800451e:	db08      	blt.n	8004532 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004520:	2301      	movs	r3, #1
 8004522:	0942      	lsrs	r2, r0, #5
 8004524:	f000 001f 	and.w	r0, r0, #31
 8004528:	fa03 f000 	lsl.w	r0, r3, r0
 800452c:	4b01      	ldr	r3, [pc, #4]	; (8004534 <HAL_NVIC_EnableIRQ+0x18>)
 800452e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004532:	4770      	bx	lr
 8004534:	e000e100 	.word	0xe000e100

08004538 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8004538:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800453c:	4a04      	ldr	r2, [pc, #16]	; (8004550 <HAL_MPU_Disable+0x18>)
 800453e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004544:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004546:	2200      	movs	r2, #0
 8004548:	4b02      	ldr	r3, [pc, #8]	; (8004554 <HAL_MPU_Disable+0x1c>)
 800454a:	605a      	str	r2, [r3, #4]
}
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	e000ed00 	.word	0xe000ed00
 8004554:	e000ed90 	.word	0xe000ed90

08004558 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004558:	4a06      	ldr	r2, [pc, #24]	; (8004574 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800455a:	f040 0001 	orr.w	r0, r0, #1
 800455e:	4b06      	ldr	r3, [pc, #24]	; (8004578 <HAL_MPU_Enable+0x20>)
 8004560:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004562:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004568:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800456a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800456e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004572:	4770      	bx	lr
 8004574:	e000ed00 	.word	0xe000ed00
 8004578:	e000ed90 	.word	0xe000ed90

0800457c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800457c:	7843      	ldrb	r3, [r0, #1]
 800457e:	4a12      	ldr	r2, [pc, #72]	; (80045c8 <HAL_MPU_ConfigRegion+0x4c>)
{
 8004580:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8004582:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 8004584:	7801      	ldrb	r1, [r0, #0]
 8004586:	b1d9      	cbz	r1, 80045c0 <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8004588:	6843      	ldr	r3, [r0, #4]
 800458a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800458c:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800458e:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004590:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004592:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004596:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004598:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800459a:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800459e:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80045a0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80045a4:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80045a6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80045aa:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80045ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80045b0:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80045b2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80045b6:	7a01      	ldrb	r1, [r0, #8]
 80045b8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80045bc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80045be:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 80045c0:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 80045c2:	6111      	str	r1, [r2, #16]
}
 80045c4:	e7fb      	b.n	80045be <HAL_MPU_ConfigRegion+0x42>
 80045c6:	bf00      	nop
 80045c8:	e000ed90 	.word	0xe000ed90

080045cc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80045cc:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80045ce:	4604      	mov	r4, r0
 80045d0:	b908      	cbnz	r0, 80045d6 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 80045d2:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80045d4:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 80045d6:	7f43      	ldrb	r3, [r0, #29]
 80045d8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80045dc:	b913      	cbnz	r3, 80045e4 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 80045de:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80045e0:	f7fc f9f8 	bl	80009d4 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 80045e4:	2302      	movs	r3, #2
 80045e6:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80045e8:	7923      	ldrb	r3, [r4, #4]
 80045ea:	b9e3      	cbnz	r3, 8004626 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	4a13      	ldr	r2, [pc, #76]	; (800463c <HAL_CRC_Init+0x70>)
 80045f0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	f022 0218 	bic.w	r2, r2, #24
 80045f8:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80045fa:	7962      	ldrb	r2, [r4, #5]
 80045fc:	6823      	ldr	r3, [r4, #0]
 80045fe:	b9d2      	cbnz	r2, 8004636 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004600:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004604:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8004606:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	6961      	ldr	r1, [r4, #20]
 800460c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004610:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004612:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004614:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800461c:	430a      	orrs	r2, r1
 800461e:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8004620:	2301      	movs	r3, #1
 8004622:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8004624:	e7d6      	b.n	80045d4 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004626:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800462a:	4620      	mov	r0, r4
 800462c:	f000 f808 	bl	8004640 <HAL_CRCEx_Polynomial_Set>
 8004630:	2800      	cmp	r0, #0
 8004632:	d0e2      	beq.n	80045fa <HAL_CRC_Init+0x2e>
 8004634:	e7cd      	b.n	80045d2 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004636:	6922      	ldr	r2, [r4, #16]
 8004638:	e7e4      	b.n	8004604 <HAL_CRC_Init+0x38>
 800463a:	bf00      	nop
 800463c:	04c11db7 	.word	0x04c11db7

08004640 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004640:	231f      	movs	r3, #31
{
 8004642:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004644:	3b01      	subs	r3, #1
 8004646:	d306      	bcc.n	8004656 <HAL_CRCEx_Polynomial_Set+0x16>
 8004648:	fa21 f403 	lsr.w	r4, r1, r3
 800464c:	07e4      	lsls	r4, r4, #31
 800464e:	d5f9      	bpl.n	8004644 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8004650:	2a08      	cmp	r2, #8
 8004652:	d014      	beq.n	800467e <HAL_CRCEx_Polynomial_Set+0x3e>
 8004654:	d802      	bhi.n	800465c <HAL_CRCEx_Polynomial_Set+0x1c>
 8004656:	b13a      	cbz	r2, 8004668 <HAL_CRCEx_Polynomial_Set+0x28>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8004658:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 800465a:	e00d      	b.n	8004678 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 800465c:	2a10      	cmp	r2, #16
 800465e:	d00c      	beq.n	800467a <HAL_CRCEx_Polynomial_Set+0x3a>
 8004660:	2a18      	cmp	r2, #24
 8004662:	d1f9      	bne.n	8004658 <HAL_CRCEx_Polynomial_Set+0x18>
      if (msb >= HAL_CRC_LENGTH_7B)
 8004664:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8004666:	d8f7      	bhi.n	8004658 <HAL_CRCEx_Polynomial_Set+0x18>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004668:	6800      	ldr	r0, [r0, #0]
 800466a:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800466c:	6883      	ldr	r3, [r0, #8]
 800466e:	f023 0318 	bic.w	r3, r3, #24
 8004672:	431a      	orrs	r2, r3
 8004674:	6082      	str	r2, [r0, #8]
 8004676:	2000      	movs	r0, #0
}
 8004678:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 800467a:	2b07      	cmp	r3, #7
 800467c:	e7f3      	b.n	8004666 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 800467e:	2b0f      	cmp	r3, #15
 8004680:	e7f1      	b.n	8004666 <HAL_CRCEx_Polynomial_Set+0x26>

08004682 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004682:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004684:	4604      	mov	r4, r0
 8004686:	2800      	cmp	r0, #0
 8004688:	d036      	beq.n	80046f8 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800468a:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800468e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004692:	b91b      	cbnz	r3, 800469c <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004694:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004698:	f7fc f9b4 	bl	8000a04 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800469c:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800469e:	69e0      	ldr	r0, [r4, #28]
 80046a0:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80046a2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80046aa:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80046ac:	6819      	ldr	r1, [r3, #0]
 80046ae:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 80046b2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80046b6:	430a      	orrs	r2, r1
 80046b8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80046ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80046bc:	68a2      	ldr	r2, [r4, #8]
 80046be:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 80046c2:	4302      	orrs	r2, r0
 80046c4:	f021 0101 	bic.w	r1, r1, #1
 80046c8:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80046ca:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80046cc:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80046ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046d0:	0c12      	lsrs	r2, r2, #16
 80046d2:	0412      	lsls	r2, r2, #16
 80046d4:	430a      	orrs	r2, r1
 80046d6:	641a      	str	r2, [r3, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80046d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80046da:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 80046de:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80046e2:	0552      	lsls	r2, r2, #21
 80046e4:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80046e8:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80046ea:	430a      	orrs	r2, r1
 80046ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80046ee:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80046f0:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80046f2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 80046f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80046f8:	2001      	movs	r0, #1
 80046fa:	e7fc      	b.n	80046f6 <HAL_DMA2D_Init+0x74>

080046fc <HAL_DMA2D_LineEventCallback>:
 80046fc:	4770      	bx	lr

080046fe <HAL_DMA2D_CLUTLoadingCpltCallback>:
 80046fe:	4770      	bx	lr

08004700 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004700:	6803      	ldr	r3, [r0, #0]
{
 8004702:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004704:	685e      	ldr	r6, [r3, #4]
{
 8004706:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004708:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800470a:	07f2      	lsls	r2, r6, #31
 800470c:	d514      	bpl.n	8004738 <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800470e:	05e9      	lsls	r1, r5, #23
 8004710:	d512      	bpl.n	8004738 <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004718:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800471a:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800471c:	f042 0201 	orr.w	r2, r2, #1
 8004720:	6642      	str	r2, [r0, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004722:	2201      	movs	r2, #1
 8004724:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004726:	2304      	movs	r3, #4
 8004728:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800472c:	2300      	movs	r3, #0
 800472e:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8004732:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004734:	b103      	cbz	r3, 8004738 <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004736:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004738:	06b2      	lsls	r2, r6, #26
 800473a:	d516      	bpl.n	800476a <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800473c:	04ab      	lsls	r3, r5, #18
 800473e:	d514      	bpl.n	800476a <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004748:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800474a:	2220      	movs	r2, #32
 800474c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800474e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004750:	f043 0302 	orr.w	r3, r3, #2
 8004754:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004756:	2304      	movs	r3, #4
 8004758:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800475c:	2300      	movs	r3, #0
 800475e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8004762:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004764:	b10b      	cbz	r3, 800476a <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004766:	4620      	mov	r0, r4
 8004768:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800476a:	0730      	lsls	r0, r6, #28
 800476c:	d516      	bpl.n	800479c <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800476e:	0529      	lsls	r1, r5, #20
 8004770:	d514      	bpl.n	800479c <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800477a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800477c:	2208      	movs	r2, #8
 800477e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004780:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004782:	f043 0304 	orr.w	r3, r3, #4
 8004786:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004788:	2304      	movs	r3, #4
 800478a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800478e:	2300      	movs	r3, #0
 8004790:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8004794:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004796:	b10b      	cbz	r3, 800479c <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004798:	4620      	mov	r0, r4
 800479a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800479c:	0772      	lsls	r2, r6, #29
 800479e:	d50b      	bpl.n	80047b8 <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80047a0:	056b      	lsls	r3, r5, #21
 80047a2:	d509      	bpl.n	80047b8 <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80047a4:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80047a6:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80047b0:	2204      	movs	r2, #4
 80047b2:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80047b4:	f7ff ffa2 	bl	80046fc <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80047b8:	07b0      	lsls	r0, r6, #30
 80047ba:	d514      	bpl.n	80047e6 <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80047bc:	05a9      	lsls	r1, r5, #22
 80047be:	d512      	bpl.n	80047e6 <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80047c0:	6823      	ldr	r3, [r4, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80047c8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80047ca:	2202      	movs	r2, #2
 80047cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80047ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047d0:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80047d2:	2301      	movs	r3, #1
 80047d4:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80047d8:	2300      	movs	r3, #0
 80047da:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 80047de:	6a23      	ldr	r3, [r4, #32]
 80047e0:	b10b      	cbz	r3, 80047e6 <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80047e2:	4620      	mov	r0, r4
 80047e4:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80047e6:	06f2      	lsls	r2, r6, #27
 80047e8:	d513      	bpl.n	8004812 <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80047ea:	04eb      	lsls	r3, r5, #19
 80047ec:	d511      	bpl.n	8004812 <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80047ee:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80047f0:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047f8:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80047fa:	2210      	movs	r2, #16
 80047fc:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80047fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004800:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004802:	2301      	movs	r3, #1
 8004804:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8004808:	2300      	movs	r3, #0
 800480a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800480e:	f7ff ff76 	bl	80046fe <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004812:	bd70      	pop	{r4, r5, r6, pc}

08004814 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004814:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8004818:	2300      	movs	r3, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800481a:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
 800481e:	f8df e1bc 	ldr.w	lr, [pc, #444]	; 80049dc <HAL_GPIO_Init+0x1c8>
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004822:	680a      	ldr	r2, [r1, #0]
 8004824:	fa32 f403 	lsrs.w	r4, r2, r3
 8004828:	d102      	bne.n	8004830 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800482a:	b003      	add	sp, #12
 800482c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004830:	f04f 0c01 	mov.w	ip, #1
 8004834:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 8004838:	ea1c 0202 	ands.w	r2, ip, r2
 800483c:	f000 80b7 	beq.w	80049ae <HAL_GPIO_Init+0x19a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004840:	684d      	ldr	r5, [r1, #4]
 8004842:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8004846:	2603      	movs	r6, #3
 8004848:	f005 0403 	and.w	r4, r5, #3
 800484c:	fa06 f608 	lsl.w	r6, r6, r8
 8004850:	1e67      	subs	r7, r4, #1
 8004852:	43f6      	mvns	r6, r6
 8004854:	2f01      	cmp	r7, #1
 8004856:	d834      	bhi.n	80048c2 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8004858:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800485a:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800485e:	68cf      	ldr	r7, [r1, #12]
 8004860:	fa07 f708 	lsl.w	r7, r7, r8
 8004864:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8004868:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800486a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800486c:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004870:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8004874:	409f      	lsls	r7, r3
 8004876:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 800487a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800487c:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800487e:	2c02      	cmp	r4, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004880:	ea07 0c06 	and.w	ip, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004884:	688f      	ldr	r7, [r1, #8]
 8004886:	fa07 f708 	lsl.w	r7, r7, r8
 800488a:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->PUPDR = temp;
 800488e:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004890:	d119      	bne.n	80048c6 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 8004892:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004896:	f003 0b07 	and.w	fp, r3, #7
 800489a:	f04f 0c0f 	mov.w	ip, #15
 800489e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80048a2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80048a6:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80048aa:	fa0c fc0b 	lsl.w	ip, ip, fp
 80048ae:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80048b2:	690f      	ldr	r7, [r1, #16]
 80048b4:	fa07 f70b 	lsl.w	r7, r7, fp
 80048b8:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 80048bc:	f8ca 7020 	str.w	r7, [sl, #32]
 80048c0:	e001      	b.n	80048c6 <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048c2:	2c03      	cmp	r4, #3
 80048c4:	d1da      	bne.n	800487c <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 80048c6:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048c8:	fa04 f408 	lsl.w	r4, r4, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048cc:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80048d0:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048d4:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 80048d8:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048da:	d068      	beq.n	80049ae <HAL_GPIO_Init+0x19a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048dc:	4e3d      	ldr	r6, [pc, #244]	; (80049d4 <HAL_GPIO_Init+0x1c0>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80048de:	f003 0703 	and.w	r7, r3, #3
 80048e2:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048e6:	f8d6 40f4 	ldr.w	r4, [r6, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80048ea:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048ec:	f044 0402 	orr.w	r4, r4, #2
 80048f0:	f8c6 40f4 	str.w	r4, [r6, #244]	; 0xf4
 80048f4:	f8d6 40f4 	ldr.w	r4, [r6, #244]	; 0xf4
 80048f8:	f023 0603 	bic.w	r6, r3, #3
 80048fc:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
 8004900:	f004 0402 	and.w	r4, r4, #2
 8004904:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004908:	9401      	str	r4, [sp, #4]
 800490a:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800490c:	fa0c f407 	lsl.w	r4, ip, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 8004910:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004914:	ea28 0c04 	bic.w	ip, r8, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004918:	4c2f      	ldr	r4, [pc, #188]	; (80049d8 <HAL_GPIO_Init+0x1c4>)
 800491a:	42a0      	cmp	r0, r4
 800491c:	d049      	beq.n	80049b2 <HAL_GPIO_Init+0x19e>
 800491e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004922:	42a0      	cmp	r0, r4
 8004924:	d047      	beq.n	80049b6 <HAL_GPIO_Init+0x1a2>
 8004926:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800492a:	42a0      	cmp	r0, r4
 800492c:	d045      	beq.n	80049ba <HAL_GPIO_Init+0x1a6>
 800492e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004932:	42a0      	cmp	r0, r4
 8004934:	d043      	beq.n	80049be <HAL_GPIO_Init+0x1aa>
 8004936:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800493a:	42a0      	cmp	r0, r4
 800493c:	d041      	beq.n	80049c2 <HAL_GPIO_Init+0x1ae>
 800493e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004942:	42a0      	cmp	r0, r4
 8004944:	d03f      	beq.n	80049c6 <HAL_GPIO_Init+0x1b2>
 8004946:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800494a:	42a0      	cmp	r0, r4
 800494c:	d03d      	beq.n	80049ca <HAL_GPIO_Init+0x1b6>
 800494e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004952:	42a0      	cmp	r0, r4
 8004954:	d03b      	beq.n	80049ce <HAL_GPIO_Init+0x1ba>
 8004956:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800495a:	42a0      	cmp	r0, r4
 800495c:	bf0c      	ite	eq
 800495e:	2409      	moveq	r4, #9
 8004960:	240a      	movne	r4, #10
 8004962:	40bc      	lsls	r4, r7
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004964:	02ef      	lsls	r7, r5, #11
        EXTI->RTSR1 = temp;
 8004966:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800496a:	ea44 040c 	orr.w	r4, r4, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 800496e:	60b4      	str	r4, [r6, #8]
        temp &= ~(iocurrent);
 8004970:	ea6f 0602 	mvn.w	r6, r2
        temp = EXTI->RTSR1;
 8004974:	f8d9 4000 	ldr.w	r4, [r9]
        temp &= ~(iocurrent);
 8004978:	bf54      	ite	pl
 800497a:	4034      	andpl	r4, r6
          temp |= iocurrent;
 800497c:	4314      	orrmi	r4, r2
        EXTI->RTSR1 = temp;
 800497e:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 8004980:	687c      	ldr	r4, [r7, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004982:	02af      	lsls	r7, r5, #10
        temp &= ~(iocurrent);
 8004984:	bf54      	ite	pl
 8004986:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8004988:	4314      	orrmi	r4, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800498a:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 800498c:	f8c9 4004 	str.w	r4, [r9, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8004990:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
 8004994:	bf54      	ite	pl
 8004996:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8004998:	4314      	orrmi	r4, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800499a:	03ed      	lsls	r5, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 800499c:	f8ce 4004 	str.w	r4, [lr, #4]
        temp = EXTI_CurrentCPU->IMR1;
 80049a0:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 80049a4:	bf54      	ite	pl
 80049a6:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80049a8:	4314      	orrmi	r4, r2
        EXTI_CurrentCPU->IMR1 = temp;
 80049aa:	f8ce 4000 	str.w	r4, [lr]
    position++;
 80049ae:	3301      	adds	r3, #1
 80049b0:	e737      	b.n	8004822 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80049b2:	2400      	movs	r4, #0
 80049b4:	e7d5      	b.n	8004962 <HAL_GPIO_Init+0x14e>
 80049b6:	2401      	movs	r4, #1
 80049b8:	e7d3      	b.n	8004962 <HAL_GPIO_Init+0x14e>
 80049ba:	2402      	movs	r4, #2
 80049bc:	e7d1      	b.n	8004962 <HAL_GPIO_Init+0x14e>
 80049be:	2403      	movs	r4, #3
 80049c0:	e7cf      	b.n	8004962 <HAL_GPIO_Init+0x14e>
 80049c2:	2404      	movs	r4, #4
 80049c4:	e7cd      	b.n	8004962 <HAL_GPIO_Init+0x14e>
 80049c6:	2405      	movs	r4, #5
 80049c8:	e7cb      	b.n	8004962 <HAL_GPIO_Init+0x14e>
 80049ca:	2406      	movs	r4, #6
 80049cc:	e7c9      	b.n	8004962 <HAL_GPIO_Init+0x14e>
 80049ce:	2407      	movs	r4, #7
 80049d0:	e7c7      	b.n	8004962 <HAL_GPIO_Init+0x14e>
 80049d2:	bf00      	nop
 80049d4:	58024400 	.word	0x58024400
 80049d8:	58020000 	.word	0x58020000
 80049dc:	58000080 	.word	0x58000080

080049e0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80049e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80049e4:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80049e6:	4d49      	ldr	r5, [pc, #292]	; (8004b0c <HAL_GPIO_DeInit+0x12c>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80049e8:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8004b14 <HAL_GPIO_DeInit+0x134>
 80049ec:	f8df a128 	ldr.w	sl, [pc, #296]	; 8004b18 <HAL_GPIO_DeInit+0x138>
 80049f0:	f8df b128 	ldr.w	fp, [pc, #296]	; 8004b1c <HAL_GPIO_DeInit+0x13c>
  while ((GPIO_Pin >> position) != 0x00U)
 80049f4:	fa31 f302 	lsrs.w	r3, r1, r2
 80049f8:	d101      	bne.n	80049fe <HAL_GPIO_DeInit+0x1e>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 80049fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 80049fe:	2301      	movs	r3, #1
 8004a00:	fa03 fe02 	lsl.w	lr, r3, r2
    if (iocurrent != 0x00U)
 8004a04:	ea1e 0701 	ands.w	r7, lr, r1
 8004a08:	d06e      	beq.n	8004ae8 <HAL_GPIO_DeInit+0x108>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004a0a:	f022 0403 	bic.w	r4, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8004a0e:	f002 0c03 	and.w	ip, r2, #3
 8004a12:	260f      	movs	r6, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004a14:	4b3e      	ldr	r3, [pc, #248]	; (8004b10 <HAL_GPIO_DeInit+0x130>)
 8004a16:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8004a1a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004a1e:	4298      	cmp	r0, r3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8004a20:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004a24:	f8d4 8408 	ldr.w	r8, [r4, #1032]	; 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8004a28:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004a2c:	ea06 0808 	and.w	r8, r6, r8
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004a30:	d05c      	beq.n	8004aec <HAL_GPIO_DeInit+0x10c>
 8004a32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a36:	4298      	cmp	r0, r3
 8004a38:	d05a      	beq.n	8004af0 <HAL_GPIO_DeInit+0x110>
 8004a3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a3e:	4298      	cmp	r0, r3
 8004a40:	d058      	beq.n	8004af4 <HAL_GPIO_DeInit+0x114>
 8004a42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a46:	4298      	cmp	r0, r3
 8004a48:	d056      	beq.n	8004af8 <HAL_GPIO_DeInit+0x118>
 8004a4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a4e:	4298      	cmp	r0, r3
 8004a50:	d054      	beq.n	8004afc <HAL_GPIO_DeInit+0x11c>
 8004a52:	4548      	cmp	r0, r9
 8004a54:	d054      	beq.n	8004b00 <HAL_GPIO_DeInit+0x120>
 8004a56:	4550      	cmp	r0, sl
 8004a58:	d054      	beq.n	8004b04 <HAL_GPIO_DeInit+0x124>
 8004a5a:	4558      	cmp	r0, fp
 8004a5c:	d054      	beq.n	8004b08 <HAL_GPIO_DeInit+0x128>
 8004a5e:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8004a62:	4298      	cmp	r0, r3
 8004a64:	bf0c      	ite	eq
 8004a66:	2309      	moveq	r3, #9
 8004a68:	230a      	movne	r3, #10
 8004a6a:	fa03 f30c 	lsl.w	r3, r3, ip
 8004a6e:	4543      	cmp	r3, r8
 8004a70:	d118      	bne.n	8004aa4 <HAL_GPIO_DeInit+0xc4>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8004a72:	682b      	ldr	r3, [r5, #0]
 8004a74:	ea23 0307 	bic.w	r3, r3, r7
 8004a78:	602b      	str	r3, [r5, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8004a7a:	686b      	ldr	r3, [r5, #4]
 8004a7c:	ea23 0307 	bic.w	r3, r3, r7
 8004a80:	606b      	str	r3, [r5, #4]
        EXTI->FTSR1 &= ~(iocurrent);
 8004a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a86:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8004a8a:	ea2c 0c07 	bic.w	ip, ip, r7
 8004a8e:	f8c3 c004 	str.w	ip, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8004a92:	f8d3 c000 	ldr.w	ip, [r3]
 8004a96:	ea2c 0707 	bic.w	r7, ip, r7
 8004a9a:	601f      	str	r7, [r3, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004a9c:	68a3      	ldr	r3, [r4, #8]
 8004a9e:	ea23 0606 	bic.w	r6, r3, r6
 8004aa2:	60a6      	str	r6, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004aa4:	2603      	movs	r6, #3
 8004aa6:	0053      	lsls	r3, r2, #1
 8004aa8:	6804      	ldr	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004aaa:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004aae:	fa06 f303 	lsl.w	r3, r6, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004ab2:	270f      	movs	r7, #15
 8004ab4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004ab8:	431c      	orrs	r4, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004aba:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004abe:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004ac0:	fa22 f406 	lsr.w	r4, r2, r6
 8004ac4:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8004ac8:	6a26      	ldr	r6, [r4, #32]
 8004aca:	ea26 0707 	bic.w	r7, r6, r7
 8004ace:	6227      	str	r7, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ad0:	68c4      	ldr	r4, [r0, #12]
 8004ad2:	ea24 0403 	bic.w	r4, r4, r3
 8004ad6:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ad8:	6844      	ldr	r4, [r0, #4]
 8004ada:	ea24 040e 	bic.w	r4, r4, lr
 8004ade:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ae0:	6884      	ldr	r4, [r0, #8]
 8004ae2:	ea24 0303 	bic.w	r3, r4, r3
 8004ae6:	6083      	str	r3, [r0, #8]
    position++;
 8004ae8:	3201      	adds	r2, #1
 8004aea:	e783      	b.n	80049f4 <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004aec:	2300      	movs	r3, #0
 8004aee:	e7bc      	b.n	8004a6a <HAL_GPIO_DeInit+0x8a>
 8004af0:	2301      	movs	r3, #1
 8004af2:	e7ba      	b.n	8004a6a <HAL_GPIO_DeInit+0x8a>
 8004af4:	2302      	movs	r3, #2
 8004af6:	e7b8      	b.n	8004a6a <HAL_GPIO_DeInit+0x8a>
 8004af8:	2303      	movs	r3, #3
 8004afa:	e7b6      	b.n	8004a6a <HAL_GPIO_DeInit+0x8a>
 8004afc:	2304      	movs	r3, #4
 8004afe:	e7b4      	b.n	8004a6a <HAL_GPIO_DeInit+0x8a>
 8004b00:	2305      	movs	r3, #5
 8004b02:	e7b2      	b.n	8004a6a <HAL_GPIO_DeInit+0x8a>
 8004b04:	2306      	movs	r3, #6
 8004b06:	e7b0      	b.n	8004a6a <HAL_GPIO_DeInit+0x8a>
 8004b08:	2307      	movs	r3, #7
 8004b0a:	e7ae      	b.n	8004a6a <HAL_GPIO_DeInit+0x8a>
 8004b0c:	58000080 	.word	0x58000080
 8004b10:	58020000 	.word	0x58020000
 8004b14:	58021400 	.word	0x58021400
 8004b18:	58021800 	.word	0x58021800
 8004b1c:	58021c00 	.word	0x58021c00

08004b20 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004b20:	6903      	ldr	r3, [r0, #16]
 8004b22:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004b24:	bf14      	ite	ne
 8004b26:	2001      	movne	r0, #1
 8004b28:	2000      	moveq	r0, #0
 8004b2a:	4770      	bx	lr

08004b2c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b2c:	b10a      	cbz	r2, 8004b32 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004b2e:	6181      	str	r1, [r0, #24]
  }
}
 8004b30:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004b32:	0409      	lsls	r1, r1, #16
 8004b34:	e7fb      	b.n	8004b2e <HAL_GPIO_WritePin+0x2>

08004b36 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b36:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b38:	ea01 0203 	and.w	r2, r1, r3
 8004b3c:	ea21 0103 	bic.w	r1, r1, r3
 8004b40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004b44:	6181      	str	r1, [r0, #24]
}
 8004b46:	4770      	bx	lr

08004b48 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b48:	6803      	ldr	r3, [r0, #0]
 8004b4a:	699a      	ldr	r2, [r3, #24]
 8004b4c:	0791      	lsls	r1, r2, #30
 8004b4e:	d501      	bpl.n	8004b54 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b50:	2200      	movs	r2, #0
 8004b52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b54:	699a      	ldr	r2, [r3, #24]
 8004b56:	07d2      	lsls	r2, r2, #31
 8004b58:	d403      	bmi.n	8004b62 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b5a:	699a      	ldr	r2, [r3, #24]
 8004b5c:	f042 0201 	orr.w	r2, r2, #1
 8004b60:	619a      	str	r2, [r3, #24]
  }
}
 8004b62:	4770      	bx	lr

08004b64 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004b64:	b530      	push	{r4, r5, lr}
 8004b66:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b68:	f3c1 0109 	ubfx	r1, r1, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004b6c:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b6e:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8004b70:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8004b76:	4a05      	ldr	r2, [pc, #20]	; (8004b8c <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b78:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8004b7a:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8004b82:	ea20 0002 	bic.w	r0, r0, r2
 8004b86:	4303      	orrs	r3, r0
 8004b88:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004b8a:	bd30      	pop	{r4, r5, pc}
 8004b8c:	03ff63ff 	.word	0x03ff63ff

08004b90 <I2C_IsErrorOccurred>:
{
 8004b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8004b94:	6803      	ldr	r3, [r0, #0]
{
 8004b96:	4604      	mov	r4, r0
 8004b98:	4688      	mov	r8, r1
 8004b9a:	4617      	mov	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8004b9c:	699d      	ldr	r5, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004b9e:	f015 0510 	ands.w	r5, r5, #16
 8004ba2:	d079      	beq.n	8004c98 <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ba4:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8004ba6:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 8004ba8:	f04f 0920 	mov.w	r9, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bac:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004bae:	6823      	ldr	r3, [r4, #0]
 8004bb0:	699a      	ldr	r2, [r3, #24]
 8004bb2:	0695      	lsls	r5, r2, #26
 8004bb4:	d436      	bmi.n	8004c24 <I2C_IsErrorOccurred+0x94>
 8004bb6:	b10e      	cbz	r6, 8004bbc <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 8004bb8:	2504      	movs	r5, #4
 8004bba:	e039      	b.n	8004c30 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8004bbc:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004bc0:	d0f6      	beq.n	8004bb0 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004bc2:	f7ff fc4f 	bl	8004464 <HAL_GetTick>
 8004bc6:	1bc0      	subs	r0, r0, r7
 8004bc8:	4540      	cmp	r0, r8
 8004bca:	d802      	bhi.n	8004bd2 <I2C_IsErrorOccurred+0x42>
 8004bcc:	f1b8 0f00 	cmp.w	r8, #0
 8004bd0:	d1ed      	bne.n	8004bae <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8004bd6:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004bda:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8004bdc:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004bde:	0400      	lsls	r0, r0, #16
 8004be0:	d50a      	bpl.n	8004bf8 <I2C_IsErrorOccurred+0x68>
 8004be2:	0449      	lsls	r1, r1, #17
 8004be4:	d408      	bmi.n	8004bf8 <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 8004be6:	2a20      	cmp	r2, #32
 8004be8:	d006      	beq.n	8004bf8 <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bf0:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8004bf2:	f7ff fc37 	bl	8004464 <HAL_GetTick>
 8004bf6:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bf8:	6823      	ldr	r3, [r4, #0]
 8004bfa:	699d      	ldr	r5, [r3, #24]
 8004bfc:	f015 0520 	ands.w	r5, r5, #32
 8004c00:	d1d5      	bne.n	8004bae <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004c02:	f7ff fc2f 	bl	8004464 <HAL_GetTick>
 8004c06:	1bc0      	subs	r0, r0, r7
 8004c08:	2819      	cmp	r0, #25
 8004c0a:	d9f5      	bls.n	8004bf8 <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
              status = HAL_ERROR;
 8004c0e:	2601      	movs	r6, #1
              __HAL_UNLOCK(hi2c);
 8004c10:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c14:	f043 0320 	orr.w	r3, r3, #32
 8004c18:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004c1a:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c1e:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
              status = HAL_ERROR;
 8004c22:	e7e9      	b.n	8004bf8 <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 8004c24:	2e00      	cmp	r6, #0
 8004c26:	d1c7      	bne.n	8004bb8 <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c28:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 8004c2a:	2504      	movs	r5, #4
    status = HAL_ERROR;
 8004c2c:	2601      	movs	r6, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c2e:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 8004c30:	6823      	ldr	r3, [r4, #0]
 8004c32:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004c34:	05d0      	lsls	r0, r2, #23
 8004c36:	d505      	bpl.n	8004c44 <I2C_IsErrorOccurred+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004c38:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8004c3c:	f045 0501 	orr.w	r5, r5, #1
    status = HAL_ERROR;
 8004c40:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004c42:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004c44:	0551      	lsls	r1, r2, #21
 8004c46:	d505      	bpl.n	8004c54 <I2C_IsErrorOccurred+0xc4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004c48:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8004c4c:	f045 0508 	orr.w	r5, r5, #8
    status = HAL_ERROR;
 8004c50:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004c52:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004c54:	0592      	lsls	r2, r2, #22
 8004c56:	d521      	bpl.n	8004c9c <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004c58:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8004c5c:	f045 0502 	orr.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004c60:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8004c62:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8004c64:	2601      	movs	r6, #1
    I2C_Flush_TXDR(hi2c);
 8004c66:	f7ff ff6f 	bl	8004b48 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8004c6a:	6822      	ldr	r2, [r4, #0]
 8004c6c:	6853      	ldr	r3, [r2, #4]
 8004c6e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004c72:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004c76:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004c7a:	f023 0301 	bic.w	r3, r3, #1
 8004c7e:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8004c80:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004c82:	431d      	orrs	r5, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8004c84:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 8004c86:	6465      	str	r5, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004c88:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004c92:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004c96:	e003      	b.n	8004ca0 <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 8004c98:	462e      	mov	r6, r5
 8004c9a:	e7c9      	b.n	8004c30 <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 8004c9c:	2e00      	cmp	r6, #0
 8004c9e:	d1e0      	bne.n	8004c62 <I2C_IsErrorOccurred+0xd2>
}
 8004ca0:	4630      	mov	r0, r6
 8004ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004ca6 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8004ca6:	b570      	push	{r4, r5, r6, lr}
 8004ca8:	4604      	mov	r4, r0
 8004caa:	460d      	mov	r5, r1
 8004cac:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	079b      	lsls	r3, r3, #30
 8004cb4:	d501      	bpl.n	8004cba <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8004cb6:	2000      	movs	r0, #0
}
 8004cb8:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cba:	4632      	mov	r2, r6
 8004cbc:	4629      	mov	r1, r5
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	f7ff ff66 	bl	8004b90 <I2C_IsErrorOccurred>
 8004cc4:	b9a0      	cbnz	r0, 8004cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8004cc6:	1c6a      	adds	r2, r5, #1
 8004cc8:	d0f1      	beq.n	8004cae <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cca:	f7ff fbcb 	bl	8004464 <HAL_GetTick>
 8004cce:	1b80      	subs	r0, r0, r6
 8004cd0:	42a8      	cmp	r0, r5
 8004cd2:	d801      	bhi.n	8004cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8004cd4:	2d00      	cmp	r5, #0
 8004cd6:	d1ea      	bne.n	8004cae <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cd8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004cda:	f043 0320 	orr.w	r3, r3, #32
 8004cde:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ce0:	2320      	movs	r3, #32
 8004ce2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004cec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004cf0:	2001      	movs	r0, #1
 8004cf2:	e7e1      	b.n	8004cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08004cf4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8004cf4:	b570      	push	{r4, r5, r6, lr}
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	460d      	mov	r5, r1
 8004cfa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cfc:	6823      	ldr	r3, [r4, #0]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	069b      	lsls	r3, r3, #26
 8004d02:	d501      	bpl.n	8004d08 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8004d04:	2000      	movs	r0, #0
}
 8004d06:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d08:	4632      	mov	r2, r6
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	f7ff ff3f 	bl	8004b90 <I2C_IsErrorOccurred>
 8004d12:	b990      	cbnz	r0, 8004d3a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d14:	f7ff fba6 	bl	8004464 <HAL_GetTick>
 8004d18:	1b80      	subs	r0, r0, r6
 8004d1a:	42a8      	cmp	r0, r5
 8004d1c:	d801      	bhi.n	8004d22 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8004d1e:	2d00      	cmp	r5, #0
 8004d20:	d1ec      	bne.n	8004cfc <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d22:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004d24:	f043 0320 	orr.w	r3, r3, #32
 8004d28:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d2a:	2320      	movs	r3, #32
 8004d2c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d30:	2300      	movs	r3, #0
 8004d32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004d36:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004d3a:	2001      	movs	r0, #1
 8004d3c:	e7e3      	b.n	8004d06 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08004d3e <I2C_WaitOnFlagUntilTimeout>:
{
 8004d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d42:	9f06      	ldr	r7, [sp, #24]
 8004d44:	4604      	mov	r4, r0
 8004d46:	4688      	mov	r8, r1
 8004d48:	4616      	mov	r6, r2
 8004d4a:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d4c:	6822      	ldr	r2, [r4, #0]
 8004d4e:	6993      	ldr	r3, [r2, #24]
 8004d50:	ea38 0303 	bics.w	r3, r8, r3
 8004d54:	bf0c      	ite	eq
 8004d56:	2301      	moveq	r3, #1
 8004d58:	2300      	movne	r3, #0
 8004d5a:	42b3      	cmp	r3, r6
 8004d5c:	d001      	beq.n	8004d62 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8004d5e:	2000      	movs	r0, #0
 8004d60:	e015      	b.n	8004d8e <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8004d62:	1c6b      	adds	r3, r5, #1
 8004d64:	d0f3      	beq.n	8004d4e <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d66:	f7ff fb7d 	bl	8004464 <HAL_GetTick>
 8004d6a:	1bc0      	subs	r0, r0, r7
 8004d6c:	42a8      	cmp	r0, r5
 8004d6e:	d801      	bhi.n	8004d74 <I2C_WaitOnFlagUntilTimeout+0x36>
 8004d70:	2d00      	cmp	r5, #0
 8004d72:	d1eb      	bne.n	8004d4c <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d74:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004d76:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d78:	f043 0320 	orr.w	r3, r3, #32
 8004d7c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d7e:	2320      	movs	r3, #32
 8004d80:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d84:	2300      	movs	r3, #0
 8004d86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004d8a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8004d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004d94 <I2C_RequestMemoryWrite>:
{
 8004d94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004d98:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004d9a:	4b18      	ldr	r3, [pc, #96]	; (8004dfc <I2C_RequestMemoryWrite+0x68>)
{
 8004d9c:	4605      	mov	r5, r0
 8004d9e:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	b2f2      	uxtb	r2, r6
 8004da4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 8004da8:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004dac:	f7ff feda 	bl	8004b64 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004db0:	4628      	mov	r0, r5
 8004db2:	4642      	mov	r2, r8
 8004db4:	4639      	mov	r1, r7
 8004db6:	f7ff ff76 	bl	8004ca6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004dba:	b118      	cbz	r0, 8004dc4 <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
 8004dbc:	2001      	movs	r0, #1
}
 8004dbe:	b002      	add	sp, #8
 8004dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004dc4:	2e01      	cmp	r6, #1
 8004dc6:	682b      	ldr	r3, [r5, #0]
 8004dc8:	d10d      	bne.n	8004de6 <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004dca:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	2180      	movs	r1, #128	; 0x80
 8004dd0:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004dd2:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004dd4:	463b      	mov	r3, r7
 8004dd6:	f8cd 8000 	str.w	r8, [sp]
 8004dda:	f7ff ffb0 	bl	8004d3e <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8004dde:	3800      	subs	r0, #0
 8004de0:	bf18      	it	ne
 8004de2:	2001      	movne	r0, #1
 8004de4:	e7eb      	b.n	8004dbe <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004de6:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004de8:	4639      	mov	r1, r7
 8004dea:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004dec:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dee:	4642      	mov	r2, r8
 8004df0:	f7ff ff59 	bl	8004ca6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004df4:	2800      	cmp	r0, #0
 8004df6:	d1e1      	bne.n	8004dbc <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004df8:	682b      	ldr	r3, [r5, #0]
 8004dfa:	e7e6      	b.n	8004dca <I2C_RequestMemoryWrite+0x36>
 8004dfc:	80002000 	.word	0x80002000

08004e00 <I2C_RequestMemoryRead>:
{
 8004e00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004e04:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004e06:	4b18      	ldr	r3, [pc, #96]	; (8004e68 <I2C_RequestMemoryRead+0x68>)
{
 8004e08:	4605      	mov	r5, r0
 8004e0a:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	b2f2      	uxtb	r2, r6
 8004e10:	2300      	movs	r3, #0
{
 8004e12:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004e16:	f7ff fea5 	bl	8004b64 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	4642      	mov	r2, r8
 8004e1e:	4639      	mov	r1, r7
 8004e20:	f7ff ff41 	bl	8004ca6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e24:	b118      	cbz	r0, 8004e2e <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 8004e26:	2001      	movs	r0, #1
}
 8004e28:	b002      	add	sp, #8
 8004e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e2e:	2e01      	cmp	r6, #1
 8004e30:	682b      	ldr	r3, [r5, #0]
 8004e32:	d10d      	bne.n	8004e50 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e34:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004e36:	2200      	movs	r2, #0
 8004e38:	2140      	movs	r1, #64	; 0x40
 8004e3a:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e3c:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004e3e:	463b      	mov	r3, r7
 8004e40:	f8cd 8000 	str.w	r8, [sp]
 8004e44:	f7ff ff7b 	bl	8004d3e <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8004e48:	3800      	subs	r0, #0
 8004e4a:	bf18      	it	ne
 8004e4c:	2001      	movne	r0, #1
 8004e4e:	e7eb      	b.n	8004e28 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004e50:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e52:	4639      	mov	r1, r7
 8004e54:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004e56:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e58:	4642      	mov	r2, r8
 8004e5a:	f7ff ff24 	bl	8004ca6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e5e:	2800      	cmp	r0, #0
 8004e60:	d1e1      	bne.n	8004e26 <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e62:	682b      	ldr	r3, [r5, #0]
 8004e64:	e7e6      	b.n	8004e34 <I2C_RequestMemoryRead+0x34>
 8004e66:	bf00      	nop
 8004e68:	80002000 	.word	0x80002000

08004e6c <HAL_I2C_MspInit>:
}
 8004e6c:	4770      	bx	lr

08004e6e <HAL_I2C_Init>:
{
 8004e6e:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8004e70:	4604      	mov	r4, r0
 8004e72:	2800      	cmp	r0, #0
 8004e74:	d04a      	beq.n	8004f0c <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e76:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004e7a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004e7e:	b91b      	cbnz	r3, 8004e88 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8004e80:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8004e84:	f7ff fff2 	bl	8004e6c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e88:	2324      	movs	r3, #36	; 0x24
 8004e8a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	f022 0201 	bic.w	r2, r2, #1
 8004e96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e98:	6862      	ldr	r2, [r4, #4]
 8004e9a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e9e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ea0:	689a      	ldr	r2, [r3, #8]
 8004ea2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ea6:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ea8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8004eac:	2901      	cmp	r1, #1
 8004eae:	d124      	bne.n	8004efa <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004eb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eb4:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004eb6:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eb8:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004eba:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004ebe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ec2:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ec4:	68da      	ldr	r2, [r3, #12]
 8004ec6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004eca:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ecc:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8004ed0:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004ed2:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ed4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004ed8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004eda:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	f042 0201 	orr.w	r2, r2, #1
 8004ee8:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8004eea:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eec:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004eee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ef2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ef4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8004ef8:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004efa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004efe:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f00:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f02:	d1d8      	bne.n	8004eb6 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004f04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f08:	605a      	str	r2, [r3, #4]
 8004f0a:	e7d4      	b.n	8004eb6 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8004f0c:	2001      	movs	r0, #1
 8004f0e:	e7f3      	b.n	8004ef8 <HAL_I2C_Init+0x8a>

08004f10 <HAL_I2C_MspDeInit>:
 8004f10:	4770      	bx	lr

08004f12 <HAL_I2C_DeInit>:
{
 8004f12:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8004f14:	4604      	mov	r4, r0
 8004f16:	b198      	cbz	r0, 8004f40 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8004f18:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f1a:	2324      	movs	r3, #36	; 0x24
 8004f1c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004f20:	6813      	ldr	r3, [r2, #0]
 8004f22:	f023 0301 	bic.w	r3, r3, #1
 8004f26:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8004f28:	f7ff fff2 	bl	8004f10 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f2c:	2000      	movs	r0, #0
 8004f2e:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8004f30:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8004f34:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f38:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f3a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8004f3e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004f40:	2001      	movs	r0, #1
 8004f42:	e7fc      	b.n	8004f3e <HAL_I2C_DeInit+0x2c>

08004f44 <HAL_I2C_Mem_Write>:
{
 8004f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f48:	b085      	sub	sp, #20
 8004f4a:	469b      	mov	fp, r3
 8004f4c:	4604      	mov	r4, r0
 8004f4e:	460f      	mov	r7, r1
 8004f50:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8004f54:	4692      	mov	sl, r2
 8004f56:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8004f5a:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f5c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	f040 80a3 	bne.w	80050ac <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 8004f66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f68:	b10b      	cbz	r3, 8004f6e <HAL_I2C_Mem_Write+0x2a>
 8004f6a:	9b03      	ldr	r3, [sp, #12]
 8004f6c:	b933      	cbnz	r3, 8004f7c <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004f6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f72:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8004f74:	2001      	movs	r0, #1
}
 8004f76:	b005      	add	sp, #20
 8004f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8004f7c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	f000 8093 	beq.w	80050ac <HAL_I2C_Mem_Write+0x168>
 8004f86:	2501      	movs	r5, #1
 8004f88:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004f8c:	f7ff fa6a 	bl	8004464 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f90:	2319      	movs	r3, #25
 8004f92:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8004f94:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f96:	462a      	mov	r2, r5
 8004f98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	f7ff fece 	bl	8004d3e <I2C_WaitOnFlagUntilTimeout>
 8004fa2:	4680      	mov	r8, r0
 8004fa4:	2800      	cmp	r0, #0
 8004fa6:	d1e5      	bne.n	8004f74 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004fa8:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 8004faa:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fac:	4652      	mov	r2, sl
 8004fae:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004fb0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004fb4:	2340      	movs	r3, #64	; 0x40
 8004fb6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8004fba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fbc:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fbe:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8004fc0:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8004fc2:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fc4:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8004fc8:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fca:	465b      	mov	r3, fp
 8004fcc:	f7ff fee2 	bl	8004d94 <I2C_RequestMemoryWrite>
 8004fd0:	b110      	cbz	r0, 8004fd8 <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 8004fd2:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004fd6:	e7cd      	b.n	8004f74 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fd8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	2bff      	cmp	r3, #255	; 0xff
 8004fde:	d955      	bls.n	800508c <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fe0:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004fe2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fe6:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fe8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004fea:	4639      	mov	r1, r7
 8004fec:	4620      	mov	r0, r4
 8004fee:	f7ff fdb9 	bl	8004b64 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ff2:	4632      	mov	r2, r6
 8004ff4:	4649      	mov	r1, r9
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	f7ff fe55 	bl	8004ca6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ffc:	2800      	cmp	r0, #0
 8004ffe:	d1b9      	bne.n	8004f74 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005000:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005002:	6822      	ldr	r2, [r4, #0]
 8005004:	f813 1b01 	ldrb.w	r1, [r3], #1
 8005008:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800500a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800500c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800500e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005010:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8005012:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8005014:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8005016:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8005018:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800501a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800501c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800501e:	b29b      	uxth	r3, r3
 8005020:	b1ab      	cbz	r3, 800504e <HAL_I2C_Mem_Write+0x10a>
 8005022:	b9a2      	cbnz	r2, 800504e <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005024:	464b      	mov	r3, r9
 8005026:	2180      	movs	r1, #128	; 0x80
 8005028:	4620      	mov	r0, r4
 800502a:	9600      	str	r6, [sp, #0]
 800502c:	f7ff fe87 	bl	8004d3e <I2C_WaitOnFlagUntilTimeout>
 8005030:	2800      	cmp	r0, #0
 8005032:	d19f      	bne.n	8004f74 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005034:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005036:	b29b      	uxth	r3, r3
 8005038:	2bff      	cmp	r3, #255	; 0xff
 800503a:	d92f      	bls.n	800509c <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800503c:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800503e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005042:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005044:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005046:	4639      	mov	r1, r7
 8005048:	4620      	mov	r0, r4
 800504a:	f7ff fd8b 	bl	8004b64 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800504e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005050:	b29b      	uxth	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1cd      	bne.n	8004ff2 <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005056:	4632      	mov	r2, r6
 8005058:	4649      	mov	r1, r9
 800505a:	4620      	mov	r0, r4
 800505c:	f7ff fe4a 	bl	8004cf4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005060:	2800      	cmp	r0, #0
 8005062:	d187      	bne.n	8004f74 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005064:	6823      	ldr	r3, [r4, #0]
 8005066:	2120      	movs	r1, #32
 8005068:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8005070:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8005074:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8005078:	f022 0201 	bic.w	r2, r2, #1
 800507c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800507e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005082:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005086:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800508a:	e774      	b.n	8004f76 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 800508c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800508e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005092:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8005094:	b292      	uxth	r2, r2
 8005096:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005098:	b2d2      	uxtb	r2, r2
 800509a:	e7a6      	b.n	8004fea <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 800509c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800509e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050a2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80050a4:	b292      	uxth	r2, r2
 80050a6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050a8:	b2d2      	uxtb	r2, r2
 80050aa:	e7cc      	b.n	8005046 <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
 80050ac:	2002      	movs	r0, #2
 80050ae:	e762      	b.n	8004f76 <HAL_I2C_Mem_Write+0x32>

080050b0 <HAL_I2C_Mem_Read>:
{
 80050b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050b4:	b085      	sub	sp, #20
 80050b6:	469b      	mov	fp, r3
 80050b8:	4604      	mov	r4, r0
 80050ba:	460f      	mov	r7, r1
 80050bc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80050c0:	4692      	mov	sl, r2
 80050c2:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 80050c6:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80050c8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80050cc:	2b20      	cmp	r3, #32
 80050ce:	f040 80a7 	bne.w	8005220 <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 80050d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050d4:	b10b      	cbz	r3, 80050da <HAL_I2C_Mem_Read+0x2a>
 80050d6:	9b03      	ldr	r3, [sp, #12]
 80050d8:	b933      	cbnz	r3, 80050e8 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80050da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050de:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80050e0:	2001      	movs	r0, #1
}
 80050e2:	b005      	add	sp, #20
 80050e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80050e8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	f000 8097 	beq.w	8005220 <HAL_I2C_Mem_Read+0x170>
 80050f2:	2501      	movs	r5, #1
 80050f4:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80050f8:	f7ff f9b4 	bl	8004464 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80050fc:	2319      	movs	r3, #25
 80050fe:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8005100:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005102:	462a      	mov	r2, r5
 8005104:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005108:	4620      	mov	r0, r4
 800510a:	f7ff fe18 	bl	8004d3e <I2C_WaitOnFlagUntilTimeout>
 800510e:	4680      	mov	r8, r0
 8005110:	2800      	cmp	r0, #0
 8005112:	d1e5      	bne.n	80050e0 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005114:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 8005116:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005118:	4652      	mov	r2, sl
 800511a:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800511c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005120:	2340      	movs	r3, #64	; 0x40
 8005122:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8005126:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005128:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800512a:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800512c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800512e:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005130:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8005134:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005136:	465b      	mov	r3, fp
 8005138:	f7ff fe62 	bl	8004e00 <I2C_RequestMemoryRead>
 800513c:	b110      	cbz	r0, 8005144 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 800513e:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005142:	e7cd      	b.n	80050e0 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005144:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005146:	b29b      	uxth	r3, r3
 8005148:	2bff      	cmp	r3, #255	; 0xff
 800514a:	4b36      	ldr	r3, [pc, #216]	; (8005224 <HAL_I2C_Mem_Read+0x174>)
 800514c:	d958      	bls.n	8005200 <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800514e:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005156:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005158:	4639      	mov	r1, r7
 800515a:	4620      	mov	r0, r4
 800515c:	f7ff fd02 	bl	8004b64 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005160:	464b      	mov	r3, r9
 8005162:	2200      	movs	r2, #0
 8005164:	2104      	movs	r1, #4
 8005166:	4620      	mov	r0, r4
 8005168:	9600      	str	r6, [sp, #0]
 800516a:	f7ff fde8 	bl	8004d3e <I2C_WaitOnFlagUntilTimeout>
 800516e:	2800      	cmp	r0, #0
 8005170:	d1b6      	bne.n	80050e0 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005178:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800517a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800517c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800517e:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8005180:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8005182:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005184:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005186:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8005188:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800518a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800518c:	b29b      	uxth	r3, r3
 800518e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005190:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005192:	b29b      	uxth	r3, r3
 8005194:	b1ab      	cbz	r3, 80051c2 <HAL_I2C_Mem_Read+0x112>
 8005196:	b9a2      	cbnz	r2, 80051c2 <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005198:	464b      	mov	r3, r9
 800519a:	2180      	movs	r1, #128	; 0x80
 800519c:	4620      	mov	r0, r4
 800519e:	9600      	str	r6, [sp, #0]
 80051a0:	f7ff fdcd 	bl	8004d3e <I2C_WaitOnFlagUntilTimeout>
 80051a4:	2800      	cmp	r0, #0
 80051a6:	d19b      	bne.n	80050e0 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	2bff      	cmp	r3, #255	; 0xff
 80051ae:	d92f      	bls.n	8005210 <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80051b0:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80051b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051b6:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80051b8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051ba:	4639      	mov	r1, r7
 80051bc:	4620      	mov	r0, r4
 80051be:	f7ff fcd1 	bl	8004b64 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80051c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1ca      	bne.n	8005160 <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051ca:	4632      	mov	r2, r6
 80051cc:	4649      	mov	r1, r9
 80051ce:	4620      	mov	r0, r4
 80051d0:	f7ff fd90 	bl	8004cf4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80051d4:	2800      	cmp	r0, #0
 80051d6:	d183      	bne.n	80050e0 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051d8:	6823      	ldr	r3, [r4, #0]
 80051da:	2120      	movs	r1, #32
 80051dc:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80051e4:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80051e8:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80051ec:	f022 0201 	bic.w	r2, r2, #1
 80051f0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80051f2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80051f6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80051fa:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80051fe:	e770      	b.n	80050e2 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8005200:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005202:	9300      	str	r3, [sp, #0]
 8005204:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8005208:	b292      	uxth	r2, r2
 800520a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800520c:	b2d2      	uxtb	r2, r2
 800520e:	e7a3      	b.n	8005158 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8005210:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005212:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005216:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8005218:	b292      	uxth	r2, r2
 800521a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800521c:	b2d2      	uxtb	r2, r2
 800521e:	e7cc      	b.n	80051ba <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 8005220:	2002      	movs	r0, #2
 8005222:	e75e      	b.n	80050e2 <HAL_I2C_Mem_Read+0x32>
 8005224:	80002400 	.word	0x80002400

08005228 <HAL_I2C_GetState>:
  return hi2c->State;
 8005228:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 800522c:	4770      	bx	lr

0800522e <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800522e:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 8005230:	4770      	bx	lr

08005232 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005232:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005234:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005238:	2b20      	cmp	r3, #32
 800523a:	b2dc      	uxtb	r4, r3
 800523c:	d11d      	bne.n	800527a <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800523e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005242:	2b01      	cmp	r3, #1
 8005244:	d019      	beq.n	800527a <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005246:	2324      	movs	r3, #36	; 0x24
 8005248:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800524c:	6803      	ldr	r3, [r0, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	f022 0201 	bic.w	r2, r2, #1
 8005254:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800525c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	4311      	orrs	r1, r2
 8005262:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	f042 0201 	orr.w	r2, r2, #1
 800526a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800526c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800526e:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005272:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005276:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005278:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800527a:	2002      	movs	r0, #2
 800527c:	e7fc      	b.n	8005278 <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800527e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800527e:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005280:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005284:	2b20      	cmp	r3, #32
 8005286:	b2dc      	uxtb	r4, r3
 8005288:	d11c      	bne.n	80052c4 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800528a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800528e:	2b01      	cmp	r3, #1
 8005290:	d018      	beq.n	80052c4 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005292:	2324      	movs	r3, #36	; 0x24
 8005294:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005298:	6803      	ldr	r3, [r0, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	f022 0201 	bic.w	r2, r2, #1
 80052a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80052a2:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80052a4:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80052a8:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80052ac:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	f042 0201 	orr.w	r2, r2, #1
 80052b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052b6:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80052b8:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80052bc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80052c0:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80052c2:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80052c4:	2002      	movs	r0, #2
 80052c6:	e7fc      	b.n	80052c2 <HAL_I2CEx_ConfigDigitalFilter+0x44>

080052c8 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80052c8:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80052ca:	f8d1 c000 	ldr.w	ip, [r1]
{
 80052ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80052d2:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80052d4:	6804      	ldr	r4, [r0, #0]
 80052d6:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80052d8:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80052dc:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80052de:	68e5      	ldr	r5, [r4, #12]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80052e0:	f04f 0e00 	mov.w	lr, #0
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80052e4:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80052e8:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80052ea:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80052ee:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80052f2:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80052f4:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80052f6:	68e0      	ldr	r0, [r4, #12]
 80052f8:	f3c0 400b 	ubfx	r0, r0, #16, #12
 80052fc:	4430      	add	r0, r6
 80052fe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005302:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005304:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005306:	68e0      	ldr	r0, [r4, #12]
 8005308:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800530c:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800530e:	6898      	ldr	r0, [r3, #8]
 8005310:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8005314:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005316:	6888      	ldr	r0, [r1, #8]
 8005318:	68e6      	ldr	r6, [r4, #12]
 800531a:	3001      	adds	r0, #1
 800531c:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8005320:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005322:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005324:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8005328:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800532a:	6918      	ldr	r0, [r3, #16]
 800532c:	f020 0007 	bic.w	r0, r0, #7
 8005330:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005332:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005334:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005336:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800533a:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800533e:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005342:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8005346:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800534a:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800534e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8005352:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005354:	6958      	ldr	r0, [r3, #20]
 8005356:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 800535a:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800535c:	6948      	ldr	r0, [r1, #20]
 800535e:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005360:	69d8      	ldr	r0, [r3, #28]
 8005362:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8005366:	f020 0007 	bic.w	r0, r0, #7
 800536a:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800536c:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 8005370:	4305      	orrs	r5, r0
 8005372:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005374:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005376:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005378:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800537c:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800537e:	b31e      	cbz	r6, 80053c8 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005380:	2e01      	cmp	r6, #1
 8005382:	d023      	beq.n	80053cc <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005384:	1eb0      	subs	r0, r6, #2
 8005386:	2802      	cmp	r0, #2
 8005388:	d922      	bls.n	80053d0 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800538a:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 800538c:	bf0c      	ite	eq
 800538e:	2002      	moveq	r0, #2
 8005390:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005392:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8005394:	eba7 070c 	sub.w	r7, r7, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005398:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 800539c:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800539e:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80053a0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80053a2:	4345      	muls	r5, r0
 80053a4:	4378      	muls	r0, r7
 80053a6:	3007      	adds	r0, #7
 80053a8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80053ac:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80053ae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80053b0:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80053b4:	f020 0007 	bic.w	r0, r0, #7
 80053b8:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80053ba:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80053bc:	58a3      	ldr	r3, [r4, r2]
 80053be:	f043 0301 	orr.w	r3, r3, #1
 80053c2:	50a3      	str	r3, [r4, r2]
}
 80053c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 80053c8:	2004      	movs	r0, #4
 80053ca:	e7e2      	b.n	8005392 <LTDC_SetConfig+0xca>
    tmp = 3U;
 80053cc:	2003      	movs	r0, #3
 80053ce:	e7e0      	b.n	8005392 <LTDC_SetConfig+0xca>
    tmp = 2U;
 80053d0:	2002      	movs	r0, #2
 80053d2:	e7de      	b.n	8005392 <LTDC_SetConfig+0xca>

080053d4 <HAL_LTDC_Init>:
{
 80053d4:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 80053d6:	4604      	mov	r4, r0
 80053d8:	2800      	cmp	r0, #0
 80053da:	d063      	beq.n	80054a4 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80053dc:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80053e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80053e4:	b91b      	cbnz	r3, 80053ee <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 80053e6:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80053ea:	f7fb fb2f 	bl	8000a4c <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80053ee:	2302      	movs	r3, #2
 80053f0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	699a      	ldr	r2, [r3, #24]
 80053f8:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80053fc:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80053fe:	6999      	ldr	r1, [r3, #24]
 8005400:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8005404:	4302      	orrs	r2, r0
 8005406:	68e0      	ldr	r0, [r4, #12]
 8005408:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800540a:	6920      	ldr	r0, [r4, #16]
 800540c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800540e:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005410:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005412:	4925      	ldr	r1, [pc, #148]	; (80054a8 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005414:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	400a      	ands	r2, r1
 800541a:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800541c:	689a      	ldr	r2, [r3, #8]
 800541e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005422:	69a0      	ldr	r0, [r4, #24]
 8005424:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005426:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005428:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800542a:	68da      	ldr	r2, [r3, #12]
 800542c:	400a      	ands	r2, r1
 800542e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005430:	68da      	ldr	r2, [r3, #12]
 8005432:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005436:	6a20      	ldr	r0, [r4, #32]
 8005438:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800543a:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800543c:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800543e:	691a      	ldr	r2, [r3, #16]
 8005440:	400a      	ands	r2, r1
 8005442:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005444:	691a      	ldr	r2, [r3, #16]
 8005446:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800544a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800544c:	4302      	orrs	r2, r0
 800544e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005450:	695a      	ldr	r2, [r3, #20]
 8005452:	4011      	ands	r1, r2
 8005454:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005456:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005458:	695a      	ldr	r2, [r3, #20]
 800545a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800545e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005460:	430a      	orrs	r2, r1
 8005462:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005464:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005466:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800546a:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800546e:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005472:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005474:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005476:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800547a:	430a      	orrs	r2, r1
 800547c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005480:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005484:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005486:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800548a:	f042 0206 	orr.w	r2, r2, #6
 800548e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8005490:	699a      	ldr	r2, [r3, #24]
 8005492:	f042 0201 	orr.w	r2, r2, #1
 8005496:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8005498:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800549a:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800549e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 80054a2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80054a4:	2001      	movs	r0, #1
 80054a6:	e7fc      	b.n	80054a2 <HAL_LTDC_Init+0xce>
 80054a8:	f000f800 	.word	0xf000f800

080054ac <HAL_LTDC_ErrorCallback>:
 80054ac:	4770      	bx	lr

080054ae <HAL_LTDC_ReloadEventCallback>:
 80054ae:	4770      	bx	lr

080054b0 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80054b0:	6803      	ldr	r3, [r0, #0]
{
 80054b2:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80054b4:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 80054b6:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80054b8:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80054ba:	0772      	lsls	r2, r6, #29
 80054bc:	d514      	bpl.n	80054e8 <HAL_LTDC_IRQHandler+0x38>
 80054be:	0769      	lsls	r1, r5, #29
 80054c0:	d512      	bpl.n	80054e8 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80054c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054c4:	f022 0204 	bic.w	r2, r2, #4
 80054c8:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80054ca:	2204      	movs	r2, #4
 80054cc:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80054ce:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80054d2:	f043 0301 	orr.w	r3, r3, #1
 80054d6:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 80054da:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80054dc:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80054e0:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80054e4:	f7ff ffe2 	bl	80054ac <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80054e8:	07b2      	lsls	r2, r6, #30
 80054ea:	d516      	bpl.n	800551a <HAL_LTDC_IRQHandler+0x6a>
 80054ec:	07ab      	lsls	r3, r5, #30
 80054ee:	d514      	bpl.n	800551a <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80054f0:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 80054f2:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80054f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054f6:	f022 0202 	bic.w	r2, r2, #2
 80054fa:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80054fc:	2202      	movs	r2, #2
 80054fe:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005500:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8005504:	4313      	orrs	r3, r2
 8005506:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800550a:	2304      	movs	r3, #4
 800550c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005510:	2300      	movs	r3, #0
 8005512:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8005516:	f7ff ffc9 	bl	80054ac <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800551a:	07f0      	lsls	r0, r6, #31
 800551c:	d510      	bpl.n	8005540 <HAL_LTDC_IRQHandler+0x90>
 800551e:	07e9      	lsls	r1, r5, #31
 8005520:	d50e      	bpl.n	8005540 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005522:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8005524:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005528:	f022 0201 	bic.w	r2, r2, #1
 800552c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800552e:	2201      	movs	r2, #1
 8005530:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8005532:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8005534:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005538:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800553c:	f7fc fc42 	bl	8001dc4 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005540:	0732      	lsls	r2, r6, #28
 8005542:	d511      	bpl.n	8005568 <HAL_LTDC_IRQHandler+0xb8>
 8005544:	072b      	lsls	r3, r5, #28
 8005546:	d50f      	bpl.n	8005568 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005548:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800554a:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800554c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800554e:	f022 0208 	bic.w	r2, r2, #8
 8005552:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005554:	2208      	movs	r2, #8
 8005556:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8005558:	2301      	movs	r3, #1
 800555a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800555e:	2300      	movs	r3, #0
 8005560:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005564:	f7ff ffa3 	bl	80054ae <HAL_LTDC_ReloadEventCallback>
}
 8005568:	bd70      	pop	{r4, r5, r6, pc}

0800556a <HAL_LTDC_ConfigLayer>:
{
 800556a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800556e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8005572:	4606      	mov	r6, r0
 8005574:	460f      	mov	r7, r1
 8005576:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8005578:	2b01      	cmp	r3, #1
 800557a:	f04f 0002 	mov.w	r0, #2
 800557e:	d01f      	beq.n	80055c0 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005580:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8005582:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005586:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005588:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800558c:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8005590:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005594:	3438      	adds	r4, #56	; 0x38
 8005596:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005598:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800559a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800559c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800559e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055a2:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80055a4:	4630      	mov	r0, r6
 80055a6:	4662      	mov	r2, ip
 80055a8:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80055aa:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80055ac:	f7ff fe8c 	bl	80052c8 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80055b0:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 80055b2:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80055b4:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80055b8:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80055bc:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 80055c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080055c4 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 80055c4:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	f04f 0302 	mov.w	r3, #2
 80055ce:	d012      	beq.n	80055f6 <HAL_LTDC_ProgramLineEvent+0x32>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80055d0:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80055d4:	6803      	ldr	r3, [r0, #0]
 80055d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055d8:	f022 0201 	bic.w	r2, r2, #1
 80055dc:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 80055de:	4a07      	ldr	r2, [pc, #28]	; (80055fc <HAL_LTDC_ProgramLineEvent+0x38>)
 80055e0:	6411      	str	r1, [r2, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80055e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055e4:	f042 0201 	orr.w	r2, r2, #1
 80055e8:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 80055ea:	2301      	movs	r3, #1
 80055ec:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80055f0:	2300      	movs	r3, #0
 80055f2:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 80055f6:	4618      	mov	r0, r3
}
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	50001000 	.word	0x50001000

08005600 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 8005600:	b538      	push	{r3, r4, r5, lr}
 8005602:	4604      	mov	r4, r0
  uint32_t tickstart =  HAL_GetTick();
 8005604:	f7fe ff2e 	bl	8004464 <HAL_GetTick>
 8005608:	4605      	mov	r5, r0

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800560a:	b144      	cbz	r4, 800561e <HAL_MDMA_Abort+0x1e>
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800560c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005610:	2b02      	cmp	r3, #2
 8005612:	d006      	beq.n	8005622 <HAL_MDMA_Abort+0x22>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8005614:	2380      	movs	r3, #128	; 0x80
 8005616:	66a3      	str	r3, [r4, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8005618:	2300      	movs	r3, #0
 800561a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800561e:	2001      	movs	r0, #1
 8005620:	e015      	b.n	800564e <HAL_MDMA_Abort+0x4e>
    return HAL_ERROR;
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8005622:	6823      	ldr	r3, [r4, #0]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 800562a:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800562c:	68da      	ldr	r2, [r3, #12]
 800562e:	f022 0201 	bic.w	r2, r2, #1
 8005632:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8005634:	6822      	ldr	r2, [r4, #0]
 8005636:	68d3      	ldr	r3, [r2, #12]
 8005638:	f013 0301 	ands.w	r3, r3, #1
 800563c:	d108      	bne.n	8005650 <HAL_MDMA_Abort+0x50>
        return HAL_ERROR;
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 800563e:	211f      	movs	r1, #31

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
  }

  return HAL_OK;
 8005640:	4618      	mov	r0, r3
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 8005642:	6051      	str	r1, [r2, #4]
    hmdma->State = HAL_MDMA_STATE_READY;
 8005644:	2201      	movs	r2, #1
    __HAL_UNLOCK(hmdma);
 8005646:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hmdma->State = HAL_MDMA_STATE_READY;
 800564a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
}
 800564e:	bd38      	pop	{r3, r4, r5, pc}
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8005650:	f7fe ff08 	bl	8004464 <HAL_GetTick>
 8005654:	1b40      	subs	r0, r0, r5
 8005656:	2805      	cmp	r0, #5
 8005658:	d9ec      	bls.n	8005634 <HAL_MDMA_Abort+0x34>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 800565a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800565c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005660:	66a3      	str	r3, [r4, #104]	; 0x68
        __HAL_UNLOCK(hmdma);
 8005662:	2300      	movs	r3, #0
 8005664:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_ERROR;
 8005668:	2303      	movs	r3, #3
 800566a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        return HAL_ERROR;
 800566e:	e7d6      	b.n	800561e <HAL_MDMA_Abort+0x1e>

08005670 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8005670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8005674:	6804      	ldr	r4, [r0, #0]
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800567c:	6023      	str	r3, [r4, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800567e:	6883      	ldr	r3, [r0, #8]
 8005680:	b92b      	cbnz	r3, 800568e <OSPI_ConfigCmd+0x1e>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8005682:	6823      	ldr	r3, [r4, #0]
 8005684:	684a      	ldr	r2, [r1, #4]
 8005686:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800568a:	4313      	orrs	r3, r2
 800568c:	6023      	str	r3, [r4, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800568e:	680b      	ldr	r3, [r1, #0]
 8005690:	2b02      	cmp	r3, #2
 8005692:	d14e      	bne.n	8005732 <OSPI_ConfigCmd+0xc2>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8005694:	f504 72c0 	add.w	r2, r4, #384	; 0x180
    tcr_reg = &(hospi->Instance->WTCR);
 8005698:	f504 76c4 	add.w	r6, r4, #392	; 0x188
    ir_reg  = &(hospi->Instance->WIR);
 800569c:	f504 75c8 	add.w	r5, r4, #400	; 0x190
    abr_reg = &(hospi->Instance->WABR);
 80056a0:	f504 7cd0 	add.w	ip, r4, #416	; 0x1a0
    ir_reg  = &(hospi->Instance->IR);
    abr_reg = &(hospi->Instance->ABR);
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 80056a4:	e9d1 3712 	ldrd	r3, r7, [r1, #72]	; 0x48
 80056a8:	433b      	orrs	r3, r7
 80056aa:	6013      	str	r3, [r2, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 80056ac:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80056ae:	b16b      	cbz	r3, 80056cc <OSPI_ConfigCmd+0x5c>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 80056b0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80056b2:	f8cc 3000 	str.w	r3, [ip]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 80056b6:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 80056b8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80056ba:	f8d2 c000 	ldr.w	ip, [r2]
 80056be:	433b      	orrs	r3, r7
 80056c0:	6b0f      	ldr	r7, [r1, #48]	; 0x30
 80056c2:	433b      	orrs	r3, r7
 80056c4:	f42c 177c 	bic.w	r7, ip, #4128768	; 0x3f0000
 80056c8:	433b      	orrs	r3, r7
 80056ca:	6013      	str	r3, [r2, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 80056cc:	6833      	ldr	r3, [r6, #0]
 80056ce:	6c4f      	ldr	r7, [r1, #68]	; 0x44
 80056d0:	f023 031f 	bic.w	r3, r3, #31
 80056d4:	433b      	orrs	r3, r7
 80056d6:	6033      	str	r3, [r6, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80056d8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80056da:	b123      	cbz	r3, 80056e6 <OSPI_ConfigCmd+0x76>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80056dc:	680e      	ldr	r6, [r1, #0]
 80056de:	b916      	cbnz	r6, 80056e6 <OSPI_ConfigCmd+0x76>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 80056e0:	6bce      	ldr	r6, [r1, #60]	; 0x3c
 80056e2:	3e01      	subs	r6, #1
 80056e4:	6426      	str	r6, [r4, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 80056e6:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 80056ea:	f8d1 901c 	ldr.w	r9, [r1, #28]
 80056ee:	f1ba 0f00 	cmp.w	sl, #0
 80056f2:	d076      	beq.n	80057e2 <OSPI_ConfigCmd+0x172>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80056f4:	e9d1 e804 	ldrd	lr, r8, [r1, #16]
 80056f8:	f1b9 0f00 	cmp.w	r9, #0
 80056fc:	d047      	beq.n	800578e <OSPI_ConfigCmd+0x11e>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80056fe:	6817      	ldr	r7, [r2, #0]
 8005700:	e9d1 6c08 	ldrd	r6, ip, [r1, #32]
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8005704:	b34b      	cbz	r3, 800575a <OSPI_ConfigCmd+0xea>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8005706:	ea43 000a 	orr.w	r0, r3, sl
 800570a:	ea40 0309 	orr.w	r3, r0, r9
 800570e:	6c08      	ldr	r0, [r1, #64]	; 0x40
 8005710:	ea43 0308 	orr.w	r3, r3, r8
 8005714:	ea43 030e 	orr.w	r3, r3, lr
 8005718:	ea43 030c 	orr.w	r3, r3, ip
 800571c:	4333      	orrs	r3, r6
 800571e:	4303      	orrs	r3, r0
 8005720:	483e      	ldr	r0, [pc, #248]	; (800581c <OSPI_ConfigCmd+0x1ac>)
 8005722:	4038      	ands	r0, r7
 8005724:	4303      	orrs	r3, r0

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8005726:	6013      	str	r3, [r2, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8005728:	688b      	ldr	r3, [r1, #8]
 800572a:	602b      	str	r3, [r5, #0]
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 800572c:	698b      	ldr	r3, [r1, #24]
 800572e:	64a3      	str	r3, [r4, #72]	; 0x48
 8005730:	e040      	b.n	80057b4 <OSPI_ConfigCmd+0x144>
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 8005732:	2b03      	cmp	r3, #3
    ccr_reg = &(hospi->Instance->WPCCR);
 8005734:	bf01      	itttt	eq
 8005736:	f504 72a0 	addeq.w	r2, r4, #320	; 0x140
    tcr_reg = &(hospi->Instance->WPTCR);
 800573a:	f504 76a4 	addeq.w	r6, r4, #328	; 0x148
    ir_reg  = &(hospi->Instance->WPIR);
 800573e:	f504 75a8 	addeq.w	r5, r4, #336	; 0x150
    abr_reg = &(hospi->Instance->WPABR);
 8005742:	f504 7cb0 	addeq.w	ip, r4, #352	; 0x160
    ccr_reg = &(hospi->Instance->CCR);
 8005746:	bf1f      	itttt	ne
 8005748:	f504 7280 	addne.w	r2, r4, #256	; 0x100
    tcr_reg = &(hospi->Instance->TCR);
 800574c:	f504 7684 	addne.w	r6, r4, #264	; 0x108
    ir_reg  = &(hospi->Instance->IR);
 8005750:	f504 7588 	addne.w	r5, r4, #272	; 0x110
    abr_reg = &(hospi->Instance->ABR);
 8005754:	f504 7c90 	addne.w	ip, r4, #288	; 0x120
 8005758:	e7a4      	b.n	80056a4 <OSPI_ConfigCmd+0x34>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800575a:	ea4a 0309 	orr.w	r3, sl, r9
 800575e:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 8005762:	ea43 0308 	orr.w	r3, r3, r8
 8005766:	f027 073f 	bic.w	r7, r7, #63	; 0x3f
 800576a:	ea43 030e 	orr.w	r3, r3, lr
 800576e:	ea43 030c 	orr.w	r3, r3, ip
 8005772:	4333      	orrs	r3, r6
 8005774:	433b      	orrs	r3, r7
 8005776:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8005778:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800577a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800577e:	d1d3      	bne.n	8005728 <OSPI_ConfigCmd+0xb8>
 8005780:	694b      	ldr	r3, [r1, #20]
 8005782:	2b08      	cmp	r3, #8
 8005784:	d1d0      	bne.n	8005728 <OSPI_ConfigCmd+0xb8>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8005786:	6813      	ldr	r3, [r2, #0]
 8005788:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800578c:	e7cb      	b.n	8005726 <OSPI_ConfigCmd+0xb6>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800578e:	b1a3      	cbz	r3, 80057ba <OSPI_ConfigCmd+0x14a>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8005790:	ea43 030a 	orr.w	r3, r3, sl
 8005794:	6810      	ldr	r0, [r2, #0]
 8005796:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 8005798:	ea43 0308 	orr.w	r3, r3, r8
 800579c:	ea43 030e 	orr.w	r3, r3, lr
 80057a0:	f020 6e70 	bic.w	lr, r0, #251658240	; 0xf000000
 80057a4:	4323      	orrs	r3, r4
 80057a6:	f02e 0e3f 	bic.w	lr, lr, #63	; 0x3f
 80057aa:	ea43 030e 	orr.w	r3, r3, lr
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80057ae:	6013      	str	r3, [r2, #0]
      *ir_reg = cmd->Instruction;
 80057b0:	688b      	ldr	r3, [r1, #8]
 80057b2:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057b4:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 80057b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 80057ba:	6814      	ldr	r4, [r2, #0]
 80057bc:	ea4a 0308 	orr.w	r3, sl, r8
 80057c0:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 80057c4:	ea43 030e 	orr.w	r3, r3, lr
 80057c8:	4323      	orrs	r3, r4
 80057ca:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80057cc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80057ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057d2:	d1ed      	bne.n	80057b0 <OSPI_ConfigCmd+0x140>
 80057d4:	694b      	ldr	r3, [r1, #20]
 80057d6:	2b08      	cmp	r3, #8
 80057d8:	d1ea      	bne.n	80057b0 <OSPI_ConfigCmd+0x140>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80057da:	6813      	ldr	r3, [r2, #0]
 80057dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057e0:	e7e5      	b.n	80057ae <OSPI_ConfigCmd+0x13e>
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80057e2:	f1b9 0f00 	cmp.w	r9, #0
 80057e6:	d014      	beq.n	8005812 <OSPI_ConfigCmd+0x1a2>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 80057e8:	6810      	ldr	r0, [r2, #0]
 80057ea:	e9d1 5608 	ldrd	r5, r6, [r1, #32]
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80057ee:	b163      	cbz	r3, 800580a <OSPI_ConfigCmd+0x19a>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 80057f0:	ea43 0309 	orr.w	r3, r3, r9
 80057f4:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 80057f8:	4333      	orrs	r3, r6
 80057fa:	432b      	orrs	r3, r5
 80057fc:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 80057fe:	432b      	orrs	r3, r5
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8005800:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8005804:	4303      	orrs	r3, r0
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	e790      	b.n	800572c <OSPI_ConfigCmd+0xbc>
 800580a:	ea49 0306 	orr.w	r3, r9, r6
 800580e:	432b      	orrs	r3, r5
 8005810:	e7f6      	b.n	8005800 <OSPI_ConfigCmd+0x190>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8005812:	2308      	movs	r3, #8
 8005814:	6583      	str	r3, [r0, #88]	; 0x58
      status = HAL_ERROR;
 8005816:	2001      	movs	r0, #1
 8005818:	e7cd      	b.n	80057b6 <OSPI_ConfigCmd+0x146>
 800581a:	bf00      	nop
 800581c:	f0ffc0c0 	.word	0xf0ffc0c0

08005820 <OSPI_WaitFlagStateUntilTimeout>:
{
 8005820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005824:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005828:	4604      	mov	r4, r0
 800582a:	460e      	mov	r6, r1
 800582c:	4615      	mov	r5, r2
 800582e:	461f      	mov	r7, r3
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8005830:	6822      	ldr	r2, [r4, #0]
 8005832:	6a13      	ldr	r3, [r2, #32]
 8005834:	4233      	tst	r3, r6
 8005836:	bf14      	ite	ne
 8005838:	2301      	movne	r3, #1
 800583a:	2300      	moveq	r3, #0
 800583c:	42ab      	cmp	r3, r5
 800583e:	d101      	bne.n	8005844 <OSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8005840:	2000      	movs	r0, #0
 8005842:	e012      	b.n	800586a <OSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8005844:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005848:	d0f3      	beq.n	8005832 <OSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800584a:	f7fe fe0b 	bl	8004464 <HAL_GetTick>
 800584e:	1bc0      	subs	r0, r0, r7
 8005850:	4540      	cmp	r0, r8
 8005852:	d802      	bhi.n	800585a <OSPI_WaitFlagStateUntilTimeout+0x3a>
 8005854:	f1b8 0f00 	cmp.w	r8, #0
 8005858:	d1ea      	bne.n	8005830 <OSPI_WaitFlagStateUntilTimeout+0x10>
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800585a:	f44f 7300 	mov.w	r3, #512	; 0x200
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800585e:	2001      	movs	r0, #1
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8005860:	6563      	str	r3, [r4, #84]	; 0x54
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8005862:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005864:	f043 0301 	orr.w	r3, r3, #1
 8005868:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800586a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005870 <HAL_OSPI_Init>:
{
 8005870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005872:	4604      	mov	r4, r0
 8005874:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8005876:	f7fe fdf5 	bl	8004464 <HAL_GetTick>
 800587a:	4603      	mov	r3, r0
  if (hospi == NULL)
 800587c:	2c00      	cmp	r4, #0
 800587e:	d068      	beq.n	8005952 <HAL_OSPI_Init+0xe2>
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8005880:	2000      	movs	r0, #0
 8005882:	65a0      	str	r0, [r4, #88]	; 0x58
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8005884:	6d66      	ldr	r6, [r4, #84]	; 0x54
 8005886:	2e00      	cmp	r6, #0
 8005888:	d161      	bne.n	800594e <HAL_OSPI_Init+0xde>
      HAL_OSPI_MspInit(hospi);
 800588a:	4620      	mov	r0, r4
 800588c:	9303      	str	r3, [sp, #12]
 800588e:	f7fb f9ed 	bl	8000c6c <HAL_OSPI_MspInit>
      MODIFY_REG(hospi->Instance->DCR1,
 8005892:	69e0      	ldr	r0, [r4, #28]
 8005894:	68e1      	ldr	r1, [r4, #12]
  hospi->Timeout = Timeout;
 8005896:	f241 3288 	movw	r2, #5000	; 0x1388
      MODIFY_REG(hospi->Instance->DCR1,
 800589a:	6825      	ldr	r5, [r4, #0]
 800589c:	4301      	orrs	r1, r0
 800589e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80058a0:	68af      	ldr	r7, [r5, #8]
 80058a2:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80058a6:	482c      	ldr	r0, [pc, #176]	; (8005958 <HAL_OSPI_Init+0xe8>)
  hospi->Timeout = Timeout;
 80058a8:	65e2      	str	r2, [r4, #92]	; 0x5c
      MODIFY_REG(hospi->Instance->DCR1,
 80058aa:	4038      	ands	r0, r7
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80058ac:	9b03      	ldr	r3, [sp, #12]
      MODIFY_REG(hospi->Instance->DCR1,
 80058ae:	4301      	orrs	r1, r0
 80058b0:	6920      	ldr	r0, [r4, #16]
 80058b2:	3801      	subs	r0, #1
 80058b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80058b8:	6960      	ldr	r0, [r4, #20]
 80058ba:	3801      	subs	r0, #1
 80058bc:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80058c0:	6a20      	ldr	r0, [r4, #32]
      MODIFY_REG(hospi->Instance->DCR1,
 80058c2:	60a9      	str	r1, [r5, #8]
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80058c4:	68e9      	ldr	r1, [r5, #12]
 80058c6:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 80058ca:	4301      	orrs	r1, r0
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80058cc:	6b20      	ldr	r0, [r4, #48]	; 0x30
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80058ce:	60e9      	str	r1, [r5, #12]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80058d0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80058d2:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80058d6:	6860      	ldr	r0, [r4, #4]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80058d8:	6129      	str	r1, [r5, #16]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80058da:	3801      	subs	r0, #1
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80058dc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80058de:	6169      	str	r1, [r5, #20]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80058e0:	6829      	ldr	r1, [r5, #0]
 80058e2:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
 80058e6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80058ea:	4620      	mov	r0, r4
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80058ec:	6029      	str	r1, [r5, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80058ee:	2120      	movs	r1, #32
 80058f0:	9200      	str	r2, [sp, #0]
 80058f2:	4632      	mov	r2, r6
 80058f4:	f7ff ff94 	bl	8005820 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 80058f8:	bb48      	cbnz	r0, 800594e <HAL_OSPI_Init+0xde>
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80058fe:	68d9      	ldr	r1, [r3, #12]
 8005900:	3a01      	subs	r2, #1
 8005902:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8005906:	430a      	orrs	r2, r1
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8005908:	68a1      	ldr	r1, [r4, #8]
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800590a:	60da      	str	r2, [r3, #12]
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005912:	430a      	orrs	r2, r1
 8005914:	601a      	str	r2, [r3, #0]
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8005916:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800591a:	e9d4 250a 	ldrd	r2, r5, [r4, #40]	; 0x28
 800591e:	f021 41a0 	bic.w	r1, r1, #1342177280	; 0x50000000
 8005922:	432a      	orrs	r2, r5
 8005924:	430a      	orrs	r2, r1
 8005926:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        __HAL_OSPI_ENABLE(hospi);
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	f042 0201 	orr.w	r2, r2, #1
 8005930:	601a      	str	r2, [r3, #0]
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8005932:	69a2      	ldr	r2, [r4, #24]
 8005934:	2a02      	cmp	r2, #2
 8005936:	d103      	bne.n	8005940 <HAL_OSPI_Init+0xd0>
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8005938:	689a      	ldr	r2, [r3, #8]
 800593a:	f042 0202 	orr.w	r2, r2, #2
 800593e:	609a      	str	r2, [r3, #8]
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8005940:	68e3      	ldr	r3, [r4, #12]
 8005942:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8005946:	bf0c      	ite	eq
 8005948:	2301      	moveq	r3, #1
          hospi->State = HAL_OSPI_STATE_READY;
 800594a:	2302      	movne	r3, #2
 800594c:	6563      	str	r3, [r4, #84]	; 0x54
}
 800594e:	b005      	add	sp, #20
 8005950:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_ERROR;
 8005952:	2001      	movs	r0, #1
 8005954:	e7fb      	b.n	800594e <HAL_OSPI_Init+0xde>
 8005956:	bf00      	nop
 8005958:	f8e0f88c 	.word	0xf8e0f88c

0800595c <HAL_OSPI_DeInit>:
{
 800595c:	b510      	push	{r4, lr}
  if (hospi == NULL)
 800595e:	4604      	mov	r4, r0
 8005960:	b168      	cbz	r0, 800597e <HAL_OSPI_DeInit+0x22>
     __HAL_OSPI_DISABLE(hospi);
 8005962:	6803      	ldr	r3, [r0, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	f022 0201 	bic.w	r2, r2, #1
 800596a:	601a      	str	r2, [r3, #0]
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800596c:	689a      	ldr	r2, [r3, #8]
 800596e:	f022 0202 	bic.w	r2, r2, #2
 8005972:	609a      	str	r2, [r3, #8]
     HAL_OSPI_MspDeInit(hospi);
 8005974:	f7fb faaa 	bl	8000ecc <HAL_OSPI_MspDeInit>
     hospi->State = HAL_OSPI_STATE_RESET;
 8005978:	2000      	movs	r0, #0
 800597a:	6560      	str	r0, [r4, #84]	; 0x54
}
 800597c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800597e:	2001      	movs	r0, #1
 8005980:	e7fc      	b.n	800597c <HAL_OSPI_DeInit+0x20>

08005982 <HAL_OSPI_Command>:
{
 8005982:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005984:	4604      	mov	r4, r0
 8005986:	4616      	mov	r6, r2
 8005988:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800598a:	f7fe fd6b 	bl	8004464 <HAL_GetTick>
  state = hospi->State;
 800598e:	6d62      	ldr	r2, [r4, #84]	; 0x54
  uint32_t tickstart = HAL_GetTick();
 8005990:	4603      	mov	r3, r0
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8005992:	2a02      	cmp	r2, #2
 8005994:	d107      	bne.n	80059a6 <HAL_OSPI_Command+0x24>
 8005996:	68e2      	ldr	r2, [r4, #12]
 8005998:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800599c:	d109      	bne.n	80059b2 <HAL_OSPI_Command+0x30>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800599e:	2310      	movs	r3, #16
    status = HAL_ERROR;
 80059a0:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80059a2:	65a3      	str	r3, [r4, #88]	; 0x58
 80059a4:	e01f      	b.n	80059e6 <HAL_OSPI_Command+0x64>
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 80059a6:	2a14      	cmp	r2, #20
 80059a8:	d11f      	bne.n	80059ea <HAL_OSPI_Command+0x68>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 80059aa:	682a      	ldr	r2, [r5, #0]
 80059ac:	3a02      	subs	r2, #2
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80059ae:	2a01      	cmp	r2, #1
 80059b0:	d8f5      	bhi.n	800599e <HAL_OSPI_Command+0x1c>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80059b2:	2200      	movs	r2, #0
 80059b4:	2120      	movs	r1, #32
 80059b6:	4620      	mov	r0, r4
 80059b8:	9600      	str	r6, [sp, #0]
 80059ba:	9303      	str	r3, [sp, #12]
 80059bc:	f7ff ff30 	bl	8005820 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80059c0:	b988      	cbnz	r0, 80059e6 <HAL_OSPI_Command+0x64>
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80059c2:	65a0      	str	r0, [r4, #88]	; 0x58
      status = OSPI_ConfigCmd(hospi, cmd);
 80059c4:	4629      	mov	r1, r5
 80059c6:	4620      	mov	r0, r4
 80059c8:	f7ff fe52 	bl	8005670 <OSPI_ConfigCmd>
      if (status == HAL_OK)
 80059cc:	b958      	cbnz	r0, 80059e6 <HAL_OSPI_Command+0x64>
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 80059ce:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80059d0:	9b03      	ldr	r3, [sp, #12]
 80059d2:	b992      	cbnz	r2, 80059fa <HAL_OSPI_Command+0x78>
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80059d4:	2201      	movs	r2, #1
 80059d6:	2102      	movs	r1, #2
 80059d8:	4620      	mov	r0, r4
 80059da:	9600      	str	r6, [sp, #0]
 80059dc:	f7ff ff20 	bl	8005820 <OSPI_WaitFlagStateUntilTimeout>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80059e0:	6823      	ldr	r3, [r4, #0]
 80059e2:	2202      	movs	r2, #2
 80059e4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80059e6:	b004      	add	sp, #16
 80059e8:	bd70      	pop	{r4, r5, r6, pc}
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 80059ea:	2a24      	cmp	r2, #36	; 0x24
 80059ec:	d1d7      	bne.n	800599e <HAL_OSPI_Command+0x1c>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 80059ee:	682a      	ldr	r2, [r5, #0]
 80059f0:	f022 0202 	bic.w	r2, r2, #2
 80059f4:	2a01      	cmp	r2, #1
 80059f6:	d1d2      	bne.n	800599e <HAL_OSPI_Command+0x1c>
 80059f8:	e7db      	b.n	80059b2 <HAL_OSPI_Command+0x30>
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80059fa:	682b      	ldr	r3, [r5, #0]
 80059fc:	b90b      	cbnz	r3, 8005a02 <HAL_OSPI_Command+0x80>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80059fe:	2304      	movs	r3, #4
 8005a00:	e005      	b.n	8005a0e <HAL_OSPI_Command+0x8c>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d105      	bne.n	8005a12 <HAL_OSPI_Command+0x90>
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8005a06:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005a08:	2b24      	cmp	r3, #36	; 0x24
 8005a0a:	d0f8      	beq.n	80059fe <HAL_OSPI_Command+0x7c>
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8005a0c:	2314      	movs	r3, #20
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8005a0e:	6563      	str	r3, [r4, #84]	; 0x54
 8005a10:	e7e9      	b.n	80059e6 <HAL_OSPI_Command+0x64>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d1e7      	bne.n	80059e6 <HAL_OSPI_Command+0x64>
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8005a16:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005a18:	2b14      	cmp	r3, #20
 8005a1a:	d0f0      	beq.n	80059fe <HAL_OSPI_Command+0x7c>
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8005a1c:	2324      	movs	r3, #36	; 0x24
 8005a1e:	e7f6      	b.n	8005a0e <HAL_OSPI_Command+0x8c>

08005a20 <HAL_OSPI_HyperbusCfg>:
{
 8005a20:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a22:	4604      	mov	r4, r0
 8005a24:	4616      	mov	r6, r2
 8005a26:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8005a28:	f7fe fd1c 	bl	8004464 <HAL_GetTick>
  state = hospi->State;
 8005a2c:	6d62      	ldr	r2, [r4, #84]	; 0x54
  uint32_t tickstart = HAL_GetTick();
 8005a2e:	4603      	mov	r3, r0
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 8005a30:	3a01      	subs	r2, #1
 8005a32:	2a01      	cmp	r2, #1
 8005a34:	d816      	bhi.n	8005a64 <HAL_OSPI_HyperbusCfg+0x44>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005a36:	2200      	movs	r2, #0
 8005a38:	2120      	movs	r1, #32
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	9600      	str	r6, [sp, #0]
 8005a3e:	f7ff feef 	bl	8005820 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005a42:	b968      	cbnz	r0, 8005a60 <HAL_OSPI_HyperbusCfg+0x40>
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 8005a44:	6822      	ldr	r2, [r4, #0]
 8005a46:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
 8005a4a:	430b      	orrs	r3, r1
 8005a4c:	6829      	ldr	r1, [r5, #0]
 8005a4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005a52:	6869      	ldr	r1, [r5, #4]
 8005a54:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005a58:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
      hospi->State = HAL_OSPI_STATE_READY;
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	6563      	str	r3, [r4, #84]	; 0x54
}
 8005a60:	b002      	add	sp, #8
 8005a62:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005a64:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8005a66:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005a68:	65a3      	str	r3, [r4, #88]	; 0x58
 8005a6a:	e7f9      	b.n	8005a60 <HAL_OSPI_HyperbusCfg+0x40>

08005a6c <HAL_OSPI_HyperbusCmd>:
{
 8005a6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a6e:	4604      	mov	r4, r0
 8005a70:	4616      	mov	r6, r2
 8005a72:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8005a74:	f7fe fcf6 	bl	8004464 <HAL_GetTick>
  if ((hospi->State == HAL_OSPI_STATE_READY) && (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS))
 8005a78:	6d62      	ldr	r2, [r4, #84]	; 0x54
  uint32_t tickstart = HAL_GetTick();
 8005a7a:	4603      	mov	r3, r0
  if ((hospi->State == HAL_OSPI_STATE_READY) && (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS))
 8005a7c:	2a02      	cmp	r2, #2
 8005a7e:	d127      	bne.n	8005ad0 <HAL_OSPI_HyperbusCmd+0x64>
 8005a80:	68e2      	ldr	r2, [r4, #12]
 8005a82:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8005a86:	d123      	bne.n	8005ad0 <HAL_OSPI_HyperbusCmd+0x64>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005a88:	2200      	movs	r2, #0
 8005a8a:	2120      	movs	r1, #32
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	9600      	str	r6, [sp, #0]
 8005a90:	f7ff fec6 	bl	8005820 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005a94:	b9d0      	cbnz	r0, 8005acc <HAL_OSPI_HyperbusCmd+0x60>
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8005a96:	6823      	ldr	r3, [r4, #0]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 8005a98:	6829      	ldr	r1, [r5, #0]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005aa0:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 8005aa2:	689a      	ldr	r2, [r3, #8]
 8005aa4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005aa8:	430a      	orrs	r2, r1
      WRITE_REG(hospi->Instance->CCR, (cmd->DQSMode | OCTOSPI_CCR_DDTR | OCTOSPI_CCR_DMODE_2 |
 8005aaa:	68a9      	ldr	r1, [r5, #8]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 8005aac:	609a      	str	r2, [r3, #8]
      WRITE_REG(hospi->Instance->CCR, (cmd->DQSMode | OCTOSPI_CCR_DDTR | OCTOSPI_CCR_DMODE_2 |
 8005aae:	692a      	ldr	r2, [r5, #16]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	f042 220c 	orr.w	r2, r2, #201329664	; 0xc000c00
 8005ab6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
      WRITE_REG(hospi->Instance->WCCR, (cmd->DQSMode | OCTOSPI_WCCR_DDTR | OCTOSPI_WCCR_DMODE_2 |
 8005aba:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      WRITE_REG(hospi->Instance->DLR, (cmd->NbData - 1U));
 8005abe:	68ea      	ldr	r2, [r5, #12]
 8005ac0:	3a01      	subs	r2, #1
 8005ac2:	641a      	str	r2, [r3, #64]	; 0x40
      WRITE_REG(hospi->Instance->AR, cmd->Address);
 8005ac4:	686a      	ldr	r2, [r5, #4]
 8005ac6:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8005ac8:	2304      	movs	r3, #4
 8005aca:	6563      	str	r3, [r4, #84]	; 0x54
}
 8005acc:	b002      	add	sp, #8
 8005ace:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005ad0:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8005ad2:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005ad4:	65a3      	str	r3, [r4, #88]	; 0x58
 8005ad6:	e7f9      	b.n	8005acc <HAL_OSPI_HyperbusCmd+0x60>

08005ad8 <HAL_OSPI_Transmit>:
{
 8005ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ada:	460f      	mov	r7, r1
 8005adc:	b085      	sub	sp, #20
 8005ade:	4604      	mov	r4, r0
 8005ae0:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8005ae2:	f7fe fcbf 	bl	8004464 <HAL_GetTick>
 8005ae6:	4603      	mov	r3, r0
  if (pData == NULL)
 8005ae8:	b91f      	cbnz	r7, 8005af2 <HAL_OSPI_Transmit+0x1a>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8005aea:	2308      	movs	r3, #8
      status = HAL_ERROR;
 8005aec:	2001      	movs	r0, #1
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005aee:	65a3      	str	r3, [r4, #88]	; 0x58
 8005af0:	e02e      	b.n	8005b50 <HAL_OSPI_Transmit+0x78>
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8005af2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005af4:	2a04      	cmp	r2, #4
 8005af6:	d12d      	bne.n	8005b54 <HAL_OSPI_Transmit+0x7c>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8005af8:	6826      	ldr	r6, [r4, #0]
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8005afa:	6c32      	ldr	r2, [r6, #64]	; 0x40
      hospi->pBuffPtr  = pData;
 8005afc:	6467      	str	r7, [r4, #68]	; 0x44
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8005afe:	3201      	adds	r2, #1
 8005b00:	64e2      	str	r2, [r4, #76]	; 0x4c
      hospi->XferSize  = hospi->XferCount;
 8005b02:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005b04:	64a2      	str	r2, [r4, #72]	; 0x48
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005b06:	6832      	ldr	r2, [r6, #0]
 8005b08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005b0c:	6032      	str	r2, [r6, #0]
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8005b0e:	2201      	movs	r2, #1
 8005b10:	2104      	movs	r1, #4
 8005b12:	4620      	mov	r0, r4
 8005b14:	9500      	str	r5, [sp, #0]
 8005b16:	9303      	str	r3, [sp, #12]
 8005b18:	f7ff fe82 	bl	8005820 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8005b1c:	b9c0      	cbnz	r0, 8005b50 <HAL_OSPI_Transmit+0x78>
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8005b1e:	6c62      	ldr	r2, [r4, #68]	; 0x44
      } while (hospi->XferCount > 0U);
 8005b20:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8005b22:	7812      	ldrb	r2, [r2, #0]
 8005b24:	f886 2050 	strb.w	r2, [r6, #80]	; 0x50
        hospi->pBuffPtr++;
 8005b28:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005b2a:	3201      	adds	r2, #1
 8005b2c:	6462      	str	r2, [r4, #68]	; 0x44
        hospi->XferCount--;
 8005b2e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005b30:	3a01      	subs	r2, #1
 8005b32:	64e2      	str	r2, [r4, #76]	; 0x4c
      } while (hospi->XferCount > 0U);
 8005b34:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005b36:	2a00      	cmp	r2, #0
 8005b38:	d1e9      	bne.n	8005b0e <HAL_OSPI_Transmit+0x36>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	2102      	movs	r1, #2
 8005b3e:	4620      	mov	r0, r4
 8005b40:	9500      	str	r5, [sp, #0]
 8005b42:	f7ff fe6d 	bl	8005820 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8005b46:	b918      	cbnz	r0, 8005b50 <HAL_OSPI_Transmit+0x78>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8005b48:	2302      	movs	r3, #2
 8005b4a:	6822      	ldr	r2, [r4, #0]
 8005b4c:	6253      	str	r3, [r2, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 8005b4e:	6563      	str	r3, [r4, #84]	; 0x54
}
 8005b50:	b005      	add	sp, #20
 8005b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005b54:	2310      	movs	r3, #16
 8005b56:	e7c9      	b.n	8005aec <HAL_OSPI_Transmit+0x14>

08005b58 <HAL_OSPI_Receive>:
{
 8005b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	b085      	sub	sp, #20
 8005b5e:	460f      	mov	r7, r1
 8005b60:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8005b62:	f7fe fc7f 	bl	8004464 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8005b66:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8005b68:	4603      	mov	r3, r0
  uint32_t addr_reg = hospi->Instance->AR;
 8005b6a:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 8005b6c:	f8d5 c110 	ldr.w	ip, [r5, #272]	; 0x110
  if (pData == NULL)
 8005b70:	b91f      	cbnz	r7, 8005b7a <HAL_OSPI_Receive+0x22>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8005b72:	2308      	movs	r3, #8
      status = HAL_ERROR;
 8005b74:	2001      	movs	r0, #1
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005b76:	65a3      	str	r3, [r4, #88]	; 0x58
 8005b78:	e034      	b.n	8005be4 <HAL_OSPI_Receive+0x8c>
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8005b7a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005b7c:	2a04      	cmp	r2, #4
 8005b7e:	d13b      	bne.n	8005bf8 <HAL_OSPI_Receive+0xa0>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8005b80:	6c2a      	ldr	r2, [r5, #64]	; 0x40
      hospi->pBuffPtr  = pData;
 8005b82:	6467      	str	r7, [r4, #68]	; 0x44
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8005b84:	3201      	adds	r2, #1
 8005b86:	64e2      	str	r2, [r4, #76]	; 0x4c
      hospi->XferSize  = hospi->XferCount;
 8005b88:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005b8a:	64a2      	str	r2, [r4, #72]	; 0x48
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8005b8c:	6829      	ldr	r1, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8005b8e:	68e2      	ldr	r2, [r4, #12]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8005b90:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8005b94:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8005b98:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8005b9c:	6029      	str	r1, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8005b9e:	d123      	bne.n	8005be8 <HAL_OSPI_Receive+0x90>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8005ba0:	64a8      	str	r0, [r5, #72]	; 0x48
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	2106      	movs	r1, #6
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	9600      	str	r6, [sp, #0]
 8005baa:	9303      	str	r3, [sp, #12]
 8005bac:	f7ff fe38 	bl	8005820 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8005bb0:	b9c0      	cbnz	r0, 8005be4 <HAL_OSPI_Receive+0x8c>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8005bb2:	f895 1050 	ldrb.w	r1, [r5, #80]	; 0x50
 8005bb6:	6c62      	ldr	r2, [r4, #68]	; 0x44
      } while(hospi->XferCount > 0U);
 8005bb8:	9b03      	ldr	r3, [sp, #12]
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8005bba:	7011      	strb	r1, [r2, #0]
        hospi->pBuffPtr++;
 8005bbc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005bbe:	3201      	adds	r2, #1
 8005bc0:	6462      	str	r2, [r4, #68]	; 0x44
        hospi->XferCount--;
 8005bc2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005bc4:	3a01      	subs	r2, #1
 8005bc6:	64e2      	str	r2, [r4, #76]	; 0x4c
      } while(hospi->XferCount > 0U);
 8005bc8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005bca:	2a00      	cmp	r2, #0
 8005bcc:	d1e9      	bne.n	8005ba2 <HAL_OSPI_Receive+0x4a>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8005bce:	2201      	movs	r2, #1
 8005bd0:	2102      	movs	r1, #2
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	9600      	str	r6, [sp, #0]
 8005bd6:	f7ff fe23 	bl	8005820 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8005bda:	b918      	cbnz	r0, 8005be4 <HAL_OSPI_Receive+0x8c>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8005bdc:	2302      	movs	r3, #2
 8005bde:	6822      	ldr	r2, [r4, #0]
 8005be0:	6253      	str	r3, [r2, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 8005be2:	6563      	str	r3, [r4, #84]	; 0x54
}
 8005be4:	b005      	add	sp, #20
 8005be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8005be8:	f8d5 2100 	ldr.w	r2, [r5, #256]	; 0x100
 8005bec:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 8005bf0:	d1d6      	bne.n	8005ba0 <HAL_OSPI_Receive+0x48>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8005bf2:	f8c5 c110 	str.w	ip, [r5, #272]	; 0x110
 8005bf6:	e7d4      	b.n	8005ba2 <HAL_OSPI_Receive+0x4a>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005bf8:	2310      	movs	r3, #16
 8005bfa:	e7bb      	b.n	8005b74 <HAL_OSPI_Receive+0x1c>

08005bfc <HAL_OSPI_AutoPolling>:
{
 8005bfc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005c00:	4604      	mov	r4, r0
 8005c02:	4616      	mov	r6, r2
 8005c04:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8005c06:	f7fe fc2d 	bl	8004464 <HAL_GetTick>
  uint32_t addr_reg = hospi->Instance->AR;
 8005c0a:	6822      	ldr	r2, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8005c0c:	4603      	mov	r3, r0
  uint32_t addr_reg = hospi->Instance->AR;
 8005c0e:	6c97      	ldr	r7, [r2, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 8005c10:	f8d2 8110 	ldr.w	r8, [r2, #272]	; 0x110
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8005c14:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005c16:	2a04      	cmp	r2, #4
 8005c18:	d13c      	bne.n	8005c94 <HAL_OSPI_AutoPolling+0x98>
 8005c1a:	68ea      	ldr	r2, [r5, #12]
 8005c1c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8005c20:	d138      	bne.n	8005c94 <HAL_OSPI_AutoPolling+0x98>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005c22:	9003      	str	r0, [sp, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	2120      	movs	r1, #32
 8005c28:	4620      	mov	r0, r4
 8005c2a:	9600      	str	r6, [sp, #0]
 8005c2c:	f7ff fdf8 	bl	8005820 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005c30:	bb28      	cbnz	r0, 8005c7e <HAL_OSPI_AutoPolling+0x82>
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8005c32:	6829      	ldr	r1, [r5, #0]
 8005c34:	6822      	ldr	r2, [r4, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8005c36:	9b03      	ldr	r3, [sp, #12]
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8005c38:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 8005c3c:	6869      	ldr	r1, [r5, #4]
 8005c3e:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 8005c42:	6929      	ldr	r1, [r5, #16]
 8005c44:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8005c48:	6810      	ldr	r0, [r2, #0]
 8005c4a:	e9d5 1502 	ldrd	r1, r5, [r5, #8]
 8005c4e:	f020 5043 	bic.w	r0, r0, #817889280	; 0x30c00000
 8005c52:	4329      	orrs	r1, r5
 8005c54:	4301      	orrs	r1, r0
 8005c56:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8005c5a:	6011      	str	r1, [r2, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8005c5c:	68e1      	ldr	r1, [r4, #12]
 8005c5e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8005c62:	d10f      	bne.n	8005c84 <HAL_OSPI_AutoPolling+0x88>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8005c64:	6497      	str	r7, [r2, #72]	; 0x48
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8005c66:	2201      	movs	r2, #1
 8005c68:	2108      	movs	r1, #8
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	9600      	str	r6, [sp, #0]
 8005c6e:	f7ff fdd7 	bl	8005820 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8005c72:	b920      	cbnz	r0, 8005c7e <HAL_OSPI_AutoPolling+0x82>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8005c74:	6823      	ldr	r3, [r4, #0]
 8005c76:	2208      	movs	r2, #8
 8005c78:	625a      	str	r2, [r3, #36]	; 0x24
        hospi->State = HAL_OSPI_STATE_READY;
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	6563      	str	r3, [r4, #84]	; 0x54
}
 8005c7e:	b004      	add	sp, #16
 8005c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8005c84:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
 8005c88:	f411 6fe0 	tst.w	r1, #1792	; 0x700
 8005c8c:	d1ea      	bne.n	8005c64 <HAL_OSPI_AutoPolling+0x68>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8005c8e:	f8c2 8110 	str.w	r8, [r2, #272]	; 0x110
 8005c92:	e7e8      	b.n	8005c66 <HAL_OSPI_AutoPolling+0x6a>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005c94:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8005c96:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005c98:	65a3      	str	r3, [r4, #88]	; 0x58
 8005c9a:	e7f0      	b.n	8005c7e <HAL_OSPI_AutoPolling+0x82>

08005c9c <HAL_OSPI_MemoryMapped>:
{
 8005c9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c9e:	4604      	mov	r4, r0
 8005ca0:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8005ca2:	f7fe fbdf 	bl	8004464 <HAL_GetTick>
 8005ca6:	4603      	mov	r3, r0
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8005ca8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005caa:	2a04      	cmp	r2, #4
 8005cac:	d121      	bne.n	8005cf2 <HAL_OSPI_MemoryMapped+0x56>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8005cae:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005cb0:	2120      	movs	r1, #32
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	9200      	str	r2, [sp, #0]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f7ff fdb2 	bl	8005820 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005cbc:	b9b8      	cbnz	r0, 8005cee <HAL_OSPI_MemoryMapped+0x52>
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8005cbe:	682e      	ldr	r6, [r5, #0]
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8005cc0:	2388      	movs	r3, #136	; 0x88
 8005cc2:	6822      	ldr	r2, [r4, #0]
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8005cc4:	2e08      	cmp	r6, #8
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8005cc6:	6563      	str	r3, [r4, #84]	; 0x54
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8005cc8:	d108      	bne.n	8005cdc <HAL_OSPI_MemoryMapped+0x40>
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8005cca:	686b      	ldr	r3, [r5, #4]
 8005ccc:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8005cd0:	2310      	movs	r3, #16
 8005cd2:	6253      	str	r3, [r2, #36]	; 0x24
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8005cd4:	6811      	ldr	r1, [r2, #0]
 8005cd6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005cda:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8005cdc:	6813      	ldr	r3, [r2, #0]
 8005cde:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8005ce2:	f023 0308 	bic.w	r3, r3, #8
 8005ce6:	4333      	orrs	r3, r6
 8005ce8:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8005cec:	6013      	str	r3, [r2, #0]
}
 8005cee:	b002      	add	sp, #8
 8005cf0:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005cf2:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8005cf4:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005cf6:	65a3      	str	r3, [r4, #88]	; 0x58
 8005cf8:	e7f9      	b.n	8005cee <HAL_OSPI_MemoryMapped+0x52>

08005cfa <HAL_OSPI_Abort>:
{
 8005cfa:	b530      	push	{r4, r5, lr}
 8005cfc:	4604      	mov	r4, r0
 8005cfe:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8005d00:	f7fe fbb0 	bl	8004464 <HAL_GetTick>
 8005d04:	4603      	mov	r3, r0
  state = hospi->State;
 8005d06:	6d62      	ldr	r2, [r4, #84]	; 0x54
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8005d08:	f012 0f0c 	tst.w	r2, #12
 8005d0c:	d035      	beq.n	8005d7a <HAL_OSPI_Abort+0x80>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8005d0e:	6821      	ldr	r1, [r4, #0]
 8005d10:	680a      	ldr	r2, [r1, #0]
 8005d12:	f012 0204 	ands.w	r2, r2, #4
 8005d16:	d02b      	beq.n	8005d70 <HAL_OSPI_Abort+0x76>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8005d18:	680a      	ldr	r2, [r1, #0]
 8005d1a:	9003      	str	r0, [sp, #12]
 8005d1c:	f022 0204 	bic.w	r2, r2, #4
      status = HAL_MDMA_Abort(hospi->hmdma);
 8005d20:	6d20      	ldr	r0, [r4, #80]	; 0x50
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8005d22:	600a      	str	r2, [r1, #0]
      status = HAL_MDMA_Abort(hospi->hmdma);
 8005d24:	f7ff fc6c 	bl	8005600 <HAL_MDMA_Abort>
      if (status != HAL_OK)
 8005d28:	9b03      	ldr	r3, [sp, #12]
 8005d2a:	b108      	cbz	r0, 8005d30 <HAL_OSPI_Abort+0x36>
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8005d2c:	2204      	movs	r2, #4
 8005d2e:	65a2      	str	r2, [r4, #88]	; 0x58
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8005d30:	6822      	ldr	r2, [r4, #0]
 8005d32:	6a11      	ldr	r1, [r2, #32]
 8005d34:	0689      	lsls	r1, r1, #26
 8005d36:	d51d      	bpl.n	8005d74 <HAL_OSPI_Abort+0x7a>
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8005d38:	6811      	ldr	r1, [r2, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	9303      	str	r3, [sp, #12]
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8005d3e:	f041 0102 	orr.w	r1, r1, #2
 8005d42:	6011      	str	r1, [r2, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8005d44:	2102      	movs	r1, #2
 8005d46:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005d48:	9200      	str	r2, [sp, #0]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f7ff fd68 	bl	8005820 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8005d50:	9b03      	ldr	r3, [sp, #12]
 8005d52:	b958      	cbnz	r0, 8005d6c <HAL_OSPI_Abort+0x72>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8005d54:	6822      	ldr	r2, [r4, #0]
 8005d56:	2502      	movs	r5, #2
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8005d58:	2120      	movs	r1, #32
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8005d5a:	6255      	str	r5, [r2, #36]	; 0x24
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8005d5c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005d5e:	9200      	str	r2, [sp, #0]
 8005d60:	4602      	mov	r2, r0
 8005d62:	4620      	mov	r0, r4
 8005d64:	f7ff fd5c 	bl	8005820 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8005d68:	b900      	cbnz	r0, 8005d6c <HAL_OSPI_Abort+0x72>
          hospi->State = HAL_OSPI_STATE_READY;
 8005d6a:	6565      	str	r5, [r4, #84]	; 0x54
}
 8005d6c:	b005      	add	sp, #20
 8005d6e:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8005d70:	4610      	mov	r0, r2
 8005d72:	e7dd      	b.n	8005d30 <HAL_OSPI_Abort+0x36>
      hospi->State = HAL_OSPI_STATE_READY;
 8005d74:	2302      	movs	r3, #2
 8005d76:	6563      	str	r3, [r4, #84]	; 0x54
 8005d78:	e7f8      	b.n	8005d6c <HAL_OSPI_Abort+0x72>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005d7a:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8005d7c:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005d7e:	65a3      	str	r3, [r4, #88]	; 0x58
 8005d80:	e7f4      	b.n	8005d6c <HAL_OSPI_Abort+0x72>
	...

08005d84 <HAL_OSPIM_Config>:
    other_instance = 0U;
 8005d84:	4bc4      	ldr	r3, [pc, #784]	; (8006098 <HAL_OSPIM_Config+0x314>)
  if (hospi->Instance == OCTOSPI1)
 8005d86:	6802      	ldr	r2, [r0, #0]
{
 8005d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    other_instance = 0U;
 8005d8c:	429a      	cmp	r2, r3
{
 8005d8e:	b08f      	sub	sp, #60	; 0x3c
 8005d90:	4688      	mov	r8, r1
    instance = 1U;
 8005d92:	f04f 0501 	mov.w	r5, #1
    other_instance = 0U;
 8005d96:	bf0b      	itete	eq
 8005d98:	f04f 0c01 	moveq.w	ip, #1
 8005d9c:	f04f 0c00 	movne.w	ip, #0
 8005da0:	2400      	moveq	r4, #0
 8005da2:	2401      	movne	r4, #1
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8005da4:	ab02      	add	r3, sp, #8
    status = HAL_ERROR;
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8005da6:	2600      	movs	r6, #0
    cfg->IOLowPort  = 0U;
    cfg->IOHighPort = 0U;

    if (instance_nb == 2U)
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8005da8:	f8df e2f4 	ldr.w	lr, [pc, #756]	; 80060a0 <HAL_OSPIM_Config+0x31c>
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8005dac:	f8df 92f4 	ldr.w	r9, [pc, #756]	; 80060a4 <HAL_OSPIM_Config+0x320>
    if (instance_nb == 2U)
 8005db0:	2d02      	cmp	r5, #2
    cfg->IOHighPort = 0U;
 8005db2:	611e      	str	r6, [r3, #16]
    cfg->DQSPort    = 0U;
 8005db4:	e9c3 6600 	strd	r6, r6, [r3]
    cfg->IOLowPort  = 0U;
 8005db8:	e9c3 6602 	strd	r6, r6, [r3, #8]
    if (instance_nb == 2U)
 8005dbc:	f040 8126 	bne.w	800600c <HAL_OSPIM_Config+0x288>
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8005dc0:	f8de 2000 	ldr.w	r2, [lr]
        value = OCTOSPIM_PCR_NCSSRC;
 8005dc4:	f012 0f01 	tst.w	r2, #1
 8005dc8:	bf0c      	ite	eq
 8005dca:	4648      	moveq	r0, r9
 8005dcc:	f44f 7000 	movne.w	r0, #512	; 0x200
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8005dd0:	2700      	movs	r7, #0
    {
      reg = OCTOSPIM->PCR[index];
 8005dd2:	eb0e 0287 	add.w	r2, lr, r7, lsl #2
 8005dd6:	1c79      	adds	r1, r7, #1
 8005dd8:	6852      	ldr	r2, [r2, #4]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8005dda:	07d7      	lsls	r7, r2, #31
 8005ddc:	d504      	bpl.n	8005de8 <HAL_OSPIM_Config+0x64>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8005dde:	ea82 0700 	eor.w	r7, r2, r0
 8005de2:	07bf      	lsls	r7, r7, #30
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8005de4:	bf58      	it	pl
 8005de6:	6019      	strpl	r1, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8005de8:	06d7      	lsls	r7, r2, #27
 8005dea:	d504      	bpl.n	8005df6 <HAL_OSPIM_Config+0x72>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8005dec:	ea82 0700 	eor.w	r7, r2, r0
 8005df0:	06bf      	lsls	r7, r7, #26
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8005df2:	bf58      	it	pl
 8005df4:	6059      	strpl	r1, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8005df6:	05d7      	lsls	r7, r2, #23
 8005df8:	d504      	bpl.n	8005e04 <HAL_OSPIM_Config+0x80>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8005dfa:	ea82 0700 	eor.w	r7, r2, r0
 8005dfe:	05bf      	lsls	r7, r7, #22
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8005e00:	bf58      	it	pl
 8005e02:	6099      	strpl	r1, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8005e04:	03d7      	lsls	r7, r2, #15
 8005e06:	d50a      	bpl.n	8005e1e <HAL_OSPIM_Config+0x9a>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8005e08:	ea82 0700 	eor.w	r7, r2, r0
 8005e0c:	037f      	lsls	r7, r7, #13
 8005e0e:	d406      	bmi.n	8005e1e <HAL_OSPIM_Config+0x9a>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8005e10:	0397      	lsls	r7, r2, #14
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8005e12:	bf54      	ite	pl
 8005e14:	f441 3780 	orrpl.w	r7, r1, #65536	; 0x10000
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8005e18:	f041 7780 	orrmi.w	r7, r1, #16777216	; 0x1000000
 8005e1c:	60df      	str	r7, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8005e1e:	01d7      	lsls	r7, r2, #7
 8005e20:	d50a      	bpl.n	8005e38 <HAL_OSPIM_Config+0xb4>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8005e22:	ea82 0700 	eor.w	r7, r2, r0
 8005e26:	017f      	lsls	r7, r7, #5
 8005e28:	d406      	bmi.n	8005e38 <HAL_OSPIM_Config+0xb4>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8005e2a:	0197      	lsls	r7, r2, #6
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8005e2c:	bf54      	ite	pl
 8005e2e:	f441 3280 	orrpl.w	r2, r1, #65536	; 0x10000
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8005e32:	f041 7280 	orrmi.w	r2, r1, #16777216	; 0x1000000
 8005e36:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8005e38:	2902      	cmp	r1, #2
 8005e3a:	f04f 0701 	mov.w	r7, #1
 8005e3e:	d1c8      	bne.n	8005dd2 <HAL_OSPIM_Config+0x4e>
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8005e40:	2d02      	cmp	r5, #2
 8005e42:	f103 0318 	add.w	r3, r3, #24
 8005e46:	f040 80df 	bne.w	8006008 <HAL_OSPIM_Config+0x284>
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8005e4a:	4a93      	ldr	r2, [pc, #588]	; (8006098 <HAL_OSPIM_Config+0x314>)
 8005e4c:	6815      	ldr	r5, [r2, #0]
 8005e4e:	403d      	ands	r5, r7
 8005e50:	d004      	beq.n	8005e5c <HAL_OSPIM_Config+0xd8>
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8005e52:	6813      	ldr	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8005e54:	463d      	mov	r5, r7
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8005e56:	f023 0301 	bic.w	r3, r3, #1
 8005e5a:	6013      	str	r3, [r2, #0]
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8005e5c:	4b8f      	ldr	r3, [pc, #572]	; (800609c <HAL_OSPIM_Config+0x318>)
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	07d0      	lsls	r0, r2, #31
 8005e62:	f140 80d5 	bpl.w	8006010 <HAL_OSPIM_Config+0x28c>
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	f022 0201 	bic.w	r2, r2, #1
 8005e6c:	601a      	str	r2, [r3, #0]
      ospi_enabled |= 0x2U;
 8005e6e:	f045 0302 	orr.w	r3, r5, #2
 8005e72:	9301      	str	r3, [sp, #4]
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8005e74:	ab0e      	add	r3, sp, #56	; 0x38
 8005e76:	2218      	movs	r2, #24
 8005e78:	fb02 3204 	mla	r2, r2, r4, r3
 8005e7c:	f852 3c28 	ldr.w	r3, [r2, #-40]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8005e86:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8005e8a:	6819      	ldr	r1, [r3, #0]
 8005e8c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005e90:	6019      	str	r1, [r3, #0]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8005e92:	4b83      	ldr	r3, [pc, #524]	; (80060a0 <HAL_OSPIM_Config+0x31c>)
 8005e94:	6819      	ldr	r1, [r3, #0]
 8005e96:	07c9      	lsls	r1, r1, #31
 8005e98:	f140 80bc 	bpl.w	8006014 <HAL_OSPIM_Config+0x290>
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	f022 0201 	bic.w	r2, r2, #1
 8005ea2:	601a      	str	r2, [r3, #0]
      if (other_instance == 1U)
 8005ea4:	f1bc 0f00 	cmp.w	ip, #0
 8005ea8:	d030      	beq.n	8005f0c <HAL_OSPIM_Config+0x188>
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 8005eaa:	9b08      	ldr	r3, [sp, #32]
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8005eb2:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	f042 0202 	orr.w	r2, r2, #2
 8005ebc:	601a      	str	r2, [r3, #0]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8005ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ec0:	b143      	cbz	r3, 8005ed4 <HAL_OSPIM_Config+0x150>
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8005ec8:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	f042 0220 	orr.w	r2, r2, #32
 8005ed2:	601a      	str	r2, [r3, #0]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005ed4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ed6:	b15b      	cbz	r3, 8005ef0 <HAL_OSPIM_Config+0x16c>
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8005ee4:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8005ee8:	685a      	ldr	r2, [r3, #4]
 8005eea:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005eee:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005ef0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ef2:	b15b      	cbz	r3, 8005f0c <HAL_OSPIM_Config+0x188>
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8005f00:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8005f0a:	605a      	str	r2, [r3, #4]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8005f0c:	ab0e      	add	r3, sp, #56	; 0x38
 8005f0e:	f04f 0a18 	mov.w	sl, #24
 8005f12:	f8d8 7000 	ldr.w	r7, [r8]
 8005f16:	fb0a 3a0c 	mla	sl, sl, ip, r3
 8005f1a:	f85a 9c30 	ldr.w	r9, [sl, #-48]
 8005f1e:	f85a 1c20 	ldr.w	r1, [sl, #-32]
 8005f22:	454f      	cmp	r7, r9
 8005f24:	f85a bc2c 	ldr.w	fp, [sl, #-44]
 8005f28:	e9d8 0e01 	ldrd	r0, lr, [r8, #4]
 8005f2c:	e9d8 2303 	ldrd	r2, r3, [r8, #12]
 8005f30:	f000 80ba 	beq.w	80060a8 <HAL_OSPIM_Config+0x324>
 8005f34:	4583      	cmp	fp, r0
 8005f36:	d00a      	beq.n	8005f4e <HAL_OSPIM_Config+0x1ca>
 8005f38:	f85a 6c28 	ldr.w	r6, [sl, #-40]
 8005f3c:	4576      	cmp	r6, lr
 8005f3e:	d006      	beq.n	8005f4e <HAL_OSPIM_Config+0x1ca>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005f40:	f85a ac24 	ldr.w	sl, [sl, #-36]
 8005f44:	4592      	cmp	sl, r2
 8005f46:	d002      	beq.n	8005f4e <HAL_OSPIM_Config+0x1ca>
 8005f48:	4299      	cmp	r1, r3
 8005f4a:	f040 80c0 	bne.w	80060ce <HAL_OSPIM_Config+0x34a>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8005f4e:	ea4f 0989 	mov.w	r9, r9, lsl #2
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8005f52:	ae0e      	add	r6, sp, #56	; 0x38
 8005f54:	f109 49a4 	add.w	r9, r9, #1375731712	; 0x52000000
 8005f58:	f509 4934 	add.w	r9, r9, #46080	; 0xb400
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8005f5c:	f8d9 a000 	ldr.w	sl, [r9]
 8005f60:	f02a 0a01 	bic.w	sl, sl, #1
 8005f64:	f8c9 a000 	str.w	sl, [r9]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8005f68:	f04f 0918 	mov.w	r9, #24
 8005f6c:	fb09 690c 	mla	r9, r9, ip, r6
 8005f70:	f859 9c2c 	ldr.w	r9, [r9, #-44]
 8005f74:	f1b9 0f00 	cmp.w	r9, #0
 8005f78:	d00b      	beq.n	8005f92 <HAL_OSPIM_Config+0x20e>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8005f7a:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8005f7e:	f109 49a4 	add.w	r9, r9, #1375731712	; 0x52000000
 8005f82:	f509 4934 	add.w	r9, r9, #46080	; 0xb400
 8005f86:	f8d9 a000 	ldr.w	sl, [r9]
 8005f8a:	f02a 0a10 	bic.w	sl, sl, #16
 8005f8e:	f8c9 a000 	str.w	sl, [r9]
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8005f92:	f04f 0918 	mov.w	r9, #24
 8005f96:	ae0e      	add	r6, sp, #56	; 0x38
 8005f98:	fb09 6c0c 	mla	ip, r9, ip, r6
 8005f9c:	f85c 6c28 	ldr.w	r6, [ip, #-40]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005fa0:	f85c cc24 	ldr.w	ip, [ip, #-36]
 8005fa4:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8005fa8:	f109 49a4 	add.w	r9, r9, #1375731712	; 0x52000000
 8005fac:	f509 4934 	add.w	r9, r9, #46080	; 0xb400
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8005fb0:	f8d9 a000 	ldr.w	sl, [r9]
 8005fb4:	f42a 7a80 	bic.w	sl, sl, #256	; 0x100
 8005fb8:	f8c9 a000 	str.w	sl, [r9]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005fbc:	f1bc 0f00 	cmp.w	ip, #0
 8005fc0:	d00f      	beq.n	8005fe2 <HAL_OSPIM_Config+0x25e>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8005fc2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005fc6:	f00c 0c01 	and.w	ip, ip, #1
 8005fca:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005fce:	f10c 4ca4 	add.w	ip, ip, #1375731712	; 0x52000000
 8005fd2:	f50c 4c34 	add.w	ip, ip, #46080	; 0xb400
 8005fd6:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8005fda:	f429 3980 	bic.w	r9, r9, #65536	; 0x10000
 8005fde:	f8cc 9004 	str.w	r9, [ip, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005fe2:	2900      	cmp	r1, #0
 8005fe4:	d073      	beq.n	80060ce <HAL_OSPIM_Config+0x34a>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8005fe6:	f101 3cff 	add.w	ip, r1, #4294967295
 8005fea:	f00c 0c01 	and.w	ip, ip, #1
 8005fee:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005ff2:	f10c 4ca4 	add.w	ip, ip, #1375731712	; 0x52000000
 8005ff6:	f50c 4c34 	add.w	ip, ip, #46080	; 0xb400
 8005ffa:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8005ffe:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8006002:	f8cc 1004 	str.w	r1, [ip, #4]
 8006006:	e062      	b.n	80060ce <HAL_OSPIM_Config+0x34a>
 8006008:	460d      	mov	r5, r1
 800600a:	e6d1      	b.n	8005db0 <HAL_OSPIM_Config+0x2c>
  uint32_t value = 0U;
 800600c:	2000      	movs	r0, #0
 800600e:	e6df      	b.n	8005dd0 <HAL_OSPIM_Config+0x4c>
 8006010:	9501      	str	r5, [sp, #4]
 8006012:	e72f      	b.n	8005e74 <HAL_OSPIM_Config+0xf0>
      if (IOM_cfg[instance].ClkPort != 0U)
 8006014:	f852 3c30 	ldr.w	r3, [r2, #-48]
 8006018:	2b00      	cmp	r3, #0
 800601a:	f43f af77 	beq.w	8005f0c <HAL_OSPIM_Config+0x188>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8006024:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8006028:	6819      	ldr	r1, [r3, #0]
 800602a:	f021 0101 	bic.w	r1, r1, #1
 800602e:	6019      	str	r1, [r3, #0]
        if (IOM_cfg[instance].DQSPort != 0U)
 8006030:	f852 3c2c 	ldr.w	r3, [r2, #-44]
 8006034:	b143      	cbz	r3, 8006048 <HAL_OSPIM_Config+0x2c4>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 800603c:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	f022 0210 	bic.w	r2, r2, #16
 8006046:	601a      	str	r2, [r3, #0]
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006048:	2318      	movs	r3, #24
 800604a:	aa0e      	add	r2, sp, #56	; 0x38
 800604c:	fb03 2304 	mla	r3, r3, r4, r2
 8006050:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8006054:	b15b      	cbz	r3, 800606e <HAL_OSPIM_Config+0x2ea>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8006056:	3b01      	subs	r3, #1
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8006062:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800606c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800606e:	2318      	movs	r3, #24
 8006070:	aa0e      	add	r2, sp, #56	; 0x38
 8006072:	fb03 2304 	mla	r3, r3, r4, r2
 8006076:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800607a:	2b00      	cmp	r3, #0
 800607c:	f43f af46 	beq.w	8005f0c <HAL_OSPIM_Config+0x188>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8006080:	3b01      	subs	r3, #1
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 800608c:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006096:	e738      	b.n	8005f0a <HAL_OSPIM_Config+0x186>
 8006098:	52005000 	.word	0x52005000
 800609c:	5200a000 	.word	0x5200a000
 80060a0:	5200b400 	.word	0x5200b400
 80060a4:	04040222 	.word	0x04040222
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80060a8:	4583      	cmp	fp, r0
 80060aa:	f47f af50 	bne.w	8005f4e <HAL_OSPIM_Config+0x1ca>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80060ae:	f85a ac24 	ldr.w	sl, [sl, #-36]
 80060b2:	4592      	cmp	sl, r2
 80060b4:	f47f af4b 	bne.w	8005f4e <HAL_OSPIM_Config+0x1ca>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80060b8:	4299      	cmp	r1, r3
 80060ba:	f47f af48 	bne.w	8005f4e <HAL_OSPIM_Config+0x1ca>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80060be:	f8df c1fc 	ldr.w	ip, [pc, #508]	; 80062bc <HAL_OSPIM_Config+0x538>
 80060c2:	f8dc 1000 	ldr.w	r1, [ip]
 80060c6:	f041 0101 	orr.w	r1, r1, #1
 80060ca:	f8cc 1000 	str.w	r1, [ip]
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80060ce:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80060d2:	f10e 4ea4 	add.w	lr, lr, #1375731712	; 0x52000000
 80060d6:	f50e 4e34 	add.w	lr, lr, #46080	; 0xb400
 80060da:	f8de 1000 	ldr.w	r1, [lr]
 80060de:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80060e2:	ea41 2144 	orr.w	r1, r1, r4, lsl #9
 80060e6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80060ea:	f8ce 1000 	str.w	r1, [lr]
    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 80060ee:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80060f2:	f101 3eff 	add.w	lr, r1, #4294967295
 80060f6:	4971      	ldr	r1, [pc, #452]	; (80062bc <HAL_OSPIM_Config+0x538>)
 80060f8:	f8d1 c000 	ldr.w	ip, [r1]
 80060fc:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8006100:	45e6      	cmp	lr, ip
 8006102:	d907      	bls.n	8006114 <HAL_OSPIM_Config+0x390>
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8006104:	f8d1 c000 	ldr.w	ip, [r1]
 8006108:	f42c 0c7f 	bic.w	ip, ip, #16711680	; 0xff0000
 800610c:	ea4c 4c0e 	orr.w	ip, ip, lr, lsl #16
 8006110:	f8c1 c000 	str.w	ip, [r1]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006114:	6809      	ldr	r1, [r1, #0]
 8006116:	f402 3c80 	and.w	ip, r2, #65536	; 0x10000
 800611a:	f011 0f01 	tst.w	r1, #1
 800611e:	ea4f 0187 	mov.w	r1, r7, lsl #2
 8006122:	f403 3780 	and.w	r7, r3, #65536	; 0x10000
 8006126:	f101 41a4 	add.w	r1, r1, #1375731712	; 0x52000000
 800612a:	f501 4134 	add.w	r1, r1, #46080	; 0xb400
 800612e:	d063      	beq.n	80061f8 <HAL_OSPIM_Config+0x474>
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8006130:	680c      	ldr	r4, [r1, #0]
 8006132:	f024 0403 	bic.w	r4, r4, #3
 8006136:	f044 0401 	orr.w	r4, r4, #1
 800613a:	600c      	str	r4, [r1, #0]
      if (cfg->DQSPort != 0U)
 800613c:	b150      	cbz	r0, 8006154 <HAL_OSPIM_Config+0x3d0>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 800613e:	0080      	lsls	r0, r0, #2
 8006140:	f100 40a4 	add.w	r0, r0, #1375731712	; 0x52000000
 8006144:	f500 4034 	add.w	r0, r0, #46080	; 0xb400
 8006148:	6801      	ldr	r1, [r0, #0]
 800614a:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 800614e:	f041 0110 	orr.w	r1, r1, #16
 8006152:	6001      	str	r1, [r0, #0]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006154:	f1bc 0f00 	cmp.w	ip, #0
 8006158:	d02e      	beq.n	80061b8 <HAL_OSPIM_Config+0x434>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800615a:	3a01      	subs	r2, #1
 800615c:	f002 0201 	and.w	r2, r2, #1
 8006160:	0092      	lsls	r2, r2, #2
 8006162:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 8006166:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 800616a:	6851      	ldr	r1, [r2, #4]
 800616c:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8006170:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8006174:	6051      	str	r1, [r2, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006176:	b37f      	cbz	r7, 80061d8 <HAL_OSPIM_Config+0x454>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8006178:	3b01      	subs	r3, #1
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8006184:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800618e:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8006192:	605a      	str	r2, [r3, #4]
    if ((ospi_enabled & 0x1U) != 0U)
 8006194:	b125      	cbz	r5, 80061a0 <HAL_OSPIM_Config+0x41c>
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006196:	4a4a      	ldr	r2, [pc, #296]	; (80062c0 <HAL_OSPIM_Config+0x53c>)
 8006198:	6813      	ldr	r3, [r2, #0]
 800619a:	f043 0301 	orr.w	r3, r3, #1
 800619e:	6013      	str	r3, [r2, #0]
    if ((ospi_enabled & 0x2U) != 0U)
 80061a0:	9b01      	ldr	r3, [sp, #4]
 80061a2:	079b      	lsls	r3, r3, #30
 80061a4:	d504      	bpl.n	80061b0 <HAL_OSPIM_Config+0x42c>
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80061a6:	4a47      	ldr	r2, [pc, #284]	; (80062c4 <HAL_OSPIM_Config+0x540>)
 80061a8:	6813      	ldr	r3, [r2, #0]
 80061aa:	f043 0301 	orr.w	r3, r3, #1
 80061ae:	6013      	str	r3, [r2, #0]
}
 80061b0:	2000      	movs	r0, #0
 80061b2:	b00f      	add	sp, #60	; 0x3c
 80061b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80061b8:	2a00      	cmp	r2, #0
 80061ba:	d0dc      	beq.n	8006176 <HAL_OSPIM_Config+0x3f2>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80061bc:	3a01      	subs	r2, #1
 80061be:	f002 0201 	and.w	r2, r2, #1
 80061c2:	0092      	lsls	r2, r2, #2
 80061c4:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 80061c8:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 80061cc:	6851      	ldr	r1, [r2, #4]
 80061ce:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 80061d2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80061d6:	e7cd      	b.n	8006174 <HAL_OSPIM_Config+0x3f0>
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d0db      	beq.n	8006194 <HAL_OSPIM_Config+0x410>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80061dc:	3b01      	subs	r3, #1
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 80061e8:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 80061ec:	685a      	ldr	r2, [r3, #4]
 80061ee:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 80061f2:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80061f6:	e7cc      	b.n	8006192 <HAL_OSPIM_Config+0x40e>
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80061f8:	f8d1 e000 	ldr.w	lr, [r1]
 80061fc:	f02e 0e03 	bic.w	lr, lr, #3
 8006200:	ea4e 0e44 	orr.w	lr, lr, r4, lsl #1
 8006204:	f04e 0e01 	orr.w	lr, lr, #1
 8006208:	f8c1 e000 	str.w	lr, [r1]
      if (cfg->DQSPort != 0U)
 800620c:	b160      	cbz	r0, 8006228 <HAL_OSPIM_Config+0x4a4>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800620e:	0080      	lsls	r0, r0, #2
 8006210:	f100 40a4 	add.w	r0, r0, #1375731712	; 0x52000000
 8006214:	f500 4034 	add.w	r0, r0, #46080	; 0xb400
 8006218:	6801      	ldr	r1, [r0, #0]
 800621a:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 800621e:	ea41 1144 	orr.w	r1, r1, r4, lsl #5
 8006222:	f041 0110 	orr.w	r1, r1, #16
 8006226:	6001      	str	r1, [r0, #0]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006228:	f1bc 0f00 	cmp.w	ip, #0
 800622c:	d021      	beq.n	8006272 <HAL_OSPIM_Config+0x4ee>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800622e:	3a01      	subs	r2, #1
 8006230:	f002 0201 	and.w	r2, r2, #1
 8006234:	0092      	lsls	r2, r2, #2
 8006236:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 800623a:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 800623e:	6851      	ldr	r1, [r2, #4]
 8006240:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8006244:	ea41 4184 	orr.w	r1, r1, r4, lsl #18
 8006248:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800624c:	6051      	str	r1, [r2, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800624e:	b317      	cbz	r7, 8006296 <HAL_OSPIM_Config+0x512>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8006250:	3b01      	subs	r3, #1
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 800625c:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8006260:	685a      	ldr	r2, [r3, #4]
 8006262:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8006266:	ea42 4484 	orr.w	r4, r2, r4, lsl #18
 800626a:	f444 3440 	orr.w	r4, r4, #196608	; 0x30000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800626e:	605c      	str	r4, [r3, #4]
 8006270:	e790      	b.n	8006194 <HAL_OSPIM_Config+0x410>
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006272:	2a00      	cmp	r2, #0
 8006274:	d0eb      	beq.n	800624e <HAL_OSPIM_Config+0x4ca>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8006276:	3a01      	subs	r2, #1
 8006278:	f002 0201 	and.w	r2, r2, #1
 800627c:	0092      	lsls	r2, r2, #2
 800627e:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 8006282:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 8006286:	6851      	ldr	r1, [r2, #4]
 8006288:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 800628c:	ea41 6184 	orr.w	r1, r1, r4, lsl #26
 8006290:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8006294:	e7da      	b.n	800624c <HAL_OSPIM_Config+0x4c8>
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006296:	2b00      	cmp	r3, #0
 8006298:	f43f af7c 	beq.w	8006194 <HAL_OSPIM_Config+0x410>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800629c:	3b01      	subs	r3, #1
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 80062a8:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 80062ac:	685a      	ldr	r2, [r3, #4]
 80062ae:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 80062b2:	ea42 6484 	orr.w	r4, r2, r4, lsl #26
 80062b6:	f044 7440 	orr.w	r4, r4, #50331648	; 0x3000000
 80062ba:	e7d8      	b.n	800626e <HAL_OSPIM_Config+0x4ea>
 80062bc:	5200b400 	.word	0x5200b400
 80062c0:	52005000 	.word	0x52005000
 80062c4:	5200a000 	.word	0x5200a000

080062c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80062c8:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80062ca:	4d1d      	ldr	r5, [pc, #116]	; (8006340 <HAL_PWREx_ConfigSupply+0x78>)
{
 80062cc:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80062ce:	68eb      	ldr	r3, [r5, #12]
 80062d0:	f003 0307 	and.w	r3, r3, #7
 80062d4:	2b06      	cmp	r3, #6
 80062d6:	d006      	beq.n	80062e6 <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80062d8:	68e8      	ldr	r0, [r5, #12]
 80062da:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80062de:	1b00      	subs	r0, r0, r4
 80062e0:	bf18      	it	ne
 80062e2:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80062e4:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80062e6:	68eb      	ldr	r3, [r5, #12]
 80062e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80062ec:	4303      	orrs	r3, r0
 80062ee:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 80062f0:	f7fe f8b8 	bl	8004464 <HAL_GetTick>
 80062f4:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80062f6:	686b      	ldr	r3, [r5, #4]
 80062f8:	049b      	lsls	r3, r3, #18
 80062fa:	d508      	bpl.n	800630e <HAL_PWREx_ConfigSupply+0x46>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80062fc:	f1a4 031d 	sub.w	r3, r4, #29
 8006300:	2b01      	cmp	r3, #1
 8006302:	d90c      	bls.n	800631e <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006304:	3c2d      	subs	r4, #45	; 0x2d
 8006306:	2c01      	cmp	r4, #1
 8006308:	d909      	bls.n	800631e <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 800630a:	2000      	movs	r0, #0
 800630c:	e7ea      	b.n	80062e4 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800630e:	f7fe f8a9 	bl	8004464 <HAL_GetTick>
 8006312:	1b80      	subs	r0, r0, r6
 8006314:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006318:	d9ed      	bls.n	80062f6 <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 800631a:	2001      	movs	r0, #1
 800631c:	e7e2      	b.n	80062e4 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 800631e:	f7fe f8a1 	bl	8004464 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006322:	4d07      	ldr	r5, [pc, #28]	; (8006340 <HAL_PWREx_ConfigSupply+0x78>)
    tickstart = HAL_GetTick ();
 8006324:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006326:	68eb      	ldr	r3, [r5, #12]
 8006328:	f003 0311 	and.w	r3, r3, #17
 800632c:	2b11      	cmp	r3, #17
 800632e:	d0ec      	beq.n	800630a <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006330:	f7fe f898 	bl	8004464 <HAL_GetTick>
 8006334:	1b00      	subs	r0, r0, r4
 8006336:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800633a:	d9f4      	bls.n	8006326 <HAL_PWREx_ConfigSupply+0x5e>
 800633c:	e7ed      	b.n	800631a <HAL_PWREx_ConfigSupply+0x52>
 800633e:	bf00      	nop
 8006340:	58024800 	.word	0x58024800

08006344 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006346:	4604      	mov	r4, r0
 8006348:	b908      	cbnz	r0, 800634e <HAL_RCC_OscConfig+0xa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 800634a:	2001      	movs	r0, #1
 800634c:	e07f      	b.n	800644e <HAL_RCC_OscConfig+0x10a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800634e:	6803      	ldr	r3, [r0, #0]
 8006350:	07df      	lsls	r7, r3, #31
 8006352:	d453      	bmi.n	80063fc <HAL_RCC_OscConfig+0xb8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006354:	6823      	ldr	r3, [r4, #0]
 8006356:	079e      	lsls	r6, r3, #30
 8006358:	f100 80a3 	bmi.w	80064a2 <HAL_RCC_OscConfig+0x15e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800635c:	6823      	ldr	r3, [r4, #0]
 800635e:	06da      	lsls	r2, r3, #27
 8006360:	d51c      	bpl.n	800639c <HAL_RCC_OscConfig+0x58>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006362:	4ba0      	ldr	r3, [pc, #640]	; (80065e4 <HAL_RCC_OscConfig+0x2a0>)
 8006364:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006366:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006368:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800636c:	2a08      	cmp	r2, #8
 800636e:	d007      	beq.n	8006380 <HAL_RCC_OscConfig+0x3c>
 8006370:	2a18      	cmp	r2, #24
 8006372:	f040 80e5 	bne.w	8006540 <HAL_RCC_OscConfig+0x1fc>
 8006376:	f001 0203 	and.w	r2, r1, #3
 800637a:	2a01      	cmp	r2, #1
 800637c:	f040 80e0 	bne.w	8006540 <HAL_RCC_OscConfig+0x1fc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	05db      	lsls	r3, r3, #23
 8006384:	d502      	bpl.n	800638c <HAL_RCC_OscConfig+0x48>
 8006386:	69e3      	ldr	r3, [r4, #28]
 8006388:	2b80      	cmp	r3, #128	; 0x80
 800638a:	d1de      	bne.n	800634a <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800638c:	4a95      	ldr	r2, [pc, #596]	; (80065e4 <HAL_RCC_OscConfig+0x2a0>)
 800638e:	6a21      	ldr	r1, [r4, #32]
 8006390:	68d3      	ldr	r3, [r2, #12]
 8006392:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8006396:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800639a:	60d3      	str	r3, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800639c:	6823      	ldr	r3, [r4, #0]
 800639e:	0719      	lsls	r1, r3, #28
 80063a0:	f100 80fb 	bmi.w	800659a <HAL_RCC_OscConfig+0x256>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80063a4:	6823      	ldr	r3, [r4, #0]
 80063a6:	069a      	lsls	r2, r3, #26
 80063a8:	f100 8120 	bmi.w	80065ec <HAL_RCC_OscConfig+0x2a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063ac:	6823      	ldr	r3, [r4, #0]
 80063ae:	075d      	lsls	r5, r3, #29
 80063b0:	d51e      	bpl.n	80063f0 <HAL_RCC_OscConfig+0xac>
    PWR->CR1 |= PWR_CR1_DBP;
 80063b2:	4d8d      	ldr	r5, [pc, #564]	; (80065e8 <HAL_RCC_OscConfig+0x2a4>)
 80063b4:	682b      	ldr	r3, [r5, #0]
 80063b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063ba:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80063bc:	f7fe f852 	bl	8004464 <HAL_GetTick>
 80063c0:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063c2:	682b      	ldr	r3, [r5, #0]
 80063c4:	05da      	lsls	r2, r3, #23
 80063c6:	f140 8136 	bpl.w	8006636 <HAL_RCC_OscConfig+0x2f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063ca:	68a3      	ldr	r3, [r4, #8]
 80063cc:	4d85      	ldr	r5, [pc, #532]	; (80065e4 <HAL_RCC_OscConfig+0x2a0>)
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	f040 8138 	bne.w	8006644 <HAL_RCC_OscConfig+0x300>
 80063d4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80063d6:	f043 0301 	orr.w	r3, r3, #1
 80063da:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063dc:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80063e0:	f7fe f840 	bl	8004464 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063e4:	4e7f      	ldr	r6, [pc, #508]	; (80065e4 <HAL_RCC_OscConfig+0x2a0>)
      tickstart = HAL_GetTick();
 80063e6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063e8:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80063ea:	079b      	lsls	r3, r3, #30
 80063ec:	f140 8150 	bpl.w	8006690 <HAL_RCC_OscConfig+0x34c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063f0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80063f2:	2800      	cmp	r0, #0
 80063f4:	f040 8153 	bne.w	800669e <HAL_RCC_OscConfig+0x35a>
      }
    }
  }
  return HAL_OK;
 80063f8:	2000      	movs	r0, #0
 80063fa:	e028      	b.n	800644e <HAL_RCC_OscConfig+0x10a>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063fc:	4b79      	ldr	r3, [pc, #484]	; (80065e4 <HAL_RCC_OscConfig+0x2a0>)
 80063fe:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006400:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006402:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006406:	2a10      	cmp	r2, #16
 8006408:	d005      	beq.n	8006416 <HAL_RCC_OscConfig+0xd2>
 800640a:	2a18      	cmp	r2, #24
 800640c:	d10a      	bne.n	8006424 <HAL_RCC_OscConfig+0xe0>
 800640e:	f001 0203 	and.w	r2, r1, #3
 8006412:	2a02      	cmp	r2, #2
 8006414:	d106      	bne.n	8006424 <HAL_RCC_OscConfig+0xe0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	039d      	lsls	r5, r3, #14
 800641a:	d59b      	bpl.n	8006354 <HAL_RCC_OscConfig+0x10>
 800641c:	6863      	ldr	r3, [r4, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d198      	bne.n	8006354 <HAL_RCC_OscConfig+0x10>
 8006422:	e792      	b.n	800634a <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006424:	6862      	ldr	r2, [r4, #4]
 8006426:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800642a:	d111      	bne.n	8006450 <HAL_RCC_OscConfig+0x10c>
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006432:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006434:	f7fe f816 	bl	8004464 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006438:	4e6a      	ldr	r6, [pc, #424]	; (80065e4 <HAL_RCC_OscConfig+0x2a0>)
        tickstart = HAL_GetTick();
 800643a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800643c:	6833      	ldr	r3, [r6, #0]
 800643e:	0398      	lsls	r0, r3, #14
 8006440:	d488      	bmi.n	8006354 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006442:	f7fe f80f 	bl	8004464 <HAL_GetTick>
 8006446:	1b40      	subs	r0, r0, r5
 8006448:	2864      	cmp	r0, #100	; 0x64
 800644a:	d9f7      	bls.n	800643c <HAL_RCC_OscConfig+0xf8>
            return HAL_TIMEOUT;
 800644c:	2003      	movs	r0, #3
}
 800644e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006450:	4d64      	ldr	r5, [pc, #400]	; (80065e4 <HAL_RCC_OscConfig+0x2a0>)
 8006452:	682b      	ldr	r3, [r5, #0]
 8006454:	b99a      	cbnz	r2, 800647e <HAL_RCC_OscConfig+0x13a>
 8006456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800645a:	602b      	str	r3, [r5, #0]
 800645c:	682b      	ldr	r3, [r5, #0]
 800645e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006462:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006464:	f7fd fffe 	bl	8004464 <HAL_GetTick>
 8006468:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800646a:	682b      	ldr	r3, [r5, #0]
 800646c:	0399      	lsls	r1, r3, #14
 800646e:	f57f af71 	bpl.w	8006354 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006472:	f7fd fff7 	bl	8004464 <HAL_GetTick>
 8006476:	1b80      	subs	r0, r0, r6
 8006478:	2864      	cmp	r0, #100	; 0x64
 800647a:	d9f6      	bls.n	800646a <HAL_RCC_OscConfig+0x126>
 800647c:	e7e6      	b.n	800644c <HAL_RCC_OscConfig+0x108>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800647e:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8006482:	d107      	bne.n	8006494 <HAL_RCC_OscConfig+0x150>
 8006484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006488:	602b      	str	r3, [r5, #0]
 800648a:	682b      	ldr	r3, [r5, #0]
 800648c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006490:	602b      	str	r3, [r5, #0]
 8006492:	e7cf      	b.n	8006434 <HAL_RCC_OscConfig+0xf0>
 8006494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006498:	602b      	str	r3, [r5, #0]
 800649a:	682b      	ldr	r3, [r5, #0]
 800649c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064a0:	e7f6      	b.n	8006490 <HAL_RCC_OscConfig+0x14c>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064a2:	4b50      	ldr	r3, [pc, #320]	; (80065e4 <HAL_RCC_OscConfig+0x2a0>)
 80064a4:	68e1      	ldr	r1, [r4, #12]
 80064a6:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80064a8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80064aa:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 80064ae:	d003      	beq.n	80064b8 <HAL_RCC_OscConfig+0x174>
 80064b0:	2a18      	cmp	r2, #24
 80064b2:	d121      	bne.n	80064f8 <HAL_RCC_OscConfig+0x1b4>
 80064b4:	0782      	lsls	r2, r0, #30
 80064b6:	d11f      	bne.n	80064f8 <HAL_RCC_OscConfig+0x1b4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	075b      	lsls	r3, r3, #29
 80064bc:	d502      	bpl.n	80064c4 <HAL_RCC_OscConfig+0x180>
 80064be:	2900      	cmp	r1, #0
 80064c0:	f43f af43 	beq.w	800634a <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80064c4:	4d47      	ldr	r5, [pc, #284]	; (80065e4 <HAL_RCC_OscConfig+0x2a0>)
 80064c6:	682a      	ldr	r2, [r5, #0]
 80064c8:	f022 0219 	bic.w	r2, r2, #25
 80064cc:	430a      	orrs	r2, r1
 80064ce:	602a      	str	r2, [r5, #0]
          tickstart = HAL_GetTick();
 80064d0:	f7fd ffc8 	bl	8004464 <HAL_GetTick>
 80064d4:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064d6:	682b      	ldr	r3, [r5, #0]
 80064d8:	075f      	lsls	r7, r3, #29
 80064da:	d507      	bpl.n	80064ec <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064dc:	686b      	ldr	r3, [r5, #4]
 80064de:	6922      	ldr	r2, [r4, #16]
 80064e0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80064e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80064e8:	606b      	str	r3, [r5, #4]
 80064ea:	e737      	b.n	800635c <HAL_RCC_OscConfig+0x18>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064ec:	f7fd ffba 	bl	8004464 <HAL_GetTick>
 80064f0:	1b80      	subs	r0, r0, r6
 80064f2:	2802      	cmp	r0, #2
 80064f4:	d9ef      	bls.n	80064d6 <HAL_RCC_OscConfig+0x192>
 80064f6:	e7a9      	b.n	800644c <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80064f8:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80064fa:	b181      	cbz	r1, 800651e <HAL_RCC_OscConfig+0x1da>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80064fc:	f022 0219 	bic.w	r2, r2, #25
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006500:	4d38      	ldr	r5, [pc, #224]	; (80065e4 <HAL_RCC_OscConfig+0x2a0>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006502:	430a      	orrs	r2, r1
 8006504:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006506:	f7fd ffad 	bl	8004464 <HAL_GetTick>
 800650a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800650c:	682b      	ldr	r3, [r5, #0]
 800650e:	0758      	lsls	r0, r3, #29
 8006510:	d4e4      	bmi.n	80064dc <HAL_RCC_OscConfig+0x198>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006512:	f7fd ffa7 	bl	8004464 <HAL_GetTick>
 8006516:	1b80      	subs	r0, r0, r6
 8006518:	2802      	cmp	r0, #2
 800651a:	d9f7      	bls.n	800650c <HAL_RCC_OscConfig+0x1c8>
 800651c:	e796      	b.n	800644c <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_HSI_DISABLE();
 800651e:	f022 0201 	bic.w	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006522:	4e30      	ldr	r6, [pc, #192]	; (80065e4 <HAL_RCC_OscConfig+0x2a0>)
        __HAL_RCC_HSI_DISABLE();
 8006524:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006526:	f7fd ff9d 	bl	8004464 <HAL_GetTick>
 800652a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800652c:	6833      	ldr	r3, [r6, #0]
 800652e:	0759      	lsls	r1, r3, #29
 8006530:	f57f af14 	bpl.w	800635c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006534:	f7fd ff96 	bl	8004464 <HAL_GetTick>
 8006538:	1b40      	subs	r0, r0, r5
 800653a:	2802      	cmp	r0, #2
 800653c:	d9f6      	bls.n	800652c <HAL_RCC_OscConfig+0x1e8>
 800653e:	e785      	b.n	800644c <HAL_RCC_OscConfig+0x108>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006540:	69e2      	ldr	r2, [r4, #28]
 8006542:	b1c2      	cbz	r2, 8006576 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_CSI_ENABLE();
 8006544:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006546:	4d27      	ldr	r5, [pc, #156]	; (80065e4 <HAL_RCC_OscConfig+0x2a0>)
        __HAL_RCC_CSI_ENABLE();
 8006548:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800654c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800654e:	f7fd ff89 	bl	8004464 <HAL_GetTick>
 8006552:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006554:	682b      	ldr	r3, [r5, #0]
 8006556:	05df      	lsls	r7, r3, #23
 8006558:	d507      	bpl.n	800656a <HAL_RCC_OscConfig+0x226>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800655a:	68eb      	ldr	r3, [r5, #12]
 800655c:	6a22      	ldr	r2, [r4, #32]
 800655e:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8006562:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006566:	60eb      	str	r3, [r5, #12]
 8006568:	e718      	b.n	800639c <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800656a:	f7fd ff7b 	bl	8004464 <HAL_GetTick>
 800656e:	1b80      	subs	r0, r0, r6
 8006570:	2802      	cmp	r0, #2
 8006572:	d9ef      	bls.n	8006554 <HAL_RCC_OscConfig+0x210>
 8006574:	e76a      	b.n	800644c <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_CSI_DISABLE();
 8006576:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006578:	4e1a      	ldr	r6, [pc, #104]	; (80065e4 <HAL_RCC_OscConfig+0x2a0>)
        __HAL_RCC_CSI_DISABLE();
 800657a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800657e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006580:	f7fd ff70 	bl	8004464 <HAL_GetTick>
 8006584:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006586:	6833      	ldr	r3, [r6, #0]
 8006588:	05d8      	lsls	r0, r3, #23
 800658a:	f57f af07 	bpl.w	800639c <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800658e:	f7fd ff69 	bl	8004464 <HAL_GetTick>
 8006592:	1b40      	subs	r0, r0, r5
 8006594:	2802      	cmp	r0, #2
 8006596:	d9f6      	bls.n	8006586 <HAL_RCC_OscConfig+0x242>
 8006598:	e758      	b.n	800644c <HAL_RCC_OscConfig+0x108>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800659a:	6963      	ldr	r3, [r4, #20]
 800659c:	4d11      	ldr	r5, [pc, #68]	; (80065e4 <HAL_RCC_OscConfig+0x2a0>)
 800659e:	b183      	cbz	r3, 80065c2 <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSI_ENABLE();
 80065a0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80065a2:	f043 0301 	orr.w	r3, r3, #1
 80065a6:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80065a8:	f7fd ff5c 	bl	8004464 <HAL_GetTick>
 80065ac:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80065ae:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80065b0:	079b      	lsls	r3, r3, #30
 80065b2:	f53f aef7 	bmi.w	80063a4 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065b6:	f7fd ff55 	bl	8004464 <HAL_GetTick>
 80065ba:	1b80      	subs	r0, r0, r6
 80065bc:	2802      	cmp	r0, #2
 80065be:	d9f6      	bls.n	80065ae <HAL_RCC_OscConfig+0x26a>
 80065c0:	e744      	b.n	800644c <HAL_RCC_OscConfig+0x108>
      __HAL_RCC_LSI_DISABLE();
 80065c2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80065c4:	f023 0301 	bic.w	r3, r3, #1
 80065c8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80065ca:	f7fd ff4b 	bl	8004464 <HAL_GetTick>
 80065ce:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80065d0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80065d2:	079f      	lsls	r7, r3, #30
 80065d4:	f57f aee6 	bpl.w	80063a4 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065d8:	f7fd ff44 	bl	8004464 <HAL_GetTick>
 80065dc:	1b80      	subs	r0, r0, r6
 80065de:	2802      	cmp	r0, #2
 80065e0:	d9f6      	bls.n	80065d0 <HAL_RCC_OscConfig+0x28c>
 80065e2:	e733      	b.n	800644c <HAL_RCC_OscConfig+0x108>
 80065e4:	58024400 	.word	0x58024400
 80065e8:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80065ec:	69a3      	ldr	r3, [r4, #24]
 80065ee:	4d83      	ldr	r5, [pc, #524]	; (80067fc <HAL_RCC_OscConfig+0x4b8>)
 80065f0:	b183      	cbz	r3, 8006614 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_HSI48_ENABLE();
 80065f2:	682b      	ldr	r3, [r5, #0]
 80065f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80065f8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80065fa:	f7fd ff33 	bl	8004464 <HAL_GetTick>
 80065fe:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006600:	682b      	ldr	r3, [r5, #0]
 8006602:	0498      	lsls	r0, r3, #18
 8006604:	f53f aed2 	bmi.w	80063ac <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006608:	f7fd ff2c 	bl	8004464 <HAL_GetTick>
 800660c:	1b80      	subs	r0, r0, r6
 800660e:	2802      	cmp	r0, #2
 8006610:	d9f6      	bls.n	8006600 <HAL_RCC_OscConfig+0x2bc>
 8006612:	e71b      	b.n	800644c <HAL_RCC_OscConfig+0x108>
      __HAL_RCC_HSI48_DISABLE();
 8006614:	682b      	ldr	r3, [r5, #0]
 8006616:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800661a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800661c:	f7fd ff22 	bl	8004464 <HAL_GetTick>
 8006620:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006622:	682b      	ldr	r3, [r5, #0]
 8006624:	0499      	lsls	r1, r3, #18
 8006626:	f57f aec1 	bpl.w	80063ac <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800662a:	f7fd ff1b 	bl	8004464 <HAL_GetTick>
 800662e:	1b80      	subs	r0, r0, r6
 8006630:	2802      	cmp	r0, #2
 8006632:	d9f6      	bls.n	8006622 <HAL_RCC_OscConfig+0x2de>
 8006634:	e70a      	b.n	800644c <HAL_RCC_OscConfig+0x108>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006636:	f7fd ff15 	bl	8004464 <HAL_GetTick>
 800663a:	1b80      	subs	r0, r0, r6
 800663c:	2864      	cmp	r0, #100	; 0x64
 800663e:	f67f aec0 	bls.w	80063c2 <HAL_RCC_OscConfig+0x7e>
 8006642:	e703      	b.n	800644c <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006644:	b9b3      	cbnz	r3, 8006674 <HAL_RCC_OscConfig+0x330>
 8006646:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006648:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800664c:	f023 0301 	bic.w	r3, r3, #1
 8006650:	672b      	str	r3, [r5, #112]	; 0x70
 8006652:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006654:	f023 0304 	bic.w	r3, r3, #4
 8006658:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800665a:	f7fd ff03 	bl	8004464 <HAL_GetTick>
 800665e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006660:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006662:	0798      	lsls	r0, r3, #30
 8006664:	f57f aec4 	bpl.w	80063f0 <HAL_RCC_OscConfig+0xac>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006668:	f7fd fefc 	bl	8004464 <HAL_GetTick>
 800666c:	1b80      	subs	r0, r0, r6
 800666e:	42b8      	cmp	r0, r7
 8006670:	d9f6      	bls.n	8006660 <HAL_RCC_OscConfig+0x31c>
 8006672:	e6eb      	b.n	800644c <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006674:	2b05      	cmp	r3, #5
 8006676:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006678:	d103      	bne.n	8006682 <HAL_RCC_OscConfig+0x33e>
 800667a:	f043 0304 	orr.w	r3, r3, #4
 800667e:	672b      	str	r3, [r5, #112]	; 0x70
 8006680:	e6a8      	b.n	80063d4 <HAL_RCC_OscConfig+0x90>
 8006682:	f023 0301 	bic.w	r3, r3, #1
 8006686:	672b      	str	r3, [r5, #112]	; 0x70
 8006688:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800668a:	f023 0304 	bic.w	r3, r3, #4
 800668e:	e6a4      	b.n	80063da <HAL_RCC_OscConfig+0x96>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006690:	f7fd fee8 	bl	8004464 <HAL_GetTick>
 8006694:	1b40      	subs	r0, r0, r5
 8006696:	42b8      	cmp	r0, r7
 8006698:	f67f aea6 	bls.w	80063e8 <HAL_RCC_OscConfig+0xa4>
 800669c:	e6d6      	b.n	800644c <HAL_RCC_OscConfig+0x108>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800669e:	4d57      	ldr	r5, [pc, #348]	; (80067fc <HAL_RCC_OscConfig+0x4b8>)
 80066a0:	692b      	ldr	r3, [r5, #16]
 80066a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066a6:	2b18      	cmp	r3, #24
 80066a8:	d07a      	beq.n	80067a0 <HAL_RCC_OscConfig+0x45c>
        __HAL_RCC_PLL_DISABLE();
 80066aa:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066ac:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80066ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066b2:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066b4:	d167      	bne.n	8006786 <HAL_RCC_OscConfig+0x442>
        tickstart = HAL_GetTick();
 80066b6:	f7fd fed5 	bl	8004464 <HAL_GetTick>
 80066ba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80066bc:	682b      	ldr	r3, [r5, #0]
 80066be:	0199      	lsls	r1, r3, #6
 80066c0:	d45b      	bmi.n	800677a <HAL_RCC_OscConfig+0x436>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066c2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80066c4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80066c6:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 80066ca:	f023 0303 	bic.w	r3, r3, #3
 80066ce:	4313      	orrs	r3, r2
 80066d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80066d2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80066d6:	62ab      	str	r3, [r5, #40]	; 0x28
 80066d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80066dc:	3b01      	subs	r3, #1
 80066de:	3a01      	subs	r2, #1
 80066e0:	025b      	lsls	r3, r3, #9
 80066e2:	0412      	lsls	r2, r2, #16
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80066ea:	4313      	orrs	r3, r2
 80066ec:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80066ee:	3a01      	subs	r2, #1
 80066f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066f4:	4313      	orrs	r3, r2
 80066f6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80066f8:	3a01      	subs	r2, #1
 80066fa:	0612      	lsls	r2, r2, #24
 80066fc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006700:	4313      	orrs	r3, r2
 8006702:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8006704:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006706:	f023 0301 	bic.w	r3, r3, #1
 800670a:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800670c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800670e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006710:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006714:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006718:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800671c:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800671e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006720:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006722:	f023 030c 	bic.w	r3, r3, #12
 8006726:	4313      	orrs	r3, r2
 8006728:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800672a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800672c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800672e:	f023 0302 	bic.w	r3, r3, #2
 8006732:	4313      	orrs	r3, r2
 8006734:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006736:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800673c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800673e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006744:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006746:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800674c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 800674e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006750:	f043 0301 	orr.w	r3, r3, #1
 8006754:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8006756:	682b      	ldr	r3, [r5, #0]
 8006758:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800675c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800675e:	f7fd fe81 	bl	8004464 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006762:	4d26      	ldr	r5, [pc, #152]	; (80067fc <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 8006764:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006766:	682b      	ldr	r3, [r5, #0]
 8006768:	019a      	lsls	r2, r3, #6
 800676a:	f53f ae45 	bmi.w	80063f8 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800676e:	f7fd fe79 	bl	8004464 <HAL_GetTick>
 8006772:	1b00      	subs	r0, r0, r4
 8006774:	2802      	cmp	r0, #2
 8006776:	d9f6      	bls.n	8006766 <HAL_RCC_OscConfig+0x422>
 8006778:	e668      	b.n	800644c <HAL_RCC_OscConfig+0x108>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800677a:	f7fd fe73 	bl	8004464 <HAL_GetTick>
 800677e:	1b80      	subs	r0, r0, r6
 8006780:	2802      	cmp	r0, #2
 8006782:	d99b      	bls.n	80066bc <HAL_RCC_OscConfig+0x378>
 8006784:	e662      	b.n	800644c <HAL_RCC_OscConfig+0x108>
        tickstart = HAL_GetTick();
 8006786:	f7fd fe6d 	bl	8004464 <HAL_GetTick>
 800678a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800678c:	682b      	ldr	r3, [r5, #0]
 800678e:	019b      	lsls	r3, r3, #6
 8006790:	f57f ae32 	bpl.w	80063f8 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006794:	f7fd fe66 	bl	8004464 <HAL_GetTick>
 8006798:	1b00      	subs	r0, r0, r4
 800679a:	2802      	cmp	r0, #2
 800679c:	d9f6      	bls.n	800678c <HAL_RCC_OscConfig+0x448>
 800679e:	e655      	b.n	800644c <HAL_RCC_OscConfig+0x108>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067a0:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80067a2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80067a4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067a6:	f43f ae52 	beq.w	800644e <HAL_RCC_OscConfig+0x10a>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067aa:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067ae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80067b0:	4281      	cmp	r1, r0
 80067b2:	f47f adca 	bne.w	800634a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80067b6:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067ba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80067bc:	428a      	cmp	r2, r1
 80067be:	f47f adc4 	bne.w	800634a <HAL_RCC_OscConfig+0x6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80067c2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80067c4:	f3c3 0108 	ubfx	r1, r3, #0, #9
 80067c8:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80067ca:	4291      	cmp	r1, r2
 80067cc:	f47f adbd 	bne.w	800634a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80067d0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80067d2:	f3c3 2146 	ubfx	r1, r3, #9, #7
 80067d6:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80067d8:	4291      	cmp	r1, r2
 80067da:	f47f adb6 	bne.w	800634a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80067de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80067e0:	f3c3 4106 	ubfx	r1, r3, #16, #7
 80067e4:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80067e6:	4291      	cmp	r1, r2
 80067e8:	f47f adaf 	bne.w	800634a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80067ec:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80067ee:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80067f2:	3801      	subs	r0, #1
  return HAL_OK;
 80067f4:	1a18      	subs	r0, r3, r0
 80067f6:	bf18      	it	ne
 80067f8:	2001      	movne	r0, #1
 80067fa:	e628      	b.n	800644e <HAL_RCC_OscConfig+0x10a>
 80067fc:	58024400 	.word	0x58024400

08006800 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006800:	4b48      	ldr	r3, [pc, #288]	; (8006924 <HAL_RCC_GetSysClockFreq+0x124>)
 8006802:	691a      	ldr	r2, [r3, #16]
 8006804:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8006808:	2a10      	cmp	r2, #16
{
 800680a:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800680c:	f000 8086 	beq.w	800691c <HAL_RCC_GetSysClockFreq+0x11c>
 8006810:	2a18      	cmp	r2, #24
 8006812:	d00c      	beq.n	800682e <HAL_RCC_GetSysClockFreq+0x2e>
 8006814:	2a00      	cmp	r2, #0
 8006816:	f040 8083 	bne.w	8006920 <HAL_RCC_GetSysClockFreq+0x120>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	4842      	ldr	r0, [pc, #264]	; (8006928 <HAL_RCC_GetSysClockFreq+0x128>)
 800681e:	f012 0f20 	tst.w	r2, #32
 8006822:	d003      	beq.n	800682c <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800682a:	40d8      	lsrs	r0, r3
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800682c:	bd30      	pop	{r4, r5, pc}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800682e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006830:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    if (pllm != 0U)
 8006834:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006838:	f3c5 1005 	ubfx	r0, r5, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800683c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    if (pllm != 0U)
 800683e:	d0f5      	beq.n	800682c <HAL_RCC_GetSysClockFreq+0x2c>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006840:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006844:	f002 0201 	and.w	r2, r2, #1
 8006848:	ee07 0a90 	vmov	s15, r0
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800684c:	f001 0103 	and.w	r1, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006850:	4362      	muls	r2, r4
 8006852:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8006856:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800685a:	2901      	cmp	r1, #1
 800685c:	ee07 2a90 	vmov	s15, r2
 8006860:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8006864:	d04c      	beq.n	8006900 <HAL_RCC_GetSysClockFreq+0x100>
 8006866:	2902      	cmp	r1, #2
 8006868:	d03c      	beq.n	80068e4 <HAL_RCC_GetSysClockFreq+0xe4>
 800686a:	2900      	cmp	r1, #0
 800686c:	d148      	bne.n	8006900 <HAL_RCC_GetSysClockFreq+0x100>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	0692      	lsls	r2, r2, #26
 8006872:	d527      	bpl.n	80068c4 <HAL_RCC_GetSysClockFreq+0xc4>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006874:	6819      	ldr	r1, [r3, #0]
 8006876:	4a2c      	ldr	r2, [pc, #176]	; (8006928 <HAL_RCC_GetSysClockFreq+0x128>)
 8006878:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800687c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800687e:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006884:	ee07 2a10 	vmov	s14, r2
 8006888:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800688c:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8006890:	ee06 3a90 	vmov	s13, r3
 8006894:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006898:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800689c:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80068a0:	4b20      	ldr	r3, [pc, #128]	; (8006924 <HAL_RCC_GetSysClockFreq+0x124>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80068a2:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80068a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80068ac:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80068ae:	ee07 3a10 	vmov	s14, r3
 80068b2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80068b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80068ba:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80068be:	ee17 0a90 	vmov	r0, s15
 80068c2:	e7b3      	b.n	800682c <HAL_RCC_GetSysClockFreq+0x2c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80068c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ca:	ee07 3a10 	vmov	s14, r3
 80068ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80068d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068d6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80068da:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800692c <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80068de:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80068e2:	e7dd      	b.n	80068a0 <HAL_RCC_GetSysClockFreq+0xa0>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80068e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ea:	ee07 3a10 	vmov	s14, r3
 80068ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80068f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068f6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80068fa:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8006930 <HAL_RCC_GetSysClockFreq+0x130>
 80068fe:	e7ee      	b.n	80068de <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006906:	ee07 3a10 	vmov	s14, r3
 800690a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800690e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006912:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006916:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8006934 <HAL_RCC_GetSysClockFreq+0x134>
 800691a:	e7e0      	b.n	80068de <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800691c:	4806      	ldr	r0, [pc, #24]	; (8006938 <HAL_RCC_GetSysClockFreq+0x138>)
 800691e:	e785      	b.n	800682c <HAL_RCC_GetSysClockFreq+0x2c>
    sysclockfreq = CSI_VALUE;
 8006920:	4806      	ldr	r0, [pc, #24]	; (800693c <HAL_RCC_GetSysClockFreq+0x13c>)
 8006922:	e783      	b.n	800682c <HAL_RCC_GetSysClockFreq+0x2c>
 8006924:	58024400 	.word	0x58024400
 8006928:	03d09000 	.word	0x03d09000
 800692c:	4c742400 	.word	0x4c742400
 8006930:	4bbebc20 	.word	0x4bbebc20
 8006934:	4a742400 	.word	0x4a742400
 8006938:	017d7840 	.word	0x017d7840
 800693c:	003d0900 	.word	0x003d0900

08006940 <HAL_RCC_ClockConfig>:
{
 8006940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006944:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8006946:	4604      	mov	r4, r0
 8006948:	b910      	cbnz	r0, 8006950 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800694a:	2001      	movs	r0, #1
}
 800694c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006950:	4a88      	ldr	r2, [pc, #544]	; (8006b74 <HAL_RCC_ClockConfig+0x234>)
 8006952:	6813      	ldr	r3, [r2, #0]
 8006954:	f003 030f 	and.w	r3, r3, #15
 8006958:	428b      	cmp	r3, r1
 800695a:	f0c0 8093 	bcc.w	8006a84 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800695e:	6823      	ldr	r3, [r4, #0]
 8006960:	075f      	lsls	r7, r3, #29
 8006962:	f100 809b 	bmi.w	8006a9c <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006966:	071e      	lsls	r6, r3, #28
 8006968:	d50b      	bpl.n	8006982 <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800696a:	4983      	ldr	r1, [pc, #524]	; (8006b78 <HAL_RCC_ClockConfig+0x238>)
 800696c:	6966      	ldr	r6, [r4, #20]
 800696e:	69c8      	ldr	r0, [r1, #28]
 8006970:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8006974:	4286      	cmp	r6, r0
 8006976:	d904      	bls.n	8006982 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006978:	69ca      	ldr	r2, [r1, #28]
 800697a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800697e:	4332      	orrs	r2, r6
 8006980:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006982:	06d8      	lsls	r0, r3, #27
 8006984:	d50b      	bpl.n	800699e <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006986:	497c      	ldr	r1, [pc, #496]	; (8006b78 <HAL_RCC_ClockConfig+0x238>)
 8006988:	69a6      	ldr	r6, [r4, #24]
 800698a:	69c8      	ldr	r0, [r1, #28]
 800698c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8006990:	4286      	cmp	r6, r0
 8006992:	d904      	bls.n	800699e <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006994:	69ca      	ldr	r2, [r1, #28]
 8006996:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800699a:	4332      	orrs	r2, r6
 800699c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800699e:	0699      	lsls	r1, r3, #26
 80069a0:	d50b      	bpl.n	80069ba <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80069a2:	4975      	ldr	r1, [pc, #468]	; (8006b78 <HAL_RCC_ClockConfig+0x238>)
 80069a4:	69e6      	ldr	r6, [r4, #28]
 80069a6:	6a08      	ldr	r0, [r1, #32]
 80069a8:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80069ac:	4286      	cmp	r6, r0
 80069ae:	d904      	bls.n	80069ba <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80069b0:	6a0a      	ldr	r2, [r1, #32]
 80069b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80069b6:	4332      	orrs	r2, r6
 80069b8:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069ba:	079a      	lsls	r2, r3, #30
 80069bc:	d50b      	bpl.n	80069d6 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80069be:	496e      	ldr	r1, [pc, #440]	; (8006b78 <HAL_RCC_ClockConfig+0x238>)
 80069c0:	68e6      	ldr	r6, [r4, #12]
 80069c2:	6988      	ldr	r0, [r1, #24]
 80069c4:	f000 000f 	and.w	r0, r0, #15
 80069c8:	4286      	cmp	r6, r0
 80069ca:	d904      	bls.n	80069d6 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069cc:	698a      	ldr	r2, [r1, #24]
 80069ce:	f022 020f 	bic.w	r2, r2, #15
 80069d2:	4332      	orrs	r2, r6
 80069d4:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069d6:	07df      	lsls	r7, r3, #31
 80069d8:	d46e      	bmi.n	8006ab8 <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069da:	6823      	ldr	r3, [r4, #0]
 80069dc:	079e      	lsls	r6, r3, #30
 80069de:	f100 80a1 	bmi.w	8006b24 <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069e2:	4964      	ldr	r1, [pc, #400]	; (8006b74 <HAL_RCC_ClockConfig+0x234>)
 80069e4:	680a      	ldr	r2, [r1, #0]
 80069e6:	f002 020f 	and.w	r2, r2, #15
 80069ea:	42aa      	cmp	r2, r5
 80069ec:	f200 80a8 	bhi.w	8006b40 <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80069f0:	0758      	lsls	r0, r3, #29
 80069f2:	f100 80b1 	bmi.w	8006b58 <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069f6:	0719      	lsls	r1, r3, #28
 80069f8:	d50b      	bpl.n	8006a12 <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80069fa:	495f      	ldr	r1, [pc, #380]	; (8006b78 <HAL_RCC_ClockConfig+0x238>)
 80069fc:	6965      	ldr	r5, [r4, #20]
 80069fe:	69c8      	ldr	r0, [r1, #28]
 8006a00:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8006a04:	4285      	cmp	r5, r0
 8006a06:	d204      	bcs.n	8006a12 <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006a08:	69ca      	ldr	r2, [r1, #28]
 8006a0a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006a0e:	432a      	orrs	r2, r5
 8006a10:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a12:	06da      	lsls	r2, r3, #27
 8006a14:	d50b      	bpl.n	8006a2e <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006a16:	4958      	ldr	r1, [pc, #352]	; (8006b78 <HAL_RCC_ClockConfig+0x238>)
 8006a18:	69a5      	ldr	r5, [r4, #24]
 8006a1a:	69c8      	ldr	r0, [r1, #28]
 8006a1c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8006a20:	4285      	cmp	r5, r0
 8006a22:	d204      	bcs.n	8006a2e <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a24:	69ca      	ldr	r2, [r1, #28]
 8006a26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a2a:	432a      	orrs	r2, r5
 8006a2c:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a2e:	069b      	lsls	r3, r3, #26
 8006a30:	d50b      	bpl.n	8006a4a <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a32:	4a51      	ldr	r2, [pc, #324]	; (8006b78 <HAL_RCC_ClockConfig+0x238>)
 8006a34:	69e0      	ldr	r0, [r4, #28]
 8006a36:	6a11      	ldr	r1, [r2, #32]
 8006a38:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8006a3c:	4288      	cmp	r0, r1
 8006a3e:	d204      	bcs.n	8006a4a <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006a40:	6a13      	ldr	r3, [r2, #32]
 8006a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a46:	4303      	orrs	r3, r0
 8006a48:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006a4a:	f7ff fed9 	bl	8006800 <HAL_RCC_GetSysClockFreq>
 8006a4e:	494a      	ldr	r1, [pc, #296]	; (8006b78 <HAL_RCC_ClockConfig+0x238>)
 8006a50:	4a4a      	ldr	r2, [pc, #296]	; (8006b7c <HAL_RCC_ClockConfig+0x23c>)
 8006a52:	698b      	ldr	r3, [r1, #24]
 8006a54:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8006a58:	5cd3      	ldrb	r3, [r2, r3]
 8006a5a:	f003 031f 	and.w	r3, r3, #31
 8006a5e:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006a60:	698b      	ldr	r3, [r1, #24]
 8006a62:	f003 030f 	and.w	r3, r3, #15
 8006a66:	5cd3      	ldrb	r3, [r2, r3]
 8006a68:	4a45      	ldr	r2, [pc, #276]	; (8006b80 <HAL_RCC_ClockConfig+0x240>)
 8006a6a:	f003 031f 	and.w	r3, r3, #31
 8006a6e:	fa20 f303 	lsr.w	r3, r0, r3
 8006a72:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8006a74:	4b43      	ldr	r3, [pc, #268]	; (8006b84 <HAL_RCC_ClockConfig+0x244>)
 8006a76:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8006a78:	4b43      	ldr	r3, [pc, #268]	; (8006b88 <HAL_RCC_ClockConfig+0x248>)
}
 8006a7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8006a7e:	6818      	ldr	r0, [r3, #0]
 8006a80:	f7fa ba86 	b.w	8000f90 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a84:	6813      	ldr	r3, [r2, #0]
 8006a86:	f023 030f 	bic.w	r3, r3, #15
 8006a8a:	430b      	orrs	r3, r1
 8006a8c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a8e:	6813      	ldr	r3, [r2, #0]
 8006a90:	f003 030f 	and.w	r3, r3, #15
 8006a94:	428b      	cmp	r3, r1
 8006a96:	f47f af58 	bne.w	800694a <HAL_RCC_ClockConfig+0xa>
 8006a9a:	e760      	b.n	800695e <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006a9c:	4936      	ldr	r1, [pc, #216]	; (8006b78 <HAL_RCC_ClockConfig+0x238>)
 8006a9e:	6926      	ldr	r6, [r4, #16]
 8006aa0:	6988      	ldr	r0, [r1, #24]
 8006aa2:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8006aa6:	4286      	cmp	r6, r0
 8006aa8:	f67f af5d 	bls.w	8006966 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006aac:	698a      	ldr	r2, [r1, #24]
 8006aae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006ab2:	4332      	orrs	r2, r6
 8006ab4:	618a      	str	r2, [r1, #24]
 8006ab6:	e756      	b.n	8006966 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006ab8:	4b2f      	ldr	r3, [pc, #188]	; (8006b78 <HAL_RCC_ClockConfig+0x238>)
 8006aba:	68a1      	ldr	r1, [r4, #8]
 8006abc:	699a      	ldr	r2, [r3, #24]
 8006abe:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ac6:	6862      	ldr	r2, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ac8:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006aca:	2a02      	cmp	r2, #2
 8006acc:	d11d      	bne.n	8006b0a <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ace:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ad2:	f43f af3a 	beq.w	800694a <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ad6:	4e28      	ldr	r6, [pc, #160]	; (8006b78 <HAL_RCC_ClockConfig+0x238>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ad8:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006adc:	6933      	ldr	r3, [r6, #16]
 8006ade:	f023 0307 	bic.w	r3, r3, #7
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8006ae6:	f7fd fcbd 	bl	8004464 <HAL_GetTick>
 8006aea:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aec:	6933      	ldr	r3, [r6, #16]
 8006aee:	6862      	ldr	r2, [r4, #4]
 8006af0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006af4:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8006af8:	f43f af6f 	beq.w	80069da <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006afc:	f7fd fcb2 	bl	8004464 <HAL_GetTick>
 8006b00:	1bc0      	subs	r0, r0, r7
 8006b02:	4540      	cmp	r0, r8
 8006b04:	d9f2      	bls.n	8006aec <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 8006b06:	2003      	movs	r0, #3
 8006b08:	e720      	b.n	800694c <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b0a:	2a03      	cmp	r2, #3
 8006b0c:	d102      	bne.n	8006b14 <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b0e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006b12:	e7de      	b.n	8006ad2 <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006b14:	2a01      	cmp	r2, #1
 8006b16:	d102      	bne.n	8006b1e <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b18:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006b1c:	e7d9      	b.n	8006ad2 <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b1e:	f013 0f04 	tst.w	r3, #4
 8006b22:	e7d6      	b.n	8006ad2 <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b24:	4914      	ldr	r1, [pc, #80]	; (8006b78 <HAL_RCC_ClockConfig+0x238>)
 8006b26:	68e6      	ldr	r6, [r4, #12]
 8006b28:	6988      	ldr	r0, [r1, #24]
 8006b2a:	f000 000f 	and.w	r0, r0, #15
 8006b2e:	4286      	cmp	r6, r0
 8006b30:	f4bf af57 	bcs.w	80069e2 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b34:	698a      	ldr	r2, [r1, #24]
 8006b36:	f022 020f 	bic.w	r2, r2, #15
 8006b3a:	4332      	orrs	r2, r6
 8006b3c:	618a      	str	r2, [r1, #24]
 8006b3e:	e750      	b.n	80069e2 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b40:	680a      	ldr	r2, [r1, #0]
 8006b42:	f022 020f 	bic.w	r2, r2, #15
 8006b46:	432a      	orrs	r2, r5
 8006b48:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b4a:	680a      	ldr	r2, [r1, #0]
 8006b4c:	f002 020f 	and.w	r2, r2, #15
 8006b50:	42aa      	cmp	r2, r5
 8006b52:	f47f aefa 	bne.w	800694a <HAL_RCC_ClockConfig+0xa>
 8006b56:	e74b      	b.n	80069f0 <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006b58:	4907      	ldr	r1, [pc, #28]	; (8006b78 <HAL_RCC_ClockConfig+0x238>)
 8006b5a:	6925      	ldr	r5, [r4, #16]
 8006b5c:	6988      	ldr	r0, [r1, #24]
 8006b5e:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8006b62:	4285      	cmp	r5, r0
 8006b64:	f4bf af47 	bcs.w	80069f6 <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006b68:	698a      	ldr	r2, [r1, #24]
 8006b6a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006b6e:	432a      	orrs	r2, r5
 8006b70:	618a      	str	r2, [r1, #24]
 8006b72:	e740      	b.n	80069f6 <HAL_RCC_ClockConfig+0xb6>
 8006b74:	52002000 	.word	0x52002000
 8006b78:	58024400 	.word	0x58024400
 8006b7c:	0801b07c 	.word	0x0801b07c
 8006b80:	24000070 	.word	0x24000070
 8006b84:	2400006c 	.word	0x2400006c
 8006b88:	24000078 	.word	0x24000078

08006b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b8c:	b510      	push	{r4, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006b8e:	4c0c      	ldr	r4, [pc, #48]	; (8006bc0 <HAL_RCC_GetHCLKFreq+0x34>)
 8006b90:	f7ff fe36 	bl	8006800 <HAL_RCC_GetSysClockFreq>
 8006b94:	490b      	ldr	r1, [pc, #44]	; (8006bc4 <HAL_RCC_GetHCLKFreq+0x38>)
 8006b96:	69a3      	ldr	r3, [r4, #24]
 8006b98:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8006b9c:	5cca      	ldrb	r2, [r1, r3]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b9e:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006ba0:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ba4:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006ba8:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006bac:	5ccb      	ldrb	r3, [r1, r3]
 8006bae:	f003 031f 	and.w	r3, r3, #31
 8006bb2:	fa22 f003 	lsr.w	r0, r2, r3
 8006bb6:	4b04      	ldr	r3, [pc, #16]	; (8006bc8 <HAL_RCC_GetHCLKFreq+0x3c>)
 8006bb8:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006bba:	4b04      	ldr	r3, [pc, #16]	; (8006bcc <HAL_RCC_GetHCLKFreq+0x40>)
 8006bbc:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8006bbe:	bd10      	pop	{r4, pc}
 8006bc0:	58024400 	.word	0x58024400
 8006bc4:	0801b07c 	.word	0x0801b07c
 8006bc8:	24000070 	.word	0x24000070
 8006bcc:	2400006c 	.word	0x2400006c

08006bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bd0:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006bd2:	f7ff ffdb 	bl	8006b8c <HAL_RCC_GetHCLKFreq>
 8006bd6:	4b05      	ldr	r3, [pc, #20]	; (8006bec <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006bd8:	4a05      	ldr	r2, [pc, #20]	; (8006bf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006bda:	69db      	ldr	r3, [r3, #28]
 8006bdc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8006be0:	5cd3      	ldrb	r3, [r2, r3]
 8006be2:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006be6:	40d8      	lsrs	r0, r3
 8006be8:	bd08      	pop	{r3, pc}
 8006bea:	bf00      	nop
 8006bec:	58024400 	.word	0x58024400
 8006bf0:	0801b07c 	.word	0x0801b07c

08006bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bf4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006bf6:	f7ff ffc9 	bl	8006b8c <HAL_RCC_GetHCLKFreq>
 8006bfa:	4b05      	ldr	r3, [pc, #20]	; (8006c10 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006bfc:	4a05      	ldr	r2, [pc, #20]	; (8006c14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006c04:	5cd3      	ldrb	r3, [r2, r3]
 8006c06:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006c0a:	40d8      	lsrs	r0, r3
 8006c0c:	bd08      	pop	{r3, pc}
 8006c0e:	bf00      	nop
 8006c10:	58024400 	.word	0x58024400
 8006c14:	0801b07c 	.word	0x0801b07c

08006c18 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006c18:	233f      	movs	r3, #63	; 0x3f
 8006c1a:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006c1c:	4b11      	ldr	r3, [pc, #68]	; (8006c64 <HAL_RCC_GetClockConfig+0x4c>)
 8006c1e:	691a      	ldr	r2, [r3, #16]
 8006c20:	f002 0207 	and.w	r2, r2, #7
 8006c24:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006c26:	699a      	ldr	r2, [r3, #24]
 8006c28:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8006c2c:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006c2e:	699a      	ldr	r2, [r3, #24]
 8006c30:	f002 020f 	and.w	r2, r2, #15
 8006c34:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006c36:	699a      	ldr	r2, [r3, #24]
 8006c38:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8006c3c:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006c3e:	69da      	ldr	r2, [r3, #28]
 8006c40:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8006c44:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006c46:	69da      	ldr	r2, [r3, #28]
 8006c48:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8006c4c:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006c4e:	6a1b      	ldr	r3, [r3, #32]
 8006c50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c54:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006c56:	4b04      	ldr	r3, [pc, #16]	; (8006c68 <HAL_RCC_GetClockConfig+0x50>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 030f 	and.w	r3, r3, #15
 8006c5e:	600b      	str	r3, [r1, #0]
}
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	58024400 	.word	0x58024400
 8006c68:	52002000 	.word	0x52002000

08006c6c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c6e:	4c3a      	ldr	r4, [pc, #232]	; (8006d58 <RCCEx_PLL2_Config+0xec>)
{
 8006c70:	4606      	mov	r6, r0
 8006c72:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006c76:	f003 0303 	and.w	r3, r3, #3
 8006c7a:	2b03      	cmp	r3, #3
 8006c7c:	d069      	beq.n	8006d52 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006c7e:	6823      	ldr	r3, [r4, #0]
 8006c80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c84:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c86:	f7fd fbed 	bl	8004464 <HAL_GetTick>
 8006c8a:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c8c:	6823      	ldr	r3, [r4, #0]
 8006c8e:	011a      	lsls	r2, r3, #4
 8006c90:	d44b      	bmi.n	8006d2a <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006c92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006c94:	6832      	ldr	r2, [r6, #0]
 8006c96:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006c9a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8006c9e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ca0:	68b3      	ldr	r3, [r6, #8]
 8006ca2:	68f2      	ldr	r2, [r6, #12]
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	3a01      	subs	r2, #1
 8006ca8:	025b      	lsls	r3, r3, #9
 8006caa:	0412      	lsls	r2, r2, #16
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	6872      	ldr	r2, [r6, #4]
 8006cb6:	3a01      	subs	r2, #1
 8006cb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	6932      	ldr	r2, [r6, #16]
 8006cc0:	3a01      	subs	r2, #1
 8006cc2:	0612      	lsls	r2, r2, #24
 8006cc4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006ccc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006cce:	6972      	ldr	r2, [r6, #20]
 8006cd0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006cd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006cda:	69b2      	ldr	r2, [r6, #24]
 8006cdc:	f023 0320 	bic.w	r3, r3, #32
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006ce4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006ce6:	f023 0310 	bic.w	r3, r3, #16
 8006cea:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006cec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006cee:	69f2      	ldr	r2, [r6, #28]
 8006cf0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cf4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006cf8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006cfc:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006cfe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006d00:	f043 0310 	orr.w	r3, r3, #16
 8006d04:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006d06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8006d08:	b9b5      	cbnz	r5, 8006d38 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006d0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006d0e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006d10:	4c11      	ldr	r4, [pc, #68]	; (8006d58 <RCCEx_PLL2_Config+0xec>)
 8006d12:	6823      	ldr	r3, [r4, #0]
 8006d14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d18:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d1a:	f7fd fba3 	bl	8004464 <HAL_GetTick>
 8006d1e:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006d20:	6823      	ldr	r3, [r4, #0]
 8006d22:	011b      	lsls	r3, r3, #4
 8006d24:	d50f      	bpl.n	8006d46 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8006d26:	2000      	movs	r0, #0
 8006d28:	e005      	b.n	8006d36 <RCCEx_PLL2_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006d2a:	f7fd fb9b 	bl	8004464 <HAL_GetTick>
 8006d2e:	1bc0      	subs	r0, r0, r7
 8006d30:	2802      	cmp	r0, #2
 8006d32:	d9ab      	bls.n	8006c8c <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8006d34:	2003      	movs	r0, #3
}
 8006d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8006d38:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006d3a:	bf0c      	ite	eq
 8006d3c:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006d40:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8006d44:	e7e3      	b.n	8006d0e <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006d46:	f7fd fb8d 	bl	8004464 <HAL_GetTick>
 8006d4a:	1b40      	subs	r0, r0, r5
 8006d4c:	2802      	cmp	r0, #2
 8006d4e:	d9e7      	bls.n	8006d20 <RCCEx_PLL2_Config+0xb4>
 8006d50:	e7f0      	b.n	8006d34 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8006d52:	2001      	movs	r0, #1
 8006d54:	e7ef      	b.n	8006d36 <RCCEx_PLL2_Config+0xca>
 8006d56:	bf00      	nop
 8006d58:	58024400 	.word	0x58024400

08006d5c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d5e:	4c3a      	ldr	r4, [pc, #232]	; (8006e48 <RCCEx_PLL3_Config+0xec>)
{
 8006d60:	4606      	mov	r6, r0
 8006d62:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006d66:	f003 0303 	and.w	r3, r3, #3
 8006d6a:	2b03      	cmp	r3, #3
 8006d6c:	d069      	beq.n	8006e42 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006d6e:	6823      	ldr	r3, [r4, #0]
 8006d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d74:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d76:	f7fd fb75 	bl	8004464 <HAL_GetTick>
 8006d7a:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d7c:	6823      	ldr	r3, [r4, #0]
 8006d7e:	009a      	lsls	r2, r3, #2
 8006d80:	d44b      	bmi.n	8006e1a <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006d82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006d84:	6832      	ldr	r2, [r6, #0]
 8006d86:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8006d8a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8006d8e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d90:	68b3      	ldr	r3, [r6, #8]
 8006d92:	68f2      	ldr	r2, [r6, #12]
 8006d94:	3b01      	subs	r3, #1
 8006d96:	3a01      	subs	r2, #1
 8006d98:	025b      	lsls	r3, r3, #9
 8006d9a:	0412      	lsls	r2, r2, #16
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006da2:	4313      	orrs	r3, r2
 8006da4:	6872      	ldr	r2, [r6, #4]
 8006da6:	3a01      	subs	r2, #1
 8006da8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dac:	4313      	orrs	r3, r2
 8006dae:	6932      	ldr	r2, [r6, #16]
 8006db0:	3a01      	subs	r2, #1
 8006db2:	0612      	lsls	r2, r2, #24
 8006db4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006db8:	4313      	orrs	r3, r2
 8006dba:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006dbc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006dbe:	6972      	ldr	r2, [r6, #20]
 8006dc0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006dc8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006dca:	69b2      	ldr	r2, [r6, #24]
 8006dcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006dd4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006dd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dda:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006ddc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006dde:	69f2      	ldr	r2, [r6, #28]
 8006de0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006de4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006de8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006dec:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006dee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006df4:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006df6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8006df8:	b9b5      	cbnz	r5, 8006e28 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006dfa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006dfe:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006e00:	4c11      	ldr	r4, [pc, #68]	; (8006e48 <RCCEx_PLL3_Config+0xec>)
 8006e02:	6823      	ldr	r3, [r4, #0]
 8006e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e08:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e0a:	f7fd fb2b 	bl	8004464 <HAL_GetTick>
 8006e0e:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e10:	6823      	ldr	r3, [r4, #0]
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	d50f      	bpl.n	8006e36 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8006e16:	2000      	movs	r0, #0
 8006e18:	e005      	b.n	8006e26 <RCCEx_PLL3_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006e1a:	f7fd fb23 	bl	8004464 <HAL_GetTick>
 8006e1e:	1bc0      	subs	r0, r0, r7
 8006e20:	2802      	cmp	r0, #2
 8006e22:	d9ab      	bls.n	8006d7c <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8006e24:	2003      	movs	r0, #3
}
 8006e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8006e28:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006e2a:	bf0c      	ite	eq
 8006e2c:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006e30:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8006e34:	e7e3      	b.n	8006dfe <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006e36:	f7fd fb15 	bl	8004464 <HAL_GetTick>
 8006e3a:	1b40      	subs	r0, r0, r5
 8006e3c:	2802      	cmp	r0, #2
 8006e3e:	d9e7      	bls.n	8006e10 <RCCEx_PLL3_Config+0xb4>
 8006e40:	e7f0      	b.n	8006e24 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8006e42:	2001      	movs	r0, #1
 8006e44:	e7ef      	b.n	8006e26 <RCCEx_PLL3_Config+0xca>
 8006e46:	bf00      	nop
 8006e48:	58024400 	.word	0x58024400

08006e4c <HAL_RCCEx_PeriphCLKConfig>:
{
 8006e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e50:	6806      	ldr	r6, [r0, #0]
{
 8006e52:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e54:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 8006e58:	d009      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8006e5a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006e5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e60:	d02c      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x70>
 8006e62:	d811      	bhi.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8006e64:	b1e3      	cbz	r3, 8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006e66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e6a:	d01f      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006e6c:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006e6e:	682b      	ldr	r3, [r5, #0]
 8006e70:	05d8      	lsls	r0, r3, #23
 8006e72:	f140 80d7 	bpl.w	8007024 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    switch(PeriphClkInit->Sai1ClockSelection)
 8006e76:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8006e78:	2b04      	cmp	r3, #4
 8006e7a:	f200 80d2 	bhi.w	8007022 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8006e7e:	e8df f003 	tbb	[pc, r3]
 8006e82:	2922      	.short	0x2922
 8006e84:	27ca      	.short	0x27ca
 8006e86:	27          	.byte	0x27
 8006e87:	00          	.byte	0x00
    switch(PeriphClkInit->SpdifrxClockSelection)
 8006e88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e8c:	d1ee      	bne.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006e8e:	4ab6      	ldr	r2, [pc, #728]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006e90:	2600      	movs	r6, #0
 8006e92:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8006e94:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006e96:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006e9a:	430b      	orrs	r3, r1
 8006e9c:	6513      	str	r3, [r2, #80]	; 0x50
 8006e9e:	e7e6      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ea0:	4ab1      	ldr	r2, [pc, #708]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006ea2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ea8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8006eaa:	e7f0      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x42>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006eac:	2102      	movs	r1, #2
 8006eae:	3004      	adds	r0, #4
 8006eb0:	f7ff fedc 	bl	8006c6c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006eb4:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	d1d9      	bne.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x22>
 8006eba:	e7e8      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x42>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ebc:	2102      	movs	r1, #2
 8006ebe:	3024      	adds	r0, #36	; 0x24
 8006ec0:	f7ff ff4c 	bl	8006d5c <RCCEx_PLL3_Config>
 8006ec4:	e7f6      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ec6:	4aa8      	ldr	r2, [pc, #672]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006ec8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ece:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8006ed0:	4634      	mov	r4, r6
 8006ed2:	e004      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x92>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	1d28      	adds	r0, r5, #4
 8006ed8:	f7ff fec8 	bl	8006c6c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006edc:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8006ede:	2c00      	cmp	r4, #0
 8006ee0:	f040 80a2 	bne.w	8007028 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ee4:	4aa0      	ldr	r2, [pc, #640]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006ee6:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8006ee8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006eea:	f023 0307 	bic.w	r3, r3, #7
 8006eee:	430b      	orrs	r3, r1
 8006ef0:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006ef2:	682b      	ldr	r3, [r5, #0]
 8006ef4:	0559      	lsls	r1, r3, #21
 8006ef6:	d510      	bpl.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0xce>
    switch(PeriphClkInit->Sai4AClockSelection)
 8006ef8:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 8006efc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f00:	f000 80b3 	beq.w	800706a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006f04:	f200 8092 	bhi.w	800702c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f000 80a2 	beq.w	8007052 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006f0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f12:	f000 80a4 	beq.w	800705e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8006f16:	2601      	movs	r6, #1
 8006f18:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006f1a:	682b      	ldr	r3, [r5, #0]
 8006f1c:	051a      	lsls	r2, r3, #20
 8006f1e:	d510      	bpl.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    switch(PeriphClkInit->Sai4BClockSelection)
 8006f20:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 8006f24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f28:	f000 80c6 	beq.w	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006f2c:	f200 80a5 	bhi.w	800707a <HAL_RCCEx_PeriphCLKConfig+0x22e>
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f000 80b5 	beq.w	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006f36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f3a:	f000 80b7 	beq.w	80070ac <HAL_RCCEx_PeriphCLKConfig+0x260>
 8006f3e:	2601      	movs	r6, #1
 8006f40:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006f42:	682b      	ldr	r3, [r5, #0]
 8006f44:	019b      	lsls	r3, r3, #6
 8006f46:	d50d      	bpl.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x118>
    switch(PeriphClkInit->OspiClockSelection)
 8006f48:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8006f4a:	2b20      	cmp	r3, #32
 8006f4c:	f000 80ce 	beq.w	80070ec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8006f50:	f200 80ba 	bhi.w	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 80ba 	beq.w	80070ce <HAL_RCCEx_PeriphCLKConfig+0x282>
 8006f5a:	2b10      	cmp	r3, #16
 8006f5c:	f000 80c0 	beq.w	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x294>
 8006f60:	2601      	movs	r6, #1
 8006f62:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006f64:	682b      	ldr	r3, [r5, #0]
 8006f66:	04df      	lsls	r7, r3, #19
 8006f68:	d50f      	bpl.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->Spi123ClockSelection)
 8006f6a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8006f6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f70:	f000 80e0 	beq.w	8007134 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8006f74:	f200 80c2 	bhi.w	80070fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f000 80cf 	beq.w	800711c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f82:	f000 80d1 	beq.w	8007128 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8006f86:	2601      	movs	r6, #1
 8006f88:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006f8a:	682b      	ldr	r3, [r5, #0]
 8006f8c:	0498      	lsls	r0, r3, #18
 8006f8e:	d50f      	bpl.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi45ClockSelection)
 8006f90:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8006f92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f96:	f000 80ef 	beq.w	8007178 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8006f9a:	f200 80d3 	bhi.w	8007144 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	f000 80d9 	beq.w	8007156 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8006fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fa8:	f000 80e0 	beq.w	800716c <HAL_RCCEx_PeriphCLKConfig+0x320>
 8006fac:	2601      	movs	r6, #1
 8006fae:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006fb0:	682b      	ldr	r3, [r5, #0]
 8006fb2:	0459      	lsls	r1, r3, #17
 8006fb4:	d510      	bpl.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch(PeriphClkInit->Spi6ClockSelection)
 8006fb6:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8006fba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fbe:	f000 80fc 	beq.w	80071ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006fc2:	f200 80e1 	bhi.w	8007188 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f000 80e7 	beq.w	800719a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006fcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fd0:	f000 80ed 	beq.w	80071ae <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006fd4:	2601      	movs	r6, #1
 8006fd6:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006fd8:	682b      	ldr	r3, [r5, #0]
 8006fda:	041a      	lsls	r2, r3, #16
 8006fdc:	d50d      	bpl.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    switch(PeriphClkInit->FdcanClockSelection)
 8006fde:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8006fe0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fe4:	f000 80f1 	beq.w	80071ca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006fe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fec:	f000 80fb 	beq.w	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 80ef 	beq.w	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8006ff6:	2601      	movs	r6, #1
 8006ff8:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006ffa:	682b      	ldr	r3, [r5, #0]
 8006ffc:	01db      	lsls	r3, r3, #7
 8006ffe:	f140 8108 	bpl.w	8007212 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    switch(PeriphClkInit->FmcClockSelection)
 8007002:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007004:	2b03      	cmp	r3, #3
 8007006:	f200 8148 	bhi.w	800729a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800700a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800700e:	00f9      	.short	0x00f9
 8007010:	014000f4 	.word	0x014000f4
 8007014:	00f9      	.short	0x00f9
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007016:	2100      	movs	r1, #0
 8007018:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800701c:	f7ff fe9e 	bl	8006d5c <RCCEx_PLL3_Config>
 8007020:	e75c      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch(PeriphClkInit->Sai1ClockSelection)
 8007022:	2601      	movs	r6, #1
 8007024:	4634      	mov	r4, r6
 8007026:	e764      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8007028:	4626      	mov	r6, r4
 800702a:	e762      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch(PeriphClkInit->Sai4AClockSelection)
 800702c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007030:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8007034:	d003      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8007036:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800703a:	f47f af6c 	bne.w	8006f16 <HAL_RCCEx_PeriphCLKConfig+0xca>
    if(ret == HAL_OK)
 800703e:	b9d4      	cbnz	r4, 8007076 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007040:	4a49      	ldr	r2, [pc, #292]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007042:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8007046:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007048:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800704c:	430b      	orrs	r3, r1
 800704e:	6593      	str	r3, [r2, #88]	; 0x58
 8007050:	e763      	b.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0xce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007052:	4a45      	ldr	r2, [pc, #276]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007054:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800705a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800705c:	e7ef      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800705e:	2100      	movs	r1, #0
 8007060:	1d28      	adds	r0, r5, #4
 8007062:	f7ff fe03 	bl	8006c6c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007066:	4604      	mov	r4, r0
      break;
 8007068:	e7e9      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800706a:	2100      	movs	r1, #0
 800706c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007070:	f7ff fe74 	bl	8006d5c <RCCEx_PLL3_Config>
 8007074:	e7f7      	b.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8007076:	4626      	mov	r6, r4
 8007078:	e74f      	b.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0xce>
    switch(PeriphClkInit->Sai4BClockSelection)
 800707a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800707e:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8007082:	d003      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8007084:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007088:	f47f af59 	bne.w	8006f3e <HAL_RCCEx_PeriphCLKConfig+0xf2>
    if(ret == HAL_OK)
 800708c:	b9d4      	cbnz	r4, 80070c4 <HAL_RCCEx_PeriphCLKConfig+0x278>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800708e:	4a36      	ldr	r2, [pc, #216]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007090:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8007094:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007096:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800709a:	430b      	orrs	r3, r1
 800709c:	6593      	str	r3, [r2, #88]	; 0x58
 800709e:	e750      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xf6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070a0:	4a31      	ldr	r2, [pc, #196]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80070a2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80070a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070a8:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80070aa:	e7ef      	b.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070ac:	2100      	movs	r1, #0
 80070ae:	1d28      	adds	r0, r5, #4
 80070b0:	f7ff fddc 	bl	8006c6c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070b4:	4604      	mov	r4, r0
      break;
 80070b6:	e7e9      	b.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070b8:	2100      	movs	r1, #0
 80070ba:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80070be:	f7ff fe4d 	bl	8006d5c <RCCEx_PLL3_Config>
 80070c2:	e7f7      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x268>
 80070c4:	4626      	mov	r6, r4
 80070c6:	e73c      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    switch(PeriphClkInit->OspiClockSelection)
 80070c8:	2b30      	cmp	r3, #48	; 0x30
 80070ca:	f47f af49 	bne.w	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x114>
    if(ret == HAL_OK)
 80070ce:	b99c      	cbnz	r4, 80070f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80070d0:	4a25      	ldr	r2, [pc, #148]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80070d2:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80070d4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80070d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80070da:	430b      	orrs	r3, r1
 80070dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80070de:	e741      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x118>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070e0:	4a21      	ldr	r2, [pc, #132]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80070e2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80070e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070e8:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80070ea:	e7f0      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x282>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80070ec:	2102      	movs	r1, #2
 80070ee:	1d28      	adds	r0, r5, #4
 80070f0:	f7ff fdbc 	bl	8006c6c <RCCEx_PLL2_Config>
 80070f4:	4604      	mov	r4, r0
      break;
 80070f6:	e7ea      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x282>
 80070f8:	4626      	mov	r6, r4
 80070fa:	e733      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x118>
    switch(PeriphClkInit->Spi123ClockSelection)
 80070fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007100:	d003      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8007102:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007106:	f47f af3e 	bne.w	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if(ret == HAL_OK)
 800710a:	b9cc      	cbnz	r4, 8007140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800710c:	4a16      	ldr	r2, [pc, #88]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800710e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8007110:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007116:	430b      	orrs	r3, r1
 8007118:	6513      	str	r3, [r2, #80]	; 0x50
 800711a:	e736      	b.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800711c:	4a12      	ldr	r2, [pc, #72]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800711e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007124:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8007126:	e7f0      	b.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007128:	2100      	movs	r1, #0
 800712a:	1d28      	adds	r0, r5, #4
 800712c:	f7ff fd9e 	bl	8006c6c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007130:	4604      	mov	r4, r0
      break;
 8007132:	e7ea      	b.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007134:	2100      	movs	r1, #0
 8007136:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800713a:	f7ff fe0f 	bl	8006d5c <RCCEx_PLL3_Config>
 800713e:	e7f7      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8007140:	4626      	mov	r6, r4
 8007142:	e722      	b.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->Spi45ClockSelection)
 8007144:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007148:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800714c:	d003      	beq.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 800714e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007152:	f47f af2b 	bne.w	8006fac <HAL_RCCEx_PeriphCLKConfig+0x160>
    if(ret == HAL_OK)
 8007156:	b9ac      	cbnz	r4, 8007184 <HAL_RCCEx_PeriphCLKConfig+0x338>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007158:	4a03      	ldr	r2, [pc, #12]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800715a:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 800715c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800715e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8007162:	430b      	orrs	r3, r1
 8007164:	6513      	str	r3, [r2, #80]	; 0x50
 8007166:	e723      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8007168:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800716c:	2101      	movs	r1, #1
 800716e:	1d28      	adds	r0, r5, #4
 8007170:	f7ff fd7c 	bl	8006c6c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007174:	4604      	mov	r4, r0
      break;
 8007176:	e7ee      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x30a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007178:	2101      	movs	r1, #1
 800717a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800717e:	f7ff fded 	bl	8006d5c <RCCEx_PLL3_Config>
 8007182:	e7f7      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8007184:	4626      	mov	r6, r4
 8007186:	e713      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi6ClockSelection)
 8007188:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800718c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007190:	d003      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007192:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007196:	f47f af1d 	bne.w	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x188>
    if(ret == HAL_OK)
 800719a:	b9a4      	cbnz	r4, 80071c6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800719c:	4a7f      	ldr	r2, [pc, #508]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 800719e:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 80071a2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80071a4:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80071a8:	430b      	orrs	r3, r1
 80071aa:	6593      	str	r3, [r2, #88]	; 0x58
 80071ac:	e714      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80071ae:	2101      	movs	r1, #1
 80071b0:	1d28      	adds	r0, r5, #4
 80071b2:	f7ff fd5b 	bl	8006c6c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80071b6:	4604      	mov	r4, r0
      break;
 80071b8:	e7ef      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80071ba:	2101      	movs	r1, #1
 80071bc:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80071c0:	f7ff fdcc 	bl	8006d5c <RCCEx_PLL3_Config>
 80071c4:	e7f7      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80071c6:	4626      	mov	r6, r4
 80071c8:	e706      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071ca:	4a74      	ldr	r2, [pc, #464]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80071cc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80071ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071d2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80071d4:	b96c      	cbnz	r4, 80071f2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80071d6:	4a71      	ldr	r2, [pc, #452]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80071d8:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 80071da:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80071dc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80071e0:	430b      	orrs	r3, r1
 80071e2:	6513      	str	r3, [r2, #80]	; 0x50
 80071e4:	e709      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80071e6:	2101      	movs	r1, #1
 80071e8:	1d28      	adds	r0, r5, #4
 80071ea:	f7ff fd3f 	bl	8006c6c <RCCEx_PLL2_Config>
 80071ee:	4604      	mov	r4, r0
      break;
 80071f0:	e7f0      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x388>
 80071f2:	4626      	mov	r6, r4
 80071f4:	e701      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071f6:	4a69      	ldr	r2, [pc, #420]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80071f8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80071fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071fe:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8007200:	2c00      	cmp	r4, #0
 8007202:	d14d      	bne.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007204:	4a65      	ldr	r2, [pc, #404]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8007206:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8007208:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800720a:	f023 0303 	bic.w	r3, r3, #3
 800720e:	430b      	orrs	r3, r1
 8007210:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007212:	682b      	ldr	r3, [r5, #0]
 8007214:	025f      	lsls	r7, r3, #9
 8007216:	d54d      	bpl.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007218:	4f61      	ldr	r7, [pc, #388]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007220:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8007222:	f7fd f91f 	bl	8004464 <HAL_GetTick>
 8007226:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	05d8      	lsls	r0, r3, #23
 800722c:	d53a      	bpl.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    if(ret == HAL_OK)
 800722e:	2c00      	cmp	r4, #0
 8007230:	d16c      	bne.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007232:	4b5a      	ldr	r3, [pc, #360]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8007234:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
 8007238:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800723a:	4042      	eors	r2, r0
 800723c:	f412 7f40 	tst.w	r2, #768	; 0x300
 8007240:	d00b      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x40e>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007242:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8007244:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007246:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800724a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800724e:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007250:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007252:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8007256:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8007258:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800725a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800725e:	d040      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x496>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007260:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8007264:	494d      	ldr	r1, [pc, #308]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8007266:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800726a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800726e:	d149      	bne.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8007270:	6908      	ldr	r0, [r1, #16]
 8007272:	4a4c      	ldr	r2, [pc, #304]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8007274:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8007278:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800727c:	4302      	orrs	r2, r0
 800727e:	610a      	str	r2, [r1, #16]
 8007280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007284:	4a45      	ldr	r2, [pc, #276]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8007286:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8007288:	430b      	orrs	r3, r1
 800728a:	6713      	str	r3, [r2, #112]	; 0x70
 800728c:	e012      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800728e:	2102      	movs	r1, #2
 8007290:	1d28      	adds	r0, r5, #4
 8007292:	f7ff fceb 	bl	8006c6c <RCCEx_PLL2_Config>
 8007296:	4604      	mov	r4, r0
      break;
 8007298:	e7b2      	b.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FmcClockSelection)
 800729a:	2601      	movs	r6, #1
 800729c:	4634      	mov	r4, r6
 800729e:	e7b8      	b.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 80072a0:	4626      	mov	r6, r4
 80072a2:	e7b6      	b.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072a4:	f7fd f8de 	bl	8004464 <HAL_GetTick>
 80072a8:	eba0 0008 	sub.w	r0, r0, r8
 80072ac:	2864      	cmp	r0, #100	; 0x64
 80072ae:	d9bb      	bls.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
        ret = HAL_TIMEOUT;
 80072b0:	2603      	movs	r6, #3
 80072b2:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80072b4:	682b      	ldr	r3, [r5, #0]
 80072b6:	07da      	lsls	r2, r3, #31
 80072b8:	d508      	bpl.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch(PeriphClkInit->Usart16ClockSelection)
 80072ba:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80072bc:	2b10      	cmp	r3, #16
 80072be:	d03c      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80072c0:	d826      	bhi.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 80072c2:	b35b      	cbz	r3, 800731c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80072c4:	2b08      	cmp	r3, #8
 80072c6:	d032      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80072c8:	2601      	movs	r6, #1
 80072ca:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80072cc:	682b      	ldr	r3, [r5, #0]
 80072ce:	079b      	lsls	r3, r3, #30
 80072d0:	d548      	bpl.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x518>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80072d2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80072d4:	2b05      	cmp	r3, #5
 80072d6:	d85b      	bhi.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x544>
 80072d8:	e8df f003 	tbb	[pc, r3]
 80072dc:	3c54373c 	.word	0x3c54373c
 80072e0:	3c3c      	.short	0x3c3c
        tickstart = HAL_GetTick();
 80072e2:	f7fd f8bf 	bl	8004464 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072e6:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800739c <HAL_RCCEx_PeriphCLKConfig+0x550>
        tickstart = HAL_GetTick();
 80072ea:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ec:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072f0:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80072f4:	0799      	lsls	r1, r3, #30
 80072f6:	d4b3      	bmi.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x414>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072f8:	f7fd f8b4 	bl	8004464 <HAL_GetTick>
 80072fc:	1bc0      	subs	r0, r0, r7
 80072fe:	4548      	cmp	r0, r9
 8007300:	d9f6      	bls.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8007302:	e7d5      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x464>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007304:	690a      	ldr	r2, [r1, #16]
 8007306:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800730a:	e7b8      	b.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800730c:	4626      	mov	r6, r4
 800730e:	e7d1      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
    switch(PeriphClkInit->Usart16ClockSelection)
 8007310:	f023 0208 	bic.w	r2, r3, #8
 8007314:	2a20      	cmp	r2, #32
 8007316:	d001      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007318:	2b18      	cmp	r3, #24
 800731a:	d1d5      	bne.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    if(ret == HAL_OK)
 800731c:	b99c      	cbnz	r4, 8007346 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800731e:	4a1f      	ldr	r2, [pc, #124]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8007320:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8007322:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007324:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8007328:	430b      	orrs	r3, r1
 800732a:	6553      	str	r3, [r2, #84]	; 0x54
 800732c:	e7ce      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x480>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800732e:	2101      	movs	r1, #1
 8007330:	1d28      	adds	r0, r5, #4
 8007332:	f7ff fc9b 	bl	8006c6c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007336:	4604      	mov	r4, r0
      break;
 8007338:	e7f0      	b.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800733a:	2101      	movs	r1, #1
 800733c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007340:	f7ff fd0c 	bl	8006d5c <RCCEx_PLL3_Config>
 8007344:	e7f7      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8007346:	4626      	mov	r6, r4
 8007348:	e7c0      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x480>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800734a:	2101      	movs	r1, #1
 800734c:	1d28      	adds	r0, r5, #4
 800734e:	f7ff fc8d 	bl	8006c6c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007352:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8007354:	b9fc      	cbnz	r4, 8007396 <HAL_RCCEx_PeriphCLKConfig+0x54a>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007356:	4a11      	ldr	r2, [pc, #68]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8007358:	6f29      	ldr	r1, [r5, #112]	; 0x70
 800735a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800735c:	f023 0307 	bic.w	r3, r3, #7
 8007360:	430b      	orrs	r3, r1
 8007362:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007364:	682b      	ldr	r3, [r5, #0]
 8007366:	075f      	lsls	r7, r3, #29
 8007368:	d52e      	bpl.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800736a:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800736e:	2b05      	cmp	r3, #5
 8007370:	f200 8134 	bhi.w	80075dc <HAL_RCCEx_PeriphCLKConfig+0x790>
 8007374:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007378:	0018001d 	.word	0x0018001d
 800737c:	001d012c 	.word	0x001d012c
 8007380:	001d001d 	.word	0x001d001d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007384:	2101      	movs	r1, #1
 8007386:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800738a:	f7ff fce7 	bl	8006d5c <RCCEx_PLL3_Config>
 800738e:	e7e0      	b.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x506>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007390:	2601      	movs	r6, #1
 8007392:	4634      	mov	r4, r6
 8007394:	e7e6      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007396:	4626      	mov	r6, r4
 8007398:	e7e4      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800739a:	bf00      	nop
 800739c:	58024400 	.word	0x58024400
 80073a0:	58024800 	.word	0x58024800
 80073a4:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073a8:	2101      	movs	r1, #1
 80073aa:	1d28      	adds	r0, r5, #4
 80073ac:	f7ff fc5e 	bl	8006c6c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80073b0:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 80073b2:	2c00      	cmp	r4, #0
 80073b4:	f040 8115 	bne.w	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x796>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80073b8:	4ab8      	ldr	r2, [pc, #736]	; (800769c <HAL_RCCEx_PeriphCLKConfig+0x850>)
 80073ba:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 80073be:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80073c0:	f023 0307 	bic.w	r3, r3, #7
 80073c4:	430b      	orrs	r3, r1
 80073c6:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80073c8:	682b      	ldr	r3, [r5, #0]
 80073ca:	0698      	lsls	r0, r3, #26
 80073cc:	d510      	bpl.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80073ce:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 80073d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073d6:	f000 811f 	beq.w	8007618 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 80073da:	f200 8104 	bhi.w	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f000 810a 	beq.w	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 80073e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073e8:	f000 8110 	beq.w	800760c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80073ec:	2601      	movs	r6, #1
 80073ee:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80073f0:	682b      	ldr	r3, [r5, #0]
 80073f2:	0659      	lsls	r1, r3, #25
 80073f4:	d510      	bpl.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80073f6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80073fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073fe:	f000 812c 	beq.w	800765a <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8007402:	f200 8111 	bhi.w	8007628 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
 8007406:	2b00      	cmp	r3, #0
 8007408:	f000 8117 	beq.w	800763a <HAL_RCCEx_PeriphCLKConfig+0x7ee>
 800740c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007410:	f000 811d 	beq.w	800764e <HAL_RCCEx_PeriphCLKConfig+0x802>
 8007414:	2601      	movs	r6, #1
 8007416:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007418:	682b      	ldr	r3, [r5, #0]
 800741a:	061a      	lsls	r2, r3, #24
 800741c:	d510      	bpl.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800741e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8007422:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007426:	f000 813b 	beq.w	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x854>
 800742a:	f200 811e 	bhi.w	800766a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800742e:	2b00      	cmp	r3, #0
 8007430:	f000 8124 	beq.w	800767c <HAL_RCCEx_PeriphCLKConfig+0x830>
 8007434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007438:	f000 812a 	beq.w	8007690 <HAL_RCCEx_PeriphCLKConfig+0x844>
 800743c:	2601      	movs	r6, #1
 800743e:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007440:	682b      	ldr	r3, [r5, #0]
 8007442:	071b      	lsls	r3, r3, #28
 8007444:	d512      	bpl.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x620>
    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8007446:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8007448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800744c:	d107      	bne.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x612>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800744e:	2102      	movs	r1, #2
 8007450:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007454:	f7ff fc82 	bl	8006d5c <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 8007458:	2800      	cmp	r0, #0
 800745a:	bf18      	it	ne
 800745c:	2601      	movne	r6, #1
      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800745e:	4a8f      	ldr	r2, [pc, #572]	; (800769c <HAL_RCCEx_PeriphCLKConfig+0x850>)
 8007460:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 8007462:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007464:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007468:	430b      	orrs	r3, r1
 800746a:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800746c:	682b      	ldr	r3, [r5, #0]
 800746e:	06df      	lsls	r7, r3, #27
 8007470:	d514      	bpl.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x650>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007472:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8007476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800747a:	d107      	bne.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x640>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800747c:	2102      	movs	r1, #2
 800747e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007482:	f7ff fc6b 	bl	8006d5c <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8007486:	2800      	cmp	r0, #0
 8007488:	bf18      	it	ne
 800748a:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800748c:	4a83      	ldr	r2, [pc, #524]	; (800769c <HAL_RCCEx_PeriphCLKConfig+0x850>)
 800748e:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 8007492:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007498:	430b      	orrs	r3, r1
 800749a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800749c:	682b      	ldr	r3, [r5, #0]
 800749e:	0318      	lsls	r0, r3, #12
 80074a0:	d51a      	bpl.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    switch(PeriphClkInit->AdcClockSelection)
 80074a2:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 80074a6:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80074aa:	f000 8101 	beq.w	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x864>
 80074ae:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80074b2:	d006      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80074b4:	2900      	cmp	r1, #0
 80074b6:	f040 8101 	bne.w	80076bc <HAL_RCCEx_PeriphCLKConfig+0x870>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074ba:	1d28      	adds	r0, r5, #4
 80074bc:	f7ff fbd6 	bl	8006c6c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80074c0:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 80074c2:	2c00      	cmp	r4, #0
 80074c4:	f040 80fd 	bne.w	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x876>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80074c8:	4a74      	ldr	r2, [pc, #464]	; (800769c <HAL_RCCEx_PeriphCLKConfig+0x850>)
 80074ca:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 80074ce:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80074d0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80074d4:	430b      	orrs	r3, r1
 80074d6:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80074d8:	682b      	ldr	r3, [r5, #0]
 80074da:	0359      	lsls	r1, r3, #13
 80074dc:	d51c      	bpl.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    switch(PeriphClkInit->UsbClockSelection)
 80074de:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 80074e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074e6:	f000 80ee 	beq.w	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 80074ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074ee:	d008      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 80074f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074f4:	f040 80ee 	bne.w	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x888>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074f8:	4a68      	ldr	r2, [pc, #416]	; (800769c <HAL_RCCEx_PeriphCLKConfig+0x850>)
 80074fa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80074fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007500:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8007502:	2c00      	cmp	r4, #0
 8007504:	f040 80e9 	bne.w	80076da <HAL_RCCEx_PeriphCLKConfig+0x88e>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007508:	4a64      	ldr	r2, [pc, #400]	; (800769c <HAL_RCCEx_PeriphCLKConfig+0x850>)
 800750a:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 800750e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007510:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007514:	430b      	orrs	r3, r1
 8007516:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007518:	682b      	ldr	r3, [r5, #0]
 800751a:	03da      	lsls	r2, r3, #15
 800751c:	d509      	bpl.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->SdmmcClockSelection)
 800751e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8007520:	2b00      	cmp	r3, #0
 8007522:	f000 80dc 	beq.w	80076de <HAL_RCCEx_PeriphCLKConfig+0x892>
 8007526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800752a:	f000 80e6 	beq.w	80076fa <HAL_RCCEx_PeriphCLKConfig+0x8ae>
 800752e:	2601      	movs	r6, #1
 8007530:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007532:	682b      	ldr	r3, [r5, #0]
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	d507      	bpl.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007538:	2102      	movs	r1, #2
 800753a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800753e:	f7ff fc0d 	bl	8006d5c <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 8007542:	2800      	cmp	r0, #0
 8007544:	bf18      	it	ne
 8007546:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007548:	682b      	ldr	r3, [r5, #0]
 800754a:	039f      	lsls	r7, r3, #14
 800754c:	d50a      	bpl.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x718>
    switch(PeriphClkInit->RngClockSelection)
 800754e:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 8007550:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8007554:	f000 80e7 	beq.w	8007726 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8007558:	f200 80d7 	bhi.w	800770a <HAL_RCCEx_PeriphCLKConfig+0x8be>
 800755c:	2900      	cmp	r1, #0
 800755e:	f000 80da 	beq.w	8007716 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 8007562:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007564:	02d8      	lsls	r0, r3, #11
 8007566:	d506      	bpl.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x72a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007568:	494c      	ldr	r1, [pc, #304]	; (800769c <HAL_RCCEx_PeriphCLKConfig+0x850>)
 800756a:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 800756c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800756e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007572:	4302      	orrs	r2, r0
 8007574:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007576:	0299      	lsls	r1, r3, #10
 8007578:	d506      	bpl.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800757a:	4948      	ldr	r1, [pc, #288]	; (800769c <HAL_RCCEx_PeriphCLKConfig+0x850>)
 800757c:	6e68      	ldr	r0, [r5, #100]	; 0x64
 800757e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8007580:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007584:	4302      	orrs	r2, r0
 8007586:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007588:	005a      	lsls	r2, r3, #1
 800758a:	d509      	bpl.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x754>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800758c:	4a43      	ldr	r2, [pc, #268]	; (800769c <HAL_RCCEx_PeriphCLKConfig+0x850>)
 800758e:	6911      	ldr	r1, [r2, #16]
 8007590:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8007594:	6111      	str	r1, [r2, #16]
 8007596:	6911      	ldr	r1, [r2, #16]
 8007598:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
 800759c:	4301      	orrs	r1, r0
 800759e:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	da06      	bge.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x766>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80075a4:	493d      	ldr	r1, [pc, #244]	; (800769c <HAL_RCCEx_PeriphCLKConfig+0x850>)
 80075a6:	6d28      	ldr	r0, [r5, #80]	; 0x50
 80075a8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80075aa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80075ae:	4302      	orrs	r2, r0
 80075b0:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80075b2:	021b      	lsls	r3, r3, #8
 80075b4:	d507      	bpl.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x77a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80075b6:	4a39      	ldr	r2, [pc, #228]	; (800769c <HAL_RCCEx_PeriphCLKConfig+0x850>)
 80075b8:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 80075bc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80075be:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80075c2:	430b      	orrs	r3, r1
 80075c4:	6553      	str	r3, [r2, #84]	; 0x54
}
 80075c6:	1e30      	subs	r0, r6, #0
 80075c8:	bf18      	it	ne
 80075ca:	2001      	movne	r0, #1
 80075cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80075d0:	2101      	movs	r1, #1
 80075d2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80075d6:	f7ff fbc1 	bl	8006d5c <RCCEx_PLL3_Config>
 80075da:	e6e9      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x564>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80075dc:	2601      	movs	r6, #1
 80075de:	4634      	mov	r4, r6
 80075e0:	e6f2      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80075e2:	4626      	mov	r6, r4
 80075e4:	e6f0      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80075e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80075ea:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80075ee:	d003      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 80075f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075f4:	f47f aefa 	bne.w	80073ec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    if(ret == HAL_OK)
 80075f8:	b9a4      	cbnz	r4, 8007624 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075fa:	4a28      	ldr	r2, [pc, #160]	; (800769c <HAL_RCCEx_PeriphCLKConfig+0x850>)
 80075fc:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 8007600:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007602:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8007606:	430b      	orrs	r3, r1
 8007608:	6553      	str	r3, [r2, #84]	; 0x54
 800760a:	e6f1      	b.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800760c:	2100      	movs	r1, #0
 800760e:	1d28      	adds	r0, r5, #4
 8007610:	f7ff fb2c 	bl	8006c6c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007614:	4604      	mov	r4, r0
      break;
 8007616:	e7ef      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007618:	2102      	movs	r1, #2
 800761a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800761e:	f7ff fb9d 	bl	8006d5c <RCCEx_PLL3_Config>
 8007622:	e7f7      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8007624:	4626      	mov	r6, r4
 8007626:	e6e3      	b.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007628:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800762c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8007630:	d003      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x7ee>
 8007632:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007636:	f47f aeed 	bne.w	8007414 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    if(ret == HAL_OK)
 800763a:	b9a4      	cbnz	r4, 8007666 <HAL_RCCEx_PeriphCLKConfig+0x81a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800763c:	4a17      	ldr	r2, [pc, #92]	; (800769c <HAL_RCCEx_PeriphCLKConfig+0x850>)
 800763e:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 8007642:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007644:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8007648:	430b      	orrs	r3, r1
 800764a:	6593      	str	r3, [r2, #88]	; 0x58
 800764c:	e6e4      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800764e:	2100      	movs	r1, #0
 8007650:	1d28      	adds	r0, r5, #4
 8007652:	f7ff fb0b 	bl	8006c6c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007656:	4604      	mov	r4, r0
      break;
 8007658:	e7ef      	b.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x7ee>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800765a:	2102      	movs	r1, #2
 800765c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007660:	f7ff fb7c 	bl	8006d5c <RCCEx_PLL3_Config>
 8007664:	e7f7      	b.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007666:	4626      	mov	r6, r4
 8007668:	e6d6      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800766a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800766e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007672:	d003      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x830>
 8007674:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007678:	f47f aee0 	bne.w	800743c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    if(ret == HAL_OK)
 800767c:	b9b4      	cbnz	r4, 80076ac <HAL_RCCEx_PeriphCLKConfig+0x860>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800767e:	4a07      	ldr	r2, [pc, #28]	; (800769c <HAL_RCCEx_PeriphCLKConfig+0x850>)
 8007680:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 8007684:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007686:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800768a:	430b      	orrs	r3, r1
 800768c:	6593      	str	r3, [r2, #88]	; 0x58
 800768e:	e6d7      	b.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007690:	2100      	movs	r1, #0
 8007692:	1d28      	adds	r0, r5, #4
 8007694:	f7ff faea 	bl	8006c6c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007698:	4604      	mov	r4, r0
      break;
 800769a:	e7ef      	b.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x830>
 800769c:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80076a0:	2102      	movs	r1, #2
 80076a2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80076a6:	f7ff fb59 	bl	8006d5c <RCCEx_PLL3_Config>
 80076aa:	e7f5      	b.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 80076ac:	4626      	mov	r6, r4
 80076ae:	e6c7      	b.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80076b0:	2102      	movs	r1, #2
 80076b2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80076b6:	f7ff fb51 	bl	8006d5c <RCCEx_PLL3_Config>
 80076ba:	e701      	b.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x674>
    switch(PeriphClkInit->AdcClockSelection)
 80076bc:	2601      	movs	r6, #1
 80076be:	4634      	mov	r4, r6
 80076c0:	e70a      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80076c2:	4626      	mov	r6, r4
 80076c4:	e708      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80076c6:	2101      	movs	r1, #1
 80076c8:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80076cc:	f7ff fb46 	bl	8006d5c <RCCEx_PLL3_Config>
 80076d0:	4604      	mov	r4, r0
      break;
 80076d2:	e716      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
    switch(PeriphClkInit->UsbClockSelection)
 80076d4:	2601      	movs	r6, #1
 80076d6:	4634      	mov	r4, r6
 80076d8:	e71e      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 80076da:	4626      	mov	r6, r4
 80076dc:	e71c      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076de:	4a16      	ldr	r2, [pc, #88]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80076e0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80076e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076e6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80076e8:	b96c      	cbnz	r4, 8007706 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80076ea:	4a13      	ldr	r2, [pc, #76]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80076ec:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80076ee:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80076f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076f4:	430b      	orrs	r3, r1
 80076f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80076f8:	e71b      	b.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80076fa:	2102      	movs	r1, #2
 80076fc:	1d28      	adds	r0, r5, #4
 80076fe:	f7ff fab5 	bl	8006c6c <RCCEx_PLL2_Config>
 8007702:	4604      	mov	r4, r0
      break;
 8007704:	e7f0      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 8007706:	4626      	mov	r6, r4
 8007708:	e713      	b.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->RngClockSelection)
 800770a:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800770e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8007712:	f47f af26 	bne.w	8007562 <HAL_RCCEx_PeriphCLKConfig+0x716>
    if(ret == HAL_OK)
 8007716:	b964      	cbnz	r4, 8007732 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007718:	4807      	ldr	r0, [pc, #28]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800771a:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800771c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007720:	430a      	orrs	r2, r1
 8007722:	6542      	str	r2, [r0, #84]	; 0x54
 8007724:	e71e      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x718>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007726:	4804      	ldr	r0, [pc, #16]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007728:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800772a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800772e:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 8007730:	e7f1      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 8007732:	4626      	mov	r6, r4
 8007734:	e716      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x718>
 8007736:	bf00      	nop
 8007738:	58024400 	.word	0x58024400

0800773c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800773c:	4770      	bx	lr
	...

08007740 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007740:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007744:	2b01      	cmp	r3, #1
 8007746:	d13b      	bne.n	80077c0 <HAL_TIM_Base_Start_IT+0x80>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007748:	2302      	movs	r3, #2
 800774a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800774e:	6803      	ldr	r3, [r0, #0]
 8007750:	68da      	ldr	r2, [r3, #12]
 8007752:	f042 0201 	orr.w	r2, r2, #1
 8007756:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007758:	4a1a      	ldr	r2, [pc, #104]	; (80077c4 <HAL_TIM_Base_Start_IT+0x84>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d022      	beq.n	80077a4 <HAL_TIM_Base_Start_IT+0x64>
 800775e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007762:	d01f      	beq.n	80077a4 <HAL_TIM_Base_Start_IT+0x64>
 8007764:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007768:	4293      	cmp	r3, r2
 800776a:	d01b      	beq.n	80077a4 <HAL_TIM_Base_Start_IT+0x64>
 800776c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007770:	4293      	cmp	r3, r2
 8007772:	d017      	beq.n	80077a4 <HAL_TIM_Base_Start_IT+0x64>
 8007774:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007778:	4293      	cmp	r3, r2
 800777a:	d013      	beq.n	80077a4 <HAL_TIM_Base_Start_IT+0x64>
 800777c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8007780:	4293      	cmp	r3, r2
 8007782:	d00f      	beq.n	80077a4 <HAL_TIM_Base_Start_IT+0x64>
 8007784:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8007788:	4293      	cmp	r3, r2
 800778a:	d00b      	beq.n	80077a4 <HAL_TIM_Base_Start_IT+0x64>
 800778c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8007790:	4293      	cmp	r3, r2
 8007792:	d007      	beq.n	80077a4 <HAL_TIM_Base_Start_IT+0x64>
 8007794:	f5a2 42c0 	sub.w	r2, r2, #24576	; 0x6000
 8007798:	4293      	cmp	r3, r2
 800779a:	d003      	beq.n	80077a4 <HAL_TIM_Base_Start_IT+0x64>
 800779c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d107      	bne.n	80077b4 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077a4:	6899      	ldr	r1, [r3, #8]
 80077a6:	4a08      	ldr	r2, [pc, #32]	; (80077c8 <HAL_TIM_Base_Start_IT+0x88>)
 80077a8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077aa:	2a06      	cmp	r2, #6
 80077ac:	d006      	beq.n	80077bc <HAL_TIM_Base_Start_IT+0x7c>
 80077ae:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80077b2:	d003      	beq.n	80077bc <HAL_TIM_Base_Start_IT+0x7c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	f042 0201 	orr.w	r2, r2, #1
 80077ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077bc:	2000      	movs	r0, #0
}
 80077be:	4770      	bx	lr
    return HAL_ERROR;
 80077c0:	2001      	movs	r0, #1
 80077c2:	4770      	bx	lr
 80077c4:	40010000 	.word	0x40010000
 80077c8:	00010007 	.word	0x00010007

080077cc <HAL_TIM_OC_DelayElapsedCallback>:
 80077cc:	4770      	bx	lr

080077ce <HAL_TIM_IC_CaptureCallback>:
 80077ce:	4770      	bx	lr

080077d0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80077d0:	4770      	bx	lr

080077d2 <HAL_TIM_TriggerCallback>:
 80077d2:	4770      	bx	lr

080077d4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077d4:	6803      	ldr	r3, [r0, #0]
 80077d6:	691a      	ldr	r2, [r3, #16]
 80077d8:	0791      	lsls	r1, r2, #30
{
 80077da:	b510      	push	{r4, lr}
 80077dc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077de:	d50f      	bpl.n	8007800 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80077e0:	68da      	ldr	r2, [r3, #12]
 80077e2:	0792      	lsls	r2, r2, #30
 80077e4:	d50c      	bpl.n	8007800 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80077e6:	f06f 0202 	mvn.w	r2, #2
 80077ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077ec:	2201      	movs	r2, #1
 80077ee:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077f0:	699b      	ldr	r3, [r3, #24]
 80077f2:	0799      	lsls	r1, r3, #30
 80077f4:	f000 8085 	beq.w	8007902 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077f8:	f7ff ffe9 	bl	80077ce <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077fc:	2300      	movs	r3, #0
 80077fe:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007800:	6823      	ldr	r3, [r4, #0]
 8007802:	691a      	ldr	r2, [r3, #16]
 8007804:	0752      	lsls	r2, r2, #29
 8007806:	d510      	bpl.n	800782a <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007808:	68da      	ldr	r2, [r3, #12]
 800780a:	0750      	lsls	r0, r2, #29
 800780c:	d50d      	bpl.n	800782a <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800780e:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007812:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007816:	2202      	movs	r2, #2
 8007818:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800781a:	699b      	ldr	r3, [r3, #24]
 800781c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007820:	d075      	beq.n	800790e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8007822:	f7ff ffd4 	bl	80077ce <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007826:	2300      	movs	r3, #0
 8007828:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800782a:	6823      	ldr	r3, [r4, #0]
 800782c:	691a      	ldr	r2, [r3, #16]
 800782e:	0711      	lsls	r1, r2, #28
 8007830:	d50f      	bpl.n	8007852 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007832:	68da      	ldr	r2, [r3, #12]
 8007834:	0712      	lsls	r2, r2, #28
 8007836:	d50c      	bpl.n	8007852 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007838:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800783c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800783e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007840:	2204      	movs	r2, #4
 8007842:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007844:	69db      	ldr	r3, [r3, #28]
 8007846:	079b      	lsls	r3, r3, #30
 8007848:	d067      	beq.n	800791a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800784a:	f7ff ffc0 	bl	80077ce <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800784e:	2300      	movs	r3, #0
 8007850:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007852:	6823      	ldr	r3, [r4, #0]
 8007854:	691a      	ldr	r2, [r3, #16]
 8007856:	06d0      	lsls	r0, r2, #27
 8007858:	d510      	bpl.n	800787c <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800785a:	68da      	ldr	r2, [r3, #12]
 800785c:	06d1      	lsls	r1, r2, #27
 800785e:	d50d      	bpl.n	800787c <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007860:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007864:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007866:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007868:	2208      	movs	r2, #8
 800786a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800786c:	69db      	ldr	r3, [r3, #28]
 800786e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007872:	d058      	beq.n	8007926 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8007874:	f7ff ffab 	bl	80077ce <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007878:	2300      	movs	r3, #0
 800787a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800787c:	6823      	ldr	r3, [r4, #0]
 800787e:	691a      	ldr	r2, [r3, #16]
 8007880:	07d2      	lsls	r2, r2, #31
 8007882:	d508      	bpl.n	8007896 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007884:	68da      	ldr	r2, [r3, #12]
 8007886:	07d0      	lsls	r0, r2, #31
 8007888:	d505      	bpl.n	8007896 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800788a:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800788e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007890:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007892:	f7f9 f87b 	bl	800098c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007896:	6823      	ldr	r3, [r4, #0]
 8007898:	691a      	ldr	r2, [r3, #16]
 800789a:	0611      	lsls	r1, r2, #24
 800789c:	d508      	bpl.n	80078b0 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800789e:	68da      	ldr	r2, [r3, #12]
 80078a0:	0612      	lsls	r2, r2, #24
 80078a2:	d505      	bpl.n	80078b0 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078a8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078aa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80078ac:	f000 f8e1 	bl	8007a72 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80078b0:	6823      	ldr	r3, [r4, #0]
 80078b2:	691a      	ldr	r2, [r3, #16]
 80078b4:	05d0      	lsls	r0, r2, #23
 80078b6:	d508      	bpl.n	80078ca <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078b8:	68da      	ldr	r2, [r3, #12]
 80078ba:	0611      	lsls	r1, r2, #24
 80078bc:	d505      	bpl.n	80078ca <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80078be:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80078c2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80078c4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80078c6:	f000 f8d5 	bl	8007a74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80078ca:	6823      	ldr	r3, [r4, #0]
 80078cc:	691a      	ldr	r2, [r3, #16]
 80078ce:	0652      	lsls	r2, r2, #25
 80078d0:	d508      	bpl.n	80078e4 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80078d2:	68da      	ldr	r2, [r3, #12]
 80078d4:	0650      	lsls	r0, r2, #25
 80078d6:	d505      	bpl.n	80078e4 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078dc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078de:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80078e0:	f7ff ff77 	bl	80077d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078e4:	6823      	ldr	r3, [r4, #0]
 80078e6:	691a      	ldr	r2, [r3, #16]
 80078e8:	0691      	lsls	r1, r2, #26
 80078ea:	d522      	bpl.n	8007932 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078ec:	68da      	ldr	r2, [r3, #12]
 80078ee:	0692      	lsls	r2, r2, #26
 80078f0:	d51f      	bpl.n	8007932 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078f2:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078f6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078f8:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80078fe:	f000 b8b7 	b.w	8007a70 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007902:	f7ff ff63 	bl	80077cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007906:	4620      	mov	r0, r4
 8007908:	f7ff ff62 	bl	80077d0 <HAL_TIM_PWM_PulseFinishedCallback>
 800790c:	e776      	b.n	80077fc <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800790e:	f7ff ff5d 	bl	80077cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007912:	4620      	mov	r0, r4
 8007914:	f7ff ff5c 	bl	80077d0 <HAL_TIM_PWM_PulseFinishedCallback>
 8007918:	e785      	b.n	8007826 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800791a:	f7ff ff57 	bl	80077cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800791e:	4620      	mov	r0, r4
 8007920:	f7ff ff56 	bl	80077d0 <HAL_TIM_PWM_PulseFinishedCallback>
 8007924:	e793      	b.n	800784e <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007926:	f7ff ff51 	bl	80077cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800792a:	4620      	mov	r0, r4
 800792c:	f7ff ff50 	bl	80077d0 <HAL_TIM_PWM_PulseFinishedCallback>
 8007930:	e7a2      	b.n	8007878 <HAL_TIM_IRQHandler+0xa4>
}
 8007932:	bd10      	pop	{r4, pc}

08007934 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007934:	4a34      	ldr	r2, [pc, #208]	; (8007a08 <TIM_Base_SetConfig+0xd4>)
  tmpcr1 = TIMx->CR1;
 8007936:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007938:	4290      	cmp	r0, r2
 800793a:	d012      	beq.n	8007962 <TIM_Base_SetConfig+0x2e>
 800793c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007940:	d00f      	beq.n	8007962 <TIM_Base_SetConfig+0x2e>
 8007942:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007946:	4290      	cmp	r0, r2
 8007948:	d00b      	beq.n	8007962 <TIM_Base_SetConfig+0x2e>
 800794a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800794e:	4290      	cmp	r0, r2
 8007950:	d007      	beq.n	8007962 <TIM_Base_SetConfig+0x2e>
 8007952:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007956:	4290      	cmp	r0, r2
 8007958:	d003      	beq.n	8007962 <TIM_Base_SetConfig+0x2e>
 800795a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800795e:	4290      	cmp	r0, r2
 8007960:	d119      	bne.n	8007996 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8007962:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007968:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800796a:	4a27      	ldr	r2, [pc, #156]	; (8007a08 <TIM_Base_SetConfig+0xd4>)
 800796c:	4290      	cmp	r0, r2
 800796e:	d025      	beq.n	80079bc <TIM_Base_SetConfig+0x88>
 8007970:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007974:	d022      	beq.n	80079bc <TIM_Base_SetConfig+0x88>
 8007976:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800797a:	4290      	cmp	r0, r2
 800797c:	d01e      	beq.n	80079bc <TIM_Base_SetConfig+0x88>
 800797e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007982:	4290      	cmp	r0, r2
 8007984:	d01a      	beq.n	80079bc <TIM_Base_SetConfig+0x88>
 8007986:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800798a:	4290      	cmp	r0, r2
 800798c:	d016      	beq.n	80079bc <TIM_Base_SetConfig+0x88>
 800798e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8007992:	4290      	cmp	r0, r2
 8007994:	d012      	beq.n	80079bc <TIM_Base_SetConfig+0x88>
 8007996:	4a1d      	ldr	r2, [pc, #116]	; (8007a0c <TIM_Base_SetConfig+0xd8>)
 8007998:	4290      	cmp	r0, r2
 800799a:	d00f      	beq.n	80079bc <TIM_Base_SetConfig+0x88>
 800799c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80079a0:	4290      	cmp	r0, r2
 80079a2:	d00b      	beq.n	80079bc <TIM_Base_SetConfig+0x88>
 80079a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80079a8:	4290      	cmp	r0, r2
 80079aa:	d007      	beq.n	80079bc <TIM_Base_SetConfig+0x88>
 80079ac:	f5a2 42d0 	sub.w	r2, r2, #26624	; 0x6800
 80079b0:	4290      	cmp	r0, r2
 80079b2:	d003      	beq.n	80079bc <TIM_Base_SetConfig+0x88>
 80079b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80079b8:	4290      	cmp	r0, r2
 80079ba:	d103      	bne.n	80079c4 <TIM_Base_SetConfig+0x90>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079c0:	68ca      	ldr	r2, [r1, #12]
 80079c2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079c4:	694a      	ldr	r2, [r1, #20]
 80079c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079ca:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80079cc:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079ce:	688b      	ldr	r3, [r1, #8]
 80079d0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079d2:	680b      	ldr	r3, [r1, #0]
 80079d4:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079d6:	4b0c      	ldr	r3, [pc, #48]	; (8007a08 <TIM_Base_SetConfig+0xd4>)
 80079d8:	4298      	cmp	r0, r3
 80079da:	d00f      	beq.n	80079fc <TIM_Base_SetConfig+0xc8>
 80079dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079e0:	4298      	cmp	r0, r3
 80079e2:	d00b      	beq.n	80079fc <TIM_Base_SetConfig+0xc8>
 80079e4:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80079e8:	4298      	cmp	r0, r3
 80079ea:	d007      	beq.n	80079fc <TIM_Base_SetConfig+0xc8>
 80079ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079f0:	4298      	cmp	r0, r3
 80079f2:	d003      	beq.n	80079fc <TIM_Base_SetConfig+0xc8>
 80079f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079f8:	4298      	cmp	r0, r3
 80079fa:	d101      	bne.n	8007a00 <TIM_Base_SetConfig+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079fc:	690b      	ldr	r3, [r1, #16]
 80079fe:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a00:	2301      	movs	r3, #1
 8007a02:	6143      	str	r3, [r0, #20]
}
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	40010000 	.word	0x40010000
 8007a0c:	40014000 	.word	0x40014000

08007a10 <HAL_TIM_Base_Init>:
{
 8007a10:	b510      	push	{r4, lr}
  if (htim == NULL)
 8007a12:	4604      	mov	r4, r0
 8007a14:	b350      	cbz	r0, 8007a6c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8007a16:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007a1a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007a1e:	b91b      	cbnz	r3, 8007a28 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8007a20:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007a24:	f7ff fe8a 	bl	800773c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8007a28:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a2a:	6820      	ldr	r0, [r4, #0]
 8007a2c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8007a2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a32:	f7ff ff7f 	bl	8007934 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a36:	2301      	movs	r3, #1
  return HAL_OK;
 8007a38:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a3a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a3e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007a42:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007a46:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007a4a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007a4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a56:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007a5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a5e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8007a62:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007a66:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8007a6a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007a6c:	2001      	movs	r0, #1
 8007a6e:	e7fc      	b.n	8007a6a <HAL_TIM_Base_Init+0x5a>

08007a70 <HAL_TIMEx_CommutCallback>:
 8007a70:	4770      	bx	lr

08007a72 <HAL_TIMEx_BreakCallback>:
 8007a72:	4770      	bx	lr

08007a74 <HAL_TIMEx_Break2Callback>:
 8007a74:	4770      	bx	lr
	...

08007a78 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007a78:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8007a7a:	4b05      	ldr	r3, [pc, #20]	; (8007a90 <SysTick_Handler+0x18>)
 8007a7c:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007a7e:	f001 fe45 	bl	800970c <xTaskGetSchedulerState>
 8007a82:	2801      	cmp	r0, #1
 8007a84:	d003      	beq.n	8007a8e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8007a86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8007a8a:	f000 bbdb 	b.w	8008244 <xPortSysTickHandler>
}
 8007a8e:	bd08      	pop	{r3, pc}
 8007a90:	e000e010 	.word	0xe000e010

08007a94 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a94:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a98:	b92b      	cbnz	r3, 8007aa6 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8007a9a:	4b06      	ldr	r3, [pc, #24]	; (8007ab4 <osKernelInitialize+0x20>)
 8007a9c:	6818      	ldr	r0, [r3, #0]
 8007a9e:	b928      	cbnz	r0, 8007aac <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007aa4:	4770      	bx	lr
    stat = osErrorISR;
 8007aa6:	f06f 0005 	mvn.w	r0, #5
 8007aaa:	4770      	bx	lr
    } else {
      stat = osError;
 8007aac:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	240021d4 	.word	0x240021d4

08007ab8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007ab8:	b510      	push	{r4, lr}
 8007aba:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8007abe:	b95c      	cbnz	r4, 8007ad8 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8007ac0:	4b08      	ldr	r3, [pc, #32]	; (8007ae4 <osKernelStart+0x2c>)
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	2a01      	cmp	r2, #1
 8007ac6:	d10a      	bne.n	8007ade <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ac8:	4a07      	ldr	r2, [pc, #28]	; (8007ae8 <osKernelStart+0x30>)
 8007aca:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007acc:	2202      	movs	r2, #2
 8007ace:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007ad0:	f001 fcc2 	bl	8009458 <vTaskStartScheduler>
      stat = osOK;
 8007ad4:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8007ad6:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8007ad8:	f06f 0005 	mvn.w	r0, #5
 8007adc:	e7fb      	b.n	8007ad6 <osKernelStart+0x1e>
      stat = osError;
 8007ade:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8007ae2:	e7f8      	b.n	8007ad6 <osKernelStart+0x1e>
 8007ae4:	240021d4 	.word	0x240021d4
 8007ae8:	e000ed00 	.word	0xe000ed00

08007aec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007aee:	4614      	mov	r4, r2
 8007af0:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007af2:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007af4:	460b      	mov	r3, r1
  hTask = NULL;
 8007af6:	9205      	str	r2, [sp, #20]
 8007af8:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8007afc:	b9d2      	cbnz	r2, 8007b34 <osThreadNew+0x48>
 8007afe:	b1c8      	cbz	r0, 8007b34 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8007b00:	2c00      	cmp	r4, #0
 8007b02:	d02f      	beq.n	8007b64 <osThreadNew+0x78>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8007b04:	69a5      	ldr	r5, [r4, #24]
 8007b06:	2d00      	cmp	r5, #0
 8007b08:	bf08      	it	eq
 8007b0a:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007b0c:	1e69      	subs	r1, r5, #1
 8007b0e:	46ac      	mov	ip, r5
 8007b10:	2937      	cmp	r1, #55	; 0x37
 8007b12:	d82b      	bhi.n	8007b6c <osThreadNew+0x80>
 8007b14:	6861      	ldr	r1, [r4, #4]
 8007b16:	07c9      	lsls	r1, r1, #31
 8007b18:	d428      	bmi.n	8007b6c <osThreadNew+0x80>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8007b1a:	6966      	ldr	r6, [r4, #20]
 8007b1c:	b16e      	cbz	r6, 8007b3a <osThreadNew+0x4e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007b1e:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 8007b20:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b22:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 8007b26:	b157      	cbz	r7, 8007b3e <osThreadNew+0x52>
 8007b28:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 8007b2c:	d902      	bls.n	8007b34 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b2e:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b30:	b104      	cbz	r4, 8007b34 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b32:	b9ee      	cbnz	r6, 8007b70 <osThreadNew+0x84>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007b34:	9805      	ldr	r0, [sp, #20]
}
 8007b36:	b007      	add	sp, #28
 8007b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8007b3a:	2280      	movs	r2, #128	; 0x80
 8007b3c:	e7f0      	b.n	8007b20 <osThreadNew+0x34>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007b3e:	f1be 0f00 	cmp.w	lr, #0
 8007b42:	d1f7      	bne.n	8007b34 <osThreadNew+0x48>
      if (mem == 0) {
 8007b44:	6924      	ldr	r4, [r4, #16]
 8007b46:	2c00      	cmp	r4, #0
 8007b48:	d1f4      	bne.n	8007b34 <osThreadNew+0x48>
 8007b4a:	460c      	mov	r4, r1
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007b4c:	a905      	add	r1, sp, #20
 8007b4e:	b292      	uxth	r2, r2
 8007b50:	e9cd c100 	strd	ip, r1, [sp]
 8007b54:	4621      	mov	r1, r4
 8007b56:	f001 faf9 	bl	800914c <xTaskCreate>
 8007b5a:	2801      	cmp	r0, #1
            hTask = NULL;
 8007b5c:	bf1c      	itt	ne
 8007b5e:	2300      	movne	r3, #0
 8007b60:	9305      	strne	r3, [sp, #20]
 8007b62:	e7e7      	b.n	8007b34 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;
 8007b64:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 8007b68:	2280      	movs	r2, #128	; 0x80
 8007b6a:	e7ef      	b.n	8007b4c <osThreadNew+0x60>
        return (NULL);
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	e7e2      	b.n	8007b36 <osThreadNew+0x4a>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b70:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8007b74:	9500      	str	r5, [sp, #0]
 8007b76:	f001 fab1 	bl	80090dc <xTaskCreateStatic>
 8007b7a:	9005      	str	r0, [sp, #20]
 8007b7c:	e7da      	b.n	8007b34 <osThreadNew+0x48>

08007b7e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007b7e:	b510      	push	{r4, lr}
 8007b80:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b84:	b924      	cbnz	r4, 8007b90 <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8007b86:	b110      	cbz	r0, 8007b8e <osDelay+0x10>
      vTaskDelay(ticks);
 8007b88:	f001 fc26 	bl	80093d8 <vTaskDelay>
    stat = osOK;
 8007b8c:	4620      	mov	r0, r4
    }
  }

  return (stat);
}
 8007b8e:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8007b90:	f06f 0005 	mvn.w	r0, #5
 8007b94:	e7fb      	b.n	8007b8e <osDelay+0x10>

08007b96 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007b96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b98:	4604      	mov	r4, r0
 8007b9a:	460e      	mov	r6, r1
 8007b9c:	4615      	mov	r5, r2
 8007b9e:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007ba2:	b11a      	cbz	r2, 8007bac <osSemaphoreNew+0x16>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 8007ba4:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	b003      	add	sp, #12
 8007baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007bac:	2800      	cmp	r0, #0
 8007bae:	d0f9      	beq.n	8007ba4 <osSemaphoreNew+0xe>
 8007bb0:	4288      	cmp	r0, r1
 8007bb2:	d3f7      	bcc.n	8007ba4 <osSemaphoreNew+0xe>
    if (attr != NULL) {
 8007bb4:	b1e5      	cbz	r5, 8007bf0 <osSemaphoreNew+0x5a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007bb6:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 8007bba:	b1bb      	cbz	r3, 8007bec <osSemaphoreNew+0x56>
 8007bbc:	2f4f      	cmp	r7, #79	; 0x4f
 8007bbe:	d9f1      	bls.n	8007ba4 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 8007bc0:	2801      	cmp	r0, #1
 8007bc2:	d12a      	bne.n	8007c1a <osSemaphoreNew+0x84>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007bc4:	2103      	movs	r1, #3
 8007bc6:	9100      	str	r1, [sp, #0]
 8007bc8:	4611      	mov	r1, r2
 8007bca:	f000 fce9 	bl	80085a0 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 8007bce:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007bd0:	2800      	cmp	r0, #0
 8007bd2:	d0e7      	beq.n	8007ba4 <osSemaphoreNew+0xe>
 8007bd4:	b1de      	cbz	r6, 8007c0e <osSemaphoreNew+0x78>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	461a      	mov	r2, r3
 8007bda:	4619      	mov	r1, r3
 8007bdc:	f000 fd96 	bl	800870c <xQueueGenericSend>
 8007be0:	2801      	cmp	r0, #1
 8007be2:	d014      	beq.n	8007c0e <osSemaphoreNew+0x78>
            vSemaphoreDelete (hSemaphore);
 8007be4:	4620      	mov	r0, r4
 8007be6:	f001 f8d7 	bl	8008d98 <vQueueDelete>
 8007bea:	e7db      	b.n	8007ba4 <osSemaphoreNew+0xe>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007bec:	2f00      	cmp	r7, #0
 8007bee:	d1d9      	bne.n	8007ba4 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 8007bf0:	2c01      	cmp	r4, #1
 8007bf2:	d105      	bne.n	8007c00 <osSemaphoreNew+0x6a>
            hSemaphore = xSemaphoreCreateBinary();
 8007bf4:	2203      	movs	r2, #3
 8007bf6:	2100      	movs	r1, #0
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	f000 fd1f 	bl	800863c <xQueueGenericCreate>
 8007bfe:	e7e6      	b.n	8007bce <osSemaphoreNew+0x38>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007c00:	4620      	mov	r0, r4
 8007c02:	4631      	mov	r1, r6
 8007c04:	f000 fd63 	bl	80086ce <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8007c08:	4604      	mov	r4, r0
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	d0ca      	beq.n	8007ba4 <osSemaphoreNew+0xe>
        if (attr != NULL) {
 8007c0e:	b955      	cbnz	r5, 8007c26 <osSemaphoreNew+0x90>
        vQueueAddToRegistry (hSemaphore, name);
 8007c10:	4629      	mov	r1, r5
 8007c12:	4620      	mov	r0, r4
 8007c14:	f001 f896 	bl	8008d44 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 8007c18:	e7c5      	b.n	8007ba6 <osSemaphoreNew+0x10>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	f000 fd35 	bl	800868a <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8007c20:	4604      	mov	r4, r0
 8007c22:	2800      	cmp	r0, #0
 8007c24:	d0be      	beq.n	8007ba4 <osSemaphoreNew+0xe>
          name = attr->name;
 8007c26:	682d      	ldr	r5, [r5, #0]
 8007c28:	e7f2      	b.n	8007c10 <osSemaphoreNew+0x7a>
	...

08007c2c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007c2c:	b513      	push	{r0, r1, r4, lr}
 8007c2e:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8007c30:	b1f8      	cbz	r0, 8007c72 <osSemaphoreAcquire+0x46>
 8007c32:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8007c36:	b1a3      	cbz	r3, 8007c62 <osSemaphoreAcquire+0x36>
    if (timeout != 0U) {
 8007c38:	b9d9      	cbnz	r1, 8007c72 <osSemaphoreAcquire+0x46>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007c3a:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8007c3c:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007c3e:	f001 f831 	bl	8008ca4 <xQueueReceiveFromISR>
 8007c42:	2801      	cmp	r0, #1
 8007c44:	d112      	bne.n	8007c6c <osSemaphoreAcquire+0x40>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8007c46:	9b01      	ldr	r3, [sp, #4]
 8007c48:	b913      	cbnz	r3, 8007c50 <osSemaphoreAcquire+0x24>
  stat = osOK;
 8007c4a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8007c4c:	b002      	add	sp, #8
 8007c4e:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 8007c50:	4b0b      	ldr	r3, [pc, #44]	; (8007c80 <osSemaphoreAcquire+0x54>)
 8007c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c56:	601a      	str	r2, [r3, #0]
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	e7f3      	b.n	8007c4a <osSemaphoreAcquire+0x1e>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007c62:	f000 ff5b 	bl	8008b1c <xQueueSemaphoreTake>
 8007c66:	2801      	cmp	r0, #1
 8007c68:	d0ef      	beq.n	8007c4a <osSemaphoreAcquire+0x1e>
      if (timeout != 0U) {
 8007c6a:	b92c      	cbnz	r4, 8007c78 <osSemaphoreAcquire+0x4c>
        stat = osErrorResource;
 8007c6c:	f06f 0002 	mvn.w	r0, #2
 8007c70:	e7ec      	b.n	8007c4c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007c72:	f06f 0003 	mvn.w	r0, #3
 8007c76:	e7e9      	b.n	8007c4c <osSemaphoreAcquire+0x20>
        stat = osErrorTimeout;
 8007c78:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8007c7c:	e7e6      	b.n	8007c4c <osSemaphoreAcquire+0x20>
 8007c7e:	bf00      	nop
 8007c80:	e000ed04 	.word	0xe000ed04

08007c84 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007c84:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8007c86:	b300      	cbz	r0, 8007cca <osSemaphoreRelease+0x46>
 8007c88:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8007c8c:	b1a3      	cbz	r3, 8007cb8 <osSemaphoreRelease+0x34>
    yield = pdFALSE;
 8007c8e:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007c90:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8007c92:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007c94:	f000 fe4e 	bl	8008934 <xQueueGiveFromISR>
 8007c98:	2801      	cmp	r0, #1
 8007c9a:	d113      	bne.n	8007cc4 <osSemaphoreRelease+0x40>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 8007c9c:	9b01      	ldr	r3, [sp, #4]
 8007c9e:	b913      	cbnz	r3, 8007ca6 <osSemaphoreRelease+0x22>
  stat = osOK;
 8007ca0:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 8007ca2:	b002      	add	sp, #8
 8007ca4:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 8007ca6:	4b0a      	ldr	r3, [pc, #40]	; (8007cd0 <osSemaphoreRelease+0x4c>)
 8007ca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cac:	601a      	str	r2, [r3, #0]
 8007cae:	f3bf 8f4f 	dsb	sy
 8007cb2:	f3bf 8f6f 	isb	sy
 8007cb6:	e7f3      	b.n	8007ca0 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007cb8:	461a      	mov	r2, r3
 8007cba:	4619      	mov	r1, r3
 8007cbc:	f000 fd26 	bl	800870c <xQueueGenericSend>
 8007cc0:	2801      	cmp	r0, #1
 8007cc2:	d0ed      	beq.n	8007ca0 <osSemaphoreRelease+0x1c>
      stat = osErrorResource;
 8007cc4:	f06f 0002 	mvn.w	r0, #2
 8007cc8:	e7eb      	b.n	8007ca2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007cca:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8007cce:	e7e8      	b.n	8007ca2 <osSemaphoreRelease+0x1e>
 8007cd0:	e000ed04 	.word	0xe000ed04

08007cd4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007cd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cd6:	4606      	mov	r6, r0
 8007cd8:	460d      	mov	r5, r1
 8007cda:	4614      	mov	r4, r2
 8007cdc:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007ce0:	b11f      	cbz	r7, 8007cea <osMessageQueueNew+0x16>
  hQueue = NULL;
 8007ce2:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8007ce4:	4628      	mov	r0, r5
 8007ce6:	b003      	add	sp, #12
 8007ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007cea:	2800      	cmp	r0, #0
 8007cec:	d0f9      	beq.n	8007ce2 <osMessageQueueNew+0xe>
 8007cee:	2900      	cmp	r1, #0
 8007cf0:	d0f7      	beq.n	8007ce2 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 8007cf2:	b1da      	cbz	r2, 8007d2c <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007cf4:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 8007cf8:	b183      	cbz	r3, 8007d1c <osMessageQueueNew+0x48>
 8007cfa:	2a4f      	cmp	r2, #79	; 0x4f
 8007cfc:	d9f1      	bls.n	8007ce2 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007cfe:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007d00:	2a00      	cmp	r2, #0
 8007d02:	d0ee      	beq.n	8007ce2 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007d04:	4345      	muls	r5, r0
 8007d06:	6966      	ldr	r6, [r4, #20]
 8007d08:	42ae      	cmp	r6, r5
 8007d0a:	d3ea      	bcc.n	8007ce2 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007d0c:	9700      	str	r7, [sp, #0]
 8007d0e:	f000 fc47 	bl	80085a0 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8007d12:	4605      	mov	r5, r0
 8007d14:	2800      	cmp	r0, #0
 8007d16:	d0e4      	beq.n	8007ce2 <osMessageQueueNew+0xe>
        name = attr->name;
 8007d18:	6824      	ldr	r4, [r4, #0]
 8007d1a:	e011      	b.n	8007d40 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007d1c:	2a00      	cmp	r2, #0
 8007d1e:	d1e0      	bne.n	8007ce2 <osMessageQueueNew+0xe>
 8007d20:	6923      	ldr	r3, [r4, #16]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1dd      	bne.n	8007ce2 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007d26:	6963      	ldr	r3, [r4, #20]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1da      	bne.n	8007ce2 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 8007d2c:	4629      	mov	r1, r5
 8007d2e:	2200      	movs	r2, #0
 8007d30:	4630      	mov	r0, r6
 8007d32:	f000 fc83 	bl	800863c <xQueueGenericCreate>
    if (hQueue != NULL) {
 8007d36:	4605      	mov	r5, r0
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	d0d2      	beq.n	8007ce2 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 8007d3c:	2c00      	cmp	r4, #0
 8007d3e:	d1eb      	bne.n	8007d18 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 8007d40:	4621      	mov	r1, r4
 8007d42:	4628      	mov	r0, r5
 8007d44:	f000 fffe 	bl	8008d44 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8007d48:	e7cc      	b.n	8007ce4 <osMessageQueueNew+0x10>
	...

08007d4c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007d4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d4e:	461c      	mov	r4, r3
 8007d50:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8007d54:	b1b6      	cbz	r6, 8007d84 <osMessageQueuePut+0x38>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007d56:	b308      	cbz	r0, 8007d9c <osMessageQueuePut+0x50>
 8007d58:	b301      	cbz	r1, 8007d9c <osMessageQueuePut+0x50>
 8007d5a:	b9fb      	cbnz	r3, 8007d9c <osMessageQueuePut+0x50>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007d5c:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8007d5e:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007d60:	f000 fd86 	bl	8008870 <xQueueGenericSendFromISR>
 8007d64:	2801      	cmp	r0, #1
 8007d66:	d116      	bne.n	8007d96 <osMessageQueuePut+0x4a>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8007d68:	9b01      	ldr	r3, [sp, #4]
 8007d6a:	b913      	cbnz	r3, 8007d72 <osMessageQueuePut+0x26>
  stat = osOK;
 8007d6c:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8007d6e:	b002      	add	sp, #8
 8007d70:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 8007d72:	4b0d      	ldr	r3, [pc, #52]	; (8007da8 <osMessageQueuePut+0x5c>)
 8007d74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d78:	601a      	str	r2, [r3, #0]
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	f3bf 8f6f 	isb	sy
 8007d82:	e7f3      	b.n	8007d6c <osMessageQueuePut+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007d84:	b150      	cbz	r0, 8007d9c <osMessageQueuePut+0x50>
 8007d86:	b149      	cbz	r1, 8007d9c <osMessageQueuePut+0x50>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007d88:	4633      	mov	r3, r6
 8007d8a:	4622      	mov	r2, r4
 8007d8c:	f000 fcbe 	bl	800870c <xQueueGenericSend>
 8007d90:	2801      	cmp	r0, #1
 8007d92:	d0eb      	beq.n	8007d6c <osMessageQueuePut+0x20>
        if (timeout != 0U) {
 8007d94:	b92c      	cbnz	r4, 8007da2 <osMessageQueuePut+0x56>
          stat = osErrorResource;
 8007d96:	f06f 0002 	mvn.w	r0, #2
 8007d9a:	e7e8      	b.n	8007d6e <osMessageQueuePut+0x22>
      stat = osErrorParameter;
 8007d9c:	f06f 0003 	mvn.w	r0, #3
 8007da0:	e7e5      	b.n	8007d6e <osMessageQueuePut+0x22>
          stat = osErrorTimeout;
 8007da2:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8007da6:	e7e2      	b.n	8007d6e <osMessageQueuePut+0x22>
 8007da8:	e000ed04 	.word	0xe000ed04

08007dac <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007dac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dae:	461c      	mov	r4, r3
 8007db0:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8007db4:	b1b3      	cbz	r3, 8007de4 <osMessageQueueGet+0x38>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007db6:	b300      	cbz	r0, 8007dfa <osMessageQueueGet+0x4e>
 8007db8:	b1f9      	cbz	r1, 8007dfa <osMessageQueueGet+0x4e>
 8007dba:	b9f4      	cbnz	r4, 8007dfa <osMessageQueueGet+0x4e>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007dbc:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8007dbe:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007dc0:	f000 ff70 	bl	8008ca4 <xQueueReceiveFromISR>
 8007dc4:	2801      	cmp	r0, #1
 8007dc6:	d115      	bne.n	8007df4 <osMessageQueueGet+0x48>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8007dc8:	9b01      	ldr	r3, [sp, #4]
 8007dca:	b913      	cbnz	r3, 8007dd2 <osMessageQueueGet+0x26>
  stat = osOK;
 8007dcc:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8007dce:	b003      	add	sp, #12
 8007dd0:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 8007dd2:	4b0d      	ldr	r3, [pc, #52]	; (8007e08 <osMessageQueueGet+0x5c>)
 8007dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dd8:	601a      	str	r2, [r3, #0]
 8007dda:	f3bf 8f4f 	dsb	sy
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	e7f3      	b.n	8007dcc <osMessageQueueGet+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007de4:	b148      	cbz	r0, 8007dfa <osMessageQueueGet+0x4e>
 8007de6:	b141      	cbz	r1, 8007dfa <osMessageQueueGet+0x4e>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007de8:	4622      	mov	r2, r4
 8007dea:	f000 fdf7 	bl	80089dc <xQueueReceive>
 8007dee:	2801      	cmp	r0, #1
 8007df0:	d0ec      	beq.n	8007dcc <osMessageQueueGet+0x20>
        if (timeout != 0U) {
 8007df2:	b92c      	cbnz	r4, 8007e00 <osMessageQueueGet+0x54>
          stat = osErrorResource;
 8007df4:	f06f 0002 	mvn.w	r0, #2
 8007df8:	e7e9      	b.n	8007dce <osMessageQueueGet+0x22>
      stat = osErrorParameter;
 8007dfa:	f06f 0003 	mvn.w	r0, #3
 8007dfe:	e7e6      	b.n	8007dce <osMessageQueueGet+0x22>
          stat = osErrorTimeout;
 8007e00:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8007e04:	e7e3      	b.n	8007dce <osMessageQueueGet+0x22>
 8007e06:	bf00      	nop
 8007e08:	e000ed04 	.word	0xe000ed04

08007e0c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007e0c:	4b03      	ldr	r3, [pc, #12]	; (8007e1c <vApplicationGetIdleTaskMemory+0x10>)
 8007e0e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007e10:	4b03      	ldr	r3, [pc, #12]	; (8007e20 <vApplicationGetIdleTaskMemory+0x14>)
 8007e12:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007e14:	2380      	movs	r3, #128	; 0x80
 8007e16:	6013      	str	r3, [r2, #0]
}
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	24002174 	.word	0x24002174
 8007e20:	24001f74 	.word	0x24001f74

08007e24 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007e24:	4b03      	ldr	r3, [pc, #12]	; (8007e34 <vApplicationGetTimerTaskMemory+0x10>)
 8007e26:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007e28:	4b03      	ldr	r3, [pc, #12]	; (8007e38 <vApplicationGetTimerTaskMemory+0x14>)
 8007e2a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007e2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e30:	6013      	str	r3, [r2, #0]
}
 8007e32:	4770      	bx	lr
 8007e34:	240025d8 	.word	0x240025d8
 8007e38:	240021d8 	.word	0x240021d8

08007e3c <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e3c:	4b0f      	ldr	r3, [pc, #60]	; (8007e7c <prvInsertBlockIntoFreeList+0x40>)
{
 8007e3e:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e40:	461a      	mov	r2, r3
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4283      	cmp	r3, r0
 8007e46:	d3fb      	bcc.n	8007e40 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e48:	6854      	ldr	r4, [r2, #4]
 8007e4a:	1911      	adds	r1, r2, r4
 8007e4c:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e4e:	bf01      	itttt	eq
 8007e50:	6841      	ldreq	r1, [r0, #4]
 8007e52:	4610      	moveq	r0, r2
 8007e54:	1909      	addeq	r1, r1, r4
 8007e56:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e58:	6844      	ldr	r4, [r0, #4]
 8007e5a:	1901      	adds	r1, r0, r4
 8007e5c:	428b      	cmp	r3, r1
 8007e5e:	d107      	bne.n	8007e70 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e60:	4907      	ldr	r1, [pc, #28]	; (8007e80 <prvInsertBlockIntoFreeList+0x44>)
 8007e62:	6809      	ldr	r1, [r1, #0]
 8007e64:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e66:	bf1f      	itttt	ne
 8007e68:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e6a:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e6c:	1909      	addne	r1, r1, r4
 8007e6e:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007e70:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e72:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e74:	bf18      	it	ne
 8007e76:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e78:	bd10      	pop	{r4, pc}
 8007e7a:	bf00      	nop
 8007e7c:	24006250 	.word	0x24006250
 8007e80:	24002638 	.word	0x24002638

08007e84 <pvPortMalloc>:
{
 8007e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e88:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007e8a:	f001 f98d 	bl	80091a8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007e8e:	4b3e      	ldr	r3, [pc, #248]	; (8007f88 <pvPortMalloc+0x104>)
 8007e90:	483e      	ldr	r0, [pc, #248]	; (8007f8c <pvPortMalloc+0x108>)
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	469c      	mov	ip, r3
 8007e96:	b9d2      	cbnz	r2, 8007ece <pvPortMalloc+0x4a>
	uxAddress = ( size_t ) ucHeap;
 8007e98:	4a3d      	ldr	r2, [pc, #244]	; (8007f90 <pvPortMalloc+0x10c>)
	xStart.xBlockSize = ( size_t ) 0;
 8007e9a:	2100      	movs	r1, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e9c:	4b3d      	ldr	r3, [pc, #244]	; (8007f94 <pvPortMalloc+0x110>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e9e:	0755      	lsls	r5, r2, #29
	xStart.xBlockSize = ( size_t ) 0;
 8007ea0:	6059      	str	r1, [r3, #4]
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007ea2:	bf1c      	itt	ne
 8007ea4:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ea6:	f022 0207 	bicne.w	r2, r2, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007eaa:	601a      	str	r2, [r3, #0]
	uxAddress -= xHeapStructSize;
 8007eac:	4b3a      	ldr	r3, [pc, #232]	; (8007f98 <pvPortMalloc+0x114>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007eae:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8007eb2:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007eb6:	1a99      	subs	r1, r3, r2
	pxEnd = ( void * ) uxAddress;
 8007eb8:	f8cc 3000 	str.w	r3, [ip]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ebc:	e9c2 3100 	strd	r3, r1, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ec0:	4b36      	ldr	r3, [pc, #216]	; (8007f9c <pvPortMalloc+0x118>)
 8007ec2:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ec4:	4b36      	ldr	r3, [pc, #216]	; (8007fa0 <pvPortMalloc+0x11c>)
 8007ec6:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ec8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ecc:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ece:	6807      	ldr	r7, [r0, #0]
 8007ed0:	4227      	tst	r7, r4
 8007ed2:	d153      	bne.n	8007f7c <pvPortMalloc+0xf8>
			if( xWantedSize > 0 )
 8007ed4:	2c00      	cmp	r4, #0
 8007ed6:	d044      	beq.n	8007f62 <pvPortMalloc+0xde>
				xWantedSize += xHeapStructSize;
 8007ed8:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007edc:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007ede:	bf1c      	itt	ne
 8007ee0:	f023 0307 	bicne.w	r3, r3, #7
 8007ee4:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d048      	beq.n	8007f7c <pvPortMalloc+0xf8>
 8007eea:	4a2d      	ldr	r2, [pc, #180]	; (8007fa0 <pvPortMalloc+0x11c>)
 8007eec:	6816      	ldr	r6, [r2, #0]
 8007eee:	4690      	mov	r8, r2
 8007ef0:	429e      	cmp	r6, r3
 8007ef2:	d343      	bcc.n	8007f7c <pvPortMalloc+0xf8>
				pxBlock = xStart.pxNextFreeBlock;
 8007ef4:	4a27      	ldr	r2, [pc, #156]	; (8007f94 <pvPortMalloc+0x110>)
 8007ef6:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ef8:	6869      	ldr	r1, [r5, #4]
 8007efa:	4299      	cmp	r1, r3
 8007efc:	d201      	bcs.n	8007f02 <pvPortMalloc+0x7e>
 8007efe:	6828      	ldr	r0, [r5, #0]
 8007f00:	b9a8      	cbnz	r0, 8007f2e <pvPortMalloc+0xaa>
				if( pxBlock != pxEnd )
 8007f02:	f8dc 0000 	ldr.w	r0, [ip]
 8007f06:	42a8      	cmp	r0, r5
 8007f08:	d038      	beq.n	8007f7c <pvPortMalloc+0xf8>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f0a:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f0c:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f0e:	6814      	ldr	r4, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f10:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f12:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f14:	d912      	bls.n	8007f3c <pvPortMalloc+0xb8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f16:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f18:	0742      	lsls	r2, r0, #29
 8007f1a:	d00b      	beq.n	8007f34 <pvPortMalloc+0xb0>
	__asm volatile
 8007f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f20:	f383 8811 	msr	BASEPRI, r3
 8007f24:	f3bf 8f6f 	isb	sy
 8007f28:	f3bf 8f4f 	dsb	sy
 8007f2c:	e7fe      	b.n	8007f2c <pvPortMalloc+0xa8>
 8007f2e:	462a      	mov	r2, r5
 8007f30:	4605      	mov	r5, r0
 8007f32:	e7e1      	b.n	8007ef8 <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f34:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f36:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f38:	f7ff ff80 	bl	8007e3c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f3c:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f3e:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f40:	4916      	ldr	r1, [pc, #88]	; (8007f9c <pvPortMalloc+0x118>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f42:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f44:	431f      	orrs	r7, r3
					xNumberOfSuccessfulAllocations++;
 8007f46:	4a17      	ldr	r2, [pc, #92]	; (8007fa4 <pvPortMalloc+0x120>)
					pxBlock->pxNextFreeBlock = NULL;
 8007f48:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f4a:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8007f4c:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 8007f4e:	6813      	ldr	r3, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f50:	4286      	cmp	r6, r0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f52:	f8c8 6000 	str.w	r6, [r8]
					xNumberOfSuccessfulAllocations++;
 8007f56:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f5a:	bf38      	it	cc
 8007f5c:	600e      	strcc	r6, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f5e:	606f      	str	r7, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 8007f60:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 8007f62:	f001 f9c5 	bl	80092f0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f66:	0763      	lsls	r3, r4, #29
 8007f68:	d00a      	beq.n	8007f80 <pvPortMalloc+0xfc>
 8007f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6e:	f383 8811 	msr	BASEPRI, r3
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	f3bf 8f4f 	dsb	sy
 8007f7a:	e7fe      	b.n	8007f7a <pvPortMalloc+0xf6>
void *pvReturn = NULL;
 8007f7c:	2400      	movs	r4, #0
 8007f7e:	e7f0      	b.n	8007f62 <pvPortMalloc+0xde>
}
 8007f80:	4620      	mov	r0, r4
 8007f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f86:	bf00      	nop
 8007f88:	24002638 	.word	0x24002638
 8007f8c:	2400623c 	.word	0x2400623c
 8007f90:	2400263c 	.word	0x2400263c
 8007f94:	24006250 	.word	0x24006250
 8007f98:	24006234 	.word	0x24006234
 8007f9c:	24006244 	.word	0x24006244
 8007fa0:	24006240 	.word	0x24006240
 8007fa4:	24006248 	.word	0x24006248

08007fa8 <vPortFree>:
{
 8007fa8:	b510      	push	{r4, lr}
	if( pv != NULL )
 8007faa:	4604      	mov	r4, r0
 8007fac:	b390      	cbz	r0, 8008014 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007fae:	4a1a      	ldr	r2, [pc, #104]	; (8008018 <vPortFree+0x70>)
 8007fb0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007fb4:	6812      	ldr	r2, [r2, #0]
 8007fb6:	4213      	tst	r3, r2
 8007fb8:	d108      	bne.n	8007fcc <vPortFree+0x24>
 8007fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbe:	f383 8811 	msr	BASEPRI, r3
 8007fc2:	f3bf 8f6f 	isb	sy
 8007fc6:	f3bf 8f4f 	dsb	sy
 8007fca:	e7fe      	b.n	8007fca <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007fcc:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8007fd0:	b141      	cbz	r1, 8007fe4 <vPortFree+0x3c>
 8007fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd6:	f383 8811 	msr	BASEPRI, r3
 8007fda:	f3bf 8f6f 	isb	sy
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	e7fe      	b.n	8007fe2 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007fe4:	ea23 0302 	bic.w	r3, r3, r2
 8007fe8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8007fec:	f001 f8dc 	bl	80091a8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007ff0:	4a0a      	ldr	r2, [pc, #40]	; (800801c <vPortFree+0x74>)
 8007ff2:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ff6:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007ffa:	6811      	ldr	r1, [r2, #0]
 8007ffc:	440b      	add	r3, r1
 8007ffe:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008000:	f7ff ff1c 	bl	8007e3c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008004:	4a06      	ldr	r2, [pc, #24]	; (8008020 <vPortFree+0x78>)
 8008006:	6813      	ldr	r3, [r2, #0]
 8008008:	3301      	adds	r3, #1
}
 800800a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800800e:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8008010:	f001 b96e 	b.w	80092f0 <xTaskResumeAll>
}
 8008014:	bd10      	pop	{r4, pc}
 8008016:	bf00      	nop
 8008018:	2400623c 	.word	0x2400623c
 800801c:	24006240 	.word	0x24006240
 8008020:	2400624c 	.word	0x2400624c

08008024 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008024:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008028:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800802c:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800802e:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008030:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008034:	2300      	movs	r3, #0
 8008036:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008038:	4770      	bx	lr

0800803a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800803a:	2300      	movs	r3, #0
 800803c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800803e:	4770      	bx	lr

08008040 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8008040:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008042:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8008044:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008046:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008048:	689a      	ldr	r2, [r3, #8]
 800804a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800804c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800804e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8008050:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8008052:	3301      	adds	r3, #1
 8008054:	6003      	str	r3, [r0, #0]
}
 8008056:	4770      	bx	lr

08008058 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008058:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800805a:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800805c:	1c63      	adds	r3, r4, #1
 800805e:	d10a      	bne.n	8008076 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008060:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008062:	685a      	ldr	r2, [r3, #4]
 8008064:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008066:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008068:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800806a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800806c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800806e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8008070:	3301      	adds	r3, #1
 8008072:	6003      	str	r3, [r0, #0]
}
 8008074:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008076:	f100 0208 	add.w	r2, r0, #8
 800807a:	4613      	mov	r3, r2
 800807c:	6852      	ldr	r2, [r2, #4]
 800807e:	6815      	ldr	r5, [r2, #0]
 8008080:	42a5      	cmp	r5, r4
 8008082:	d9fa      	bls.n	800807a <vListInsert+0x22>
 8008084:	e7ed      	b.n	8008062 <vListInsert+0xa>

08008086 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008086:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008088:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800808c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800808e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008090:	6859      	ldr	r1, [r3, #4]
 8008092:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008094:	bf08      	it	eq
 8008096:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008098:	2200      	movs	r2, #0
 800809a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	3a01      	subs	r2, #1
 80080a0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80080a2:	6818      	ldr	r0, [r3, #0]
}
 80080a4:	4770      	bx	lr
	...

080080a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80080a8:	4808      	ldr	r0, [pc, #32]	; (80080cc <prvPortStartFirstTask+0x24>)
 80080aa:	6800      	ldr	r0, [r0, #0]
 80080ac:	6800      	ldr	r0, [r0, #0]
 80080ae:	f380 8808 	msr	MSP, r0
 80080b2:	f04f 0000 	mov.w	r0, #0
 80080b6:	f380 8814 	msr	CONTROL, r0
 80080ba:	b662      	cpsie	i
 80080bc:	b661      	cpsie	f
 80080be:	f3bf 8f4f 	dsb	sy
 80080c2:	f3bf 8f6f 	isb	sy
 80080c6:	df00      	svc	0
 80080c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80080ca:	0000      	.short	0x0000
 80080cc:	e000ed08 	.word	0xe000ed08

080080d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80080d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80080e0 <vPortEnableVFP+0x10>
 80080d4:	6801      	ldr	r1, [r0, #0]
 80080d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80080da:	6001      	str	r1, [r0, #0]
 80080dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80080de:	0000      	.short	0x0000
 80080e0:	e000ed88 	.word	0xe000ed88

080080e4 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 80080e4:	2300      	movs	r3, #0
{
 80080e6:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80080e8:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80080ea:	4b0d      	ldr	r3, [pc, #52]	; (8008120 <prvTaskExitError+0x3c>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	3301      	adds	r3, #1
 80080f0:	d008      	beq.n	8008104 <prvTaskExitError+0x20>
 80080f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f6:	f383 8811 	msr	BASEPRI, r3
 80080fa:	f3bf 8f6f 	isb	sy
 80080fe:	f3bf 8f4f 	dsb	sy
 8008102:	e7fe      	b.n	8008102 <prvTaskExitError+0x1e>
 8008104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008108:	f383 8811 	msr	BASEPRI, r3
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8008114:	9b01      	ldr	r3, [sp, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d0fc      	beq.n	8008114 <prvTaskExitError+0x30>
}
 800811a:	b002      	add	sp, #8
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	2400007c 	.word	0x2400007c

08008124 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008124:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008128:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800812c:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8008130:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008132:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008134:	4b03      	ldr	r3, [pc, #12]	; (8008144 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008136:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008138:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800813a:	f06f 0302 	mvn.w	r3, #2
 800813e:	6203      	str	r3, [r0, #32]
}
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	080080e5 	.word	0x080080e5
	...

08008150 <SVC_Handler>:
	__asm volatile (
 8008150:	4b07      	ldr	r3, [pc, #28]	; (8008170 <pxCurrentTCBConst2>)
 8008152:	6819      	ldr	r1, [r3, #0]
 8008154:	6808      	ldr	r0, [r1, #0]
 8008156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815a:	f380 8809 	msr	PSP, r0
 800815e:	f3bf 8f6f 	isb	sy
 8008162:	f04f 0000 	mov.w	r0, #0
 8008166:	f380 8811 	msr	BASEPRI, r0
 800816a:	4770      	bx	lr
 800816c:	f3af 8000 	nop.w

08008170 <pxCurrentTCBConst2>:
 8008170:	24006260 	.word	0x24006260

08008174 <vPortEnterCritical>:
 8008174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008178:	f383 8811 	msr	BASEPRI, r3
 800817c:	f3bf 8f6f 	isb	sy
 8008180:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8008184:	4a0a      	ldr	r2, [pc, #40]	; (80081b0 <vPortEnterCritical+0x3c>)
 8008186:	6813      	ldr	r3, [r2, #0]
 8008188:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800818a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800818c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800818e:	d10d      	bne.n	80081ac <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008190:	4b08      	ldr	r3, [pc, #32]	; (80081b4 <vPortEnterCritical+0x40>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008198:	d008      	beq.n	80081ac <vPortEnterCritical+0x38>
 800819a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819e:	f383 8811 	msr	BASEPRI, r3
 80081a2:	f3bf 8f6f 	isb	sy
 80081a6:	f3bf 8f4f 	dsb	sy
 80081aa:	e7fe      	b.n	80081aa <vPortEnterCritical+0x36>
}
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	2400007c 	.word	0x2400007c
 80081b4:	e000ed04 	.word	0xe000ed04

080081b8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80081b8:	4a08      	ldr	r2, [pc, #32]	; (80081dc <vPortExitCritical+0x24>)
 80081ba:	6813      	ldr	r3, [r2, #0]
 80081bc:	b943      	cbnz	r3, 80081d0 <vPortExitCritical+0x18>
 80081be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c2:	f383 8811 	msr	BASEPRI, r3
 80081c6:	f3bf 8f6f 	isb	sy
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	e7fe      	b.n	80081ce <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80081d0:	3b01      	subs	r3, #1
 80081d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80081d4:	b90b      	cbnz	r3, 80081da <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80081d6:	f383 8811 	msr	BASEPRI, r3
}
 80081da:	4770      	bx	lr
 80081dc:	2400007c 	.word	0x2400007c

080081e0 <PendSV_Handler>:
	__asm volatile
 80081e0:	f3ef 8009 	mrs	r0, PSP
 80081e4:	f3bf 8f6f 	isb	sy
 80081e8:	4b15      	ldr	r3, [pc, #84]	; (8008240 <pxCurrentTCBConst>)
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	f01e 0f10 	tst.w	lr, #16
 80081f0:	bf08      	it	eq
 80081f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80081f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081fa:	6010      	str	r0, [r2, #0]
 80081fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008200:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008204:	f380 8811 	msr	BASEPRI, r0
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	f3bf 8f6f 	isb	sy
 8008210:	f001 f96c 	bl	80094ec <vTaskSwitchContext>
 8008214:	f04f 0000 	mov.w	r0, #0
 8008218:	f380 8811 	msr	BASEPRI, r0
 800821c:	bc09      	pop	{r0, r3}
 800821e:	6819      	ldr	r1, [r3, #0]
 8008220:	6808      	ldr	r0, [r1, #0]
 8008222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008226:	f01e 0f10 	tst.w	lr, #16
 800822a:	bf08      	it	eq
 800822c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008230:	f380 8809 	msr	PSP, r0
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	4770      	bx	lr
 800823a:	bf00      	nop
 800823c:	f3af 8000 	nop.w

08008240 <pxCurrentTCBConst>:
 8008240:	24006260 	.word	0x24006260

08008244 <xPortSysTickHandler>:
{
 8008244:	b508      	push	{r3, lr}
	__asm volatile
 8008246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824a:	f383 8811 	msr	BASEPRI, r3
 800824e:	f3bf 8f6f 	isb	sy
 8008252:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8008256:	f000 ffb5 	bl	80091c4 <xTaskIncrementTick>
 800825a:	b118      	cbz	r0, 8008264 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800825c:	4b03      	ldr	r3, [pc, #12]	; (800826c <xPortSysTickHandler+0x28>)
 800825e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008262:	601a      	str	r2, [r3, #0]
	__asm volatile
 8008264:	2300      	movs	r3, #0
 8008266:	f383 8811 	msr	BASEPRI, r3
}
 800826a:	bd08      	pop	{r3, pc}
 800826c:	e000ed04 	.word	0xe000ed04

08008270 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008270:	2300      	movs	r3, #0
 8008272:	4a08      	ldr	r2, [pc, #32]	; (8008294 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008274:	4908      	ldr	r1, [pc, #32]	; (8008298 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008276:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008278:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800827a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800827e:	4b07      	ldr	r3, [pc, #28]	; (800829c <vPortSetupTimerInterrupt+0x2c>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	fbb3 f3f1 	udiv	r3, r3, r1
 8008286:	4906      	ldr	r1, [pc, #24]	; (80082a0 <vPortSetupTimerInterrupt+0x30>)
 8008288:	3b01      	subs	r3, #1
 800828a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800828c:	2307      	movs	r3, #7
 800828e:	6013      	str	r3, [r2, #0]
}
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop
 8008294:	e000e010 	.word	0xe000e010
 8008298:	e000e018 	.word	0xe000e018
 800829c:	2400006c 	.word	0x2400006c
 80082a0:	e000e014 	.word	0xe000e014

080082a4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80082a4:	4b37      	ldr	r3, [pc, #220]	; (8008384 <xPortStartScheduler+0xe0>)
 80082a6:	4a38      	ldr	r2, [pc, #224]	; (8008388 <xPortStartScheduler+0xe4>)
{
 80082a8:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80082aa:	6819      	ldr	r1, [r3, #0]
 80082ac:	4291      	cmp	r1, r2
 80082ae:	d108      	bne.n	80082c2 <xPortStartScheduler+0x1e>
	__asm volatile
 80082b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b4:	f383 8811 	msr	BASEPRI, r3
 80082b8:	f3bf 8f6f 	isb	sy
 80082bc:	f3bf 8f4f 	dsb	sy
 80082c0:	e7fe      	b.n	80082c0 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	4b31      	ldr	r3, [pc, #196]	; (800838c <xPortStartScheduler+0xe8>)
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d108      	bne.n	80082dc <xPortStartScheduler+0x38>
 80082ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ce:	f383 8811 	msr	BASEPRI, r3
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	f3bf 8f4f 	dsb	sy
 80082da:	e7fe      	b.n	80082da <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80082dc:	4b2c      	ldr	r3, [pc, #176]	; (8008390 <xPortStartScheduler+0xec>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082de:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80082e0:	781a      	ldrb	r2, [r3, #0]
 80082e2:	b2d2      	uxtb	r2, r2
 80082e4:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80082e6:	22ff      	movs	r2, #255	; 0xff
 80082e8:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80082ea:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80082ec:	4a29      	ldr	r2, [pc, #164]	; (8008394 <xPortStartScheduler+0xf0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80082f4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80082f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80082fc:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80082fe:	2307      	movs	r3, #7
 8008300:	4a25      	ldr	r2, [pc, #148]	; (8008398 <xPortStartScheduler+0xf4>)
 8008302:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008304:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8008308:	1e5c      	subs	r4, r3, #1
 800830a:	0600      	lsls	r0, r0, #24
 800830c:	d40c      	bmi.n	8008328 <xPortStartScheduler+0x84>
 800830e:	b111      	cbz	r1, 8008316 <xPortStartScheduler+0x72>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008310:	2b03      	cmp	r3, #3
 8008312:	6013      	str	r3, [r2, #0]
 8008314:	d011      	beq.n	800833a <xPortStartScheduler+0x96>
 8008316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831a:	f383 8811 	msr	BASEPRI, r3
 800831e:	f3bf 8f6f 	isb	sy
 8008322:	f3bf 8f4f 	dsb	sy
 8008326:	e7fe      	b.n	8008326 <xPortStartScheduler+0x82>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008328:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800832c:	2101      	movs	r1, #1
 800832e:	005b      	lsls	r3, r3, #1
 8008330:	b2db      	uxtb	r3, r3
 8008332:	f88d 3003 	strb.w	r3, [sp, #3]
 8008336:	4623      	mov	r3, r4
 8008338:	e7e4      	b.n	8008304 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800833a:	f44f 7340 	mov.w	r3, #768	; 0x300
	uxCriticalNesting = 0;
 800833e:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008340:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008342:	9b01      	ldr	r3, [sp, #4]
 8008344:	4a12      	ldr	r2, [pc, #72]	; (8008390 <xPortStartScheduler+0xec>)
 8008346:	b2db      	uxtb	r3, r3
 8008348:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800834a:	4b14      	ldr	r3, [pc, #80]	; (800839c <xPortStartScheduler+0xf8>)
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8008352:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800835a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800835c:	f7ff ff88 	bl	8008270 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8008360:	4b0f      	ldr	r3, [pc, #60]	; (80083a0 <xPortStartScheduler+0xfc>)
 8008362:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8008364:	f7ff feb4 	bl	80080d0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008368:	4a0e      	ldr	r2, [pc, #56]	; (80083a4 <xPortStartScheduler+0x100>)
 800836a:	6813      	ldr	r3, [r2, #0]
 800836c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008370:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8008372:	f7ff fe99 	bl	80080a8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8008376:	f001 f8b9 	bl	80094ec <vTaskSwitchContext>
	prvTaskExitError();
 800837a:	f7ff feb3 	bl	80080e4 <prvTaskExitError>
}
 800837e:	4620      	mov	r0, r4
 8008380:	b002      	add	sp, #8
 8008382:	bd10      	pop	{r4, pc}
 8008384:	e000ed00 	.word	0xe000ed00
 8008388:	410fc271 	.word	0x410fc271
 800838c:	410fc270 	.word	0x410fc270
 8008390:	e000e400 	.word	0xe000e400
 8008394:	24006258 	.word	0x24006258
 8008398:	2400625c 	.word	0x2400625c
 800839c:	e000ed20 	.word	0xe000ed20
 80083a0:	2400007c 	.word	0x2400007c
 80083a4:	e000ef34 	.word	0xe000ef34

080083a8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80083a8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80083ac:	2b0f      	cmp	r3, #15
 80083ae:	d90e      	bls.n	80083ce <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80083b0:	4a10      	ldr	r2, [pc, #64]	; (80083f4 <vPortValidateInterruptPriority+0x4c>)
 80083b2:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80083b4:	4a10      	ldr	r2, [pc, #64]	; (80083f8 <vPortValidateInterruptPriority+0x50>)
 80083b6:	7812      	ldrb	r2, [r2, #0]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d908      	bls.n	80083ce <vPortValidateInterruptPriority+0x26>
 80083bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c0:	f383 8811 	msr	BASEPRI, r3
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	e7fe      	b.n	80083cc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80083ce:	4b0b      	ldr	r3, [pc, #44]	; (80083fc <vPortValidateInterruptPriority+0x54>)
 80083d0:	4a0b      	ldr	r2, [pc, #44]	; (8008400 <vPortValidateInterruptPriority+0x58>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6812      	ldr	r2, [r2, #0]
 80083d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80083da:	4293      	cmp	r3, r2
 80083dc:	d908      	bls.n	80083f0 <vPortValidateInterruptPriority+0x48>
 80083de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e2:	f383 8811 	msr	BASEPRI, r3
 80083e6:	f3bf 8f6f 	isb	sy
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	e7fe      	b.n	80083ee <vPortValidateInterruptPriority+0x46>
	}
 80083f0:	4770      	bx	lr
 80083f2:	bf00      	nop
 80083f4:	e000e3f0 	.word	0xe000e3f0
 80083f8:	24006258 	.word	0x24006258
 80083fc:	e000ed0c 	.word	0xe000ed0c
 8008400:	2400625c 	.word	0x2400625c

08008404 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008404:	b510      	push	{r4, lr}
 8008406:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008408:	f7ff feb4 	bl	8008174 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800840c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800840e:	f7ff fed3 	bl	80081b8 <vPortExitCritical>

	return xReturn;
}
 8008412:	fab4 f084 	clz	r0, r4
 8008416:	0940      	lsrs	r0, r0, #5
 8008418:	bd10      	pop	{r4, pc}

0800841a <prvCopyDataToQueue>:
{
 800841a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841c:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800841e:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8008420:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008422:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008424:	b952      	cbnz	r2, 800843c <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008426:	6807      	ldr	r7, [r0, #0]
 8008428:	bb47      	cbnz	r7, 800847c <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800842a:	6880      	ldr	r0, [r0, #8]
 800842c:	f001 f9c0 	bl	80097b0 <xTaskPriorityDisinherit>
 8008430:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008432:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008434:	3601      	adds	r6, #1
}
 8008436:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008438:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800843a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800843c:	b965      	cbnz	r5, 8008458 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800843e:	6840      	ldr	r0, [r0, #4]
 8008440:	f010 fd9a 	bl	8018f78 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008444:	6863      	ldr	r3, [r4, #4]
 8008446:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008448:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800844a:	68a2      	ldr	r2, [r4, #8]
 800844c:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800844e:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008450:	d3f0      	bcc.n	8008434 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008452:	6823      	ldr	r3, [r4, #0]
 8008454:	6063      	str	r3, [r4, #4]
 8008456:	e7ed      	b.n	8008434 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008458:	68c0      	ldr	r0, [r0, #12]
 800845a:	f010 fd8d 	bl	8018f78 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800845e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008460:	68e3      	ldr	r3, [r4, #12]
 8008462:	4251      	negs	r1, r2
 8008464:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008466:	6822      	ldr	r2, [r4, #0]
 8008468:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800846a:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800846c:	bf3e      	ittt	cc
 800846e:	68a3      	ldrcc	r3, [r4, #8]
 8008470:	185b      	addcc	r3, r3, r1
 8008472:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8008474:	2d02      	cmp	r5, #2
 8008476:	d101      	bne.n	800847c <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008478:	b116      	cbz	r6, 8008480 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800847a:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800847c:	2500      	movs	r5, #0
 800847e:	e7d9      	b.n	8008434 <prvCopyDataToQueue+0x1a>
 8008480:	4635      	mov	r5, r6
 8008482:	e7d7      	b.n	8008434 <prvCopyDataToQueue+0x1a>

08008484 <prvCopyDataFromQueue>:
{
 8008484:	4603      	mov	r3, r0
 8008486:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008488:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800848a:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800848c:	b162      	cbz	r2, 80084a8 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800848e:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008490:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008492:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008494:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008496:	60dc      	str	r4, [r3, #12]
}
 8008498:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800849c:	bf24      	itt	cs
 800849e:	6819      	ldrcs	r1, [r3, #0]
 80084a0:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80084a2:	68d9      	ldr	r1, [r3, #12]
 80084a4:	f010 bd68 	b.w	8018f78 <memcpy>
}
 80084a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084ac:	4770      	bx	lr

080084ae <prvUnlockQueue>:
{
 80084ae:	b570      	push	{r4, r5, r6, lr}
 80084b0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80084b2:	f7ff fe5f 	bl	8008174 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80084b6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084ba:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80084be:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084c0:	2d00      	cmp	r5, #0
 80084c2:	dc14      	bgt.n	80084ee <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80084c4:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084c6:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 80084ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80084ce:	f7ff fe73 	bl	80081b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80084d2:	f7ff fe4f 	bl	8008174 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80084d6:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80084da:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80084dc:	2d00      	cmp	r5, #0
 80084de:	dc12      	bgt.n	8008506 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80084e0:	23ff      	movs	r3, #255	; 0xff
 80084e2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80084e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80084ea:	f7ff be65 	b.w	80081b8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d0e7      	beq.n	80084c4 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084f4:	4630      	mov	r0, r6
 80084f6:	f001 f877 	bl	80095e8 <xTaskRemoveFromEventList>
 80084fa:	b108      	cbz	r0, 8008500 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80084fc:	f001 f900 	bl	8009700 <vTaskMissedYield>
			--cTxLock;
 8008500:	3d01      	subs	r5, #1
 8008502:	b26d      	sxtb	r5, r5
 8008504:	e7dc      	b.n	80084c0 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008506:	6923      	ldr	r3, [r4, #16]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d0e9      	beq.n	80084e0 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800850c:	4630      	mov	r0, r6
 800850e:	f001 f86b 	bl	80095e8 <xTaskRemoveFromEventList>
 8008512:	b108      	cbz	r0, 8008518 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8008514:	f001 f8f4 	bl	8009700 <vTaskMissedYield>
				--cRxLock;
 8008518:	3d01      	subs	r5, #1
 800851a:	b26d      	sxtb	r5, r5
 800851c:	e7de      	b.n	80084dc <prvUnlockQueue+0x2e>
	...

08008520 <xQueueGenericReset>:
{
 8008520:	b538      	push	{r3, r4, r5, lr}
 8008522:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8008524:	4604      	mov	r4, r0
 8008526:	b940      	cbnz	r0, 800853a <xQueueGenericReset+0x1a>
 8008528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852c:	f383 8811 	msr	BASEPRI, r3
 8008530:	f3bf 8f6f 	isb	sy
 8008534:	f3bf 8f4f 	dsb	sy
 8008538:	e7fe      	b.n	8008538 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800853a:	f7ff fe1b 	bl	8008174 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800853e:	6822      	ldr	r2, [r4, #0]
 8008540:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008544:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008546:	434b      	muls	r3, r1
 8008548:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800854a:	1a5b      	subs	r3, r3, r1
 800854c:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800854e:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008550:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008552:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008554:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008556:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8008558:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800855c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8008560:	b995      	cbnz	r5, 8008588 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008562:	6923      	ldr	r3, [r4, #16]
 8008564:	b163      	cbz	r3, 8008580 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008566:	f104 0010 	add.w	r0, r4, #16
 800856a:	f001 f83d 	bl	80095e8 <xTaskRemoveFromEventList>
 800856e:	b138      	cbz	r0, 8008580 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8008570:	4b0a      	ldr	r3, [pc, #40]	; (800859c <xQueueGenericReset+0x7c>)
 8008572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008576:	601a      	str	r2, [r3, #0]
 8008578:	f3bf 8f4f 	dsb	sy
 800857c:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8008580:	f7ff fe1a 	bl	80081b8 <vPortExitCritical>
}
 8008584:	2001      	movs	r0, #1
 8008586:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008588:	f104 0010 	add.w	r0, r4, #16
 800858c:	f7ff fd4a 	bl	8008024 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008590:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008594:	f7ff fd46 	bl	8008024 <vListInitialise>
 8008598:	e7f2      	b.n	8008580 <xQueueGenericReset+0x60>
 800859a:	bf00      	nop
 800859c:	e000ed04 	.word	0xe000ed04

080085a0 <xQueueGenericCreateStatic>:
	{
 80085a0:	b513      	push	{r0, r1, r4, lr}
 80085a2:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80085a4:	b940      	cbnz	r0, 80085b8 <xQueueGenericCreateStatic+0x18>
 80085a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085aa:	f383 8811 	msr	BASEPRI, r3
 80085ae:	f3bf 8f6f 	isb	sy
 80085b2:	f3bf 8f4f 	dsb	sy
 80085b6:	e7fe      	b.n	80085b6 <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 80085b8:	b943      	cbnz	r3, 80085cc <xQueueGenericCreateStatic+0x2c>
 80085ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085be:	f383 8811 	msr	BASEPRI, r3
 80085c2:	f3bf 8f6f 	isb	sy
 80085c6:	f3bf 8f4f 	dsb	sy
 80085ca:	e7fe      	b.n	80085ca <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80085cc:	b14a      	cbz	r2, 80085e2 <xQueueGenericCreateStatic+0x42>
 80085ce:	b991      	cbnz	r1, 80085f6 <xQueueGenericCreateStatic+0x56>
 80085d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d4:	f383 8811 	msr	BASEPRI, r3
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	e7fe      	b.n	80085e0 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80085e2:	b141      	cbz	r1, 80085f6 <xQueueGenericCreateStatic+0x56>
 80085e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e8:	f383 8811 	msr	BASEPRI, r3
 80085ec:	f3bf 8f6f 	isb	sy
 80085f0:	f3bf 8f4f 	dsb	sy
 80085f4:	e7fe      	b.n	80085f4 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80085f6:	2350      	movs	r3, #80	; 0x50
 80085f8:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80085fa:	9b01      	ldr	r3, [sp, #4]
 80085fc:	2b50      	cmp	r3, #80	; 0x50
 80085fe:	d008      	beq.n	8008612 <xQueueGenericCreateStatic+0x72>
 8008600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008604:	f383 8811 	msr	BASEPRI, r3
 8008608:	f3bf 8f6f 	isb	sy
 800860c:	f3bf 8f4f 	dsb	sy
 8008610:	e7fe      	b.n	8008610 <xQueueGenericCreateStatic+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8008612:	2900      	cmp	r1, #0
 8008614:	bf08      	it	eq
 8008616:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008618:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800861a:	2301      	movs	r3, #1
 800861c:	6022      	str	r2, [r4, #0]
 800861e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8008622:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008626:	4619      	mov	r1, r3
 8008628:	4620      	mov	r0, r4
 800862a:	f7ff ff79 	bl	8008520 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800862e:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 8008632:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8008634:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8008638:	b002      	add	sp, #8
 800863a:	bd10      	pop	{r4, pc}

0800863c <xQueueGenericCreate>:
	{
 800863c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800863e:	460d      	mov	r5, r1
 8008640:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008642:	4606      	mov	r6, r0
 8008644:	b940      	cbnz	r0, 8008658 <xQueueGenericCreate+0x1c>
 8008646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864a:	f383 8811 	msr	BASEPRI, r3
 800864e:	f3bf 8f6f 	isb	sy
 8008652:	f3bf 8f4f 	dsb	sy
 8008656:	e7fe      	b.n	8008656 <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008658:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800865a:	3050      	adds	r0, #80	; 0x50
 800865c:	f7ff fc12 	bl	8007e84 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8008660:	4604      	mov	r4, r0
 8008662:	b170      	cbz	r0, 8008682 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008664:	2300      	movs	r3, #0
 8008666:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800866a:	b165      	cbz	r5, 8008686 <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800866c:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008670:	2101      	movs	r1, #1
 8008672:	4620      	mov	r0, r4
 8008674:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8008676:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800867a:	f7ff ff51 	bl	8008520 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800867e:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8008682:	4620      	mov	r0, r4
 8008684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008686:	4603      	mov	r3, r0
 8008688:	e7f2      	b.n	8008670 <xQueueGenericCreate+0x34>

0800868a <xQueueCreateCountingSemaphoreStatic>:
	{
 800868a:	b513      	push	{r0, r1, r4, lr}
 800868c:	4613      	mov	r3, r2
 800868e:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8008690:	b940      	cbnz	r0, 80086a4 <xQueueCreateCountingSemaphoreStatic+0x1a>
 8008692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008696:	f383 8811 	msr	BASEPRI, r3
 800869a:	f3bf 8f6f 	isb	sy
 800869e:	f3bf 8f4f 	dsb	sy
 80086a2:	e7fe      	b.n	80086a2 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 80086a4:	4288      	cmp	r0, r1
 80086a6:	d208      	bcs.n	80086ba <xQueueCreateCountingSemaphoreStatic+0x30>
 80086a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ac:	f383 8811 	msr	BASEPRI, r3
 80086b0:	f3bf 8f6f 	isb	sy
 80086b4:	f3bf 8f4f 	dsb	sy
 80086b8:	e7fe      	b.n	80086b8 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80086ba:	2202      	movs	r2, #2
 80086bc:	9200      	str	r2, [sp, #0]
 80086be:	2200      	movs	r2, #0
 80086c0:	4611      	mov	r1, r2
 80086c2:	f7ff ff6d 	bl	80085a0 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 80086c6:	b100      	cbz	r0, 80086ca <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80086c8:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80086ca:	b002      	add	sp, #8
 80086cc:	bd10      	pop	{r4, pc}

080086ce <xQueueCreateCountingSemaphore>:
	{
 80086ce:	b510      	push	{r4, lr}
 80086d0:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 80086d2:	b940      	cbnz	r0, 80086e6 <xQueueCreateCountingSemaphore+0x18>
 80086d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d8:	f383 8811 	msr	BASEPRI, r3
 80086dc:	f3bf 8f6f 	isb	sy
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	e7fe      	b.n	80086e4 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 80086e6:	4288      	cmp	r0, r1
 80086e8:	d208      	bcs.n	80086fc <xQueueCreateCountingSemaphore+0x2e>
 80086ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ee:	f383 8811 	msr	BASEPRI, r3
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	e7fe      	b.n	80086fa <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80086fc:	2202      	movs	r2, #2
 80086fe:	2100      	movs	r1, #0
 8008700:	f7ff ff9c 	bl	800863c <xQueueGenericCreate>
		if( xHandle != NULL )
 8008704:	b100      	cbz	r0, 8008708 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008706:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8008708:	bd10      	pop	{r4, pc}
	...

0800870c <xQueueGenericSend>:
{
 800870c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008710:	4688      	mov	r8, r1
 8008712:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8008714:	4604      	mov	r4, r0
{
 8008716:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8008718:	b940      	cbnz	r0, 800872c <xQueueGenericSend+0x20>
 800871a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871e:	f383 8811 	msr	BASEPRI, r3
 8008722:	f3bf 8f6f 	isb	sy
 8008726:	f3bf 8f4f 	dsb	sy
 800872a:	e7fe      	b.n	800872a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800872c:	b951      	cbnz	r1, 8008744 <xQueueGenericSend+0x38>
 800872e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008730:	b143      	cbz	r3, 8008744 <xQueueGenericSend+0x38>
 8008732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008736:	f383 8811 	msr	BASEPRI, r3
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	e7fe      	b.n	8008742 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008744:	2f02      	cmp	r7, #2
 8008746:	d10b      	bne.n	8008760 <xQueueGenericSend+0x54>
 8008748:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800874a:	2b01      	cmp	r3, #1
 800874c:	d008      	beq.n	8008760 <xQueueGenericSend+0x54>
 800874e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008752:	f383 8811 	msr	BASEPRI, r3
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	e7fe      	b.n	800875e <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008760:	f000 ffd4 	bl	800970c <xTaskGetSchedulerState>
 8008764:	4606      	mov	r6, r0
 8008766:	b950      	cbnz	r0, 800877e <xQueueGenericSend+0x72>
 8008768:	9b01      	ldr	r3, [sp, #4]
 800876a:	b14b      	cbz	r3, 8008780 <xQueueGenericSend+0x74>
 800876c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008770:	f383 8811 	msr	BASEPRI, r3
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	e7fe      	b.n	800877c <xQueueGenericSend+0x70>
 800877e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8008780:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 8008784:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800886c <xQueueGenericSend+0x160>
 8008788:	e037      	b.n	80087fa <xQueueGenericSend+0xee>
				if( xTicksToWait == ( TickType_t ) 0 )
 800878a:	9d01      	ldr	r5, [sp, #4]
 800878c:	b91d      	cbnz	r5, 8008796 <xQueueGenericSend+0x8a>
					taskEXIT_CRITICAL();
 800878e:	f7ff fd13 	bl	80081b8 <vPortExitCritical>
			return errQUEUE_FULL;
 8008792:	2000      	movs	r0, #0
 8008794:	e050      	b.n	8008838 <xQueueGenericSend+0x12c>
				else if( xEntryTimeSet == pdFALSE )
 8008796:	b916      	cbnz	r6, 800879e <xQueueGenericSend+0x92>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008798:	a802      	add	r0, sp, #8
 800879a:	f000 ff69 	bl	8009670 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800879e:	f7ff fd0b 	bl	80081b8 <vPortExitCritical>
		vTaskSuspendAll();
 80087a2:	f000 fd01 	bl	80091a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087a6:	f7ff fce5 	bl	8008174 <vPortEnterCritical>
 80087aa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80087ae:	2bff      	cmp	r3, #255	; 0xff
 80087b0:	d101      	bne.n	80087b6 <xQueueGenericSend+0xaa>
 80087b2:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 80087b6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80087ba:	2bff      	cmp	r3, #255	; 0xff
 80087bc:	d101      	bne.n	80087c2 <xQueueGenericSend+0xb6>
 80087be:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 80087c2:	f7ff fcf9 	bl	80081b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087c6:	a901      	add	r1, sp, #4
 80087c8:	a802      	add	r0, sp, #8
 80087ca:	f000 ff5d 	bl	8009688 <xTaskCheckForTimeOut>
 80087ce:	2800      	cmp	r0, #0
 80087d0:	d146      	bne.n	8008860 <xQueueGenericSend+0x154>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087d2:	f7ff fccf 	bl	8008174 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80087d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80087d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80087da:	429a      	cmp	r2, r3
 80087dc:	d12f      	bne.n	800883e <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80087de:	f7ff fceb 	bl	80081b8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80087e2:	9901      	ldr	r1, [sp, #4]
 80087e4:	f104 0010 	add.w	r0, r4, #16
 80087e8:	f000 fec6 	bl	8009578 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80087ec:	4620      	mov	r0, r4
 80087ee:	f7ff fe5e 	bl	80084ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80087f2:	f000 fd7d 	bl	80092f0 <xTaskResumeAll>
 80087f6:	b350      	cbz	r0, 800884e <xQueueGenericSend+0x142>
 80087f8:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80087fa:	f7ff fcbb 	bl	8008174 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008800:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008802:	429a      	cmp	r2, r3
 8008804:	d301      	bcc.n	800880a <xQueueGenericSend+0xfe>
 8008806:	2f02      	cmp	r7, #2
 8008808:	d1bf      	bne.n	800878a <xQueueGenericSend+0x7e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800880a:	463a      	mov	r2, r7
 800880c:	4641      	mov	r1, r8
 800880e:	4620      	mov	r0, r4
 8008810:	f7ff fe03 	bl	800841a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008814:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008816:	b11b      	cbz	r3, 8008820 <xQueueGenericSend+0x114>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008818:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800881c:	f000 fee4 	bl	80095e8 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8008820:	b138      	cbz	r0, 8008832 <xQueueGenericSend+0x126>
						queueYIELD_IF_USING_PREEMPTION();
 8008822:	4b12      	ldr	r3, [pc, #72]	; (800886c <xQueueGenericSend+0x160>)
 8008824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008828:	601a      	str	r2, [r3, #0]
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008832:	f7ff fcc1 	bl	80081b8 <vPortExitCritical>
				return pdPASS;
 8008836:	2001      	movs	r0, #1
}
 8008838:	b004      	add	sp, #16
 800883a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 800883e:	f7ff fcbb 	bl	80081b8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8008842:	4620      	mov	r0, r4
 8008844:	f7ff fe33 	bl	80084ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008848:	f000 fd52 	bl	80092f0 <xTaskResumeAll>
 800884c:	e7d4      	b.n	80087f8 <xQueueGenericSend+0xec>
					portYIELD_WITHIN_API();
 800884e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008852:	f8ca 3000 	str.w	r3, [sl]
 8008856:	f3bf 8f4f 	dsb	sy
 800885a:	f3bf 8f6f 	isb	sy
 800885e:	e7cb      	b.n	80087f8 <xQueueGenericSend+0xec>
			prvUnlockQueue( pxQueue );
 8008860:	4620      	mov	r0, r4
 8008862:	f7ff fe24 	bl	80084ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008866:	f000 fd43 	bl	80092f0 <xTaskResumeAll>
 800886a:	e792      	b.n	8008792 <xQueueGenericSend+0x86>
 800886c:	e000ed04 	.word	0xe000ed04

08008870 <xQueueGenericSendFromISR>:
{
 8008870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008874:	4689      	mov	r9, r1
 8008876:	4690      	mov	r8, r2
 8008878:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800887a:	4604      	mov	r4, r0
 800887c:	b940      	cbnz	r0, 8008890 <xQueueGenericSendFromISR+0x20>
 800887e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008882:	f383 8811 	msr	BASEPRI, r3
 8008886:	f3bf 8f6f 	isb	sy
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	e7fe      	b.n	800888e <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008890:	b951      	cbnz	r1, 80088a8 <xQueueGenericSendFromISR+0x38>
 8008892:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008894:	b143      	cbz	r3, 80088a8 <xQueueGenericSendFromISR+0x38>
 8008896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889a:	f383 8811 	msr	BASEPRI, r3
 800889e:	f3bf 8f6f 	isb	sy
 80088a2:	f3bf 8f4f 	dsb	sy
 80088a6:	e7fe      	b.n	80088a6 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80088a8:	2f02      	cmp	r7, #2
 80088aa:	d10b      	bne.n	80088c4 <xQueueGenericSendFromISR+0x54>
 80088ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d008      	beq.n	80088c4 <xQueueGenericSendFromISR+0x54>
 80088b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b6:	f383 8811 	msr	BASEPRI, r3
 80088ba:	f3bf 8f6f 	isb	sy
 80088be:	f3bf 8f4f 	dsb	sy
 80088c2:	e7fe      	b.n	80088c2 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088c4:	f7ff fd70 	bl	80083a8 <vPortValidateInterruptPriority>
	__asm volatile
 80088c8:	f3ef 8611 	mrs	r6, BASEPRI
 80088cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d0:	f383 8811 	msr	BASEPRI, r3
 80088d4:	f3bf 8f6f 	isb	sy
 80088d8:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80088de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d301      	bcc.n	80088e8 <xQueueGenericSendFromISR+0x78>
 80088e4:	2f02      	cmp	r7, #2
 80088e6:	d123      	bne.n	8008930 <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 80088e8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088ec:	463a      	mov	r2, r7
 80088ee:	4649      	mov	r1, r9
 80088f0:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 80088f2:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088f6:	f7ff fd90 	bl	800841a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80088fa:	1c6b      	adds	r3, r5, #1
 80088fc:	d113      	bne.n	8008926 <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008900:	b90b      	cbnz	r3, 8008906 <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 8008902:	2001      	movs	r0, #1
 8008904:	e00b      	b.n	800891e <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008906:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800890a:	f000 fe6d 	bl	80095e8 <xTaskRemoveFromEventList>
 800890e:	2800      	cmp	r0, #0
 8008910:	d0f7      	beq.n	8008902 <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 8008912:	f1b8 0f00 	cmp.w	r8, #0
 8008916:	d0f4      	beq.n	8008902 <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008918:	2001      	movs	r0, #1
 800891a:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800891e:	f386 8811 	msr	BASEPRI, r6
}
 8008922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008926:	3501      	adds	r5, #1
 8008928:	b26d      	sxtb	r5, r5
 800892a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800892e:	e7e8      	b.n	8008902 <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 8008930:	2000      	movs	r0, #0
 8008932:	e7f4      	b.n	800891e <xQueueGenericSendFromISR+0xae>

08008934 <xQueueGiveFromISR>:
{
 8008934:	b570      	push	{r4, r5, r6, lr}
 8008936:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8008938:	4604      	mov	r4, r0
 800893a:	b940      	cbnz	r0, 800894e <xQueueGiveFromISR+0x1a>
	__asm volatile
 800893c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008940:	f383 8811 	msr	BASEPRI, r3
 8008944:	f3bf 8f6f 	isb	sy
 8008948:	f3bf 8f4f 	dsb	sy
 800894c:	e7fe      	b.n	800894c <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800894e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008950:	b143      	cbz	r3, 8008964 <xQueueGiveFromISR+0x30>
 8008952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008956:	f383 8811 	msr	BASEPRI, r3
 800895a:	f3bf 8f6f 	isb	sy
 800895e:	f3bf 8f4f 	dsb	sy
 8008962:	e7fe      	b.n	8008962 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008964:	6803      	ldr	r3, [r0, #0]
 8008966:	b953      	cbnz	r3, 800897e <xQueueGiveFromISR+0x4a>
 8008968:	6883      	ldr	r3, [r0, #8]
 800896a:	b143      	cbz	r3, 800897e <xQueueGiveFromISR+0x4a>
 800896c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008970:	f383 8811 	msr	BASEPRI, r3
 8008974:	f3bf 8f6f 	isb	sy
 8008978:	f3bf 8f4f 	dsb	sy
 800897c:	e7fe      	b.n	800897c <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800897e:	f7ff fd13 	bl	80083a8 <vPortValidateInterruptPriority>
	__asm volatile
 8008982:	f3ef 8611 	mrs	r6, BASEPRI
 8008986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898a:	f383 8811 	msr	BASEPRI, r3
 800898e:	f3bf 8f6f 	isb	sy
 8008992:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008996:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008998:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800899a:	4293      	cmp	r3, r2
 800899c:	d91c      	bls.n	80089d8 <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800899e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80089a2:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 80089a4:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 80089a6:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80089a8:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80089aa:	d110      	bne.n	80089ce <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089ae:	b90b      	cbnz	r3, 80089b4 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 80089b0:	2001      	movs	r0, #1
 80089b2:	e009      	b.n	80089c8 <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80089b8:	f000 fe16 	bl	80095e8 <xTaskRemoveFromEventList>
 80089bc:	2800      	cmp	r0, #0
 80089be:	d0f7      	beq.n	80089b0 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 80089c0:	2d00      	cmp	r5, #0
 80089c2:	d0f5      	beq.n	80089b0 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80089c4:	2001      	movs	r0, #1
 80089c6:	6028      	str	r0, [r5, #0]
	__asm volatile
 80089c8:	f386 8811 	msr	BASEPRI, r6
}
 80089cc:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80089ce:	3301      	adds	r3, #1
 80089d0:	b25b      	sxtb	r3, r3
 80089d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80089d6:	e7eb      	b.n	80089b0 <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 80089d8:	2000      	movs	r0, #0
 80089da:	e7f5      	b.n	80089c8 <xQueueGiveFromISR+0x94>

080089dc <xQueueReceive>:
{
 80089dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80089e0:	b085      	sub	sp, #20
 80089e2:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 80089e4:	4604      	mov	r4, r0
{
 80089e6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80089e8:	b940      	cbnz	r0, 80089fc <xQueueReceive+0x20>
	__asm volatile
 80089ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ee:	f383 8811 	msr	BASEPRI, r3
 80089f2:	f3bf 8f6f 	isb	sy
 80089f6:	f3bf 8f4f 	dsb	sy
 80089fa:	e7fe      	b.n	80089fa <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089fc:	b951      	cbnz	r1, 8008a14 <xQueueReceive+0x38>
 80089fe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008a00:	b143      	cbz	r3, 8008a14 <xQueueReceive+0x38>
 8008a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a06:	f383 8811 	msr	BASEPRI, r3
 8008a0a:	f3bf 8f6f 	isb	sy
 8008a0e:	f3bf 8f4f 	dsb	sy
 8008a12:	e7fe      	b.n	8008a12 <xQueueReceive+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a14:	f000 fe7a 	bl	800970c <xTaskGetSchedulerState>
 8008a18:	4606      	mov	r6, r0
 8008a1a:	b950      	cbnz	r0, 8008a32 <xQueueReceive+0x56>
 8008a1c:	9b01      	ldr	r3, [sp, #4]
 8008a1e:	b14b      	cbz	r3, 8008a34 <xQueueReceive+0x58>
 8008a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a24:	f383 8811 	msr	BASEPRI, r3
 8008a28:	f3bf 8f6f 	isb	sy
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	e7fe      	b.n	8008a30 <xQueueReceive+0x54>
 8008a32:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8008a34:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8008a38:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8008b18 <xQueueReceive+0x13c>
 8008a3c:	e03b      	b.n	8008ab6 <xQueueReceive+0xda>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a3e:	9d01      	ldr	r5, [sp, #4]
 8008a40:	b91d      	cbnz	r5, 8008a4a <xQueueReceive+0x6e>
					taskEXIT_CRITICAL();
 8008a42:	f7ff fbb9 	bl	80081b8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8008a46:	2000      	movs	r0, #0
 8008a48:	e052      	b.n	8008af0 <xQueueReceive+0x114>
				else if( xEntryTimeSet == pdFALSE )
 8008a4a:	b916      	cbnz	r6, 8008a52 <xQueueReceive+0x76>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a4c:	a802      	add	r0, sp, #8
 8008a4e:	f000 fe0f 	bl	8009670 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008a52:	f7ff fbb1 	bl	80081b8 <vPortExitCritical>
		vTaskSuspendAll();
 8008a56:	f000 fba7 	bl	80091a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a5a:	f7ff fb8b 	bl	8008174 <vPortEnterCritical>
 8008a5e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008a62:	2bff      	cmp	r3, #255	; 0xff
 8008a64:	d101      	bne.n	8008a6a <xQueueReceive+0x8e>
 8008a66:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8008a6a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008a6e:	2bff      	cmp	r3, #255	; 0xff
 8008a70:	d101      	bne.n	8008a76 <xQueueReceive+0x9a>
 8008a72:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8008a76:	f7ff fb9f 	bl	80081b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a7a:	a901      	add	r1, sp, #4
 8008a7c:	a802      	add	r0, sp, #8
 8008a7e:	f000 fe03 	bl	8009688 <xTaskCheckForTimeOut>
 8008a82:	2800      	cmp	r0, #0
 8008a84:	d13d      	bne.n	8008b02 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a86:	4620      	mov	r0, r4
 8008a88:	f7ff fcbc 	bl	8008404 <prvIsQueueEmpty>
 8008a8c:	b398      	cbz	r0, 8008af6 <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008a8e:	9901      	ldr	r1, [sp, #4]
 8008a90:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008a94:	f000 fd70 	bl	8009578 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008a98:	4620      	mov	r0, r4
 8008a9a:	f7ff fd08 	bl	80084ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008a9e:	f000 fc27 	bl	80092f0 <xTaskResumeAll>
 8008aa2:	b938      	cbnz	r0, 8008ab4 <xQueueReceive+0xd8>
					portYIELD_WITHIN_API();
 8008aa4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008aa8:	f8c9 3000 	str.w	r3, [r9]
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	f3bf 8f6f 	isb	sy
 8008ab4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8008ab6:	f7ff fb5d 	bl	8008174 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008aba:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008abc:	2d00      	cmp	r5, #0
 8008abe:	d0be      	beq.n	8008a3e <xQueueReceive+0x62>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ac0:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ac2:	4639      	mov	r1, r7
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	f7ff fcdd 	bl	8008484 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008aca:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008acc:	6923      	ldr	r3, [r4, #16]
 8008ace:	b163      	cbz	r3, 8008aea <xQueueReceive+0x10e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ad0:	f104 0010 	add.w	r0, r4, #16
 8008ad4:	f000 fd88 	bl	80095e8 <xTaskRemoveFromEventList>
 8008ad8:	b138      	cbz	r0, 8008aea <xQueueReceive+0x10e>
						queueYIELD_IF_USING_PREEMPTION();
 8008ada:	4b0f      	ldr	r3, [pc, #60]	; (8008b18 <xQueueReceive+0x13c>)
 8008adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ae0:	601a      	str	r2, [r3, #0]
 8008ae2:	f3bf 8f4f 	dsb	sy
 8008ae6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008aea:	f7ff fb65 	bl	80081b8 <vPortExitCritical>
				return pdPASS;
 8008aee:	2001      	movs	r0, #1
}
 8008af0:	b005      	add	sp, #20
 8008af2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8008af6:	4620      	mov	r0, r4
 8008af8:	f7ff fcd9 	bl	80084ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008afc:	f000 fbf8 	bl	80092f0 <xTaskResumeAll>
 8008b00:	e7d8      	b.n	8008ab4 <xQueueReceive+0xd8>
			prvUnlockQueue( pxQueue );
 8008b02:	4620      	mov	r0, r4
 8008b04:	f7ff fcd3 	bl	80084ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b08:	f000 fbf2 	bl	80092f0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	f7ff fc79 	bl	8008404 <prvIsQueueEmpty>
 8008b12:	2800      	cmp	r0, #0
 8008b14:	d0ce      	beq.n	8008ab4 <xQueueReceive+0xd8>
 8008b16:	e796      	b.n	8008a46 <xQueueReceive+0x6a>
 8008b18:	e000ed04 	.word	0xe000ed04

08008b1c <xQueueSemaphoreTake>:
{
 8008b1c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 8008b20:	4604      	mov	r4, r0
{
 8008b22:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008b24:	b940      	cbnz	r0, 8008b38 <xQueueSemaphoreTake+0x1c>
 8008b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2a:	f383 8811 	msr	BASEPRI, r3
 8008b2e:	f3bf 8f6f 	isb	sy
 8008b32:	f3bf 8f4f 	dsb	sy
 8008b36:	e7fe      	b.n	8008b36 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8008b38:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8008b3a:	b145      	cbz	r5, 8008b4e <xQueueSemaphoreTake+0x32>
 8008b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b40:	f383 8811 	msr	BASEPRI, r3
 8008b44:	f3bf 8f6f 	isb	sy
 8008b48:	f3bf 8f4f 	dsb	sy
 8008b4c:	e7fe      	b.n	8008b4c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b4e:	f000 fddd 	bl	800970c <xTaskGetSchedulerState>
 8008b52:	4606      	mov	r6, r0
 8008b54:	b950      	cbnz	r0, 8008b6c <xQueueSemaphoreTake+0x50>
 8008b56:	9b01      	ldr	r3, [sp, #4]
 8008b58:	b16b      	cbz	r3, 8008b76 <xQueueSemaphoreTake+0x5a>
 8008b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5e:	f383 8811 	msr	BASEPRI, r3
 8008b62:	f3bf 8f6f 	isb	sy
 8008b66:	f3bf 8f4f 	dsb	sy
 8008b6a:	e7fe      	b.n	8008b6a <xQueueSemaphoreTake+0x4e>
 8008b6c:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8008b6e:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8008b70:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8008ca0 <xQueueSemaphoreTake+0x184>
 8008b74:	e051      	b.n	8008c1a <xQueueSemaphoreTake+0xfe>
 8008b76:	4605      	mov	r5, r0
 8008b78:	e7f9      	b.n	8008b6e <xQueueSemaphoreTake+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b7a:	9b01      	ldr	r3, [sp, #4]
 8008b7c:	b963      	cbnz	r3, 8008b98 <xQueueSemaphoreTake+0x7c>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008b7e:	b145      	cbz	r5, 8008b92 <xQueueSemaphoreTake+0x76>
 8008b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b84:	f383 8811 	msr	BASEPRI, r3
 8008b88:	f3bf 8f6f 	isb	sy
 8008b8c:	f3bf 8f4f 	dsb	sy
 8008b90:	e7fe      	b.n	8008b90 <xQueueSemaphoreTake+0x74>
					taskEXIT_CRITICAL();
 8008b92:	f7ff fb11 	bl	80081b8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008b96:	e05e      	b.n	8008c56 <xQueueSemaphoreTake+0x13a>
				else if( xEntryTimeSet == pdFALSE )
 8008b98:	b916      	cbnz	r6, 8008ba0 <xQueueSemaphoreTake+0x84>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b9a:	a802      	add	r0, sp, #8
 8008b9c:	f000 fd68 	bl	8009670 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008ba0:	f7ff fb0a 	bl	80081b8 <vPortExitCritical>
		vTaskSuspendAll();
 8008ba4:	f000 fb00 	bl	80091a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ba8:	f7ff fae4 	bl	8008174 <vPortEnterCritical>
 8008bac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008bb0:	2bff      	cmp	r3, #255	; 0xff
 8008bb2:	d101      	bne.n	8008bb8 <xQueueSemaphoreTake+0x9c>
 8008bb4:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8008bb8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008bbc:	2bff      	cmp	r3, #255	; 0xff
 8008bbe:	d101      	bne.n	8008bc4 <xQueueSemaphoreTake+0xa8>
 8008bc0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008bc4:	f7ff faf8 	bl	80081b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008bc8:	a901      	add	r1, sp, #4
 8008bca:	a802      	add	r0, sp, #8
 8008bcc:	f000 fd5c 	bl	8009688 <xTaskCheckForTimeOut>
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	d14a      	bne.n	8008c6a <xQueueSemaphoreTake+0x14e>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	f7ff fc15 	bl	8008404 <prvIsQueueEmpty>
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	d03f      	beq.n	8008c5e <xQueueSemaphoreTake+0x142>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008bde:	6823      	ldr	r3, [r4, #0]
 8008be0:	b93b      	cbnz	r3, 8008bf2 <xQueueSemaphoreTake+0xd6>
						taskENTER_CRITICAL();
 8008be2:	f7ff fac7 	bl	8008174 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008be6:	68a0      	ldr	r0, [r4, #8]
 8008be8:	f000 fda0 	bl	800972c <xTaskPriorityInherit>
 8008bec:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8008bee:	f7ff fae3 	bl	80081b8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008bf2:	9901      	ldr	r1, [sp, #4]
 8008bf4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008bf8:	f000 fcbe 	bl	8009578 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	f7ff fc56 	bl	80084ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c02:	f000 fb75 	bl	80092f0 <xTaskResumeAll>
 8008c06:	b938      	cbnz	r0, 8008c18 <xQueueSemaphoreTake+0xfc>
					portYIELD_WITHIN_API();
 8008c08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008c0c:	f8c8 3000 	str.w	r3, [r8]
 8008c10:	f3bf 8f4f 	dsb	sy
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8008c1a:	f7ff faab 	bl	8008174 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008c1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d0aa      	beq.n	8008b7a <xQueueSemaphoreTake+0x5e>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008c24:	3b01      	subs	r3, #1
 8008c26:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c28:	6823      	ldr	r3, [r4, #0]
 8008c2a:	b913      	cbnz	r3, 8008c32 <xQueueSemaphoreTake+0x116>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008c2c:	f000 fe56 	bl	80098dc <pvTaskIncrementMutexHeldCount>
 8008c30:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c32:	6923      	ldr	r3, [r4, #16]
 8008c34:	b163      	cbz	r3, 8008c50 <xQueueSemaphoreTake+0x134>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c36:	f104 0010 	add.w	r0, r4, #16
 8008c3a:	f000 fcd5 	bl	80095e8 <xTaskRemoveFromEventList>
 8008c3e:	b138      	cbz	r0, 8008c50 <xQueueSemaphoreTake+0x134>
						queueYIELD_IF_USING_PREEMPTION();
 8008c40:	4b17      	ldr	r3, [pc, #92]	; (8008ca0 <xQueueSemaphoreTake+0x184>)
 8008c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c46:	601a      	str	r2, [r3, #0]
 8008c48:	f3bf 8f4f 	dsb	sy
 8008c4c:	f3bf 8f6f 	isb	sy
				return pdPASS;
 8008c50:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 8008c52:	f7ff fab1 	bl	80081b8 <vPortExitCritical>
}
 8008c56:	4628      	mov	r0, r5
 8008c58:	b004      	add	sp, #16
 8008c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8008c5e:	4620      	mov	r0, r4
 8008c60:	f7ff fc25 	bl	80084ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c64:	f000 fb44 	bl	80092f0 <xTaskResumeAll>
 8008c68:	e7d6      	b.n	8008c18 <xQueueSemaphoreTake+0xfc>
			prvUnlockQueue( pxQueue );
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	f7ff fc1f 	bl	80084ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c70:	f000 fb3e 	bl	80092f0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c74:	4620      	mov	r0, r4
 8008c76:	f7ff fbc5 	bl	8008404 <prvIsQueueEmpty>
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	d0cc      	beq.n	8008c18 <xQueueSemaphoreTake+0xfc>
					if( xInheritanceOccurred != pdFALSE )
 8008c7e:	2d00      	cmp	r5, #0
 8008c80:	d0e9      	beq.n	8008c56 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 8008c82:	f7ff fa77 	bl	8008174 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008c86:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008c88:	b119      	cbz	r1, 8008c92 <xQueueSemaphoreTake+0x176>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008c8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008c8c:	6819      	ldr	r1, [r3, #0]
 8008c8e:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008c92:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8008c94:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008c96:	f000 fdcf 	bl	8009838 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8008c9a:	f7ff fa8d 	bl	80081b8 <vPortExitCritical>
 8008c9e:	e7da      	b.n	8008c56 <xQueueSemaphoreTake+0x13a>
 8008ca0:	e000ed04 	.word	0xe000ed04

08008ca4 <xQueueReceiveFromISR>:
{
 8008ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ca8:	4689      	mov	r9, r1
 8008caa:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8008cac:	4605      	mov	r5, r0
 8008cae:	b940      	cbnz	r0, 8008cc2 <xQueueReceiveFromISR+0x1e>
 8008cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb4:	f383 8811 	msr	BASEPRI, r3
 8008cb8:	f3bf 8f6f 	isb	sy
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	e7fe      	b.n	8008cc0 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cc2:	b951      	cbnz	r1, 8008cda <xQueueReceiveFromISR+0x36>
 8008cc4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008cc6:	b143      	cbz	r3, 8008cda <xQueueReceiveFromISR+0x36>
 8008cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ccc:	f383 8811 	msr	BASEPRI, r3
 8008cd0:	f3bf 8f6f 	isb	sy
 8008cd4:	f3bf 8f4f 	dsb	sy
 8008cd8:	e7fe      	b.n	8008cd8 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008cda:	f7ff fb65 	bl	80083a8 <vPortValidateInterruptPriority>
	__asm volatile
 8008cde:	f3ef 8711 	mrs	r7, BASEPRI
 8008ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce6:	f383 8811 	msr	BASEPRI, r3
 8008cea:	f3bf 8f6f 	isb	sy
 8008cee:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cf2:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008cf4:	b31c      	cbz	r4, 8008d3e <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 8008cf6:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008cfa:	4649      	mov	r1, r9
 8008cfc:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008cfe:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8008d00:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d02:	f7ff fbbf 	bl	8008484 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d06:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8008d08:	1c73      	adds	r3, r6, #1
 8008d0a:	d113      	bne.n	8008d34 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d0c:	692b      	ldr	r3, [r5, #16]
 8008d0e:	b90b      	cbnz	r3, 8008d14 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 8008d10:	2001      	movs	r0, #1
 8008d12:	e00b      	b.n	8008d2c <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d14:	f105 0010 	add.w	r0, r5, #16
 8008d18:	f000 fc66 	bl	80095e8 <xTaskRemoveFromEventList>
 8008d1c:	2800      	cmp	r0, #0
 8008d1e:	d0f7      	beq.n	8008d10 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 8008d20:	f1b8 0f00 	cmp.w	r8, #0
 8008d24:	d0f4      	beq.n	8008d10 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008d26:	2001      	movs	r0, #1
 8008d28:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8008d2c:	f387 8811 	msr	BASEPRI, r7
}
 8008d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008d34:	3601      	adds	r6, #1
 8008d36:	b276      	sxtb	r6, r6
 8008d38:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8008d3c:	e7e8      	b.n	8008d10 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 8008d3e:	4620      	mov	r0, r4
 8008d40:	e7f4      	b.n	8008d2c <xQueueReceiveFromISR+0x88>
	...

08008d44 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d44:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008d46:	4a07      	ldr	r2, [pc, #28]	; (8008d64 <vQueueAddToRegistry+0x20>)
	{
 8008d48:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008d4a:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8008d4e:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8008d52:	b91d      	cbnz	r5, 8008d5c <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008d54:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008d58:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008d5a:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	2b08      	cmp	r3, #8
 8008d60:	d1f3      	bne.n	8008d4a <vQueueAddToRegistry+0x6>
 8008d62:	e7fa      	b.n	8008d5a <vQueueAddToRegistry+0x16>
 8008d64:	24006da8 	.word	0x24006da8

08008d68 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d68:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008d6a:	4909      	ldr	r1, [pc, #36]	; (8008d90 <vQueueUnregisterQueue+0x28>)
	{
 8008d6c:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008d6e:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8008d72:	00dc      	lsls	r4, r3, #3
 8008d74:	4282      	cmp	r2, r0
 8008d76:	d106      	bne.n	8008d86 <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008d78:	4a06      	ldr	r2, [pc, #24]	; (8008d94 <vQueueUnregisterQueue+0x2c>)
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008d80:	4422      	add	r2, r4
 8008d82:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008d84:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d86:	3301      	adds	r3, #1
 8008d88:	2b08      	cmp	r3, #8
 8008d8a:	d1f0      	bne.n	8008d6e <vQueueUnregisterQueue+0x6>
 8008d8c:	e7fa      	b.n	8008d84 <vQueueUnregisterQueue+0x1c>
 8008d8e:	bf00      	nop
 8008d90:	24006dac 	.word	0x24006dac
 8008d94:	24006da8 	.word	0x24006da8

08008d98 <vQueueDelete>:
{
 8008d98:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8008d9a:	b940      	cbnz	r0, 8008dae <vQueueDelete+0x16>
	__asm volatile
 8008d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da0:	f383 8811 	msr	BASEPRI, r3
 8008da4:	f3bf 8f6f 	isb	sy
 8008da8:	f3bf 8f4f 	dsb	sy
 8008dac:	e7fe      	b.n	8008dac <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 8008dae:	f7ff ffdb 	bl	8008d68 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008db2:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 8008db6:	b91b      	cbnz	r3, 8008dc0 <vQueueDelete+0x28>
}
 8008db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8008dbc:	f7ff b8f4 	b.w	8007fa8 <vPortFree>
}
 8008dc0:	bd10      	pop	{r4, pc}

08008dc2 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008dc2:	b570      	push	{r4, r5, r6, lr}
 8008dc4:	4604      	mov	r4, r0
 8008dc6:	460d      	mov	r5, r1
 8008dc8:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008dca:	f7ff f9d3 	bl	8008174 <vPortEnterCritical>
 8008dce:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008dd2:	2bff      	cmp	r3, #255	; 0xff
 8008dd4:	d102      	bne.n	8008ddc <vQueueWaitForMessageRestricted+0x1a>
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008ddc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008de0:	2bff      	cmp	r3, #255	; 0xff
 8008de2:	d102      	bne.n	8008dea <vQueueWaitForMessageRestricted+0x28>
 8008de4:	2300      	movs	r3, #0
 8008de6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008dea:	f7ff f9e5 	bl	80081b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008dee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008df0:	b92b      	cbnz	r3, 8008dfe <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008df2:	4632      	mov	r2, r6
 8008df4:	4629      	mov	r1, r5
 8008df6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008dfa:	f000 fbd7 	bl	80095ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008dfe:	4620      	mov	r0, r4
	}
 8008e00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8008e04:	f7ff bb53 	b.w	80084ae <prvUnlockQueue>

08008e08 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e0c:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e0e:	f7ff f9b1 	bl	8008174 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e12:	4b2e      	ldr	r3, [pc, #184]	; (8008ecc <prvAddNewTaskToReadyList+0xc4>)
		if( pxCurrentTCB == NULL )
 8008e14:	4d2e      	ldr	r5, [pc, #184]	; (8008ed0 <prvAddNewTaskToReadyList+0xc8>)
		uxCurrentNumberOfTasks++;
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	4f2e      	ldr	r7, [pc, #184]	; (8008ed4 <prvAddNewTaskToReadyList+0xcc>)
 8008e1a:	3201      	adds	r2, #1
 8008e1c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8008e1e:	682e      	ldr	r6, [r5, #0]
 8008e20:	2e00      	cmp	r6, #0
 8008e22:	d148      	bne.n	8008eb6 <prvAddNewTaskToReadyList+0xae>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e24:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d11f      	bne.n	8008e6c <prvAddNewTaskToReadyList+0x64>
 8008e2c:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e2e:	3601      	adds	r6, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e30:	4640      	mov	r0, r8
 8008e32:	f7ff f8f7 	bl	8008024 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e36:	f108 0814 	add.w	r8, r8, #20
 8008e3a:	2e38      	cmp	r6, #56	; 0x38
 8008e3c:	d1f7      	bne.n	8008e2e <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e3e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8008f00 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 8008e42:	4e25      	ldr	r6, [pc, #148]	; (8008ed8 <prvAddNewTaskToReadyList+0xd0>)
	vListInitialise( &xDelayedTaskList1 );
 8008e44:	4640      	mov	r0, r8
 8008e46:	f7ff f8ed 	bl	8008024 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e4a:	4630      	mov	r0, r6
 8008e4c:	f7ff f8ea 	bl	8008024 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e50:	4822      	ldr	r0, [pc, #136]	; (8008edc <prvAddNewTaskToReadyList+0xd4>)
 8008e52:	f7ff f8e7 	bl	8008024 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e56:	4822      	ldr	r0, [pc, #136]	; (8008ee0 <prvAddNewTaskToReadyList+0xd8>)
 8008e58:	f7ff f8e4 	bl	8008024 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e5c:	4821      	ldr	r0, [pc, #132]	; (8008ee4 <prvAddNewTaskToReadyList+0xdc>)
 8008e5e:	f7ff f8e1 	bl	8008024 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e62:	4b21      	ldr	r3, [pc, #132]	; (8008ee8 <prvAddNewTaskToReadyList+0xe0>)
 8008e64:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e68:	4b20      	ldr	r3, [pc, #128]	; (8008eec <prvAddNewTaskToReadyList+0xe4>)
 8008e6a:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 8008e6c:	4a20      	ldr	r2, [pc, #128]	; (8008ef0 <prvAddNewTaskToReadyList+0xe8>)
 8008e6e:	6813      	ldr	r3, [r2, #0]
 8008e70:	3301      	adds	r3, #1
 8008e72:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8008e74:	4a1f      	ldr	r2, [pc, #124]	; (8008ef4 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008e76:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8008e78:	6811      	ldr	r1, [r2, #0]
 8008e7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008e7c:	428b      	cmp	r3, r1
 8008e7e:	d900      	bls.n	8008e82 <prvAddNewTaskToReadyList+0x7a>
 8008e80:	6013      	str	r3, [r2, #0]
 8008e82:	2014      	movs	r0, #20
 8008e84:	1d21      	adds	r1, r4, #4
 8008e86:	fb00 7003 	mla	r0, r0, r3, r7
 8008e8a:	f7ff f8d9 	bl	8008040 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8008e8e:	f7ff f993 	bl	80081b8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8008e92:	4b19      	ldr	r3, [pc, #100]	; (8008ef8 <prvAddNewTaskToReadyList+0xf0>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	b163      	cbz	r3, 8008eb2 <prvAddNewTaskToReadyList+0xaa>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008e98:	682b      	ldr	r3, [r5, #0]
 8008e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d207      	bcs.n	8008eb2 <prvAddNewTaskToReadyList+0xaa>
			taskYIELD_IF_USING_PREEMPTION();
 8008ea2:	4b16      	ldr	r3, [pc, #88]	; (8008efc <prvAddNewTaskToReadyList+0xf4>)
 8008ea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ea8:	601a      	str	r2, [r3, #0]
 8008eaa:	f3bf 8f4f 	dsb	sy
 8008eae:	f3bf 8f6f 	isb	sy
}
 8008eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8008eb6:	4b10      	ldr	r3, [pc, #64]	; (8008ef8 <prvAddNewTaskToReadyList+0xf0>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1d6      	bne.n	8008e6c <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008ebe:	682b      	ldr	r3, [r5, #0]
 8008ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ec2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d8d1      	bhi.n	8008e6c <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 8008ec8:	602c      	str	r4, [r5, #0]
 8008eca:	e7cf      	b.n	8008e6c <prvAddNewTaskToReadyList+0x64>
 8008ecc:	240066cc 	.word	0x240066cc
 8008ed0:	24006260 	.word	0x24006260
 8008ed4:	2400626c 	.word	0x2400626c
 8008ed8:	240066f4 	.word	0x240066f4
 8008edc:	24006714 	.word	0x24006714
 8008ee0:	24006740 	.word	0x24006740
 8008ee4:	2400672c 	.word	0x2400672c
 8008ee8:	24006264 	.word	0x24006264
 8008eec:	24006268 	.word	0x24006268
 8008ef0:	240066d8 	.word	0x240066d8
 8008ef4:	240066dc 	.word	0x240066dc
 8008ef8:	24006728 	.word	0x24006728
 8008efc:	e000ed04 	.word	0xe000ed04
 8008f00:	240066e0 	.word	0x240066e0

08008f04 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f04:	4a06      	ldr	r2, [pc, #24]	; (8008f20 <prvResetNextTaskUnblockTime+0x1c>)
 8008f06:	6813      	ldr	r3, [r2, #0]
 8008f08:	6819      	ldr	r1, [r3, #0]
 8008f0a:	4b06      	ldr	r3, [pc, #24]	; (8008f24 <prvResetNextTaskUnblockTime+0x20>)
 8008f0c:	b919      	cbnz	r1, 8008f16 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f0e:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f12:	601a      	str	r2, [r3, #0]
	}
}
 8008f14:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f16:	6812      	ldr	r2, [r2, #0]
 8008f18:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f1a:	68d2      	ldr	r2, [r2, #12]
 8008f1c:	6852      	ldr	r2, [r2, #4]
 8008f1e:	e7f8      	b.n	8008f12 <prvResetNextTaskUnblockTime+0xe>
 8008f20:	24006264 	.word	0x24006264
 8008f24:	24006708 	.word	0x24006708

08008f28 <prvInitialiseNewTask.isra.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008f2c:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008f30:	4606      	mov	r6, r0
 8008f32:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008f34:	21a5      	movs	r1, #165	; 0xa5
 8008f36:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008f38:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008f3a:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008f3e:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008f42:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008f44:	f010 f826 	bl	8018f94 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008f48:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008f4a:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008f4c:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 8008f50:	2d00      	cmp	r5, #0
 8008f52:	d037      	beq.n	8008fc4 <prvInitialiseNewTask.isra.0+0x9c>
 8008f54:	1e6b      	subs	r3, r5, #1
 8008f56:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8008f5a:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008f5c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8008f60:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8008f64:	7819      	ldrb	r1, [r3, #0]
 8008f66:	b109      	cbz	r1, 8008f6c <prvInitialiseNewTask.isra.0+0x44>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f68:	42ab      	cmp	r3, r5
 8008f6a:	d1f7      	bne.n	8008f5c <prvInitialiseNewTask.isra.0+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008f72:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8008f74:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008f78:	1d20      	adds	r0, r4, #4
 8008f7a:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8008f7c:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 8008f80:	bf28      	it	cs
 8008f82:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8008f84:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8008f86:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f88:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008f8c:	f7ff f855 	bl	800803a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008f90:	f104 0018 	add.w	r0, r4, #24
 8008f94:	f7ff f851 	bl	800803a <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8008f98:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f9c:	463a      	mov	r2, r7
 8008f9e:	4631      	mov	r1, r6
 8008fa0:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008fa2:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fa4:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008fa6:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 8008fa8:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008fac:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008fb0:	f7ff f8b8 	bl	8008124 <pxPortInitialiseStack>
 8008fb4:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8008fb6:	f1b8 0f00 	cmp.w	r8, #0
 8008fba:	d001      	beq.n	8008fc0 <prvInitialiseNewTask.isra.0+0x98>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008fbc:	f8c8 4000 	str.w	r4, [r8]
}
 8008fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008fc4:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8008fc8:	e7d3      	b.n	8008f72 <prvInitialiseNewTask.isra.0+0x4a>

08008fca <prvDeleteTCB>:
	{
 8008fca:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008fcc:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 8008fd0:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008fd2:	b93b      	cbnz	r3, 8008fe4 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8008fd4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8008fd6:	f7fe ffe7 	bl	8007fa8 <vPortFree>
				vPortFree( pxTCB );
 8008fda:	4620      	mov	r0, r4
	}
 8008fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8008fe0:	f7fe bfe2 	b.w	8007fa8 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d0f9      	beq.n	8008fdc <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	d008      	beq.n	8008ffe <prvDeleteTCB+0x34>
 8008fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff0:	f383 8811 	msr	BASEPRI, r3
 8008ff4:	f3bf 8f6f 	isb	sy
 8008ff8:	f3bf 8f4f 	dsb	sy
 8008ffc:	e7fe      	b.n	8008ffc <prvDeleteTCB+0x32>
	}
 8008ffe:	bd10      	pop	{r4, pc}

08009000 <prvIdleTask>:
{
 8009000:	b580      	push	{r7, lr}
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009002:	4e14      	ldr	r6, [pc, #80]	; (8009054 <prvIdleTask+0x54>)
				taskYIELD();
 8009004:	4f14      	ldr	r7, [pc, #80]	; (8009058 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009006:	4c15      	ldr	r4, [pc, #84]	; (800905c <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 8009008:	4d15      	ldr	r5, [pc, #84]	; (8009060 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800900a:	6823      	ldr	r3, [r4, #0]
 800900c:	b96b      	cbnz	r3, 800902a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800900e:	4b15      	ldr	r3, [pc, #84]	; (8009064 <prvIdleTask+0x64>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2b01      	cmp	r3, #1
 8009014:	d906      	bls.n	8009024 <prvIdleTask+0x24>
				taskYIELD();
 8009016:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800901a:	603b      	str	r3, [r7, #0]
 800901c:	f3bf 8f4f 	dsb	sy
 8009020:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8009024:	f7f7 f9c4 	bl	80003b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8009028:	e7ed      	b.n	8009006 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800902a:	f7ff f8a3 	bl	8008174 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800902e:	68f3      	ldr	r3, [r6, #12]
 8009030:	f8d3 800c 	ldr.w	r8, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009034:	f108 0004 	add.w	r0, r8, #4
 8009038:	f7ff f825 	bl	8008086 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800903c:	682b      	ldr	r3, [r5, #0]
 800903e:	3b01      	subs	r3, #1
 8009040:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009042:	6823      	ldr	r3, [r4, #0]
 8009044:	3b01      	subs	r3, #1
 8009046:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8009048:	f7ff f8b6 	bl	80081b8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800904c:	4640      	mov	r0, r8
 800904e:	f7ff ffbc 	bl	8008fca <prvDeleteTCB>
 8009052:	e7da      	b.n	800900a <prvIdleTask+0xa>
 8009054:	24006740 	.word	0x24006740
 8009058:	e000ed04 	.word	0xe000ed04
 800905c:	240066d0 	.word	0x240066d0
 8009060:	240066cc 	.word	0x240066cc
 8009064:	2400626c 	.word	0x2400626c

08009068 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800906a:	4b16      	ldr	r3, [pc, #88]	; (80090c4 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800906c:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800906e:	4e16      	ldr	r6, [pc, #88]	; (80090c8 <prvAddCurrentTaskToDelayedList+0x60>)
{
 8009070:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8009072:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009074:	6830      	ldr	r0, [r6, #0]
 8009076:	3004      	adds	r0, #4
 8009078:	f7ff f805 	bl	8008086 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800907c:	1c63      	adds	r3, r4, #1
 800907e:	4633      	mov	r3, r6
 8009080:	d107      	bne.n	8009092 <prvAddCurrentTaskToDelayedList+0x2a>
 8009082:	b137      	cbz	r7, 8009092 <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009084:	6831      	ldr	r1, [r6, #0]
 8009086:	4811      	ldr	r0, [pc, #68]	; (80090cc <prvAddCurrentTaskToDelayedList+0x64>)
 8009088:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800908a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800908e:	f7fe bfd7 	b.w	8008040 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009092:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8009098:	d307      	bcc.n	80090aa <prvAddCurrentTaskToDelayedList+0x42>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800909a:	4a0d      	ldr	r2, [pc, #52]	; (80090d0 <prvAddCurrentTaskToDelayedList+0x68>)
 800909c:	6810      	ldr	r0, [r2, #0]
 800909e:	6819      	ldr	r1, [r3, #0]
}
 80090a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090a4:	3104      	adds	r1, #4
 80090a6:	f7fe bfd7 	b.w	8008058 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090aa:	4a0a      	ldr	r2, [pc, #40]	; (80090d4 <prvAddCurrentTaskToDelayedList+0x6c>)
 80090ac:	6810      	ldr	r0, [r2, #0]
 80090ae:	6819      	ldr	r1, [r3, #0]
 80090b0:	3104      	adds	r1, #4
 80090b2:	f7fe ffd1 	bl	8008058 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80090b6:	4b08      	ldr	r3, [pc, #32]	; (80090d8 <prvAddCurrentTaskToDelayedList+0x70>)
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	42a2      	cmp	r2, r4
 80090bc:	d900      	bls.n	80090c0 <prvAddCurrentTaskToDelayedList+0x58>
					xNextTaskUnblockTime = xTimeToWake;
 80090be:	601c      	str	r4, [r3, #0]
}
 80090c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090c2:	bf00      	nop
 80090c4:	24006754 	.word	0x24006754
 80090c8:	24006260 	.word	0x24006260
 80090cc:	2400672c 	.word	0x2400672c
 80090d0:	24006268 	.word	0x24006268
 80090d4:	24006264 	.word	0x24006264
 80090d8:	24006708 	.word	0x24006708

080090dc <xTaskCreateStatic>:
	{
 80090dc:	b570      	push	{r4, r5, r6, lr}
 80090de:	b086      	sub	sp, #24
 80090e0:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80090e4:	b945      	cbnz	r5, 80090f8 <xTaskCreateStatic+0x1c>
 80090e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ea:	f383 8811 	msr	BASEPRI, r3
 80090ee:	f3bf 8f6f 	isb	sy
 80090f2:	f3bf 8f4f 	dsb	sy
 80090f6:	e7fe      	b.n	80090f6 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80090f8:	b944      	cbnz	r4, 800910c <xTaskCreateStatic+0x30>
 80090fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fe:	f383 8811 	msr	BASEPRI, r3
 8009102:	f3bf 8f6f 	isb	sy
 8009106:	f3bf 8f4f 	dsb	sy
 800910a:	e7fe      	b.n	800910a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800910c:	2660      	movs	r6, #96	; 0x60
 800910e:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009110:	9e05      	ldr	r6, [sp, #20]
 8009112:	2e60      	cmp	r6, #96	; 0x60
 8009114:	d008      	beq.n	8009128 <xTaskCreateStatic+0x4c>
 8009116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911a:	f383 8811 	msr	BASEPRI, r3
 800911e:	f3bf 8f6f 	isb	sy
 8009122:	f3bf 8f4f 	dsb	sy
 8009126:	e7fe      	b.n	8009126 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009128:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800912a:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800912c:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800912e:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009132:	ad04      	add	r5, sp, #16
 8009134:	9402      	str	r4, [sp, #8]
 8009136:	9501      	str	r5, [sp, #4]
 8009138:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800913a:	9500      	str	r5, [sp, #0]
 800913c:	f7ff fef4 	bl	8008f28 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009140:	4620      	mov	r0, r4
 8009142:	f7ff fe61 	bl	8008e08 <prvAddNewTaskToReadyList>
	}
 8009146:	9804      	ldr	r0, [sp, #16]
 8009148:	b006      	add	sp, #24
 800914a:	bd70      	pop	{r4, r5, r6, pc}

0800914c <xTaskCreate>:
	{
 800914c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009150:	4607      	mov	r7, r0
 8009152:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009154:	0090      	lsls	r0, r2, #2
	{
 8009156:	4688      	mov	r8, r1
 8009158:	4616      	mov	r6, r2
 800915a:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800915c:	f7fe fe92 	bl	8007e84 <pvPortMalloc>
			if( pxStack != NULL )
 8009160:	4605      	mov	r5, r0
 8009162:	b1e8      	cbz	r0, 80091a0 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009164:	2060      	movs	r0, #96	; 0x60
 8009166:	f7fe fe8d 	bl	8007e84 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800916a:	4604      	mov	r4, r0
 800916c:	b1a8      	cbz	r0, 800919a <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800916e:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8009170:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009172:	4632      	mov	r2, r6
 8009174:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009176:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800917a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800917c:	9002      	str	r0, [sp, #8]
 800917e:	4638      	mov	r0, r7
 8009180:	9301      	str	r3, [sp, #4]
 8009182:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009184:	9300      	str	r3, [sp, #0]
 8009186:	464b      	mov	r3, r9
 8009188:	f7ff fece 	bl	8008f28 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800918c:	4620      	mov	r0, r4
 800918e:	f7ff fe3b 	bl	8008e08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009192:	2001      	movs	r0, #1
	}
 8009194:	b005      	add	sp, #20
 8009196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800919a:	4628      	mov	r0, r5
 800919c:	f7fe ff04 	bl	8007fa8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80091a0:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80091a4:	e7f6      	b.n	8009194 <xTaskCreate+0x48>
	...

080091a8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80091a8:	4a02      	ldr	r2, [pc, #8]	; (80091b4 <vTaskSuspendAll+0xc>)
 80091aa:	6813      	ldr	r3, [r2, #0]
 80091ac:	3301      	adds	r3, #1
 80091ae:	6013      	str	r3, [r2, #0]
}
 80091b0:	4770      	bx	lr
 80091b2:	bf00      	nop
 80091b4:	240066d4 	.word	0x240066d4

080091b8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80091b8:	4b01      	ldr	r3, [pc, #4]	; (80091c0 <xTaskGetTickCount+0x8>)
 80091ba:	6818      	ldr	r0, [r3, #0]
}
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop
 80091c0:	24006754 	.word	0x24006754

080091c4 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091c4:	4b3f      	ldr	r3, [pc, #252]	; (80092c4 <xTaskIncrementTick+0x100>)
 80091c6:	681b      	ldr	r3, [r3, #0]
{
 80091c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d172      	bne.n	80092b6 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80091d0:	4b3d      	ldr	r3, [pc, #244]	; (80092c8 <xTaskIncrementTick+0x104>)
 80091d2:	681d      	ldr	r5, [r3, #0]
 80091d4:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80091d6:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80091d8:	b9bd      	cbnz	r5, 800920a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80091da:	4b3c      	ldr	r3, [pc, #240]	; (80092cc <xTaskIncrementTick+0x108>)
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	6812      	ldr	r2, [r2, #0]
 80091e0:	b142      	cbz	r2, 80091f4 <xTaskIncrementTick+0x30>
 80091e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e6:	f383 8811 	msr	BASEPRI, r3
 80091ea:	f3bf 8f6f 	isb	sy
 80091ee:	f3bf 8f4f 	dsb	sy
 80091f2:	e7fe      	b.n	80091f2 <xTaskIncrementTick+0x2e>
 80091f4:	4a36      	ldr	r2, [pc, #216]	; (80092d0 <xTaskIncrementTick+0x10c>)
 80091f6:	6819      	ldr	r1, [r3, #0]
 80091f8:	6810      	ldr	r0, [r2, #0]
 80091fa:	6018      	str	r0, [r3, #0]
 80091fc:	6011      	str	r1, [r2, #0]
 80091fe:	4a35      	ldr	r2, [pc, #212]	; (80092d4 <xTaskIncrementTick+0x110>)
 8009200:	6813      	ldr	r3, [r2, #0]
 8009202:	3301      	adds	r3, #1
 8009204:	6013      	str	r3, [r2, #0]
 8009206:	f7ff fe7d 	bl	8008f04 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800920a:	4e33      	ldr	r6, [pc, #204]	; (80092d8 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800920c:	2400      	movs	r4, #0
 800920e:	4f33      	ldr	r7, [pc, #204]	; (80092dc <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009210:	6833      	ldr	r3, [r6, #0]
 8009212:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80092e8 <xTaskIncrementTick+0x124>
 8009216:	429d      	cmp	r5, r3
 8009218:	d211      	bcs.n	800923e <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800921a:	f8d8 3000 	ldr.w	r3, [r8]
 800921e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009220:	2314      	movs	r3, #20
 8009222:	4353      	muls	r3, r2
 8009224:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8009226:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 8009228:	4b2d      	ldr	r3, [pc, #180]	; (80092e0 <xTaskIncrementTick+0x11c>)
 800922a:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 800922c:	bf28      	it	cs
 800922e:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 8009230:	2b00      	cmp	r3, #0
 8009232:	bf18      	it	ne
 8009234:	2401      	movne	r4, #1
}
 8009236:	4620      	mov	r0, r4
 8009238:	b003      	add	sp, #12
 800923a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800923e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80092cc <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 8009242:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80092ec <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009246:	f8d9 3000 	ldr.w	r3, [r9]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	b91b      	cbnz	r3, 8009256 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800924e:	f04f 33ff 	mov.w	r3, #4294967295
 8009252:	6033      	str	r3, [r6, #0]
					break;
 8009254:	e7e1      	b.n	800921a <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009256:	f8d9 3000 	ldr.w	r3, [r9]
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009260:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 8009264:	4295      	cmp	r5, r2
 8009266:	d201      	bcs.n	800926c <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 8009268:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800926a:	e7d6      	b.n	800921a <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800926c:	f10b 0104 	add.w	r1, fp, #4
 8009270:	4608      	mov	r0, r1
 8009272:	9101      	str	r1, [sp, #4]
 8009274:	f7fe ff07 	bl	8008086 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009278:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800927c:	9901      	ldr	r1, [sp, #4]
 800927e:	b122      	cbz	r2, 800928a <xTaskIncrementTick+0xc6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009280:	f10b 0018 	add.w	r0, fp, #24
 8009284:	f7fe feff 	bl	8008086 <uxListRemove>
 8009288:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 800928a:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 800928e:	f8da 2000 	ldr.w	r2, [sl]
 8009292:	4290      	cmp	r0, r2
 8009294:	d901      	bls.n	800929a <xTaskIncrementTick+0xd6>
 8009296:	f8ca 0000 	str.w	r0, [sl]
 800929a:	2314      	movs	r3, #20
 800929c:	fb03 7000 	mla	r0, r3, r0, r7
 80092a0:	f7fe fece 	bl	8008040 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092a4:	f8d8 1000 	ldr.w	r1, [r8]
 80092a8:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 80092ac:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80092ae:	429a      	cmp	r2, r3
 80092b0:	bf28      	it	cs
 80092b2:	2401      	movcs	r4, #1
 80092b4:	e7c7      	b.n	8009246 <xTaskIncrementTick+0x82>
		++xPendedTicks;
 80092b6:	4a0b      	ldr	r2, [pc, #44]	; (80092e4 <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 80092b8:	2400      	movs	r4, #0
		++xPendedTicks;
 80092ba:	6813      	ldr	r3, [r2, #0]
 80092bc:	3301      	adds	r3, #1
 80092be:	6013      	str	r3, [r2, #0]
	return xSwitchRequired;
 80092c0:	e7b9      	b.n	8009236 <xTaskIncrementTick+0x72>
 80092c2:	bf00      	nop
 80092c4:	240066d4 	.word	0x240066d4
 80092c8:	24006754 	.word	0x24006754
 80092cc:	24006264 	.word	0x24006264
 80092d0:	24006268 	.word	0x24006268
 80092d4:	2400670c 	.word	0x2400670c
 80092d8:	24006708 	.word	0x24006708
 80092dc:	2400626c 	.word	0x2400626c
 80092e0:	24006758 	.word	0x24006758
 80092e4:	24006710 	.word	0x24006710
 80092e8:	24006260 	.word	0x24006260
 80092ec:	240066dc 	.word	0x240066dc

080092f0 <xTaskResumeAll>:
{
 80092f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 80092f2:	4c30      	ldr	r4, [pc, #192]	; (80093b4 <xTaskResumeAll+0xc4>)
 80092f4:	6823      	ldr	r3, [r4, #0]
 80092f6:	b943      	cbnz	r3, 800930a <xTaskResumeAll+0x1a>
 80092f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092fc:	f383 8811 	msr	BASEPRI, r3
 8009300:	f3bf 8f6f 	isb	sy
 8009304:	f3bf 8f4f 	dsb	sy
 8009308:	e7fe      	b.n	8009308 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800930a:	f7fe ff33 	bl	8008174 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800930e:	6823      	ldr	r3, [r4, #0]
 8009310:	3b01      	subs	r3, #1
 8009312:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009314:	6824      	ldr	r4, [r4, #0]
 8009316:	b12c      	cbz	r4, 8009324 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 8009318:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800931a:	f7fe ff4d 	bl	80081b8 <vPortExitCritical>
}
 800931e:	4620      	mov	r0, r4
 8009320:	b003      	add	sp, #12
 8009322:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009324:	4b24      	ldr	r3, [pc, #144]	; (80093b8 <xTaskResumeAll+0xc8>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d0f5      	beq.n	8009318 <xTaskResumeAll+0x28>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800932c:	4d23      	ldr	r5, [pc, #140]	; (80093bc <xTaskResumeAll+0xcc>)
					prvAddTaskToReadyList( pxTCB );
 800932e:	4e24      	ldr	r6, [pc, #144]	; (80093c0 <xTaskResumeAll+0xd0>)
 8009330:	4f24      	ldr	r7, [pc, #144]	; (80093c4 <xTaskResumeAll+0xd4>)
 8009332:	e01e      	b.n	8009372 <xTaskResumeAll+0x82>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009334:	68eb      	ldr	r3, [r5, #12]
 8009336:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009338:	f104 0018 	add.w	r0, r4, #24
 800933c:	f7fe fea3 	bl	8008086 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009340:	1d21      	adds	r1, r4, #4
 8009342:	4608      	mov	r0, r1
 8009344:	9101      	str	r1, [sp, #4]
 8009346:	f7fe fe9e 	bl	8008086 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800934a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800934c:	6832      	ldr	r2, [r6, #0]
 800934e:	9901      	ldr	r1, [sp, #4]
 8009350:	4293      	cmp	r3, r2
 8009352:	d900      	bls.n	8009356 <xTaskResumeAll+0x66>
 8009354:	6033      	str	r3, [r6, #0]
 8009356:	2014      	movs	r0, #20
 8009358:	fb00 7003 	mla	r0, r0, r3, r7
 800935c:	f7fe fe70 	bl	8008040 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009360:	4b19      	ldr	r3, [pc, #100]	; (80093c8 <xTaskResumeAll+0xd8>)
 8009362:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009368:	429a      	cmp	r2, r3
 800936a:	d302      	bcc.n	8009372 <xTaskResumeAll+0x82>
						xYieldPending = pdTRUE;
 800936c:	4b17      	ldr	r3, [pc, #92]	; (80093cc <xTaskResumeAll+0xdc>)
 800936e:	2201      	movs	r2, #1
 8009370:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009372:	682b      	ldr	r3, [r5, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d1dd      	bne.n	8009334 <xTaskResumeAll+0x44>
				if( pxTCB != NULL )
 8009378:	b10c      	cbz	r4, 800937e <xTaskResumeAll+0x8e>
					prvResetNextTaskUnblockTime();
 800937a:	f7ff fdc3 	bl	8008f04 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800937e:	4d14      	ldr	r5, [pc, #80]	; (80093d0 <xTaskResumeAll+0xe0>)
 8009380:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8009382:	b144      	cbz	r4, 8009396 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8009384:	4e11      	ldr	r6, [pc, #68]	; (80093cc <xTaskResumeAll+0xdc>)
 8009386:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8009388:	f7ff ff1c 	bl	80091c4 <xTaskIncrementTick>
 800938c:	b100      	cbz	r0, 8009390 <xTaskResumeAll+0xa0>
								xYieldPending = pdTRUE;
 800938e:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009390:	3c01      	subs	r4, #1
 8009392:	d1f9      	bne.n	8009388 <xTaskResumeAll+0x98>
						xPendedTicks = 0;
 8009394:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8009396:	4b0d      	ldr	r3, [pc, #52]	; (80093cc <xTaskResumeAll+0xdc>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d0bc      	beq.n	8009318 <xTaskResumeAll+0x28>
					taskYIELD_IF_USING_PREEMPTION();
 800939e:	4b0d      	ldr	r3, [pc, #52]	; (80093d4 <xTaskResumeAll+0xe4>)
 80093a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093a4:	601a      	str	r2, [r3, #0]
 80093a6:	f3bf 8f4f 	dsb	sy
 80093aa:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80093ae:	2401      	movs	r4, #1
 80093b0:	e7b3      	b.n	800931a <xTaskResumeAll+0x2a>
 80093b2:	bf00      	nop
 80093b4:	240066d4 	.word	0x240066d4
 80093b8:	240066cc 	.word	0x240066cc
 80093bc:	24006714 	.word	0x24006714
 80093c0:	240066dc 	.word	0x240066dc
 80093c4:	2400626c 	.word	0x2400626c
 80093c8:	24006260 	.word	0x24006260
 80093cc:	24006758 	.word	0x24006758
 80093d0:	24006710 	.word	0x24006710
 80093d4:	e000ed04 	.word	0xe000ed04

080093d8 <vTaskDelay>:
	{
 80093d8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80093da:	b940      	cbnz	r0, 80093ee <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80093dc:	4b0e      	ldr	r3, [pc, #56]	; (8009418 <vTaskDelay+0x40>)
 80093de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093e2:	601a      	str	r2, [r3, #0]
 80093e4:	f3bf 8f4f 	dsb	sy
 80093e8:	f3bf 8f6f 	isb	sy
	}
 80093ec:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80093ee:	4b0b      	ldr	r3, [pc, #44]	; (800941c <vTaskDelay+0x44>)
 80093f0:	6819      	ldr	r1, [r3, #0]
 80093f2:	b141      	cbz	r1, 8009406 <vTaskDelay+0x2e>
 80093f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f8:	f383 8811 	msr	BASEPRI, r3
 80093fc:	f3bf 8f6f 	isb	sy
 8009400:	f3bf 8f4f 	dsb	sy
 8009404:	e7fe      	b.n	8009404 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009406:	f7ff fecf 	bl	80091a8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800940a:	f7ff fe2d 	bl	8009068 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800940e:	f7ff ff6f 	bl	80092f0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8009412:	2800      	cmp	r0, #0
 8009414:	d0e2      	beq.n	80093dc <vTaskDelay+0x4>
 8009416:	e7e9      	b.n	80093ec <vTaskDelay+0x14>
 8009418:	e000ed04 	.word	0xe000ed04
 800941c:	240066d4 	.word	0x240066d4

08009420 <vTaskSetApplicationTaskTag>:
	{
 8009420:	b538      	push	{r3, r4, r5, lr}
 8009422:	460d      	mov	r5, r1
		if( xTask == NULL )
 8009424:	4604      	mov	r4, r0
 8009426:	b908      	cbnz	r0, 800942c <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8009428:	4b04      	ldr	r3, [pc, #16]	; (800943c <vTaskSetApplicationTaskTag+0x1c>)
 800942a:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800942c:	f7fe fea2 	bl	8008174 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8009430:	6565      	str	r5, [r4, #84]	; 0x54
	}
 8009432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 8009436:	f7fe bebf 	b.w	80081b8 <vPortExitCritical>
 800943a:	bf00      	nop
 800943c:	24006260 	.word	0x24006260

08009440 <xTaskCallApplicationTaskHook>:
	{
 8009440:	4603      	mov	r3, r0
 8009442:	4608      	mov	r0, r1
		if( xTask == NULL )
 8009444:	b90b      	cbnz	r3, 800944a <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 8009446:	4b03      	ldr	r3, [pc, #12]	; (8009454 <xTaskCallApplicationTaskHook+0x14>)
 8009448:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800944a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800944c:	b103      	cbz	r3, 8009450 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800944e:	4718      	bx	r3
	}
 8009450:	4618      	mov	r0, r3
 8009452:	4770      	bx	lr
 8009454:	24006260 	.word	0x24006260

08009458 <vTaskStartScheduler>:
{
 8009458:	b510      	push	{r4, lr}
 800945a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800945c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800945e:	aa07      	add	r2, sp, #28
 8009460:	a906      	add	r1, sp, #24
 8009462:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009464:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009468:	f7fe fcd0 	bl	8007e0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800946c:	9b05      	ldr	r3, [sp, #20]
 800946e:	9a07      	ldr	r2, [sp, #28]
 8009470:	9302      	str	r3, [sp, #8]
 8009472:	9b06      	ldr	r3, [sp, #24]
 8009474:	4917      	ldr	r1, [pc, #92]	; (80094d4 <vTaskStartScheduler+0x7c>)
 8009476:	4818      	ldr	r0, [pc, #96]	; (80094d8 <vTaskStartScheduler+0x80>)
 8009478:	e9cd 4300 	strd	r4, r3, [sp]
 800947c:	4623      	mov	r3, r4
 800947e:	f7ff fe2d 	bl	80090dc <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8009482:	b1d0      	cbz	r0, 80094ba <vTaskStartScheduler+0x62>
			xReturn = xTimerCreateTimerTask();
 8009484:	f000 fa88 	bl	8009998 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8009488:	2801      	cmp	r0, #1
 800948a:	d118      	bne.n	80094be <vTaskStartScheduler+0x66>
 800948c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009490:	f383 8811 	msr	BASEPRI, r3
 8009494:	f3bf 8f6f 	isb	sy
 8009498:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800949c:	4b0f      	ldr	r3, [pc, #60]	; (80094dc <vTaskStartScheduler+0x84>)
 800949e:	f04f 32ff 	mov.w	r2, #4294967295
		traceTASK_SWITCHED_IN();
 80094a2:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 80094a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80094a6:	4b0e      	ldr	r3, [pc, #56]	; (80094e0 <vTaskStartScheduler+0x88>)
 80094a8:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80094aa:	4b0e      	ldr	r3, [pc, #56]	; (80094e4 <vTaskStartScheduler+0x8c>)
 80094ac:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 80094ae:	4b0e      	ldr	r3, [pc, #56]	; (80094e8 <vTaskStartScheduler+0x90>)
 80094b0:	6818      	ldr	r0, [r3, #0]
 80094b2:	f7ff ffc5 	bl	8009440 <xTaskCallApplicationTaskHook>
		if( xPortStartScheduler() != pdFALSE )
 80094b6:	f7fe fef5 	bl	80082a4 <xPortStartScheduler>
}
 80094ba:	b008      	add	sp, #32
 80094bc:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80094be:	3001      	adds	r0, #1
 80094c0:	d1fb      	bne.n	80094ba <vTaskStartScheduler+0x62>
 80094c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c6:	f383 8811 	msr	BASEPRI, r3
 80094ca:	f3bf 8f6f 	isb	sy
 80094ce:	f3bf 8f4f 	dsb	sy
 80094d2:	e7fe      	b.n	80094d2 <vTaskStartScheduler+0x7a>
 80094d4:	0801b08c 	.word	0x0801b08c
 80094d8:	08009001 	.word	0x08009001
 80094dc:	24006708 	.word	0x24006708
 80094e0:	24006728 	.word	0x24006728
 80094e4:	24006754 	.word	0x24006754
 80094e8:	24006260 	.word	0x24006260

080094ec <vTaskSwitchContext>:
{
 80094ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80094ee:	4b1d      	ldr	r3, [pc, #116]	; (8009564 <vTaskSwitchContext+0x78>)
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	4b1d      	ldr	r3, [pc, #116]	; (8009568 <vTaskSwitchContext+0x7c>)
 80094f4:	b112      	cbz	r2, 80094fc <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80094f6:	2201      	movs	r2, #1
 80094f8:	601a      	str	r2, [r3, #0]
}
 80094fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 80094fc:	4e1b      	ldr	r6, [pc, #108]	; (800956c <vTaskSwitchContext+0x80>)
 80094fe:	2101      	movs	r1, #1
		xYieldPending = pdFALSE;
 8009500:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8009502:	6830      	ldr	r0, [r6, #0]
 8009504:	f7ff ff9c 	bl	8009440 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009508:	4d19      	ldr	r5, [pc, #100]	; (8009570 <vTaskSwitchContext+0x84>)
 800950a:	4a1a      	ldr	r2, [pc, #104]	; (8009574 <vTaskSwitchContext+0x88>)
 800950c:	f04f 0c14 	mov.w	ip, #20
 8009510:	682b      	ldr	r3, [r5, #0]
 8009512:	4617      	mov	r7, r2
 8009514:	fb0c f103 	mul.w	r1, ip, r3
 8009518:	5854      	ldr	r4, [r2, r1]
 800951a:	1850      	adds	r0, r2, r1
 800951c:	b1ac      	cbz	r4, 800954a <vTaskSwitchContext+0x5e>
 800951e:	6844      	ldr	r4, [r0, #4]
 8009520:	3108      	adds	r1, #8
 8009522:	6864      	ldr	r4, [r4, #4]
 8009524:	440a      	add	r2, r1
		traceTASK_SWITCHED_IN();
 8009526:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009528:	4294      	cmp	r4, r2
 800952a:	6044      	str	r4, [r0, #4]
 800952c:	bf04      	itt	eq
 800952e:	6862      	ldreq	r2, [r4, #4]
 8009530:	6042      	streq	r2, [r0, #4]
 8009532:	2214      	movs	r2, #20
 8009534:	fb02 7203 	mla	r2, r2, r3, r7
 8009538:	6852      	ldr	r2, [r2, #4]
 800953a:	68d2      	ldr	r2, [r2, #12]
 800953c:	6032      	str	r2, [r6, #0]
 800953e:	602b      	str	r3, [r5, #0]
		traceTASK_SWITCHED_IN();
 8009540:	6830      	ldr	r0, [r6, #0]
}
 8009542:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 8009546:	f7ff bf7b 	b.w	8009440 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800954a:	b943      	cbnz	r3, 800955e <vTaskSwitchContext+0x72>
 800954c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009550:	f383 8811 	msr	BASEPRI, r3
 8009554:	f3bf 8f6f 	isb	sy
 8009558:	f3bf 8f4f 	dsb	sy
 800955c:	e7fe      	b.n	800955c <vTaskSwitchContext+0x70>
 800955e:	3b01      	subs	r3, #1
 8009560:	e7d8      	b.n	8009514 <vTaskSwitchContext+0x28>
 8009562:	bf00      	nop
 8009564:	240066d4 	.word	0x240066d4
 8009568:	24006758 	.word	0x24006758
 800956c:	24006260 	.word	0x24006260
 8009570:	240066dc 	.word	0x240066dc
 8009574:	2400626c 	.word	0x2400626c

08009578 <vTaskPlaceOnEventList>:
{
 8009578:	b510      	push	{r4, lr}
 800957a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800957c:	b940      	cbnz	r0, 8009590 <vTaskPlaceOnEventList+0x18>
 800957e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009582:	f383 8811 	msr	BASEPRI, r3
 8009586:	f3bf 8f6f 	isb	sy
 800958a:	f3bf 8f4f 	dsb	sy
 800958e:	e7fe      	b.n	800958e <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009590:	4b05      	ldr	r3, [pc, #20]	; (80095a8 <vTaskPlaceOnEventList+0x30>)
 8009592:	6819      	ldr	r1, [r3, #0]
 8009594:	3118      	adds	r1, #24
 8009596:	f7fe fd5f 	bl	8008058 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800959a:	4620      	mov	r0, r4
 800959c:	2101      	movs	r1, #1
}
 800959e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80095a2:	f7ff bd61 	b.w	8009068 <prvAddCurrentTaskToDelayedList>
 80095a6:	bf00      	nop
 80095a8:	24006260 	.word	0x24006260

080095ac <vTaskPlaceOnEventListRestricted>:
	{
 80095ac:	b538      	push	{r3, r4, r5, lr}
 80095ae:	460d      	mov	r5, r1
 80095b0:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 80095b2:	b940      	cbnz	r0, 80095c6 <vTaskPlaceOnEventListRestricted+0x1a>
 80095b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	e7fe      	b.n	80095c4 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80095c6:	4b07      	ldr	r3, [pc, #28]	; (80095e4 <vTaskPlaceOnEventListRestricted+0x38>)
 80095c8:	6819      	ldr	r1, [r3, #0]
 80095ca:	3118      	adds	r1, #24
 80095cc:	f7fe fd38 	bl	8008040 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80095d0:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80095d2:	4621      	mov	r1, r4
 80095d4:	bf0c      	ite	eq
 80095d6:	4628      	moveq	r0, r5
 80095d8:	f04f 30ff 	movne.w	r0, #4294967295
	}
 80095dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80095e0:	f7ff bd42 	b.w	8009068 <prvAddCurrentTaskToDelayedList>
 80095e4:	24006260 	.word	0x24006260

080095e8 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095e8:	68c3      	ldr	r3, [r0, #12]
{
 80095ea:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095ec:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80095ee:	b944      	cbnz	r4, 8009602 <xTaskRemoveFromEventList+0x1a>
 80095f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f4:	f383 8811 	msr	BASEPRI, r3
 80095f8:	f3bf 8f6f 	isb	sy
 80095fc:	f3bf 8f4f 	dsb	sy
 8009600:	e7fe      	b.n	8009600 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009602:	f104 0118 	add.w	r1, r4, #24
 8009606:	4608      	mov	r0, r1
 8009608:	9101      	str	r1, [sp, #4]
 800960a:	f7fe fd3c 	bl	8008086 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800960e:	4b12      	ldr	r3, [pc, #72]	; (8009658 <xTaskRemoveFromEventList+0x70>)
 8009610:	9901      	ldr	r1, [sp, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	b9e3      	cbnz	r3, 8009650 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009616:	1d21      	adds	r1, r4, #4
 8009618:	4608      	mov	r0, r1
 800961a:	9101      	str	r1, [sp, #4]
 800961c:	f7fe fd33 	bl	8008086 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009620:	4a0e      	ldr	r2, [pc, #56]	; (800965c <xTaskRemoveFromEventList+0x74>)
 8009622:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009624:	6810      	ldr	r0, [r2, #0]
 8009626:	9901      	ldr	r1, [sp, #4]
 8009628:	4283      	cmp	r3, r0
 800962a:	d900      	bls.n	800962e <xTaskRemoveFromEventList+0x46>
 800962c:	6013      	str	r3, [r2, #0]
 800962e:	4a0c      	ldr	r2, [pc, #48]	; (8009660 <xTaskRemoveFromEventList+0x78>)
 8009630:	2014      	movs	r0, #20
 8009632:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009636:	f7fe fd03 	bl	8008040 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800963a:	4b0a      	ldr	r3, [pc, #40]	; (8009664 <xTaskRemoveFromEventList+0x7c>)
 800963c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009642:	429a      	cmp	r2, r3
 8009644:	d906      	bls.n	8009654 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 8009646:	2001      	movs	r0, #1
 8009648:	4b07      	ldr	r3, [pc, #28]	; (8009668 <xTaskRemoveFromEventList+0x80>)
 800964a:	6018      	str	r0, [r3, #0]
}
 800964c:	b002      	add	sp, #8
 800964e:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009650:	4806      	ldr	r0, [pc, #24]	; (800966c <xTaskRemoveFromEventList+0x84>)
 8009652:	e7f0      	b.n	8009636 <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 8009654:	2000      	movs	r0, #0
	return xReturn;
 8009656:	e7f9      	b.n	800964c <xTaskRemoveFromEventList+0x64>
 8009658:	240066d4 	.word	0x240066d4
 800965c:	240066dc 	.word	0x240066dc
 8009660:	2400626c 	.word	0x2400626c
 8009664:	24006260 	.word	0x24006260
 8009668:	24006758 	.word	0x24006758
 800966c:	24006714 	.word	0x24006714

08009670 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009670:	4b03      	ldr	r3, [pc, #12]	; (8009680 <vTaskInternalSetTimeOutState+0x10>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009676:	4b03      	ldr	r3, [pc, #12]	; (8009684 <vTaskInternalSetTimeOutState+0x14>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	6043      	str	r3, [r0, #4]
}
 800967c:	4770      	bx	lr
 800967e:	bf00      	nop
 8009680:	2400670c 	.word	0x2400670c
 8009684:	24006754 	.word	0x24006754

08009688 <xTaskCheckForTimeOut>:
{
 8009688:	b570      	push	{r4, r5, r6, lr}
 800968a:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800968c:	4605      	mov	r5, r0
 800968e:	b940      	cbnz	r0, 80096a2 <xTaskCheckForTimeOut+0x1a>
 8009690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009694:	f383 8811 	msr	BASEPRI, r3
 8009698:	f3bf 8f6f 	isb	sy
 800969c:	f3bf 8f4f 	dsb	sy
 80096a0:	e7fe      	b.n	80096a0 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80096a2:	b941      	cbnz	r1, 80096b6 <xTaskCheckForTimeOut+0x2e>
 80096a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a8:	f383 8811 	msr	BASEPRI, r3
 80096ac:	f3bf 8f6f 	isb	sy
 80096b0:	f3bf 8f4f 	dsb	sy
 80096b4:	e7fe      	b.n	80096b4 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80096b6:	f7fe fd5d 	bl	8008174 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80096ba:	4b0f      	ldr	r3, [pc, #60]	; (80096f8 <xTaskCheckForTimeOut+0x70>)
 80096bc:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80096be:	6823      	ldr	r3, [r4, #0]
 80096c0:	1c5a      	adds	r2, r3, #1
 80096c2:	d010      	beq.n	80096e6 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80096c4:	480d      	ldr	r0, [pc, #52]	; (80096fc <xTaskCheckForTimeOut+0x74>)
 80096c6:	682e      	ldr	r6, [r5, #0]
 80096c8:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80096ca:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80096cc:	4286      	cmp	r6, r0
 80096ce:	d001      	beq.n	80096d4 <xTaskCheckForTimeOut+0x4c>
 80096d0:	428a      	cmp	r2, r1
 80096d2:	d90f      	bls.n	80096f4 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80096d4:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80096d6:	4283      	cmp	r3, r0
 80096d8:	d90a      	bls.n	80096f0 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 80096da:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 80096dc:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 80096de:	4413      	add	r3, r2
 80096e0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80096e2:	f7ff ffc5 	bl	8009670 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80096e6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80096e8:	f7fe fd66 	bl	80081b8 <vPortExitCritical>
}
 80096ec:	4620      	mov	r0, r4
 80096ee:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80096f0:	2300      	movs	r3, #0
 80096f2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80096f4:	2401      	movs	r4, #1
 80096f6:	e7f7      	b.n	80096e8 <xTaskCheckForTimeOut+0x60>
 80096f8:	24006754 	.word	0x24006754
 80096fc:	2400670c 	.word	0x2400670c

08009700 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8009700:	4b01      	ldr	r3, [pc, #4]	; (8009708 <vTaskMissedYield+0x8>)
 8009702:	2201      	movs	r2, #1
 8009704:	601a      	str	r2, [r3, #0]
}
 8009706:	4770      	bx	lr
 8009708:	24006758 	.word	0x24006758

0800970c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800970c:	4b05      	ldr	r3, [pc, #20]	; (8009724 <xTaskGetSchedulerState+0x18>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	b133      	cbz	r3, 8009720 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009712:	4b05      	ldr	r3, [pc, #20]	; (8009728 <xTaskGetSchedulerState+0x1c>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8009718:	bf0c      	ite	eq
 800971a:	2002      	moveq	r0, #2
 800971c:	2000      	movne	r0, #0
 800971e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009720:	2001      	movs	r0, #1
	}
 8009722:	4770      	bx	lr
 8009724:	24006728 	.word	0x24006728
 8009728:	240066d4 	.word	0x240066d4

0800972c <xTaskPriorityInherit>:
	{
 800972c:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800972e:	4604      	mov	r4, r0
 8009730:	b348      	cbz	r0, 8009786 <xTaskPriorityInherit+0x5a>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009732:	4a1c      	ldr	r2, [pc, #112]	; (80097a4 <xTaskPriorityInherit+0x78>)
 8009734:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009736:	6811      	ldr	r1, [r2, #0]
 8009738:	4616      	mov	r6, r2
 800973a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800973c:	428b      	cmp	r3, r1
 800973e:	d228      	bcs.n	8009792 <xTaskPriorityInherit+0x66>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009740:	6982      	ldr	r2, [r0, #24]
 8009742:	2a00      	cmp	r2, #0
 8009744:	db04      	blt.n	8009750 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009746:	6832      	ldr	r2, [r6, #0]
 8009748:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800974a:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800974e:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009750:	2214      	movs	r2, #20
 8009752:	4d15      	ldr	r5, [pc, #84]	; (80097a8 <xTaskPriorityInherit+0x7c>)
 8009754:	fb02 5303 	mla	r3, r2, r3, r5
 8009758:	6962      	ldr	r2, [r4, #20]
 800975a:	429a      	cmp	r2, r3
 800975c:	d115      	bne.n	800978a <xTaskPriorityInherit+0x5e>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800975e:	1d21      	adds	r1, r4, #4
 8009760:	4608      	mov	r0, r1
 8009762:	9101      	str	r1, [sp, #4]
 8009764:	f7fe fc8f 	bl	8008086 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009768:	6833      	ldr	r3, [r6, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800976a:	4a10      	ldr	r2, [pc, #64]	; (80097ac <xTaskPriorityInherit+0x80>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800976c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800976e:	6810      	ldr	r0, [r2, #0]
 8009770:	9901      	ldr	r1, [sp, #4]
 8009772:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009774:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009776:	d900      	bls.n	800977a <xTaskPriorityInherit+0x4e>
 8009778:	6013      	str	r3, [r2, #0]
 800977a:	2014      	movs	r0, #20
 800977c:	fb00 5003 	mla	r0, r0, r3, r5
 8009780:	f7fe fc5e 	bl	8008040 <vListInsertEnd>
				xReturn = pdTRUE;
 8009784:	2001      	movs	r0, #1
	}
 8009786:	b002      	add	sp, #8
 8009788:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800978a:	6833      	ldr	r3, [r6, #0]
 800978c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800978e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009790:	e7f8      	b.n	8009784 <xTaskPriorityInherit+0x58>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009792:	6813      	ldr	r3, [r2, #0]
 8009794:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8009796:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8009798:	42a0      	cmp	r0, r4
 800979a:	bf2c      	ite	cs
 800979c:	2000      	movcs	r0, #0
 800979e:	2001      	movcc	r0, #1
 80097a0:	e7f1      	b.n	8009786 <xTaskPriorityInherit+0x5a>
 80097a2:	bf00      	nop
 80097a4:	24006260 	.word	0x24006260
 80097a8:	2400626c 	.word	0x2400626c
 80097ac:	240066dc 	.word	0x240066dc

080097b0 <xTaskPriorityDisinherit>:
	{
 80097b0:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 80097b2:	b910      	cbnz	r0, 80097ba <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80097b4:	2000      	movs	r0, #0
	}
 80097b6:	b002      	add	sp, #8
 80097b8:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80097ba:	4b1c      	ldr	r3, [pc, #112]	; (800982c <xTaskPriorityDisinherit+0x7c>)
 80097bc:	681c      	ldr	r4, [r3, #0]
 80097be:	4284      	cmp	r4, r0
 80097c0:	d008      	beq.n	80097d4 <xTaskPriorityDisinherit+0x24>
 80097c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c6:	f383 8811 	msr	BASEPRI, r3
 80097ca:	f3bf 8f6f 	isb	sy
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	e7fe      	b.n	80097d2 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80097d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80097d6:	b943      	cbnz	r3, 80097ea <xTaskPriorityDisinherit+0x3a>
 80097d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097dc:	f383 8811 	msr	BASEPRI, r3
 80097e0:	f3bf 8f6f 	isb	sy
 80097e4:	f3bf 8f4f 	dsb	sy
 80097e8:	e7fe      	b.n	80097e8 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80097ea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 80097ec:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80097ee:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 80097f0:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80097f2:	4291      	cmp	r1, r2
 80097f4:	d0de      	beq.n	80097b4 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d1dc      	bne.n	80097b4 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097fa:	1d21      	adds	r1, r4, #4
 80097fc:	4608      	mov	r0, r1
 80097fe:	9101      	str	r1, [sp, #4]
 8009800:	f7fe fc41 	bl	8008086 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009804:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8009806:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009808:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800980c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800980e:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8009810:	4a07      	ldr	r2, [pc, #28]	; (8009830 <xTaskPriorityDisinherit+0x80>)
 8009812:	6810      	ldr	r0, [r2, #0]
 8009814:	4283      	cmp	r3, r0
 8009816:	d900      	bls.n	800981a <xTaskPriorityDisinherit+0x6a>
 8009818:	6013      	str	r3, [r2, #0]
 800981a:	4a06      	ldr	r2, [pc, #24]	; (8009834 <xTaskPriorityDisinherit+0x84>)
 800981c:	2014      	movs	r0, #20
 800981e:	fb00 2003 	mla	r0, r0, r3, r2
 8009822:	f7fe fc0d 	bl	8008040 <vListInsertEnd>
					xReturn = pdTRUE;
 8009826:	2001      	movs	r0, #1
		return xReturn;
 8009828:	e7c5      	b.n	80097b6 <xTaskPriorityDisinherit+0x6>
 800982a:	bf00      	nop
 800982c:	24006260 	.word	0x24006260
 8009830:	240066dc 	.word	0x240066dc
 8009834:	2400626c 	.word	0x2400626c

08009838 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8009838:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800983a:	4604      	mov	r4, r0
 800983c:	2800      	cmp	r0, #0
 800983e:	d044      	beq.n	80098ca <vTaskPriorityDisinheritAfterTimeout+0x92>
			configASSERT( pxTCB->uxMutexesHeld );
 8009840:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8009842:	b942      	cbnz	r2, 8009856 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8009844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009848:	f383 8811 	msr	BASEPRI, r3
 800984c:	f3bf 8f6f 	isb	sy
 8009850:	f3bf 8f4f 	dsb	sy
 8009854:	e7fe      	b.n	8009854 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009856:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009858:	4299      	cmp	r1, r3
 800985a:	bf38      	it	cc
 800985c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800985e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009860:	428b      	cmp	r3, r1
 8009862:	d032      	beq.n	80098ca <vTaskPriorityDisinheritAfterTimeout+0x92>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009864:	2a01      	cmp	r2, #1
 8009866:	d130      	bne.n	80098ca <vTaskPriorityDisinheritAfterTimeout+0x92>
					configASSERT( pxTCB != pxCurrentTCB );
 8009868:	4a19      	ldr	r2, [pc, #100]	; (80098d0 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800986a:	6812      	ldr	r2, [r2, #0]
 800986c:	4282      	cmp	r2, r0
 800986e:	d108      	bne.n	8009882 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8009870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009874:	f383 8811 	msr	BASEPRI, r3
 8009878:	f3bf 8f6f 	isb	sy
 800987c:	f3bf 8f4f 	dsb	sy
 8009880:	e7fe      	b.n	8009880 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009882:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009884:	4d13      	ldr	r5, [pc, #76]	; (80098d4 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009886:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009888:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800988c:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800988e:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009892:	bfa8      	it	ge
 8009894:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009898:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800989a:	bfa8      	it	ge
 800989c:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800989e:	429a      	cmp	r2, r3
 80098a0:	d113      	bne.n	80098ca <vTaskPriorityDisinheritAfterTimeout+0x92>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098a2:	1d01      	adds	r1, r0, #4
 80098a4:	4608      	mov	r0, r1
 80098a6:	9101      	str	r1, [sp, #4]
 80098a8:	f7fe fbed 	bl	8008086 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80098ac:	4a0a      	ldr	r2, [pc, #40]	; (80098d8 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 80098ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80098b0:	6810      	ldr	r0, [r2, #0]
 80098b2:	9901      	ldr	r1, [sp, #4]
 80098b4:	4283      	cmp	r3, r0
 80098b6:	d900      	bls.n	80098ba <vTaskPriorityDisinheritAfterTimeout+0x82>
 80098b8:	6013      	str	r3, [r2, #0]
 80098ba:	2014      	movs	r0, #20
 80098bc:	fb00 5003 	mla	r0, r0, r3, r5
	}
 80098c0:	b003      	add	sp, #12
 80098c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 80098c6:	f7fe bbbb 	b.w	8008040 <vListInsertEnd>
	}
 80098ca:	b003      	add	sp, #12
 80098cc:	bd30      	pop	{r4, r5, pc}
 80098ce:	bf00      	nop
 80098d0:	24006260 	.word	0x24006260
 80098d4:	2400626c 	.word	0x2400626c
 80098d8:	240066dc 	.word	0x240066dc

080098dc <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80098dc:	4b04      	ldr	r3, [pc, #16]	; (80098f0 <pvTaskIncrementMutexHeldCount+0x14>)
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	b11a      	cbz	r2, 80098ea <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80098e2:	6819      	ldr	r1, [r3, #0]
 80098e4:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80098e6:	3201      	adds	r2, #1
 80098e8:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 80098ea:	6818      	ldr	r0, [r3, #0]
	}
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop
 80098f0:	24006260 	.word	0x24006260

080098f4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80098f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80098f6:	4c11      	ldr	r4, [pc, #68]	; (800993c <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 80098f8:	f7fe fc3c 	bl	8008174 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80098fc:	6825      	ldr	r5, [r4, #0]
 80098fe:	b9bd      	cbnz	r5, 8009930 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8009900:	4f0f      	ldr	r7, [pc, #60]	; (8009940 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8009902:	4e10      	ldr	r6, [pc, #64]	; (8009944 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8009904:	4638      	mov	r0, r7
 8009906:	f7fe fb8d 	bl	8008024 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800990a:	4630      	mov	r0, r6
 800990c:	f7fe fb8a 	bl	8008024 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009910:	4b0d      	ldr	r3, [pc, #52]	; (8009948 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009912:	4a0e      	ldr	r2, [pc, #56]	; (800994c <prvCheckForValidListAndQueue+0x58>)
 8009914:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8009916:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009918:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800991a:	4b0d      	ldr	r3, [pc, #52]	; (8009950 <prvCheckForValidListAndQueue+0x5c>)
 800991c:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800991e:	4b0d      	ldr	r3, [pc, #52]	; (8009954 <prvCheckForValidListAndQueue+0x60>)
 8009920:	9500      	str	r5, [sp, #0]
 8009922:	f7fe fe3d 	bl	80085a0 <xQueueGenericCreateStatic>
 8009926:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009928:	b110      	cbz	r0, 8009930 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800992a:	490b      	ldr	r1, [pc, #44]	; (8009958 <prvCheckForValidListAndQueue+0x64>)
 800992c:	f7ff fa0a 	bl	8008d44 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8009930:	b003      	add	sp, #12
 8009932:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8009936:	f7fe bc3f 	b.w	80081b8 <vPortExitCritical>
 800993a:	bf00      	nop
 800993c:	24006880 	.word	0x24006880
 8009940:	24006804 	.word	0x24006804
 8009944:	24006818 	.word	0x24006818
 8009948:	2400675c 	.word	0x2400675c
 800994c:	24006764 	.word	0x24006764
 8009950:	24006760 	.word	0x24006760
 8009954:	24006830 	.word	0x24006830
 8009958:	0801b091 	.word	0x0801b091

0800995c <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 800995c:	4291      	cmp	r1, r2
{
 800995e:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009960:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009962:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8009964:	d80a      	bhi.n	800997c <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009966:	1ad2      	subs	r2, r2, r3
 8009968:	6983      	ldr	r3, [r0, #24]
 800996a:	429a      	cmp	r2, r3
 800996c:	d20d      	bcs.n	800998a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800996e:	1d01      	adds	r1, r0, #4
 8009970:	4b07      	ldr	r3, [pc, #28]	; (8009990 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009972:	6818      	ldr	r0, [r3, #0]
 8009974:	f7fe fb70 	bl	8008058 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8009978:	2000      	movs	r0, #0
}
 800997a:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800997c:	429a      	cmp	r2, r3
 800997e:	d201      	bcs.n	8009984 <prvInsertTimerInActiveList+0x28>
 8009980:	4299      	cmp	r1, r3
 8009982:	d202      	bcs.n	800998a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009984:	1d01      	adds	r1, r0, #4
 8009986:	4b03      	ldr	r3, [pc, #12]	; (8009994 <prvInsertTimerInActiveList+0x38>)
 8009988:	e7f3      	b.n	8009972 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800998a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800998c:	e7f5      	b.n	800997a <prvInsertTimerInActiveList+0x1e>
 800998e:	bf00      	nop
 8009990:	24006760 	.word	0x24006760
 8009994:	2400675c 	.word	0x2400675c

08009998 <xTimerCreateTimerTask>:
{
 8009998:	b510      	push	{r4, lr}
 800999a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800999c:	f7ff ffaa 	bl	80098f4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80099a0:	4b12      	ldr	r3, [pc, #72]	; (80099ec <xTimerCreateTimerTask+0x54>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	b1b3      	cbz	r3, 80099d4 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80099a6:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80099a8:	aa07      	add	r2, sp, #28
 80099aa:	a906      	add	r1, sp, #24
 80099ac:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80099ae:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80099b2:	f7fe fa37 	bl	8007e24 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80099b6:	9b05      	ldr	r3, [sp, #20]
 80099b8:	9a07      	ldr	r2, [sp, #28]
 80099ba:	9302      	str	r3, [sp, #8]
 80099bc:	9b06      	ldr	r3, [sp, #24]
 80099be:	490c      	ldr	r1, [pc, #48]	; (80099f0 <xTimerCreateTimerTask+0x58>)
 80099c0:	9301      	str	r3, [sp, #4]
 80099c2:	2302      	movs	r3, #2
 80099c4:	480b      	ldr	r0, [pc, #44]	; (80099f4 <xTimerCreateTimerTask+0x5c>)
 80099c6:	9300      	str	r3, [sp, #0]
 80099c8:	4623      	mov	r3, r4
 80099ca:	f7ff fb87 	bl	80090dc <xTaskCreateStatic>
 80099ce:	4b0a      	ldr	r3, [pc, #40]	; (80099f8 <xTimerCreateTimerTask+0x60>)
 80099d0:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80099d2:	b940      	cbnz	r0, 80099e6 <xTimerCreateTimerTask+0x4e>
 80099d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d8:	f383 8811 	msr	BASEPRI, r3
 80099dc:	f3bf 8f6f 	isb	sy
 80099e0:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80099e4:	e7fe      	b.n	80099e4 <xTimerCreateTimerTask+0x4c>
}
 80099e6:	2001      	movs	r0, #1
 80099e8:	b008      	add	sp, #32
 80099ea:	bd10      	pop	{r4, pc}
 80099ec:	24006880 	.word	0x24006880
 80099f0:	0801b096 	.word	0x0801b096
 80099f4:	08009acd 	.word	0x08009acd
 80099f8:	24006884 	.word	0x24006884

080099fc <xTimerGenericCommand>:
{
 80099fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80099fe:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8009a00:	4604      	mov	r4, r0
{
 8009a02:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8009a04:	b940      	cbnz	r0, 8009a18 <xTimerGenericCommand+0x1c>
 8009a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0a:	f383 8811 	msr	BASEPRI, r3
 8009a0e:	f3bf 8f6f 	isb	sy
 8009a12:	f3bf 8f4f 	dsb	sy
 8009a16:	e7fe      	b.n	8009a16 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8009a18:	4d0c      	ldr	r5, [pc, #48]	; (8009a4c <xTimerGenericCommand+0x50>)
 8009a1a:	6828      	ldr	r0, [r5, #0]
 8009a1c:	b178      	cbz	r0, 8009a3e <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009a1e:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009a20:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009a22:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009a26:	dc0c      	bgt.n	8009a42 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009a28:	f7ff fe70 	bl	800970c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009a2c:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009a2e:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009a30:	4669      	mov	r1, sp
 8009a32:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009a34:	bf0c      	ite	eq
 8009a36:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009a38:	461a      	movne	r2, r3
 8009a3a:	f7fe fe67 	bl	800870c <xQueueGenericSend>
}
 8009a3e:	b004      	add	sp, #16
 8009a40:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009a42:	2300      	movs	r3, #0
 8009a44:	4669      	mov	r1, sp
 8009a46:	f7fe ff13 	bl	8008870 <xQueueGenericSendFromISR>
 8009a4a:	e7f8      	b.n	8009a3e <xTimerGenericCommand+0x42>
 8009a4c:	24006880 	.word	0x24006880

08009a50 <prvSwitchTimerLists>:
{
 8009a50:	b5f0      	push	{r4, r5, r6, r7, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a52:	4d1c      	ldr	r5, [pc, #112]	; (8009ac4 <prvSwitchTimerLists+0x74>)
{
 8009a54:	b085      	sub	sp, #20
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a56:	2700      	movs	r7, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a58:	682b      	ldr	r3, [r5, #0]
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	b92a      	cbnz	r2, 8009a6a <prvSwitchTimerLists+0x1a>
	pxCurrentTimerList = pxOverflowTimerList;
 8009a5e:	4a1a      	ldr	r2, [pc, #104]	; (8009ac8 <prvSwitchTimerLists+0x78>)
 8009a60:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009a62:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8009a64:	6029      	str	r1, [r5, #0]
}
 8009a66:	b005      	add	sp, #20
 8009a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a6a:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a6c:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a6e:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a70:	1d21      	adds	r1, r4, #4
 8009a72:	4608      	mov	r0, r1
 8009a74:	9103      	str	r1, [sp, #12]
 8009a76:	f7fe fb06 	bl	8008086 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a7a:	6a23      	ldr	r3, [r4, #32]
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a80:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009a84:	9903      	ldr	r1, [sp, #12]
 8009a86:	f013 0f04 	tst.w	r3, #4
 8009a8a:	d0e5      	beq.n	8009a58 <prvSwitchTimerLists+0x8>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009a8c:	69a3      	ldr	r3, [r4, #24]
 8009a8e:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8009a90:	429e      	cmp	r6, r3
 8009a92:	d205      	bcs.n	8009aa0 <prvSwitchTimerLists+0x50>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a94:	6828      	ldr	r0, [r5, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009a96:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a98:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a9a:	f7fe fadd 	bl	8008058 <vListInsert>
 8009a9e:	e7db      	b.n	8009a58 <prvSwitchTimerLists+0x8>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	4632      	mov	r2, r6
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	9700      	str	r7, [sp, #0]
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	f7ff ffa7 	bl	80099fc <xTimerGenericCommand>
				configASSERT( xResult );
 8009aae:	2800      	cmp	r0, #0
 8009ab0:	d1d2      	bne.n	8009a58 <prvSwitchTimerLists+0x8>
 8009ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab6:	f383 8811 	msr	BASEPRI, r3
 8009aba:	f3bf 8f6f 	isb	sy
 8009abe:	f3bf 8f4f 	dsb	sy
 8009ac2:	e7fe      	b.n	8009ac2 <prvSwitchTimerLists+0x72>
 8009ac4:	2400675c 	.word	0x2400675c
 8009ac8:	24006760 	.word	0x24006760

08009acc <prvTimerTask>:
{
 8009acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009ad0:	4f77      	ldr	r7, [pc, #476]	; (8009cb0 <prvTimerTask+0x1e4>)
{
 8009ad2:	b087      	sub	sp, #28
					portYIELD_WITHIN_API();
 8009ad4:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 8009cc0 <prvTimerTask+0x1f4>
 8009ad8:	46b9      	mov	r9, r7
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	f8d3 b000 	ldr.w	fp, [r3]
 8009ae0:	f1bb 0f00 	cmp.w	fp, #0
 8009ae4:	d028      	beq.n	8009b38 <prvTimerTask+0x6c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ae6:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009ae8:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009aea:	f8d3 b000 	ldr.w	fp, [r3]
	if( xTimeNow < xLastTime )
 8009aee:	4e71      	ldr	r6, [pc, #452]	; (8009cb4 <prvTimerTask+0x1e8>)
	vTaskSuspendAll();
 8009af0:	f7ff fb5a 	bl	80091a8 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8009af4:	f7ff fb60 	bl	80091b8 <xTaskGetTickCount>
 8009af8:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8009afa:	6833      	ldr	r3, [r6, #0]
 8009afc:	46b0      	mov	r8, r6
 8009afe:	4298      	cmp	r0, r3
 8009b00:	d31c      	bcc.n	8009b3c <prvTimerTask+0x70>
	xLastTime = xTimeNow;
 8009b02:	6030      	str	r0, [r6, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009b04:	b31c      	cbz	r4, 8009b4e <prvTimerTask+0x82>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009b06:	4b6c      	ldr	r3, [pc, #432]	; (8009cb8 <prvTimerTask+0x1ec>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	681c      	ldr	r4, [r3, #0]
 8009b0c:	fab4 f484 	clz	r4, r4
 8009b10:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009b12:	4b6a      	ldr	r3, [pc, #424]	; (8009cbc <prvTimerTask+0x1f0>)
 8009b14:	4622      	mov	r2, r4
 8009b16:	ebab 0105 	sub.w	r1, fp, r5
 8009b1a:	6818      	ldr	r0, [r3, #0]
 8009b1c:	f7ff f951 	bl	8008dc2 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009b20:	f7ff fbe6 	bl	80092f0 <xTaskResumeAll>
 8009b24:	b978      	cbnz	r0, 8009b46 <prvTimerTask+0x7a>
					portYIELD_WITHIN_API();
 8009b26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009b2a:	f8ca 3000 	str.w	r3, [sl]
 8009b2e:	f3bf 8f4f 	dsb	sy
 8009b32:	f3bf 8f6f 	isb	sy
 8009b36:	e006      	b.n	8009b46 <prvTimerTask+0x7a>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009b38:	2401      	movs	r4, #1
 8009b3a:	e7d8      	b.n	8009aee <prvTimerTask+0x22>
		prvSwitchTimerLists();
 8009b3c:	f7ff ff88 	bl	8009a50 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8009b40:	6035      	str	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8009b42:	f7ff fbd5 	bl	80092f0 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b46:	4e5d      	ldr	r6, [pc, #372]	; (8009cbc <prvTimerTask+0x1f0>)
 8009b48:	f04f 0b00 	mov.w	fp, #0
 8009b4c:	e035      	b.n	8009bba <prvTimerTask+0xee>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009b4e:	4583      	cmp	fp, r0
 8009b50:	d8df      	bhi.n	8009b12 <prvTimerTask+0x46>
				( void ) xTaskResumeAll();
 8009b52:	f7ff fbcd 	bl	80092f0 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b56:	f8d9 3000 	ldr.w	r3, [r9]
 8009b5a:	68db      	ldr	r3, [r3, #12]
 8009b5c:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b5e:	1d30      	adds	r0, r6, #4
 8009b60:	f7fe fa91 	bl	8008086 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b64:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8009b68:	0758      	lsls	r0, r3, #29
 8009b6a:	d518      	bpl.n	8009b9e <prvTimerTask+0xd2>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009b6c:	69b1      	ldr	r1, [r6, #24]
 8009b6e:	465b      	mov	r3, fp
 8009b70:	462a      	mov	r2, r5
 8009b72:	4630      	mov	r0, r6
 8009b74:	4459      	add	r1, fp
 8009b76:	f7ff fef1 	bl	800995c <prvInsertTimerInActiveList>
 8009b7a:	b1a0      	cbz	r0, 8009ba6 <prvTimerTask+0xda>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b7c:	4623      	mov	r3, r4
 8009b7e:	465a      	mov	r2, fp
 8009b80:	4621      	mov	r1, r4
 8009b82:	4630      	mov	r0, r6
 8009b84:	9400      	str	r4, [sp, #0]
 8009b86:	f7ff ff39 	bl	80099fc <xTimerGenericCommand>
			configASSERT( xResult );
 8009b8a:	b960      	cbnz	r0, 8009ba6 <prvTimerTask+0xda>
 8009b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b90:	f383 8811 	msr	BASEPRI, r3
 8009b94:	f3bf 8f6f 	isb	sy
 8009b98:	f3bf 8f4f 	dsb	sy
 8009b9c:	e7fe      	b.n	8009b9c <prvTimerTask+0xd0>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b9e:	f023 0301 	bic.w	r3, r3, #1
 8009ba2:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ba6:	6a33      	ldr	r3, [r6, #32]
 8009ba8:	4630      	mov	r0, r6
 8009baa:	4798      	blx	r3
}
 8009bac:	e7cb      	b.n	8009b46 <prvTimerTask+0x7a>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009bae:	9b03      	ldr	r3, [sp, #12]
 8009bb0:	9905      	ldr	r1, [sp, #20]
 8009bb2:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009bb4:	9b02      	ldr	r3, [sp, #8]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	da0a      	bge.n	8009bd0 <prvTimerTask+0x104>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009bba:	2200      	movs	r2, #0
 8009bbc:	a902      	add	r1, sp, #8
 8009bbe:	6830      	ldr	r0, [r6, #0]
 8009bc0:	f7fe ff0c 	bl	80089dc <xQueueReceive>
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	d088      	beq.n	8009ada <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009bc8:	9b02      	ldr	r3, [sp, #8]
 8009bca:	9804      	ldr	r0, [sp, #16]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	dbee      	blt.n	8009bae <prvTimerTask+0xe2>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009bd0:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009bd2:	6963      	ldr	r3, [r4, #20]
 8009bd4:	b9a3      	cbnz	r3, 8009c00 <prvTimerTask+0x134>
	xTimeNow = xTaskGetTickCount();
 8009bd6:	f7ff faef 	bl	80091b8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8009bda:	f8d8 3000 	ldr.w	r3, [r8]
	xTimeNow = xTaskGetTickCount();
 8009bde:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8009be0:	4298      	cmp	r0, r3
 8009be2:	d201      	bcs.n	8009be8 <prvTimerTask+0x11c>
		prvSwitchTimerLists();
 8009be4:	f7ff ff34 	bl	8009a50 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8009be8:	9b02      	ldr	r3, [sp, #8]
 8009bea:	f8c8 5000 	str.w	r5, [r8]
			switch( xMessage.xMessageID )
 8009bee:	2b09      	cmp	r3, #9
 8009bf0:	d8e3      	bhi.n	8009bba <prvTimerTask+0xee>
 8009bf2:	e8df f003 	tbb	[pc, r3]
 8009bf6:	0909      	.short	0x0909
 8009bf8:	543b3409 	.word	0x543b3409
 8009bfc:	3b340909 	.word	0x3b340909
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c00:	1d20      	adds	r0, r4, #4
 8009c02:	f7fe fa40 	bl	8008086 <uxListRemove>
 8009c06:	e7e6      	b.n	8009bd6 <prvTimerTask+0x10a>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c08:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009c0c:	462a      	mov	r2, r5
 8009c0e:	69a1      	ldr	r1, [r4, #24]
 8009c10:	4620      	mov	r0, r4
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c12:	f043 0301 	orr.w	r3, r3, #1
 8009c16:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009c1a:	9b03      	ldr	r3, [sp, #12]
 8009c1c:	4419      	add	r1, r3
 8009c1e:	f7ff fe9d 	bl	800995c <prvInsertTimerInActiveList>
 8009c22:	2800      	cmp	r0, #0
 8009c24:	d0c9      	beq.n	8009bba <prvTimerTask+0xee>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c26:	6a23      	ldr	r3, [r4, #32]
 8009c28:	4620      	mov	r0, r4
 8009c2a:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c2c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009c30:	0759      	lsls	r1, r3, #29
 8009c32:	d5c2      	bpl.n	8009bba <prvTimerTask+0xee>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009c34:	69a2      	ldr	r2, [r4, #24]
 8009c36:	2300      	movs	r3, #0
 8009c38:	9903      	ldr	r1, [sp, #12]
 8009c3a:	4620      	mov	r0, r4
 8009c3c:	f8cd b000 	str.w	fp, [sp]
 8009c40:	440a      	add	r2, r1
 8009c42:	4619      	mov	r1, r3
 8009c44:	f7ff feda 	bl	80099fc <xTimerGenericCommand>
							configASSERT( xResult );
 8009c48:	2800      	cmp	r0, #0
 8009c4a:	d1b6      	bne.n	8009bba <prvTimerTask+0xee>
 8009c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c50:	f383 8811 	msr	BASEPRI, r3
 8009c54:	f3bf 8f6f 	isb	sy
 8009c58:	f3bf 8f4f 	dsb	sy
 8009c5c:	e7fe      	b.n	8009c5c <prvTimerTask+0x190>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c5e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c62:	f023 0301 	bic.w	r3, r3, #1
 8009c66:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8009c6a:	e7a6      	b.n	8009bba <prvTimerTask+0xee>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c6c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009c70:	9903      	ldr	r1, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c72:	f043 0301 	orr.w	r3, r3, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009c76:	61a1      	str	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c78:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009c7c:	b941      	cbnz	r1, 8009c90 <prvTimerTask+0x1c4>
 8009c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c82:	f383 8811 	msr	BASEPRI, r3
 8009c86:	f3bf 8f6f 	isb	sy
 8009c8a:	f3bf 8f4f 	dsb	sy
 8009c8e:	e7fe      	b.n	8009c8e <prvTimerTask+0x1c2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009c90:	462b      	mov	r3, r5
 8009c92:	462a      	mov	r2, r5
 8009c94:	4429      	add	r1, r5
 8009c96:	4620      	mov	r0, r4
 8009c98:	f7ff fe60 	bl	800995c <prvInsertTimerInActiveList>
					break;
 8009c9c:	e78d      	b.n	8009bba <prvTimerTask+0xee>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009c9e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009ca2:	079a      	lsls	r2, r3, #30
 8009ca4:	d4dd      	bmi.n	8009c62 <prvTimerTask+0x196>
							vPortFree( pxTimer );
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	f7fe f97e 	bl	8007fa8 <vPortFree>
 8009cac:	e785      	b.n	8009bba <prvTimerTask+0xee>
 8009cae:	bf00      	nop
 8009cb0:	2400675c 	.word	0x2400675c
 8009cb4:	2400682c 	.word	0x2400682c
 8009cb8:	24006760 	.word	0x24006760
 8009cbc:	24006880 	.word	0x24006880
 8009cc0:	e000ed04 	.word	0xe000ed04

08009cc4 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8009cc4:	8880      	ldrh	r0, [r0, #4]
 8009cc6:	4770      	bx	lr

08009cc8 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8009cc8:	2300      	movs	r3, #0
 8009cca:	8083      	strh	r3, [r0, #4]
 8009ccc:	4770      	bx	lr
	...

08009cd0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8009cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cd2:	6803      	ldr	r3, [r0, #0]
 8009cd4:	460e      	mov	r6, r1
 8009cd6:	2100      	movs	r1, #0
 8009cd8:	4605      	mov	r5, r0
 8009cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cdc:	4798      	blx	r3
 8009cde:	4604      	mov	r4, r0
 8009ce0:	682b      	ldr	r3, [r5, #0]
 8009ce2:	4628      	mov	r0, r5
 8009ce4:	1b34      	subs	r4, r6, r4
 8009ce6:	6a1b      	ldr	r3, [r3, #32]
 8009ce8:	b2a4      	uxth	r4, r4
 8009cea:	4798      	blx	r3
 8009cec:	88ab      	ldrh	r3, [r5, #4]
 8009cee:	fbb4 f4f0 	udiv	r4, r4, r0
 8009cf2:	42a3      	cmp	r3, r4
 8009cf4:	d805      	bhi.n	8009d02 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8009cf6:	4b0e      	ldr	r3, [pc, #56]	; (8009d30 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8009cf8:	211e      	movs	r1, #30
 8009cfa:	4a0e      	ldr	r2, [pc, #56]	; (8009d34 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8009cfc:	480e      	ldr	r0, [pc, #56]	; (8009d38 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8009cfe:	f00f f8bd 	bl	8018e7c <__assert_func>
 8009d02:	682b      	ldr	r3, [r5, #0]
 8009d04:	2100      	movs	r1, #0
 8009d06:	4628      	mov	r0, r5
 8009d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0a:	4798      	blx	r3
 8009d0c:	682b      	ldr	r3, [r5, #0]
 8009d0e:	4607      	mov	r7, r0
 8009d10:	4628      	mov	r0, r5
 8009d12:	6a1b      	ldr	r3, [r3, #32]
 8009d14:	4798      	blx	r3
 8009d16:	1bf3      	subs	r3, r6, r7
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	fbb3 f2f0 	udiv	r2, r3, r0
 8009d1e:	fb02 3010 	mls	r0, r2, r0, r3
 8009d22:	b118      	cbz	r0, 8009d2c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8009d24:	4b05      	ldr	r3, [pc, #20]	; (8009d3c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8009d26:	211f      	movs	r1, #31
 8009d28:	4a02      	ldr	r2, [pc, #8]	; (8009d34 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8009d2a:	e7e7      	b.n	8009cfc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d30:	0801b09e 	.word	0x0801b09e
 8009d34:	0801b20a 	.word	0x0801b20a
 8009d38:	0801b0b3 	.word	0x0801b0b3
 8009d3c:	0801b0e1 	.word	0x0801b0e1

08009d40 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8009d40:	b538      	push	{r3, r4, r5, lr}
 8009d42:	6803      	ldr	r3, [r0, #0]
 8009d44:	460d      	mov	r5, r1
 8009d46:	4604      	mov	r4, r0
 8009d48:	6a1b      	ldr	r3, [r3, #32]
 8009d4a:	4798      	blx	r3
 8009d4c:	4285      	cmp	r5, r0
 8009d4e:	d905      	bls.n	8009d5c <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8009d50:	4b0c      	ldr	r3, [pc, #48]	; (8009d84 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8009d52:	2130      	movs	r1, #48	; 0x30
 8009d54:	4a0c      	ldr	r2, [pc, #48]	; (8009d88 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8009d56:	480d      	ldr	r0, [pc, #52]	; (8009d8c <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8009d58:	f00f f890 	bl	8018e7c <__assert_func>
 8009d5c:	6823      	ldr	r3, [r4, #0]
 8009d5e:	4620      	mov	r0, r4
 8009d60:	88a5      	ldrh	r5, [r4, #4]
 8009d62:	69db      	ldr	r3, [r3, #28]
 8009d64:	4798      	blx	r3
 8009d66:	4285      	cmp	r5, r0
 8009d68:	d303      	bcc.n	8009d72 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8009d6a:	4b09      	ldr	r3, [pc, #36]	; (8009d90 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8009d6c:	2131      	movs	r1, #49	; 0x31
 8009d6e:	4a06      	ldr	r2, [pc, #24]	; (8009d88 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8009d70:	e7f1      	b.n	8009d56 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8009d72:	6823      	ldr	r3, [r4, #0]
 8009d74:	4620      	mov	r0, r4
 8009d76:	88a1      	ldrh	r1, [r4, #4]
 8009d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d7a:	4798      	blx	r3
 8009d7c:	88a3      	ldrh	r3, [r4, #4]
 8009d7e:	3301      	adds	r3, #1
 8009d80:	80a3      	strh	r3, [r4, #4]
 8009d82:	bd38      	pop	{r3, r4, r5, pc}
 8009d84:	0801b15b 	.word	0x0801b15b
 8009d88:	0801b24d 	.word	0x0801b24d
 8009d8c:	0801b0b3 	.word	0x0801b0b3
 8009d90:	0801b172 	.word	0x0801b172

08009d94 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8009d94:	b570      	push	{r4, r5, r6, lr}
 8009d96:	6803      	ldr	r3, [r0, #0]
 8009d98:	4616      	mov	r6, r2
 8009d9a:	4604      	mov	r4, r0
 8009d9c:	460d      	mov	r5, r1
 8009d9e:	6a1b      	ldr	r3, [r3, #32]
 8009da0:	4798      	blx	r3
 8009da2:	4286      	cmp	r6, r0
 8009da4:	d905      	bls.n	8009db2 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8009da6:	4b06      	ldr	r3, [pc, #24]	; (8009dc0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8009da8:	213a      	movs	r1, #58	; 0x3a
 8009daa:	4a06      	ldr	r2, [pc, #24]	; (8009dc4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8009dac:	4806      	ldr	r0, [pc, #24]	; (8009dc8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8009dae:	f00f f865 	bl	8018e7c <__assert_func>
 8009db2:	6823      	ldr	r3, [r4, #0]
 8009db4:	4629      	mov	r1, r5
 8009db6:	4620      	mov	r0, r4
 8009db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009dbe:	4718      	bx	r3
 8009dc0:	0801b15b 	.word	0x0801b15b
 8009dc4:	0801b1c0 	.word	0x0801b1c0
 8009dc8:	0801b0b3 	.word	0x0801b0b3

08009dcc <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8009dcc:	4770      	bx	lr
	...

08009dd0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8009dd0:	4a02      	ldr	r2, [pc, #8]	; (8009ddc <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8009dd2:	6002      	str	r2, [r0, #0]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	8082      	strh	r2, [r0, #4]
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	0801b194 	.word	0x0801b194

08009de0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8009de0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009de2:	2000      	movs	r0, #0
 8009de4:	b12b      	cbz	r3, 8009df2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8009de6:	b920      	cbnz	r0, 8009df2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8009de8:	1a5a      	subs	r2, r3, r1
 8009dea:	699b      	ldr	r3, [r3, #24]
 8009dec:	4250      	negs	r0, r2
 8009dee:	4150      	adcs	r0, r2
 8009df0:	e7f8      	b.n	8009de4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8009df2:	4770      	bx	lr

08009df4 <_ZN8touchgfx9Container9removeAllEv>:
 8009df4:	2200      	movs	r2, #0
 8009df6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009df8:	b123      	cbz	r3, 8009e04 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8009dfa:	6999      	ldr	r1, [r3, #24]
 8009dfc:	6281      	str	r1, [r0, #40]	; 0x28
 8009dfe:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8009e02:	e7f8      	b.n	8009df6 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8009e04:	4770      	bx	lr

08009e06 <_ZN8touchgfx9Container6unlinkEv>:
 8009e06:	2300      	movs	r3, #0
 8009e08:	6283      	str	r3, [r0, #40]	; 0x28
 8009e0a:	4770      	bx	lr

08009e0c <_ZNK8touchgfx9Container12getSolidRectEv>:
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	8002      	strh	r2, [r0, #0]
 8009e10:	8042      	strh	r2, [r0, #2]
 8009e12:	8082      	strh	r2, [r0, #4]
 8009e14:	80c2      	strh	r2, [r0, #6]
 8009e16:	4770      	bx	lr

08009e18 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8009e18:	b570      	push	{r4, r5, r6, lr}
 8009e1a:	460d      	mov	r5, r1
 8009e1c:	4616      	mov	r6, r2
 8009e1e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8009e20:	b13c      	cbz	r4, 8009e32 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8009e22:	6823      	ldr	r3, [r4, #0]
 8009e24:	4620      	mov	r0, r4
 8009e26:	4632      	mov	r2, r6
 8009e28:	4629      	mov	r1, r5
 8009e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e2c:	4798      	blx	r3
 8009e2e:	69a4      	ldr	r4, [r4, #24]
 8009e30:	e7f6      	b.n	8009e20 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8009e32:	bd70      	pop	{r4, r5, r6, pc}

08009e34 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8009e34:	b538      	push	{r3, r4, r5, lr}
 8009e36:	460d      	mov	r5, r1
 8009e38:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8009e3a:	b134      	cbz	r4, 8009e4a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8009e3c:	682b      	ldr	r3, [r5, #0]
 8009e3e:	4621      	mov	r1, r4
 8009e40:	4628      	mov	r0, r5
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	4798      	blx	r3
 8009e46:	69a4      	ldr	r4, [r4, #24]
 8009e48:	e7f7      	b.n	8009e3a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8009e4a:	bd38      	pop	{r3, r4, r5, pc}

08009e4c <_ZN8touchgfx9ContainerD1Ev>:
 8009e4c:	4770      	bx	lr

08009e4e <_ZN8touchgfx9ContainerD0Ev>:
 8009e4e:	b510      	push	{r4, lr}
 8009e50:	4604      	mov	r4, r0
 8009e52:	212c      	movs	r1, #44	; 0x2c
 8009e54:	f00e ffe3 	bl	8018e1e <_ZdlPvj>
 8009e58:	4620      	mov	r0, r4
 8009e5a:	bd10      	pop	{r4, pc}

08009e5c <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8009e5c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009e5e:	b19b      	cbz	r3, 8009e88 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8009e60:	428b      	cmp	r3, r1
 8009e62:	d109      	bne.n	8009e78 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8009e64:	699a      	ldr	r2, [r3, #24]
 8009e66:	2100      	movs	r1, #0
 8009e68:	6159      	str	r1, [r3, #20]
 8009e6a:	6282      	str	r2, [r0, #40]	; 0x28
 8009e6c:	b902      	cbnz	r2, 8009e70 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8009e6e:	4770      	bx	lr
 8009e70:	6199      	str	r1, [r3, #24]
 8009e72:	4770      	bx	lr
 8009e74:	4613      	mov	r3, r2
 8009e76:	b13a      	cbz	r2, 8009e88 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8009e78:	699a      	ldr	r2, [r3, #24]
 8009e7a:	428a      	cmp	r2, r1
 8009e7c:	d1fa      	bne.n	8009e74 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8009e7e:	698a      	ldr	r2, [r1, #24]
 8009e80:	619a      	str	r2, [r3, #24]
 8009e82:	2300      	movs	r3, #0
 8009e84:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8009e88:	4770      	bx	lr

08009e8a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8009e8a:	b410      	push	{r4}
 8009e8c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009e8e:	4604      	mov	r4, r0
 8009e90:	b92b      	cbnz	r3, 8009e9e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8009e92:	6803      	ldr	r3, [r0, #0]
 8009e94:	4611      	mov	r1, r2
 8009e96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e9c:	4718      	bx	r3
 8009e9e:	b941      	cbnz	r1, 8009eb2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8009ea0:	6193      	str	r3, [r2, #24]
 8009ea2:	6282      	str	r2, [r0, #40]	; 0x28
 8009ea4:	6154      	str	r4, [r2, #20]
 8009ea6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009eaa:	4770      	bx	lr
 8009eac:	4603      	mov	r3, r0
 8009eae:	2800      	cmp	r0, #0
 8009eb0:	d0f9      	beq.n	8009ea6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8009eb2:	4299      	cmp	r1, r3
 8009eb4:	6998      	ldr	r0, [r3, #24]
 8009eb6:	d1f9      	bne.n	8009eac <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8009eb8:	6190      	str	r0, [r2, #24]
 8009eba:	618a      	str	r2, [r1, #24]
 8009ebc:	e7f2      	b.n	8009ea4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08009ec0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8009ec0:	4288      	cmp	r0, r1
 8009ec2:	b508      	push	{r3, lr}
 8009ec4:	d105      	bne.n	8009ed2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8009ec6:	4b11      	ldr	r3, [pc, #68]	; (8009f0c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8009ec8:	2123      	movs	r1, #35	; 0x23
 8009eca:	4a11      	ldr	r2, [pc, #68]	; (8009f10 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8009ecc:	4811      	ldr	r0, [pc, #68]	; (8009f14 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8009ece:	f00e ffd5 	bl	8018e7c <__assert_func>
 8009ed2:	694b      	ldr	r3, [r1, #20]
 8009ed4:	b11b      	cbz	r3, 8009ede <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8009ed6:	4b10      	ldr	r3, [pc, #64]	; (8009f18 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8009ed8:	2124      	movs	r1, #36	; 0x24
 8009eda:	4a0d      	ldr	r2, [pc, #52]	; (8009f10 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8009edc:	e7f6      	b.n	8009ecc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8009ede:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8009ee2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009ee4:	b913      	cbnz	r3, 8009eec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8009ee6:	6281      	str	r1, [r0, #40]	; 0x28
 8009ee8:	bd08      	pop	{r3, pc}
 8009eea:	4613      	mov	r3, r2
 8009eec:	699a      	ldr	r2, [r3, #24]
 8009eee:	b12a      	cbz	r2, 8009efc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8009ef0:	428b      	cmp	r3, r1
 8009ef2:	d1fa      	bne.n	8009eea <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8009ef4:	4b09      	ldr	r3, [pc, #36]	; (8009f1c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8009ef6:	2135      	movs	r1, #53	; 0x35
 8009ef8:	4a05      	ldr	r2, [pc, #20]	; (8009f10 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8009efa:	e7e7      	b.n	8009ecc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8009efc:	428b      	cmp	r3, r1
 8009efe:	d103      	bne.n	8009f08 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8009f00:	4b06      	ldr	r3, [pc, #24]	; (8009f1c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8009f02:	2138      	movs	r1, #56	; 0x38
 8009f04:	4a02      	ldr	r2, [pc, #8]	; (8009f10 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8009f06:	e7e1      	b.n	8009ecc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8009f08:	6199      	str	r1, [r3, #24]
 8009f0a:	e7ed      	b.n	8009ee8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8009f0c:	0801b28b 	.word	0x0801b28b
 8009f10:	0801b3e0 	.word	0x0801b3e0
 8009f14:	0801b2b7 	.word	0x0801b2b7
 8009f18:	0801b2ea 	.word	0x0801b2ea
 8009f1c:	0801b320 	.word	0x0801b320

08009f20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8009f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f24:	461f      	mov	r7, r3
 8009f26:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8009f2a:	460d      	mov	r5, r1
 8009f2c:	4616      	mov	r6, r2
 8009f2e:	b103      	cbz	r3, 8009f32 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8009f30:	6038      	str	r0, [r7, #0]
 8009f32:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8009f34:	b314      	cbz	r4, 8009f7c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8009f36:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8009f3a:	b1eb      	cbz	r3, 8009f78 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8009f3c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8009f40:	428d      	cmp	r5, r1
 8009f42:	db19      	blt.n	8009f78 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8009f44:	b289      	uxth	r1, r1
 8009f46:	8923      	ldrh	r3, [r4, #8]
 8009f48:	440b      	add	r3, r1
 8009f4a:	b21b      	sxth	r3, r3
 8009f4c:	429d      	cmp	r5, r3
 8009f4e:	da13      	bge.n	8009f78 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8009f50:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8009f54:	4296      	cmp	r6, r2
 8009f56:	db0f      	blt.n	8009f78 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8009f58:	b292      	uxth	r2, r2
 8009f5a:	8963      	ldrh	r3, [r4, #10]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	b21b      	sxth	r3, r3
 8009f60:	429e      	cmp	r6, r3
 8009f62:	da09      	bge.n	8009f78 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8009f64:	6823      	ldr	r3, [r4, #0]
 8009f66:	1ab2      	subs	r2, r6, r2
 8009f68:	1a69      	subs	r1, r5, r1
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8009f70:	b212      	sxth	r2, r2
 8009f72:	463b      	mov	r3, r7
 8009f74:	b209      	sxth	r1, r1
 8009f76:	47c0      	blx	r8
 8009f78:	69a4      	ldr	r4, [r4, #24]
 8009f7a:	e7db      	b.n	8009f34 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8009f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009f80 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8009f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f84:	4c6d      	ldr	r4, [pc, #436]	; (800a13c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8009f86:	b0a1      	sub	sp, #132	; 0x84
 8009f88:	4606      	mov	r6, r0
 8009f8a:	6824      	ldr	r4, [r4, #0]
 8009f8c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8009f8e:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8009f92:	2400      	movs	r4, #0
 8009f94:	9303      	str	r3, [sp, #12]
 8009f96:	802c      	strh	r4, [r5, #0]
 8009f98:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8009f9a:	802c      	strh	r4, [r5, #0]
 8009f9c:	601c      	str	r4, [r3, #0]
 8009f9e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8009fa2:	f7ff ffbd 	bl	8009f20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8009fa6:	f1b9 0f03 	cmp.w	r9, #3
 8009faa:	f340 80c1 	ble.w	800a130 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8009fae:	4631      	mov	r1, r6
 8009fb0:	a80c      	add	r0, sp, #48	; 0x30
 8009fb2:	f004 feed 	bl	800ed90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8009fb6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8009fba:	9306      	str	r3, [sp, #24]
 8009fbc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8009fc0:	9307      	str	r3, [sp, #28]
 8009fc2:	9b03      	ldr	r3, [sp, #12]
 8009fc4:	f8d3 a000 	ldr.w	sl, [r3]
 8009fc8:	f1ba 0f00 	cmp.w	sl, #0
 8009fcc:	f000 80b3 	beq.w	800a136 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8009fd0:	4651      	mov	r1, sl
 8009fd2:	a810      	add	r0, sp, #64	; 0x40
 8009fd4:	f004 fedc 	bl	800ed90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8009fd8:	2002      	movs	r0, #2
 8009fda:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8009fde:	9b01      	ldr	r3, [sp, #4]
 8009fe0:	9a06      	ldr	r2, [sp, #24]
 8009fe2:	fb91 f1f0 	sdiv	r1, r1, r0
 8009fe6:	189d      	adds	r5, r3, r2
 8009fe8:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8009fec:	9a07      	ldr	r2, [sp, #28]
 8009fee:	4419      	add	r1, r3
 8009ff0:	9b02      	ldr	r3, [sp, #8]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8009ff8:	1a6d      	subs	r5, r5, r1
 8009ffa:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8009ffe:	fb92 f2f0 	sdiv	r2, r2, r0
 800a002:	440a      	add	r2, r1
 800a004:	1a9b      	subs	r3, r3, r2
 800a006:	435b      	muls	r3, r3
 800a008:	fb05 3505 	mla	r5, r5, r5, r3
 800a00c:	4f4c      	ldr	r7, [pc, #304]	; (800a140 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800a00e:	ac10      	add	r4, sp, #64	; 0x40
 800a010:	f1b9 0f0c 	cmp.w	r9, #12
 800a014:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a018:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a01a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a01c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a01e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a020:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800a024:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a028:	f04f 0303 	mov.w	r3, #3
 800a02c:	bfd8      	it	le
 800a02e:	f109 32ff 	addle.w	r2, r9, #4294967295
 800a032:	f04f 0400 	mov.w	r4, #0
 800a036:	f8cd 9000 	str.w	r9, [sp]
 800a03a:	bfcc      	ite	gt
 800a03c:	4698      	movgt	r8, r3
 800a03e:	fb92 f8f3 	sdivle	r8, r2, r3
 800a042:	1c63      	adds	r3, r4, #1
 800a044:	aa10      	add	r2, sp, #64	; 0x40
 800a046:	f004 0401 	and.w	r4, r4, #1
 800a04a:	f04f 0b00 	mov.w	fp, #0
 800a04e:	9308      	str	r3, [sp, #32]
 800a050:	9b00      	ldr	r3, [sp, #0]
 800a052:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800a056:	fb93 f3f8 	sdiv	r3, r3, r8
 800a05a:	3404      	adds	r4, #4
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	9304      	str	r3, [sp, #16]
 800a060:	9a04      	ldr	r2, [sp, #16]
 800a062:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a066:	fb13 f302 	smulbb	r3, r3, r2
 800a06a:	9a01      	ldr	r2, [sp, #4]
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	1899      	adds	r1, r3, r2
 800a070:	9305      	str	r3, [sp, #20]
 800a072:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800a076:	b209      	sxth	r1, r1
 800a078:	4299      	cmp	r1, r3
 800a07a:	db4d      	blt.n	800a118 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800a07c:	8932      	ldrh	r2, [r6, #8]
 800a07e:	4413      	add	r3, r2
 800a080:	b21b      	sxth	r3, r3
 800a082:	4299      	cmp	r1, r3
 800a084:	da48      	bge.n	800a118 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800a086:	9b04      	ldr	r3, [sp, #16]
 800a088:	6827      	ldr	r7, [r4, #0]
 800a08a:	fb17 f703 	smulbb	r7, r7, r3
 800a08e:	9b02      	ldr	r3, [sp, #8]
 800a090:	b2bf      	uxth	r7, r7
 800a092:	18fa      	adds	r2, r7, r3
 800a094:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800a098:	b212      	sxth	r2, r2
 800a09a:	429a      	cmp	r2, r3
 800a09c:	db3c      	blt.n	800a118 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800a09e:	8970      	ldrh	r0, [r6, #10]
 800a0a0:	4403      	add	r3, r0
 800a0a2:	b21b      	sxth	r3, r3
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	da37      	bge.n	800a118 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	4630      	mov	r0, r6
 800a0ac:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0ae:	ab0b      	add	r3, sp, #44	; 0x2c
 800a0b0:	f7ff ff36 	bl	8009f20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800a0b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a0b6:	b37a      	cbz	r2, 800a118 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800a0b8:	4552      	cmp	r2, sl
 800a0ba:	d02d      	beq.n	800a118 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800a0bc:	4611      	mov	r1, r2
 800a0be:	a80e      	add	r0, sp, #56	; 0x38
 800a0c0:	9209      	str	r2, [sp, #36]	; 0x24
 800a0c2:	f004 fe65 	bl	800ed90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800a0c6:	f04f 0e02 	mov.w	lr, #2
 800a0ca:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800a0ce:	9a06      	ldr	r2, [sp, #24]
 800a0d0:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 800a0d4:	9b01      	ldr	r3, [sp, #4]
 800a0d6:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 800a0da:	4413      	add	r3, r2
 800a0dc:	9a07      	ldr	r2, [sp, #28]
 800a0de:	fb91 f1fe 	sdiv	r1, r1, lr
 800a0e2:	fb9c fcfe 	sdiv	ip, ip, lr
 800a0e6:	4401      	add	r1, r0
 800a0e8:	1a58      	subs	r0, r3, r1
 800a0ea:	9b02      	ldr	r3, [sp, #8]
 800a0ec:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 800a0f0:	4413      	add	r3, r2
 800a0f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0f4:	448c      	add	ip, r1
 800a0f6:	eba3 030c 	sub.w	r3, r3, ip
 800a0fa:	435b      	muls	r3, r3
 800a0fc:	fb00 3300 	mla	r3, r0, r0, r3
 800a100:	42ab      	cmp	r3, r5
 800a102:	d208      	bcs.n	800a116 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800a104:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a106:	461d      	mov	r5, r3
 800a108:	9803      	ldr	r0, [sp, #12]
 800a10a:	6001      	str	r1, [r0, #0]
 800a10c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800a10e:	9805      	ldr	r0, [sp, #20]
 800a110:	8008      	strh	r0, [r1, #0]
 800a112:	992b      	ldr	r1, [sp, #172]	; 0xac
 800a114:	800f      	strh	r7, [r1, #0]
 800a116:	4692      	mov	sl, r2
 800a118:	f10b 0b01 	add.w	fp, fp, #1
 800a11c:	3408      	adds	r4, #8
 800a11e:	f1bb 0f04 	cmp.w	fp, #4
 800a122:	d19d      	bne.n	800a060 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800a124:	9b00      	ldr	r3, [sp, #0]
 800a126:	9c08      	ldr	r4, [sp, #32]
 800a128:	444b      	add	r3, r9
 800a12a:	4544      	cmp	r4, r8
 800a12c:	9300      	str	r3, [sp, #0]
 800a12e:	d188      	bne.n	800a042 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800a130:	b021      	add	sp, #132	; 0x84
 800a132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a136:	f04f 35ff 	mov.w	r5, #4294967295
 800a13a:	e767      	b.n	800a00c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800a13c:	24006894 	.word	0x24006894
 800a140:	08019f88 	.word	0x08019f88

0800a144 <_ZN8touchgfx4RectaNERKS0_>:
 800a144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a148:	f9b1 7000 	ldrsh.w	r7, [r1]
 800a14c:	888c      	ldrh	r4, [r1, #4]
 800a14e:	f9b0 9000 	ldrsh.w	r9, [r0]
 800a152:	443c      	add	r4, r7
 800a154:	b2a4      	uxth	r4, r4
 800a156:	fa0f f884 	sxth.w	r8, r4
 800a15a:	45c1      	cmp	r9, r8
 800a15c:	da2f      	bge.n	800a1be <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800a15e:	8882      	ldrh	r2, [r0, #4]
 800a160:	444a      	add	r2, r9
 800a162:	b292      	uxth	r2, r2
 800a164:	fa0f fe82 	sxth.w	lr, r2
 800a168:	4577      	cmp	r7, lr
 800a16a:	da28      	bge.n	800a1be <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800a16c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800a170:	88cb      	ldrh	r3, [r1, #6]
 800a172:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800a176:	442b      	add	r3, r5
 800a178:	b21b      	sxth	r3, r3
 800a17a:	429e      	cmp	r6, r3
 800a17c:	da1f      	bge.n	800a1be <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800a17e:	88c3      	ldrh	r3, [r0, #6]
 800a180:	4433      	add	r3, r6
 800a182:	b29b      	uxth	r3, r3
 800a184:	fa0f fc83 	sxth.w	ip, r3
 800a188:	4565      	cmp	r5, ip
 800a18a:	da18      	bge.n	800a1be <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800a18c:	454f      	cmp	r7, r9
 800a18e:	bfb8      	it	lt
 800a190:	464f      	movlt	r7, r9
 800a192:	42b5      	cmp	r5, r6
 800a194:	bfb8      	it	lt
 800a196:	4635      	movlt	r5, r6
 800a198:	45f0      	cmp	r8, lr
 800a19a:	bfd8      	it	le
 800a19c:	4622      	movle	r2, r4
 800a19e:	1bd2      	subs	r2, r2, r7
 800a1a0:	8082      	strh	r2, [r0, #4]
 800a1a2:	884a      	ldrh	r2, [r1, #2]
 800a1a4:	88c9      	ldrh	r1, [r1, #6]
 800a1a6:	8007      	strh	r7, [r0, #0]
 800a1a8:	440a      	add	r2, r1
 800a1aa:	8045      	strh	r5, [r0, #2]
 800a1ac:	b292      	uxth	r2, r2
 800a1ae:	b211      	sxth	r1, r2
 800a1b0:	458c      	cmp	ip, r1
 800a1b2:	bfa8      	it	ge
 800a1b4:	4613      	movge	r3, r2
 800a1b6:	1b5b      	subs	r3, r3, r5
 800a1b8:	80c3      	strh	r3, [r0, #6]
 800a1ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1be:	2300      	movs	r3, #0
 800a1c0:	8003      	strh	r3, [r0, #0]
 800a1c2:	8043      	strh	r3, [r0, #2]
 800a1c4:	8083      	strh	r3, [r0, #4]
 800a1c6:	80c3      	strh	r3, [r0, #6]
 800a1c8:	e7f7      	b.n	800a1ba <_ZN8touchgfx4RectaNERKS0_+0x76>

0800a1ca <_ZNK8touchgfx4Rect7isEmptyEv>:
 800a1ca:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	dd06      	ble.n	800a1e0 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800a1d2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	bfcc      	ite	gt
 800a1da:	2000      	movgt	r0, #0
 800a1dc:	2001      	movle	r0, #1
 800a1de:	4770      	bx	lr
 800a1e0:	2001      	movs	r0, #1
 800a1e2:	4770      	bx	lr

0800a1e4 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800a1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	4604      	mov	r4, r0
 800a1ec:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800a1ee:	8003      	strh	r3, [r0, #0]
 800a1f0:	8043      	strh	r3, [r0, #2]
 800a1f2:	8083      	strh	r3, [r0, #4]
 800a1f4:	80c3      	strh	r3, [r0, #6]
 800a1f6:	2d00      	cmp	r5, #0
 800a1f8:	d040      	beq.n	800a27c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800a1fa:	1d28      	adds	r0, r5, #4
 800a1fc:	f7ff ffe5 	bl	800a1ca <_ZNK8touchgfx4Rect7isEmptyEv>
 800a200:	b988      	cbnz	r0, 800a226 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800a202:	4620      	mov	r0, r4
 800a204:	f7ff ffe1 	bl	800a1ca <_ZNK8touchgfx4Rect7isEmptyEv>
 800a208:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800a20c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800a210:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800a214:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800a218:	b138      	cbz	r0, 800a22a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800a21a:	8022      	strh	r2, [r4, #0]
 800a21c:	8063      	strh	r3, [r4, #2]
 800a21e:	f8a4 e004 	strh.w	lr, [r4, #4]
 800a222:	f8a4 c006 	strh.w	ip, [r4, #6]
 800a226:	69ad      	ldr	r5, [r5, #24]
 800a228:	e7e5      	b.n	800a1f6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800a22a:	f9b4 0000 	ldrsh.w	r0, [r4]
 800a22e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800a232:	4290      	cmp	r0, r2
 800a234:	4607      	mov	r7, r0
 800a236:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800a23a:	460e      	mov	r6, r1
 800a23c:	bfa8      	it	ge
 800a23e:	4617      	movge	r7, r2
 800a240:	4299      	cmp	r1, r3
 800a242:	4472      	add	r2, lr
 800a244:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800a248:	bfa8      	it	ge
 800a24a:	461e      	movge	r6, r3
 800a24c:	4440      	add	r0, r8
 800a24e:	4471      	add	r1, lr
 800a250:	4463      	add	r3, ip
 800a252:	b200      	sxth	r0, r0
 800a254:	8027      	strh	r7, [r4, #0]
 800a256:	b212      	sxth	r2, r2
 800a258:	8066      	strh	r6, [r4, #2]
 800a25a:	b209      	sxth	r1, r1
 800a25c:	b21b      	sxth	r3, r3
 800a25e:	4290      	cmp	r0, r2
 800a260:	bfac      	ite	ge
 800a262:	ebc7 0200 	rsbge	r2, r7, r0
 800a266:	ebc7 0202 	rsblt	r2, r7, r2
 800a26a:	4299      	cmp	r1, r3
 800a26c:	bfac      	ite	ge
 800a26e:	ebc6 0301 	rsbge	r3, r6, r1
 800a272:	ebc6 0303 	rsblt	r3, r6, r3
 800a276:	80a2      	strh	r2, [r4, #4]
 800a278:	80e3      	strh	r3, [r4, #6]
 800a27a:	e7d4      	b.n	800a226 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800a27c:	4620      	mov	r0, r4
 800a27e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a282 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800a282:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a286:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800a28a:	b383      	cbz	r3, 800a2ee <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800a28c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800a28e:	b374      	cbz	r4, 800a2ee <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800a290:	f9b1 5000 	ldrsh.w	r5, [r1]
 800a294:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800a298:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800a29c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800a2a0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800a2a4:	b303      	cbz	r3, 800a2e8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800a2a6:	4668      	mov	r0, sp
 800a2a8:	1d21      	adds	r1, r4, #4
 800a2aa:	f8ad 5000 	strh.w	r5, [sp]
 800a2ae:	f8ad 6002 	strh.w	r6, [sp, #2]
 800a2b2:	f8ad 7004 	strh.w	r7, [sp, #4]
 800a2b6:	f8ad 8006 	strh.w	r8, [sp, #6]
 800a2ba:	f7ff ff43 	bl	800a144 <_ZN8touchgfx4RectaNERKS0_>
 800a2be:	4668      	mov	r0, sp
 800a2c0:	f7ff ff83 	bl	800a1ca <_ZNK8touchgfx4Rect7isEmptyEv>
 800a2c4:	b980      	cbnz	r0, 800a2e8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800a2c6:	f8bd 3000 	ldrh.w	r3, [sp]
 800a2ca:	4669      	mov	r1, sp
 800a2cc:	88a2      	ldrh	r2, [r4, #4]
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	1a9b      	subs	r3, r3, r2
 800a2d2:	88e2      	ldrh	r2, [r4, #6]
 800a2d4:	f8ad 3000 	strh.w	r3, [sp]
 800a2d8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800a2dc:	1a9b      	subs	r3, r3, r2
 800a2de:	f8ad 3002 	strh.w	r3, [sp, #2]
 800a2e2:	6823      	ldr	r3, [r4, #0]
 800a2e4:	689b      	ldr	r3, [r3, #8]
 800a2e6:	4798      	blx	r3
 800a2e8:	69a4      	ldr	r4, [r4, #24]
 800a2ea:	2c00      	cmp	r4, #0
 800a2ec:	d1d8      	bne.n	800a2a0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800a2ee:	b002      	add	sp, #8
 800a2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a2f4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800a2f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a2f6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800a2fa:	460d      	mov	r5, r1
 800a2fc:	4616      	mov	r6, r2
 800a2fe:	b323      	cbz	r3, 800a34a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800a300:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800a302:	b314      	cbz	r4, 800a34a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800a304:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800a308:	b1eb      	cbz	r3, 800a346 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800a30a:	6828      	ldr	r0, [r5, #0]
 800a30c:	466b      	mov	r3, sp
 800a30e:	6869      	ldr	r1, [r5, #4]
 800a310:	c303      	stmia	r3!, {r0, r1}
 800a312:	4668      	mov	r0, sp
 800a314:	1d21      	adds	r1, r4, #4
 800a316:	f7ff ff15 	bl	800a144 <_ZN8touchgfx4RectaNERKS0_>
 800a31a:	4668      	mov	r0, sp
 800a31c:	f7ff ff55 	bl	800a1ca <_ZNK8touchgfx4Rect7isEmptyEv>
 800a320:	b988      	cbnz	r0, 800a346 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800a322:	f8bd 3000 	ldrh.w	r3, [sp]
 800a326:	4669      	mov	r1, sp
 800a328:	88a2      	ldrh	r2, [r4, #4]
 800a32a:	4620      	mov	r0, r4
 800a32c:	1a9b      	subs	r3, r3, r2
 800a32e:	88e2      	ldrh	r2, [r4, #6]
 800a330:	f8ad 3000 	strh.w	r3, [sp]
 800a334:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800a338:	1a9b      	subs	r3, r3, r2
 800a33a:	4632      	mov	r2, r6
 800a33c:	f8ad 3002 	strh.w	r3, [sp, #2]
 800a340:	6823      	ldr	r3, [r4, #0]
 800a342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a344:	4798      	blx	r3
 800a346:	69a4      	ldr	r4, [r4, #24]
 800a348:	e7db      	b.n	800a302 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800a34a:	b002      	add	sp, #8
 800a34c:	bd70      	pop	{r4, r5, r6, pc}

0800a34e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800a34e:	6803      	ldr	r3, [r0, #0]
 800a350:	b513      	push	{r0, r1, r4, lr}
 800a352:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 800a356:	2300      	movs	r3, #0
 800a358:	e9cd 3300 	strd	r3, r3, [sp]
 800a35c:	466b      	mov	r3, sp
 800a35e:	47a0      	blx	r4
 800a360:	b002      	add	sp, #8
 800a362:	bd10      	pop	{r4, pc}

0800a364 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800a364:	2301      	movs	r3, #1
 800a366:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800a36a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800a36e:	4770      	bx	lr

0800a370 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800a370:	2301      	movs	r3, #1
 800a372:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800a376:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800a37a:	4770      	bx	lr

0800a37c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800a37c:	6843      	ldr	r3, [r0, #4]
 800a37e:	2201      	movs	r2, #1
 800a380:	725a      	strb	r2, [r3, #9]
 800a382:	6840      	ldr	r0, [r0, #4]
 800a384:	6803      	ldr	r3, [r0, #0]
 800a386:	691b      	ldr	r3, [r3, #16]
 800a388:	4718      	bx	r3

0800a38a <_ZN8touchgfx3HAL8flushDMAEv>:
 800a38a:	6840      	ldr	r0, [r0, #4]
 800a38c:	6803      	ldr	r3, [r0, #0]
 800a38e:	689b      	ldr	r3, [r3, #8]
 800a390:	4718      	bx	r3

0800a392 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800a392:	b530      	push	{r4, r5, lr}
 800a394:	b08b      	sub	sp, #44	; 0x2c
 800a396:	6804      	ldr	r4, [r0, #0]
 800a398:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 800a39c:	9509      	str	r5, [sp, #36]	; 0x24
 800a39e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800a3a2:	9508      	str	r5, [sp, #32]
 800a3a4:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800a3a8:	9507      	str	r5, [sp, #28]
 800a3aa:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800a3ae:	9506      	str	r5, [sp, #24]
 800a3b0:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800a3b4:	9505      	str	r5, [sp, #20]
 800a3b6:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800a3ba:	9504      	str	r5, [sp, #16]
 800a3bc:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800a3c0:	9503      	str	r5, [sp, #12]
 800a3c2:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800a3c6:	9502      	str	r5, [sp, #8]
 800a3c8:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800a3cc:	e9cd 3500 	strd	r3, r5, [sp]
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	47a0      	blx	r4
 800a3d8:	b00b      	add	sp, #44	; 0x2c
 800a3da:	bd30      	pop	{r4, r5, pc}

0800a3dc <_ZN8touchgfx3HAL10beginFrameEv>:
 800a3dc:	4b04      	ldr	r3, [pc, #16]	; (800a3f0 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	b123      	cbz	r3, 800a3ec <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800a3e2:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800a3e6:	f080 0001 	eor.w	r0, r0, #1
 800a3ea:	4770      	bx	lr
 800a3ec:	2001      	movs	r0, #1
 800a3ee:	4770      	bx	lr
 800a3f0:	24006892 	.word	0x24006892

0800a3f4 <_ZN8touchgfx3HAL8endFrameEv>:
 800a3f4:	b510      	push	{r4, lr}
 800a3f6:	4604      	mov	r4, r0
 800a3f8:	6840      	ldr	r0, [r0, #4]
 800a3fa:	6803      	ldr	r3, [r0, #0]
 800a3fc:	689b      	ldr	r3, [r3, #8]
 800a3fe:	4798      	blx	r3
 800a400:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800a404:	b113      	cbz	r3, 800a40c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800a406:	2301      	movs	r3, #1
 800a408:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800a40c:	bd10      	pop	{r4, pc}

0800a40e <_ZN8touchgfx3HAL10initializeEv>:
 800a40e:	b510      	push	{r4, lr}
 800a410:	4604      	mov	r4, r0
 800a412:	f7f7 f8a3 	bl	800155c <_ZN8touchgfx10OSWrappers10initializeEv>
 800a416:	6860      	ldr	r0, [r4, #4]
 800a418:	6803      	ldr	r3, [r0, #0]
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	4798      	blx	r3
 800a41e:	68e0      	ldr	r0, [r4, #12]
 800a420:	6803      	ldr	r3, [r0, #0]
 800a422:	689b      	ldr	r3, [r3, #8]
 800a424:	4798      	blx	r3
 800a426:	6823      	ldr	r3, [r4, #0]
 800a428:	4620      	mov	r0, r4
 800a42a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a42c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a430:	4718      	bx	r3
	...

0800a434 <_ZN8touchgfx3HAL4tickEv>:
 800a434:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a436:	6803      	ldr	r3, [r0, #0]
 800a438:	4604      	mov	r4, r0
 800a43a:	4d5c      	ldr	r5, [pc, #368]	; (800a5ac <_ZN8touchgfx3HAL4tickEv+0x178>)
 800a43c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a440:	4798      	blx	r3
 800a442:	2800      	cmp	r0, #0
 800a444:	f000 8097 	beq.w	800a576 <_ZN8touchgfx3HAL4tickEv+0x142>
 800a448:	2001      	movs	r0, #1
 800a44a:	2600      	movs	r6, #0
 800a44c:	f7f6 ff04 	bl	8001258 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800a450:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800a454:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800a458:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800a45c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800a460:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800a464:	b133      	cbz	r3, 800a474 <_ZN8touchgfx3HAL4tickEv+0x40>
 800a466:	6823      	ldr	r3, [r4, #0]
 800a468:	4620      	mov	r0, r4
 800a46a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a46e:	4798      	blx	r3
 800a470:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800a474:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800a478:	2601      	movs	r6, #1
 800a47a:	6862      	ldr	r2, [r4, #4]
 800a47c:	f083 0301 	eor.w	r3, r3, #1
 800a480:	702e      	strb	r6, [r5, #0]
 800a482:	7253      	strb	r3, [r2, #9]
 800a484:	f003 fc6a 	bl	800dd5c <_ZN8touchgfx11Application11getInstanceEv>
 800a488:	6803      	ldr	r3, [r0, #0]
 800a48a:	4631      	mov	r1, r6
 800a48c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a48e:	4798      	blx	r3
 800a490:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800a494:	b90b      	cbnz	r3, 800a49a <_ZN8touchgfx3HAL4tickEv+0x66>
 800a496:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800a49a:	f003 fc5f 	bl	800dd5c <_ZN8touchgfx11Application11getInstanceEv>
 800a49e:	6803      	ldr	r3, [r0, #0]
 800a4a0:	695b      	ldr	r3, [r3, #20]
 800a4a2:	4798      	blx	r3
 800a4a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4a6:	6803      	ldr	r3, [r0, #0]
 800a4a8:	691b      	ldr	r3, [r3, #16]
 800a4aa:	4798      	blx	r3
 800a4ac:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800a4b0:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800a4b4:	3b01      	subs	r3, #1
 800a4b6:	b2db      	uxtb	r3, r3
 800a4b8:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800a4bc:	b10a      	cbz	r2, 800a4c2 <_ZN8touchgfx3HAL4tickEv+0x8e>
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d1eb      	bne.n	800a49a <_ZN8touchgfx3HAL4tickEv+0x66>
 800a4c2:	4a3b      	ldr	r2, [pc, #236]	; (800a5b0 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800a4c4:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800a4c8:	7813      	ldrb	r3, [r2, #0]
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	b25b      	sxtb	r3, r3
 800a4ce:	4299      	cmp	r1, r3
 800a4d0:	7013      	strb	r3, [r2, #0]
 800a4d2:	dc10      	bgt.n	800a4f6 <_ZN8touchgfx3HAL4tickEv+0xc2>
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	68e0      	ldr	r0, [r4, #12]
 800a4d8:	a902      	add	r1, sp, #8
 800a4da:	7013      	strb	r3, [r2, #0]
 800a4dc:	aa03      	add	r2, sp, #12
 800a4de:	6803      	ldr	r3, [r0, #0]
 800a4e0:	68db      	ldr	r3, [r3, #12]
 800a4e2:	4798      	blx	r3
 800a4e4:	6823      	ldr	r3, [r4, #0]
 800a4e6:	2800      	cmp	r0, #0
 800a4e8:	d051      	beq.n	800a58e <_ZN8touchgfx3HAL4tickEv+0x15a>
 800a4ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800a4f4:	4798      	blx	r3
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	6960      	ldr	r0, [r4, #20]
 800a4fa:	f88d 3007 	strb.w	r3, [sp, #7]
 800a4fe:	b158      	cbz	r0, 800a518 <_ZN8touchgfx3HAL4tickEv+0xe4>
 800a500:	6803      	ldr	r3, [r0, #0]
 800a502:	f10d 0107 	add.w	r1, sp, #7
 800a506:	68db      	ldr	r3, [r3, #12]
 800a508:	4798      	blx	r3
 800a50a:	b128      	cbz	r0, 800a518 <_ZN8touchgfx3HAL4tickEv+0xe4>
 800a50c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a50e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800a512:	6803      	ldr	r3, [r0, #0]
 800a514:	68db      	ldr	r3, [r3, #12]
 800a516:	4798      	blx	r3
 800a518:	f104 001c 	add.w	r0, r4, #28
 800a51c:	f00e fac6 	bl	8018aac <_ZN8touchgfx8Gestures4tickEv>
 800a520:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800a524:	b30b      	cbz	r3, 800a56a <_ZN8touchgfx3HAL4tickEv+0x136>
 800a526:	6920      	ldr	r0, [r4, #16]
 800a528:	6803      	ldr	r3, [r0, #0]
 800a52a:	691b      	ldr	r3, [r3, #16]
 800a52c:	4798      	blx	r3
 800a52e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a530:	4606      	mov	r6, r0
 800a532:	b903      	cbnz	r3, 800a536 <_ZN8touchgfx3HAL4tickEv+0x102>
 800a534:	6720      	str	r0, [r4, #112]	; 0x70
 800a536:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a538:	4a1e      	ldr	r2, [pc, #120]	; (800a5b4 <_ZN8touchgfx3HAL4tickEv+0x180>)
 800a53a:	1af3      	subs	r3, r6, r3
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d914      	bls.n	800a56a <_ZN8touchgfx3HAL4tickEv+0x136>
 800a540:	6920      	ldr	r0, [r4, #16]
 800a542:	6803      	ldr	r3, [r0, #0]
 800a544:	699b      	ldr	r3, [r3, #24]
 800a546:	4798      	blx	r3
 800a548:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a54a:	2264      	movs	r2, #100	; 0x64
 800a54c:	1af3      	subs	r3, r6, r3
 800a54e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a552:	fbb0 f0f3 	udiv	r0, r0, r3
 800a556:	2800      	cmp	r0, #0
 800a558:	dc1e      	bgt.n	800a598 <_ZN8touchgfx3HAL4tickEv+0x164>
 800a55a:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800a55e:	6920      	ldr	r0, [r4, #16]
 800a560:	2100      	movs	r1, #0
 800a562:	6803      	ldr	r3, [r0, #0]
 800a564:	69db      	ldr	r3, [r3, #28]
 800a566:	4798      	blx	r3
 800a568:	6726      	str	r6, [r4, #112]	; 0x70
 800a56a:	f003 fbf7 	bl	800dd5c <_ZN8touchgfx11Application11getInstanceEv>
 800a56e:	6803      	ldr	r3, [r0, #0]
 800a570:	2100      	movs	r1, #0
 800a572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a574:	4798      	blx	r3
 800a576:	6823      	ldr	r3, [r4, #0]
 800a578:	4620      	mov	r0, r4
 800a57a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a57e:	4798      	blx	r3
 800a580:	2001      	movs	r0, #1
 800a582:	f7f6 fe81 	bl	8001288 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800a586:	2300      	movs	r3, #0
 800a588:	702b      	strb	r3, [r5, #0]
 800a58a:	b004      	add	sp, #16
 800a58c:	bd70      	pop	{r4, r5, r6, pc}
 800a58e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a592:	4620      	mov	r0, r4
 800a594:	4798      	blx	r3
 800a596:	e7ae      	b.n	800a4f6 <_ZN8touchgfx3HAL4tickEv+0xc2>
 800a598:	2863      	cmp	r0, #99	; 0x63
 800a59a:	bfcb      	itete	gt
 800a59c:	2300      	movgt	r3, #0
 800a59e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800a5a2:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800a5a6:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800a5aa:	e7d8      	b.n	800a55e <_ZN8touchgfx3HAL4tickEv+0x12a>
 800a5ac:	24006898 	.word	0x24006898
 800a5b0:	24006899 	.word	0x24006899
 800a5b4:	05f5e100 	.word	0x05f5e100

0800a5b8 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800a5b8:	f7f7 b800 	b.w	80015bc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800a5bc <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800a5bc:	6581      	str	r1, [r0, #88]	; 0x58
 800a5be:	301c      	adds	r0, #28
 800a5c0:	f00e ba72 	b.w	8018aa8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800a5c4 <_ZN8touchgfx3HAL5touchEll>:
 800a5c4:	b530      	push	{r4, r5, lr}
 800a5c6:	b087      	sub	sp, #28
 800a5c8:	4604      	mov	r4, r0
 800a5ca:	a804      	add	r0, sp, #16
 800a5cc:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800a5d0:	f003 f980 	bl	800d8d4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800a5d4:	9b04      	ldr	r3, [sp, #16]
 800a5d6:	a906      	add	r1, sp, #24
 800a5d8:	a803      	add	r0, sp, #12
 800a5da:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a5de:	9b05      	ldr	r3, [sp, #20]
 800a5e0:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800a5e4:	f003 f9c8 	bl	800d978 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800a5e8:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800a5ec:	f104 001c 	add.w	r0, r4, #28
 800a5f0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800a5f4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a5f8:	b189      	cbz	r1, 800a61e <_ZN8touchgfx3HAL5touchEll+0x5a>
 800a5fa:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800a5fe:	9300      	str	r3, [sp, #0]
 800a600:	4613      	mov	r3, r2
 800a602:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800a606:	462a      	mov	r2, r5
 800a608:	f00e fa5e 	bl	8018ac8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800a60c:	b128      	cbz	r0, 800a61a <_ZN8touchgfx3HAL5touchEll+0x56>
 800a60e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800a612:	65e3      	str	r3, [r4, #92]	; 0x5c
 800a614:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800a618:	6623      	str	r3, [r4, #96]	; 0x60
 800a61a:	b007      	add	sp, #28
 800a61c:	bd30      	pop	{r4, r5, pc}
 800a61e:	f00e fa97 	bl	8018b50 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800a622:	2301      	movs	r3, #1
 800a624:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800a628:	e7f1      	b.n	800a60e <_ZN8touchgfx3HAL5touchEll+0x4a>

0800a62a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800a62a:	b510      	push	{r4, lr}
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d046      	beq.n	800a6be <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800a630:	ea81 0002 	eor.w	r0, r1, r2
 800a634:	07c4      	lsls	r4, r0, #31
 800a636:	d508      	bpl.n	800a64a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800a638:	440b      	add	r3, r1
 800a63a:	3a01      	subs	r2, #1
 800a63c:	428b      	cmp	r3, r1
 800a63e:	d93e      	bls.n	800a6be <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800a640:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800a644:	f801 0b01 	strb.w	r0, [r1], #1
 800a648:	e7f8      	b.n	800a63c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800a64a:	07d0      	lsls	r0, r2, #31
 800a64c:	bf42      	ittt	mi
 800a64e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800a652:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800a656:	f801 0b01 	strbmi.w	r0, [r1], #1
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d911      	bls.n	800a682 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800a65e:	ea81 0402 	eor.w	r4, r1, r2
 800a662:	4610      	mov	r0, r2
 800a664:	07a4      	lsls	r4, r4, #30
 800a666:	d022      	beq.n	800a6ae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800a668:	f023 0401 	bic.w	r4, r3, #1
 800a66c:	440c      	add	r4, r1
 800a66e:	428c      	cmp	r4, r1
 800a670:	4602      	mov	r2, r0
 800a672:	d904      	bls.n	800a67e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800a674:	8812      	ldrh	r2, [r2, #0]
 800a676:	3002      	adds	r0, #2
 800a678:	f821 2b02 	strh.w	r2, [r1], #2
 800a67c:	e7f7      	b.n	800a66e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800a67e:	f003 0301 	and.w	r3, r3, #1
 800a682:	f023 0003 	bic.w	r0, r3, #3
 800a686:	4408      	add	r0, r1
 800a688:	4288      	cmp	r0, r1
 800a68a:	4614      	mov	r4, r2
 800a68c:	d904      	bls.n	800a698 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800a68e:	6824      	ldr	r4, [r4, #0]
 800a690:	3204      	adds	r2, #4
 800a692:	f841 4b04 	str.w	r4, [r1], #4
 800a696:	e7f7      	b.n	800a688 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800a698:	f003 0303 	and.w	r3, r3, #3
 800a69c:	3a01      	subs	r2, #1
 800a69e:	440b      	add	r3, r1
 800a6a0:	428b      	cmp	r3, r1
 800a6a2:	d90c      	bls.n	800a6be <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800a6a4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800a6a8:	f801 0b01 	strb.w	r0, [r1], #1
 800a6ac:	e7f8      	b.n	800a6a0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800a6ae:	0790      	lsls	r0, r2, #30
 800a6b0:	d0e7      	beq.n	800a682 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800a6b2:	f832 0b02 	ldrh.w	r0, [r2], #2
 800a6b6:	3b02      	subs	r3, #2
 800a6b8:	f821 0b02 	strh.w	r0, [r1], #2
 800a6bc:	e7e1      	b.n	800a682 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800a6be:	2001      	movs	r0, #1
 800a6c0:	bd10      	pop	{r4, pc}

0800a6c2 <_ZN8touchgfx3HAL7noTouchEv>:
 800a6c2:	b510      	push	{r4, lr}
 800a6c4:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800a6c8:	4604      	mov	r4, r0
 800a6ca:	b153      	cbz	r3, 800a6e2 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800a6cc:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800a6d0:	2101      	movs	r1, #1
 800a6d2:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800a6d6:	301c      	adds	r0, #28
 800a6d8:	f00e fa3a 	bl	8018b50 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800a6dc:	2300      	movs	r3, #0
 800a6de:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800a6e2:	bd10      	pop	{r4, pc}

0800a6e4 <_ZN8touchgfx8Drawable5setXYEss>:
 800a6e4:	b570      	push	{r4, r5, r6, lr}
 800a6e6:	6803      	ldr	r3, [r0, #0]
 800a6e8:	4604      	mov	r4, r0
 800a6ea:	4615      	mov	r5, r2
 800a6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ee:	4798      	blx	r3
 800a6f0:	6823      	ldr	r3, [r4, #0]
 800a6f2:	4629      	mov	r1, r5
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a6fc:	4718      	bx	r3
	...

0800a700 <_ZN8touchgfx3HAL3lcdEv>:
 800a700:	4b04      	ldr	r3, [pc, #16]	; (800a714 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800a708:	b10a      	cbz	r2, 800a70e <_ZN8touchgfx3HAL3lcdEv+0xe>
 800a70a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a70c:	b900      	cbnz	r0, 800a710 <_ZN8touchgfx3HAL3lcdEv+0x10>
 800a70e:	6898      	ldr	r0, [r3, #8]
 800a710:	4770      	bx	lr
 800a712:	bf00      	nop
 800a714:	24006894 	.word	0x24006894

0800a718 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800a718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a71c:	4604      	mov	r4, r0
 800a71e:	6980      	ldr	r0, [r0, #24]
 800a720:	b085      	sub	sp, #20
 800a722:	460f      	mov	r7, r1
 800a724:	4690      	mov	r8, r2
 800a726:	4699      	mov	r9, r3
 800a728:	b930      	cbnz	r0, 800a738 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 800a72a:	4b1c      	ldr	r3, [pc, #112]	; (800a79c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 800a72c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800a730:	4a1b      	ldr	r2, [pc, #108]	; (800a7a0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800a732:	481c      	ldr	r0, [pc, #112]	; (800a7a4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 800a734:	f00e fba2 	bl	8018e7c <__assert_func>
 800a738:	ad04      	add	r5, sp, #16
 800a73a:	2600      	movs	r6, #0
 800a73c:	f845 6d04 	str.w	r6, [r5, #-4]!
 800a740:	6806      	ldr	r6, [r0, #0]
 800a742:	9501      	str	r5, [sp, #4]
 800a744:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800a748:	9500      	str	r5, [sp, #0]
 800a74a:	6835      	ldr	r5, [r6, #0]
 800a74c:	47a8      	blx	r5
 800a74e:	4d16      	ldr	r5, [pc, #88]	; (800a7a8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 800a750:	4606      	mov	r6, r0
 800a752:	f8a5 9000 	strh.w	r9, [r5]
 800a756:	f7ff ffd3 	bl	800a700 <_ZN8touchgfx3HAL3lcdEv>
 800a75a:	6803      	ldr	r3, [r0, #0]
 800a75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75e:	4798      	blx	r3
 800a760:	2801      	cmp	r0, #1
 800a762:	d012      	beq.n	800a78a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 800a764:	d306      	bcc.n	800a774 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 800a766:	280d      	cmp	r0, #13
 800a768:	d80b      	bhi.n	800a782 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800a76a:	4b10      	ldr	r3, [pc, #64]	; (800a7ac <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 800a76c:	f240 1167 	movw	r1, #359	; 0x167
 800a770:	4a0b      	ldr	r2, [pc, #44]	; (800a7a0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800a772:	e7de      	b.n	800a732 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 800a774:	882b      	ldrh	r3, [r5, #0]
 800a776:	fb08 7203 	mla	r2, r8, r3, r7
 800a77a:	9b03      	ldr	r3, [sp, #12]
 800a77c:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800a780:	63e3      	str	r3, [r4, #60]	; 0x3c
 800a782:	4630      	mov	r0, r6
 800a784:	b005      	add	sp, #20
 800a786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a78a:	882a      	ldrh	r2, [r5, #0]
 800a78c:	9b03      	ldr	r3, [sp, #12]
 800a78e:	fb08 7202 	mla	r2, r8, r2, r7
 800a792:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800a796:	1a9a      	subs	r2, r3, r2
 800a798:	63e2      	str	r2, [r4, #60]	; 0x3c
 800a79a:	e7f2      	b.n	800a782 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800a79c:	0801b588 	.word	0x0801b588
 800a7a0:	0801b846 	.word	0x0801b846
 800a7a4:	0801b5cd 	.word	0x0801b5cd
 800a7a8:	2400688e 	.word	0x2400688e
 800a7ac:	0801b5f3 	.word	0x0801b5f3

0800a7b0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800a7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7b2:	b08b      	sub	sp, #44	; 0x2c
 800a7b4:	4617      	mov	r7, r2
 800a7b6:	4604      	mov	r4, r0
 800a7b8:	460e      	mov	r6, r1
 800a7ba:	461d      	mov	r5, r3
 800a7bc:	f7ff ffa0 	bl	800a700 <_ZN8touchgfx3HAL3lcdEv>
 800a7c0:	6803      	ldr	r3, [r0, #0]
 800a7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c4:	4798      	blx	r3
 800a7c6:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800a7ca:	9007      	str	r0, [sp, #28]
 800a7cc:	4631      	mov	r1, r6
 800a7ce:	6822      	ldr	r2, [r4, #0]
 800a7d0:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800a7d4:	4b0c      	ldr	r3, [pc, #48]	; (800a808 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	881b      	ldrh	r3, [r3, #0]
 800a7da:	9306      	str	r3, [sp, #24]
 800a7dc:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800a7e0:	9305      	str	r3, [sp, #20]
 800a7e2:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800a7e6:	9304      	str	r3, [sp, #16]
 800a7e8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800a7ec:	9303      	str	r3, [sp, #12]
 800a7ee:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800a7f2:	9302      	str	r3, [sp, #8]
 800a7f4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800a7f8:	e9cd 5300 	strd	r5, r3, [sp]
 800a7fc:	463b      	mov	r3, r7
 800a7fe:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 800a800:	2200      	movs	r2, #0
 800a802:	47a8      	blx	r5
 800a804:	b00b      	add	sp, #44	; 0x2c
 800a806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a808:	2400688e 	.word	0x2400688e

0800a80c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800a80c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a810:	4698      	mov	r8, r3
 800a812:	6803      	ldr	r3, [r0, #0]
 800a814:	b08b      	sub	sp, #44	; 0x2c
 800a816:	4617      	mov	r7, r2
 800a818:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800a81a:	460e      	mov	r6, r1
 800a81c:	4b13      	ldr	r3, [pc, #76]	; (800a86c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800a81e:	4604      	mov	r4, r0
 800a820:	f8b3 9000 	ldrh.w	r9, [r3]
 800a824:	f7ff ff6c 	bl	800a700 <_ZN8touchgfx3HAL3lcdEv>
 800a828:	6803      	ldr	r3, [r0, #0]
 800a82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a82c:	4798      	blx	r3
 800a82e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800a832:	2200      	movs	r2, #0
 800a834:	4631      	mov	r1, r6
 800a836:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800a83a:	2302      	movs	r3, #2
 800a83c:	4620      	mov	r0, r4
 800a83e:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800a842:	2301      	movs	r3, #1
 800a844:	9305      	str	r3, [sp, #20]
 800a846:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800a84a:	9304      	str	r3, [sp, #16]
 800a84c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800a850:	9303      	str	r3, [sp, #12]
 800a852:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800a856:	9302      	str	r3, [sp, #8]
 800a858:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800a85c:	e9cd 8300 	strd	r8, r3, [sp]
 800a860:	463b      	mov	r3, r7
 800a862:	47a8      	blx	r5
 800a864:	b00b      	add	sp, #44	; 0x2c
 800a866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a86a:	bf00      	nop
 800a86c:	2400688e 	.word	0x2400688e

0800a870 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800a870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a874:	4698      	mov	r8, r3
 800a876:	6803      	ldr	r3, [r0, #0]
 800a878:	b087      	sub	sp, #28
 800a87a:	460e      	mov	r6, r1
 800a87c:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 800a87e:	4617      	mov	r7, r2
 800a880:	4b0f      	ldr	r3, [pc, #60]	; (800a8c0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800a882:	4604      	mov	r4, r0
 800a884:	f8b3 9000 	ldrh.w	r9, [r3]
 800a888:	f7ff ff3a 	bl	800a700 <_ZN8touchgfx3HAL3lcdEv>
 800a88c:	6803      	ldr	r3, [r0, #0]
 800a88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a890:	4798      	blx	r3
 800a892:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800a896:	463a      	mov	r2, r7
 800a898:	4631      	mov	r1, r6
 800a89a:	f8cd 900c 	str.w	r9, [sp, #12]
 800a89e:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800a8a2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	9302      	str	r3, [sp, #8]
 800a8aa:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800a8ae:	9301      	str	r3, [sp, #4]
 800a8b0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800a8b4:	9300      	str	r3, [sp, #0]
 800a8b6:	4643      	mov	r3, r8
 800a8b8:	47a8      	blx	r5
 800a8ba:	b007      	add	sp, #28
 800a8bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8c0:	2400688e 	.word	0x2400688e

0800a8c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800a8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c8:	4604      	mov	r4, r0
 800a8ca:	b08f      	sub	sp, #60	; 0x3c
 800a8cc:	4610      	mov	r0, r2
 800a8ce:	460d      	mov	r5, r1
 800a8d0:	4691      	mov	r9, r2
 800a8d2:	461e      	mov	r6, r3
 800a8d4:	f005 fe0c 	bl	80104f0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800a8d8:	2800      	cmp	r0, #0
 800a8da:	f000 809c 	beq.w	800aa16 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 800a8de:	6823      	ldr	r3, [r4, #0]
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	f8df b194 	ldr.w	fp, [pc, #404]	; 800aa78 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 800a8e6:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800a8ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ec:	4798      	blx	r3
 800a8ee:	6823      	ldr	r3, [r4, #0]
 800a8f0:	4620      	mov	r0, r4
 800a8f2:	f8df a188 	ldr.w	sl, [pc, #392]	; 800aa7c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800a8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f8:	4798      	blx	r3
 800a8fa:	f8bb 3000 	ldrh.w	r3, [fp]
 800a8fe:	4f5b      	ldr	r7, [pc, #364]	; (800aa6c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800a900:	9301      	str	r3, [sp, #4]
 800a902:	f8ba 3000 	ldrh.w	r3, [sl]
 800a906:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800a90a:	4640      	mov	r0, r8
 800a90c:	9302      	str	r3, [sp, #8]
 800a90e:	883b      	ldrh	r3, [r7, #0]
 800a910:	9303      	str	r3, [sp, #12]
 800a912:	4b57      	ldr	r3, [pc, #348]	; (800aa70 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800a914:	881a      	ldrh	r2, [r3, #0]
 800a916:	9305      	str	r3, [sp, #20]
 800a918:	9204      	str	r2, [sp, #16]
 800a91a:	f005 fea3 	bl	8010664 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800a91e:	8038      	strh	r0, [r7, #0]
 800a920:	4640      	mov	r0, r8
 800a922:	f005 fed9 	bl	80106d8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800a926:	9b05      	ldr	r3, [sp, #20]
 800a928:	8018      	strh	r0, [r3, #0]
 800a92a:	4b52      	ldr	r3, [pc, #328]	; (800aa74 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d174      	bne.n	800aa1c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 800a932:	883b      	ldrh	r3, [r7, #0]
 800a934:	f8aa 0000 	strh.w	r0, [sl]
 800a938:	f8ab 3000 	strh.w	r3, [fp]
 800a93c:	4648      	mov	r0, r9
 800a93e:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800a942:	f005 fdd5 	bl	80104f0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800a946:	2200      	movs	r2, #0
 800a948:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800a94c:	4611      	mov	r1, r2
 800a94e:	4628      	mov	r0, r5
 800a950:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800a954:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800a958:	f7ff fec4 	bl	800a6e4 <_ZN8touchgfx8Drawable5setXYEss>
 800a95c:	2301      	movs	r3, #1
 800a95e:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800a962:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800a966:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	dd5c      	ble.n	800aa28 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 800a96e:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800a972:	2b00      	cmp	r3, #0
 800a974:	dd58      	ble.n	800aa28 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 800a976:	462a      	mov	r2, r5
 800a978:	ab0a      	add	r3, sp, #40	; 0x28
 800a97a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800a97e:	6851      	ldr	r1, [r2, #4]
 800a980:	c303      	stmia	r3!, {r0, r1}
 800a982:	4631      	mov	r1, r6
 800a984:	a80a      	add	r0, sp, #40	; 0x28
 800a986:	f7ff fbdd 	bl	800a144 <_ZN8touchgfx4RectaNERKS0_>
 800a98a:	4b38      	ldr	r3, [pc, #224]	; (800aa6c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800a98c:	2100      	movs	r1, #0
 800a98e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a992:	4b37      	ldr	r3, [pc, #220]	; (800aa70 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800a994:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800a998:	aa0a      	add	r2, sp, #40	; 0x28
 800a99a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a99e:	910c      	str	r1, [sp, #48]	; 0x30
 800a9a0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800a9a4:	ab08      	add	r3, sp, #32
 800a9a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a9aa:	e883 0003 	stmia.w	r3, {r0, r1}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	a90c      	add	r1, sp, #48	; 0x30
 800a9b2:	f7ff fbc7 	bl	800a144 <_ZN8touchgfx4RectaNERKS0_>
 800a9b6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d13c      	bne.n	800aa36 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 800a9bc:	2000      	movs	r0, #0
 800a9be:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 800a9c2:	2600      	movs	r6, #0
 800a9c4:	696b      	ldr	r3, [r5, #20]
 800a9c6:	a908      	add	r1, sp, #32
 800a9c8:	682a      	ldr	r2, [r5, #0]
 800a9ca:	4628      	mov	r0, r5
 800a9cc:	9305      	str	r3, [sp, #20]
 800a9ce:	616e      	str	r6, [r5, #20]
 800a9d0:	6892      	ldr	r2, [r2, #8]
 800a9d2:	4790      	blx	r2
 800a9d4:	9b05      	ldr	r3, [sp, #20]
 800a9d6:	4652      	mov	r2, sl
 800a9d8:	4649      	mov	r1, r9
 800a9da:	616b      	str	r3, [r5, #20]
 800a9dc:	4628      	mov	r0, r5
 800a9de:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 800a9e2:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800a9e6:	f7ff fe7d 	bl	800a6e4 <_ZN8touchgfx8Drawable5setXYEss>
 800a9ea:	9a01      	ldr	r2, [sp, #4]
 800a9ec:	4b22      	ldr	r3, [pc, #136]	; (800aa78 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	801a      	strh	r2, [r3, #0]
 800a9f2:	9a02      	ldr	r2, [sp, #8]
 800a9f4:	4b21      	ldr	r3, [pc, #132]	; (800aa7c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800a9f6:	801a      	strh	r2, [r3, #0]
 800a9f8:	9a03      	ldr	r2, [sp, #12]
 800a9fa:	4b1c      	ldr	r3, [pc, #112]	; (800aa6c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800a9fc:	801a      	strh	r2, [r3, #0]
 800a9fe:	4b1c      	ldr	r3, [pc, #112]	; (800aa70 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800aa00:	9a04      	ldr	r2, [sp, #16]
 800aa02:	801a      	strh	r2, [r3, #0]
 800aa04:	6823      	ldr	r3, [r4, #0]
 800aa06:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800aa0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa0c:	4798      	blx	r3
 800aa0e:	6823      	ldr	r3, [r4, #0]
 800aa10:	4620      	mov	r0, r4
 800aa12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa14:	4798      	blx	r3
 800aa16:	b00f      	add	sp, #60	; 0x3c
 800aa18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa1c:	883b      	ldrh	r3, [r7, #0]
 800aa1e:	f8ab 0000 	strh.w	r0, [fp]
 800aa22:	f8aa 3000 	strh.w	r3, [sl]
 800aa26:	e789      	b.n	800a93c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 800aa28:	462a      	mov	r2, r5
 800aa2a:	ab0a      	add	r3, sp, #40	; 0x28
 800aa2c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800aa30:	6851      	ldr	r1, [r2, #4]
 800aa32:	c303      	stmia	r3!, {r0, r1}
 800aa34:	e7a9      	b.n	800a98a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 800aa36:	a807      	add	r0, sp, #28
 800aa38:	f005 ffa6 	bl	8010988 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800aa3c:	4606      	mov	r6, r0
 800aa3e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800aa40:	6803      	ldr	r3, [r0, #0]
 800aa42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa44:	4798      	blx	r3
 800aa46:	4286      	cmp	r6, r0
 800aa48:	d1b8      	bne.n	800a9bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 800aa4a:	f7ff fe59 	bl	800a700 <_ZN8touchgfx3HAL3lcdEv>
 800aa4e:	6803      	ldr	r3, [r0, #0]
 800aa50:	4606      	mov	r6, r0
 800aa52:	a807      	add	r0, sp, #28
 800aa54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa56:	9305      	str	r3, [sp, #20]
 800aa58:	f005 ff96 	bl	8010988 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800aa5c:	9b05      	ldr	r3, [sp, #20]
 800aa5e:	4601      	mov	r1, r0
 800aa60:	4630      	mov	r0, r6
 800aa62:	4798      	blx	r3
 800aa64:	f080 0001 	eor.w	r0, r0, #1
 800aa68:	b2c0      	uxtb	r0, r0
 800aa6a:	e7a8      	b.n	800a9be <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800aa6c:	24006888 	.word	0x24006888
 800aa70:	2400688a 	.word	0x2400688a
 800aa74:	2400688c 	.word	0x2400688c
 800aa78:	2400688e 	.word	0x2400688e
 800aa7c:	24006890 	.word	0x24006890

0800aa80 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800aa80:	4b07      	ldr	r3, [pc, #28]	; (800aaa0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800aa82:	b510      	push	{r4, lr}
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	4604      	mov	r4, r0
 800aa88:	b13b      	cbz	r3, 800aa9a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800aa8a:	6803      	ldr	r3, [r0, #0]
 800aa8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa8e:	4798      	blx	r3
 800aa90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800aa92:	4283      	cmp	r3, r0
 800aa94:	d101      	bne.n	800aa9a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800aa96:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800aa98:	bd10      	pop	{r4, pc}
 800aa9a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800aa9c:	e7fc      	b.n	800aa98 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800aa9e:	bf00      	nop
 800aaa0:	24006892 	.word	0x24006892

0800aaa4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800aaa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaa8:	b088      	sub	sp, #32
 800aaaa:	4692      	mov	sl, r2
 800aaac:	461d      	mov	r5, r3
 800aaae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aab2:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 800aab6:	2400      	movs	r4, #0
 800aab8:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 800aabc:	4606      	mov	r6, r0
 800aabe:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 800aac2:	fb09 a505 	mla	r5, r9, r5, sl
 800aac6:	9403      	str	r4, [sp, #12]
 800aac8:	f8ad 8014 	strh.w	r8, [sp, #20]
 800aacc:	f8ad 7016 	strh.w	r7, [sp, #22]
 800aad0:	f88d 401c 	strb.w	r4, [sp, #28]
 800aad4:	e9cd 3100 	strd	r3, r1, [sp]
 800aad8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800aadc:	f8ad 3018 	strh.w	r3, [sp, #24]
 800aae0:	f7ff ffce 	bl	800aa80 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800aae4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800aae8:	f8ad 901a 	strh.w	r9, [sp, #26]
 800aaec:	f88d 401e 	strb.w	r4, [sp, #30]
 800aaf0:	9504      	str	r5, [sp, #16]
 800aaf2:	f88d 401d 	strb.w	r4, [sp, #29]
 800aaf6:	f88d 401f 	strb.w	r4, [sp, #31]
 800aafa:	f1b8 0f00 	cmp.w	r8, #0
 800aafe:	d000      	beq.n	800ab02 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5e>
 800ab00:	b937      	cbnz	r7, 800ab10 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6c>
 800ab02:	4b0d      	ldr	r3, [pc, #52]	; (800ab38 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 800ab04:	f240 210b 	movw	r1, #523	; 0x20b
 800ab08:	4a0c      	ldr	r2, [pc, #48]	; (800ab3c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 800ab0a:	480d      	ldr	r0, [pc, #52]	; (800ab40 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 800ab0c:	f00e f9b6 	bl	8018e7c <__assert_func>
 800ab10:	6833      	ldr	r3, [r6, #0]
 800ab12:	4630      	mov	r0, r6
 800ab14:	9c00      	ldr	r4, [sp, #0]
 800ab16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab18:	4798      	blx	r3
 800ab1a:	4220      	tst	r0, r4
 800ab1c:	d104      	bne.n	800ab28 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x84>
 800ab1e:	4b09      	ldr	r3, [pc, #36]	; (800ab44 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 800ab20:	f44f 7103 	mov.w	r1, #524	; 0x20c
 800ab24:	4a05      	ldr	r2, [pc, #20]	; (800ab3c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 800ab26:	e7f0      	b.n	800ab0a <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x66>
 800ab28:	6870      	ldr	r0, [r6, #4]
 800ab2a:	4669      	mov	r1, sp
 800ab2c:	6803      	ldr	r3, [r0, #0]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	4798      	blx	r3
 800ab32:	b008      	add	sp, #32
 800ab34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab38:	0801b41b 	.word	0x0801b41b
 800ab3c:	0801b67b 	.word	0x0801b67b
 800ab40:	0801b5cd 	.word	0x0801b5cd
 800ab44:	0801b453 	.word	0x0801b453

0800ab48 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800ab48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab4c:	b089      	sub	sp, #36	; 0x24
 800ab4e:	4693      	mov	fp, r2
 800ab50:	461d      	mov	r5, r3
 800ab52:	2400      	movs	r4, #0
 800ab54:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 800ab58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab5c:	468a      	mov	sl, r1
 800ab5e:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 800ab62:	fb09 b505 	mla	r5, r9, r5, fp
 800ab66:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 800ab6a:	4606      	mov	r6, r0
 800ab6c:	9403      	str	r4, [sp, #12]
 800ab6e:	e9cd 3400 	strd	r3, r4, [sp]
 800ab72:	f7ff ff85 	bl	800aa80 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ab76:	f8ad 8014 	strh.w	r8, [sp, #20]
 800ab7a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800ab7e:	f8ad 7016 	strh.w	r7, [sp, #22]
 800ab82:	f8ad 4018 	strh.w	r4, [sp, #24]
 800ab86:	9504      	str	r5, [sp, #16]
 800ab88:	f8ad 901a 	strh.w	r9, [sp, #26]
 800ab8c:	f8cd a00c 	str.w	sl, [sp, #12]
 800ab90:	f8ad 401c 	strh.w	r4, [sp, #28]
 800ab94:	f88d 401e 	strb.w	r4, [sp, #30]
 800ab98:	f88d 401f 	strb.w	r4, [sp, #31]
 800ab9c:	f1b8 0f00 	cmp.w	r8, #0
 800aba0:	d000      	beq.n	800aba4 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x5c>
 800aba2:	b937      	cbnz	r7, 800abb2 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6a>
 800aba4:	4b0d      	ldr	r3, [pc, #52]	; (800abdc <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 800aba6:	f240 2121 	movw	r1, #545	; 0x221
 800abaa:	4a0d      	ldr	r2, [pc, #52]	; (800abe0 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 800abac:	480d      	ldr	r0, [pc, #52]	; (800abe4 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 800abae:	f00e f965 	bl	8018e7c <__assert_func>
 800abb2:	6833      	ldr	r3, [r6, #0]
 800abb4:	4630      	mov	r0, r6
 800abb6:	9c00      	ldr	r4, [sp, #0]
 800abb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abba:	4798      	blx	r3
 800abbc:	4220      	tst	r0, r4
 800abbe:	d104      	bne.n	800abca <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x82>
 800abc0:	4b09      	ldr	r3, [pc, #36]	; (800abe8 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 800abc2:	f240 2122 	movw	r1, #546	; 0x222
 800abc6:	4a06      	ldr	r2, [pc, #24]	; (800abe0 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 800abc8:	e7f0      	b.n	800abac <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x64>
 800abca:	6870      	ldr	r0, [r6, #4]
 800abcc:	4669      	mov	r1, sp
 800abce:	6803      	ldr	r3, [r0, #0]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	4798      	blx	r3
 800abd4:	b009      	add	sp, #36	; 0x24
 800abd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abda:	bf00      	nop
 800abdc:	0801b498 	.word	0x0801b498
 800abe0:	0801b6f1 	.word	0x0801b6f1
 800abe4:	0801b5cd 	.word	0x0801b5cd
 800abe8:	0801b4d0 	.word	0x0801b4d0

0800abec <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 800abec:	b508      	push	{r3, lr}
 800abee:	290d      	cmp	r1, #13
 800abf0:	d817      	bhi.n	800ac22 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 800abf2:	e8df f001 	tbb	[pc, r1]
 800abf6:	090b      	.short	0x090b
 800abf8:	0d0d0d07 	.word	0x0d0d0d07
 800abfc:	1414140d 	.word	0x1414140d
 800ac00:	0d0d1414 	.word	0x0d0d1414
 800ac04:	2020      	movs	r0, #32
 800ac06:	bd08      	pop	{r3, pc}
 800ac08:	2018      	movs	r0, #24
 800ac0a:	e7fc      	b.n	800ac06 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800ac0c:	2010      	movs	r0, #16
 800ac0e:	e7fa      	b.n	800ac06 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800ac10:	4b05      	ldr	r3, [pc, #20]	; (800ac28 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 800ac12:	f240 2182 	movw	r1, #642	; 0x282
 800ac16:	4a05      	ldr	r2, [pc, #20]	; (800ac2c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 800ac18:	4805      	ldr	r0, [pc, #20]	; (800ac30 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 800ac1a:	f00e f92f 	bl	8018e7c <__assert_func>
 800ac1e:	2008      	movs	r0, #8
 800ac20:	e7f1      	b.n	800ac06 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800ac22:	2000      	movs	r0, #0
 800ac24:	e7ef      	b.n	800ac06 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800ac26:	bf00      	nop
 800ac28:	0801b649 	.word	0x0801b649
 800ac2c:	0801ba1c 	.word	0x0801ba1c
 800ac30:	0801b5cd 	.word	0x0801b5cd

0800ac34 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 800ac34:	b570      	push	{r4, r5, r6, lr}
 800ac36:	460d      	mov	r5, r1
 800ac38:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800ac3c:	4616      	mov	r6, r2
 800ac3e:	461c      	mov	r4, r3
 800ac40:	f7ff ffd4 	bl	800abec <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 800ac44:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800ac48:	10c0      	asrs	r0, r0, #3
 800ac4a:	fb06 5101 	mla	r1, r6, r1, r5
 800ac4e:	fb00 4001 	mla	r0, r0, r1, r4
 800ac52:	bd70      	pop	{r4, r5, r6, pc}

0800ac54 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800ac54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac58:	b08a      	sub	sp, #40	; 0x28
 800ac5a:	f04f 0c00 	mov.w	ip, #0
 800ac5e:	4604      	mov	r4, r0
 800ac60:	469a      	mov	sl, r3
 800ac62:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 800ac66:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 800ac6a:	2d0b      	cmp	r5, #11
 800ac6c:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 800ac70:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800ac74:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 800ac78:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 800ac7c:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 800ac80:	f8cd c014 	str.w	ip, [sp, #20]
 800ac84:	d12d      	bne.n	800ace2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 800ac86:	2080      	movs	r0, #128	; 0x80
 800ac88:	9204      	str	r2, [sp, #16]
 800ac8a:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 800ac8e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800ac92:	f8ad 2020 	strh.w	r2, [sp, #32]
 800ac96:	f8ad 701c 	strh.w	r7, [sp, #28]
 800ac9a:	f8ad 601e 	strh.w	r6, [sp, #30]
 800ac9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aca2:	4620      	mov	r0, r4
 800aca4:	f7ff feec 	bl	800aa80 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800aca8:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 800acac:	4603      	mov	r3, r0
 800acae:	4651      	mov	r1, sl
 800acb0:	4620      	mov	r0, r4
 800acb2:	e9cd 9800 	strd	r9, r8, [sp]
 800acb6:	f7ff ffbd 	bl	800ac34 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800acba:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 800acbe:	9006      	str	r0, [sp, #24]
 800acc0:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 800acc4:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 800acc8:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 800accc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800acd0:	b107      	cbz	r7, 800acd4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x80>
 800acd2:	b9d6      	cbnz	r6, 800ad0a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb6>
 800acd4:	4b17      	ldr	r3, [pc, #92]	; (800ad34 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe0>)
 800acd6:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800acda:	4a17      	ldr	r2, [pc, #92]	; (800ad38 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 800acdc:	4817      	ldr	r0, [pc, #92]	; (800ad3c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 800acde:	f00e f8cd 	bl	8018e7c <__assert_func>
 800ace2:	2d02      	cmp	r5, #2
 800ace4:	d108      	bne.n	800acf8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa4>
 800ace6:	2bff      	cmp	r3, #255	; 0xff
 800ace8:	d104      	bne.n	800acf4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa0>
 800acea:	2800      	cmp	r0, #0
 800acec:	bf14      	ite	ne
 800acee:	2040      	movne	r0, #64	; 0x40
 800acf0:	2020      	moveq	r0, #32
 800acf2:	e7c9      	b.n	800ac88 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800acf4:	2040      	movs	r0, #64	; 0x40
 800acf6:	e7c7      	b.n	800ac88 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800acf8:	2bff      	cmp	r3, #255	; 0xff
 800acfa:	d104      	bne.n	800ad06 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb2>
 800acfc:	2800      	cmp	r0, #0
 800acfe:	bf14      	ite	ne
 800ad00:	2004      	movne	r0, #4
 800ad02:	2001      	moveq	r0, #1
 800ad04:	e7c0      	b.n	800ac88 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800ad06:	2004      	movs	r0, #4
 800ad08:	e7be      	b.n	800ac88 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800ad0a:	6823      	ldr	r3, [r4, #0]
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	9d02      	ldr	r5, [sp, #8]
 800ad10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad12:	4798      	blx	r3
 800ad14:	4228      	tst	r0, r5
 800ad16:	d104      	bne.n	800ad22 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xce>
 800ad18:	4b09      	ldr	r3, [pc, #36]	; (800ad40 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 800ad1a:	f240 11d5 	movw	r1, #469	; 0x1d5
 800ad1e:	4a06      	ldr	r2, [pc, #24]	; (800ad38 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 800ad20:	e7dc      	b.n	800acdc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x88>
 800ad22:	6860      	ldr	r0, [r4, #4]
 800ad24:	a902      	add	r1, sp, #8
 800ad26:	6803      	ldr	r3, [r0, #0]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	4798      	blx	r3
 800ad2c:	b00a      	add	sp, #40	; 0x28
 800ad2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad32:	bf00      	nop
 800ad34:	0801b41b 	.word	0x0801b41b
 800ad38:	0801b8aa 	.word	0x0801b8aa
 800ad3c:	0801b5cd 	.word	0x0801b5cd
 800ad40:	0801b453 	.word	0x0801b453

0800ad44 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800ad44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad48:	b08b      	sub	sp, #44	; 0x2c
 800ad4a:	469b      	mov	fp, r3
 800ad4c:	4604      	mov	r4, r0
 800ad4e:	4692      	mov	sl, r2
 800ad50:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 800ad54:	2600      	movs	r6, #0
 800ad56:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 800ad5a:	4689      	mov	r9, r1
 800ad5c:	2fff      	cmp	r7, #255	; 0xff
 800ad5e:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 800ad62:	9605      	str	r6, [sp, #20]
 800ad64:	bf14      	ite	ne
 800ad66:	2308      	movne	r3, #8
 800ad68:	2302      	moveq	r3, #2
 800ad6a:	e9cd 3602 	strd	r3, r6, [sp, #8]
 800ad6e:	f7ff fe87 	bl	800aa80 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ad72:	465a      	mov	r2, fp
 800ad74:	4603      	mov	r3, r0
 800ad76:	4651      	mov	r1, sl
 800ad78:	4620      	mov	r0, r4
 800ad7a:	e9cd 8500 	strd	r8, r5, [sp]
 800ad7e:	f7ff ff59 	bl	800ac34 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800ad82:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800ad86:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 800ad8a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ad8e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800ad92:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 800ad96:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ad9a:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800ad9e:	9d02      	ldr	r5, [sp, #8]
 800ada0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800ada4:	6823      	ldr	r3, [r4, #0]
 800ada6:	9006      	str	r0, [sp, #24]
 800ada8:	4620      	mov	r0, r4
 800adaa:	f8ad 6020 	strh.w	r6, [sp, #32]
 800adae:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 800adb2:	f8cd 9014 	str.w	r9, [sp, #20]
 800adb6:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 800adba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adbc:	4798      	blx	r3
 800adbe:	4228      	tst	r0, r5
 800adc0:	d106      	bne.n	800add0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>
 800adc2:	4b07      	ldr	r3, [pc, #28]	; (800ade0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x9c>)
 800adc4:	f240 2137 	movw	r1, #567	; 0x237
 800adc8:	4a06      	ldr	r2, [pc, #24]	; (800ade4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 800adca:	4807      	ldr	r0, [pc, #28]	; (800ade8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 800adcc:	f00e f856 	bl	8018e7c <__assert_func>
 800add0:	6860      	ldr	r0, [r4, #4]
 800add2:	a902      	add	r1, sp, #8
 800add4:	6803      	ldr	r3, [r0, #0]
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	4798      	blx	r3
 800adda:	b00b      	add	sp, #44	; 0x2c
 800addc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ade0:	0801b453 	.word	0x0801b453
 800ade4:	0801b981 	.word	0x0801b981
 800ade8:	0801b5cd 	.word	0x0801b5cd

0800adec <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800adec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800adf0:	461f      	mov	r7, r3
 800adf2:	4b0b      	ldr	r3, [pc, #44]	; (800ae20 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800adf4:	460d      	mov	r5, r1
 800adf6:	4616      	mov	r6, r2
 800adf8:	f8b3 8000 	ldrh.w	r8, [r3]
 800adfc:	4604      	mov	r4, r0
 800adfe:	f7ff fc7f 	bl	800a700 <_ZN8touchgfx3HAL3lcdEv>
 800ae02:	6803      	ldr	r3, [r0, #0]
 800ae04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae06:	4798      	blx	r3
 800ae08:	463b      	mov	r3, r7
 800ae0a:	4632      	mov	r2, r6
 800ae0c:	4629      	mov	r1, r5
 800ae0e:	e9cd 8000 	strd	r8, r0, [sp]
 800ae12:	4620      	mov	r0, r4
 800ae14:	f7ff ff0e 	bl	800ac34 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800ae18:	b002      	add	sp, #8
 800ae1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae1e:	bf00      	nop
 800ae20:	2400688e 	.word	0x2400688e

0800ae24 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800ae24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae28:	4698      	mov	r8, r3
 800ae2a:	b088      	sub	sp, #32
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	4617      	mov	r7, r2
 800ae30:	4604      	mov	r4, r0
 800ae32:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800ae36:	9303      	str	r3, [sp, #12]
 800ae38:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800ae3c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800ae40:	f8ad 6014 	strh.w	r6, [sp, #20]
 800ae44:	f8ad 5016 	strh.w	r5, [sp, #22]
 800ae48:	e9cd 3100 	strd	r3, r1, [sp]
 800ae4c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800ae50:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ae54:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800ae58:	f88d 301c 	strb.w	r3, [sp, #28]
 800ae5c:	f7ff fe10 	bl	800aa80 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ae60:	4642      	mov	r2, r8
 800ae62:	4603      	mov	r3, r0
 800ae64:	4639      	mov	r1, r7
 800ae66:	4620      	mov	r0, r4
 800ae68:	f7ff ffc0 	bl	800adec <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800ae6c:	4b18      	ldr	r3, [pc, #96]	; (800aed0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xac>)
 800ae6e:	9004      	str	r0, [sp, #16]
 800ae70:	881b      	ldrh	r3, [r3, #0]
 800ae72:	f8ad 301a 	strh.w	r3, [sp, #26]
 800ae76:	f7ff fc43 	bl	800a700 <_ZN8touchgfx3HAL3lcdEv>
 800ae7a:	6803      	ldr	r3, [r0, #0]
 800ae7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7e:	4798      	blx	r3
 800ae80:	f88d 001e 	strb.w	r0, [sp, #30]
 800ae84:	f88d 001d 	strb.w	r0, [sp, #29]
 800ae88:	b106      	cbz	r6, 800ae8c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 800ae8a:	b935      	cbnz	r5, 800ae9a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 800ae8c:	4b11      	ldr	r3, [pc, #68]	; (800aed4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 800ae8e:	f240 11f1 	movw	r1, #497	; 0x1f1
 800ae92:	4a11      	ldr	r2, [pc, #68]	; (800aed8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 800ae94:	4811      	ldr	r0, [pc, #68]	; (800aedc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 800ae96:	f00d fff1 	bl	8018e7c <__assert_func>
 800ae9a:	6823      	ldr	r3, [r4, #0]
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	9d00      	ldr	r5, [sp, #0]
 800aea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aea2:	4798      	blx	r3
 800aea4:	4228      	tst	r0, r5
 800aea6:	d104      	bne.n	800aeb2 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 800aea8:	4b0d      	ldr	r3, [pc, #52]	; (800aee0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 800aeaa:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800aeae:	4a0a      	ldr	r2, [pc, #40]	; (800aed8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 800aeb0:	e7f0      	b.n	800ae94 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 800aeb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aeb4:	4669      	mov	r1, sp
 800aeb6:	6860      	ldr	r0, [r4, #4]
 800aeb8:	9303      	str	r3, [sp, #12]
 800aeba:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800aebe:	f88d 301f 	strb.w	r3, [sp, #31]
 800aec2:	6803      	ldr	r3, [r0, #0]
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	4798      	blx	r3
 800aec8:	b008      	add	sp, #32
 800aeca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aece:	bf00      	nop
 800aed0:	2400688e 	.word	0x2400688e
 800aed4:	0801b41b 	.word	0x0801b41b
 800aed8:	0801b756 	.word	0x0801b756
 800aedc:	0801b5cd 	.word	0x0801b5cd
 800aee0:	0801b453 	.word	0x0801b453

0800aee4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800aee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aee6:	b08b      	sub	sp, #44	; 0x2c
 800aee8:	4604      	mov	r4, r0
 800aeea:	466b      	mov	r3, sp
 800aeec:	e883 0006 	stmia.w	r3, {r1, r2}
 800aef0:	4b20      	ldr	r3, [pc, #128]	; (800af74 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	b933      	cbnz	r3, 800af04 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 800aef6:	4b20      	ldr	r3, [pc, #128]	; (800af78 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 800aef8:	f44f 7112 	mov.w	r1, #584	; 0x248
 800aefc:	4a1f      	ldr	r2, [pc, #124]	; (800af7c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 800aefe:	4820      	ldr	r0, [pc, #128]	; (800af80 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 800af00:	f00d ffbc 	bl	8018e7c <__assert_func>
 800af04:	2301      	movs	r3, #1
 800af06:	2500      	movs	r5, #0
 800af08:	f8bd 6000 	ldrh.w	r6, [sp]
 800af0c:	9302      	str	r3, [sp, #8]
 800af0e:	6803      	ldr	r3, [r0, #0]
 800af10:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800af14:	9505      	str	r5, [sp, #20]
 800af16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af18:	4798      	blx	r3
 800af1a:	463a      	mov	r2, r7
 800af1c:	4631      	mov	r1, r6
 800af1e:	4603      	mov	r3, r0
 800af20:	4620      	mov	r0, r4
 800af22:	f7ff ff63 	bl	800adec <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800af26:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800af28:	9003      	str	r0, [sp, #12]
 800af2a:	9306      	str	r3, [sp, #24]
 800af2c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800af30:	f8ad 301c 	strh.w	r3, [sp, #28]
 800af34:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800af38:	f8ad 301e 	strh.w	r3, [sp, #30]
 800af3c:	4b11      	ldr	r3, [pc, #68]	; (800af84 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 800af3e:	881b      	ldrh	r3, [r3, #0]
 800af40:	f8ad 3020 	strh.w	r3, [sp, #32]
 800af44:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800af48:	f7ff fbda 	bl	800a700 <_ZN8touchgfx3HAL3lcdEv>
 800af4c:	6803      	ldr	r3, [r0, #0]
 800af4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af50:	4798      	blx	r3
 800af52:	23ff      	movs	r3, #255	; 0xff
 800af54:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800af58:	a902      	add	r1, sp, #8
 800af5a:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800af5e:	6860      	ldr	r0, [r4, #4]
 800af60:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800af64:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
 800af68:	6803      	ldr	r3, [r0, #0]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	4798      	blx	r3
 800af6e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800af70:	b00b      	add	sp, #44	; 0x2c
 800af72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af74:	24006893 	.word	0x24006893
 800af78:	0801b51a 	.word	0x0801b51a
 800af7c:	0801b800 	.word	0x0801b800
 800af80:	0801b5cd 	.word	0x0801b5cd
 800af84:	2400688e 	.word	0x2400688e

0800af88 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800af88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af8c:	b08a      	sub	sp, #40	; 0x28
 800af8e:	2600      	movs	r6, #0
 800af90:	4604      	mov	r4, r0
 800af92:	466d      	mov	r5, sp
 800af94:	9605      	str	r6, [sp, #20]
 800af96:	e885 0006 	stmia.w	r5, {r1, r2}
 800af9a:	461d      	mov	r5, r3
 800af9c:	2301      	movs	r3, #1
 800af9e:	f8bd 7000 	ldrh.w	r7, [sp]
 800afa2:	9302      	str	r3, [sp, #8]
 800afa4:	6803      	ldr	r3, [r0, #0]
 800afa6:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800afaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afac:	4798      	blx	r3
 800afae:	4642      	mov	r2, r8
 800afb0:	4639      	mov	r1, r7
 800afb2:	4603      	mov	r3, r0
 800afb4:	4620      	mov	r0, r4
 800afb6:	f7ff ff19 	bl	800adec <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800afba:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800afbe:	9003      	str	r0, [sp, #12]
 800afc0:	f8ad 301c 	strh.w	r3, [sp, #28]
 800afc4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800afc8:	9506      	str	r5, [sp, #24]
 800afca:	f8ad 301e 	strh.w	r3, [sp, #30]
 800afce:	4b0f      	ldr	r3, [pc, #60]	; (800b00c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x84>)
 800afd0:	881b      	ldrh	r3, [r3, #0]
 800afd2:	f8ad 3020 	strh.w	r3, [sp, #32]
 800afd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800afd8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800afdc:	f7ff fb90 	bl	800a700 <_ZN8touchgfx3HAL3lcdEv>
 800afe0:	6803      	ldr	r3, [r0, #0]
 800afe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe4:	4798      	blx	r3
 800afe6:	23ff      	movs	r3, #255	; 0xff
 800afe8:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800afec:	a902      	add	r1, sp, #8
 800afee:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800aff2:	6860      	ldr	r0, [r4, #4]
 800aff4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800aff8:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 800affc:	6803      	ldr	r3, [r0, #0]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	4798      	blx	r3
 800b002:	4628      	mov	r0, r5
 800b004:	b00a      	add	sp, #40	; 0x28
 800b006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b00a:	bf00      	nop
 800b00c:	2400688e 	.word	0x2400688e

0800b010 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800b010:	b570      	push	{r4, r5, r6, lr}
 800b012:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800b016:	4604      	mov	r4, r0
 800b018:	b19b      	cbz	r3, 800b042 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800b01a:	2002      	movs	r0, #2
 800b01c:	f7f6 f94c 	bl	80012b8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800b020:	2300      	movs	r3, #0
 800b022:	4620      	mov	r0, r4
 800b024:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800b028:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800b02c:	6823      	ldr	r3, [r4, #0]
 800b02e:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 800b032:	f7ff fd25 	bl	800aa80 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800b036:	4601      	mov	r1, r0
 800b038:	4620      	mov	r0, r4
 800b03a:	462b      	mov	r3, r5
 800b03c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b040:	4718      	bx	r3
 800b042:	bd70      	pop	{r4, r5, r6, pc}

0800b044 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 800b044:	b570      	push	{r4, r5, r6, lr}
 800b046:	4605      	mov	r5, r0
 800b048:	460c      	mov	r4, r1
 800b04a:	2003      	movs	r0, #3
 800b04c:	b149      	cbz	r1, 800b062 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 800b04e:	f7f6 f903 	bl	8001258 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800b052:	6928      	ldr	r0, [r5, #16]
 800b054:	b168      	cbz	r0, 800b072 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800b056:	6803      	ldr	r3, [r0, #0]
 800b058:	2101      	movs	r1, #1
 800b05a:	695b      	ldr	r3, [r3, #20]
 800b05c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b060:	4718      	bx	r3
 800b062:	f7f6 f911 	bl	8001288 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800b066:	6928      	ldr	r0, [r5, #16]
 800b068:	b118      	cbz	r0, 800b072 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800b06a:	6803      	ldr	r3, [r0, #0]
 800b06c:	4621      	mov	r1, r4
 800b06e:	695b      	ldr	r3, [r3, #20]
 800b070:	e7f4      	b.n	800b05c <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 800b072:	bd70      	pop	{r4, r5, r6, pc}

0800b074 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800b074:	b538      	push	{r3, r4, r5, lr}
 800b076:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 800b07a:	4604      	mov	r4, r0
 800b07c:	460d      	mov	r5, r1
 800b07e:	428a      	cmp	r2, r1
 800b080:	d008      	beq.n	800b094 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 800b082:	2a01      	cmp	r2, #1
 800b084:	6803      	ldr	r3, [r0, #0]
 800b086:	d106      	bne.n	800b096 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 800b088:	b929      	cbnz	r1, 800b096 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 800b08a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800b08e:	4798      	blx	r3
 800b090:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 800b094:	bd38      	pop	{r3, r4, r5, pc}
 800b096:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800b09a:	4620      	mov	r0, r4
 800b09c:	e7f7      	b.n	800b08e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

0800b0a0 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800b0a0:	4b0d      	ldr	r3, [pc, #52]	; (800b0d8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800b0a2:	b510      	push	{r4, lr}
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	4604      	mov	r4, r0
 800b0a8:	b95b      	cbnz	r3, 800b0c2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800b0aa:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800b0ae:	2b02      	cmp	r3, #2
 800b0b0:	d007      	beq.n	800b0c2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800b0b2:	6840      	ldr	r0, [r0, #4]
 800b0b4:	f000 f93a 	bl	800b32c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800b0b8:	b118      	cbz	r0, 800b0c2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800b0ba:	6862      	ldr	r2, [r4, #4]
 800b0bc:	7a53      	ldrb	r3, [r2, #9]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d0fc      	beq.n	800b0bc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800b0c2:	f7f6 fa73 	bl	80015ac <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	2100      	movs	r1, #0
 800b0ca:	f7ff ffd3 	bl	800b074 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	f7ff fcd6 	bl	800aa80 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800b0d4:	bd10      	pop	{r4, pc}
 800b0d6:	bf00      	nop
 800b0d8:	24006892 	.word	0x24006892

0800b0dc <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800b0dc:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800b0e0:	1a13      	subs	r3, r2, r0
 800b0e2:	4258      	negs	r0, r3
 800b0e4:	4158      	adcs	r0, r3
 800b0e6:	4770      	bx	lr

0800b0e8 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800b0e8:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800b0ec:	1a9b      	subs	r3, r3, r2
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	bfdc      	itt	le
 800b0f2:	6882      	ldrle	r2, [r0, #8]
 800b0f4:	189b      	addle	r3, r3, r2
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	bfcc      	ite	gt
 800b0fa:	2000      	movgt	r0, #0
 800b0fc:	2001      	movle	r0, #1
 800b0fe:	4770      	bx	lr

0800b100 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800b100:	6902      	ldr	r2, [r0, #16]
 800b102:	6840      	ldr	r0, [r0, #4]
 800b104:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800b108:	4770      	bx	lr

0800b10a <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800b10a:	6803      	ldr	r3, [r0, #0]
 800b10c:	691b      	ldr	r3, [r3, #16]
 800b10e:	4718      	bx	r3

0800b110 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800b110:	4770      	bx	lr

0800b112 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800b112:	4770      	bx	lr

0800b114 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800b114:	4770      	bx	lr
	...

0800b118 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800b118:	2301      	movs	r3, #1
 800b11a:	b570      	push	{r4, r5, r6, lr}
 800b11c:	7203      	strb	r3, [r0, #8]
 800b11e:	4604      	mov	r4, r0
 800b120:	6840      	ldr	r0, [r0, #4]
 800b122:	6803      	ldr	r3, [r0, #0]
 800b124:	699b      	ldr	r3, [r3, #24]
 800b126:	4798      	blx	r3
 800b128:	6803      	ldr	r3, [r0, #0]
 800b12a:	4605      	mov	r5, r0
 800b12c:	2b40      	cmp	r3, #64	; 0x40
 800b12e:	d039      	beq.n	800b1a4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800b130:	d815      	bhi.n	800b15e <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 800b132:	2b04      	cmp	r3, #4
 800b134:	d022      	beq.n	800b17c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800b136:	d808      	bhi.n	800b14a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800b138:	2b01      	cmp	r3, #1
 800b13a:	d033      	beq.n	800b1a4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800b13c:	2b02      	cmp	r3, #2
 800b13e:	d108      	bne.n	800b152 <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 800b140:	6823      	ldr	r3, [r4, #0]
 800b142:	4620      	mov	r0, r4
 800b144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b146:	4798      	blx	r3
 800b148:	e025      	b.n	800b196 <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 800b14a:	2b08      	cmp	r3, #8
 800b14c:	d01e      	beq.n	800b18c <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 800b14e:	2b20      	cmp	r3, #32
 800b150:	d028      	beq.n	800b1a4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800b152:	4b17      	ldr	r3, [pc, #92]	; (800b1b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 800b154:	218b      	movs	r1, #139	; 0x8b
 800b156:	4a17      	ldr	r2, [pc, #92]	; (800b1b4 <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 800b158:	4817      	ldr	r0, [pc, #92]	; (800b1b8 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 800b15a:	f00d fe8f 	bl	8018e7c <__assert_func>
 800b15e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b162:	d01f      	beq.n	800b1a4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800b164:	d804      	bhi.n	800b170 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 800b166:	2b80      	cmp	r3, #128	; 0x80
 800b168:	d01c      	beq.n	800b1a4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800b16a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b16e:	e7ef      	b.n	800b150 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 800b170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b174:	d016      	beq.n	800b1a4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800b176:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b17a:	e7e0      	b.n	800b13e <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800b17c:	6823      	ldr	r3, [r4, #0]
 800b17e:	7f01      	ldrb	r1, [r0, #28]
 800b180:	4620      	mov	r0, r4
 800b182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b184:	4798      	blx	r3
 800b186:	6823      	ldr	r3, [r4, #0]
 800b188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b18a:	e006      	b.n	800b19a <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800b18c:	6823      	ldr	r3, [r4, #0]
 800b18e:	7f01      	ldrb	r1, [r0, #28]
 800b190:	4620      	mov	r0, r4
 800b192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b194:	4798      	blx	r3
 800b196:	6823      	ldr	r3, [r4, #0]
 800b198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b19a:	4629      	mov	r1, r5
 800b19c:	4620      	mov	r0, r4
 800b19e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b1a2:	4718      	bx	r3
 800b1a4:	6823      	ldr	r3, [r4, #0]
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1aa:	4798      	blx	r3
 800b1ac:	e7eb      	b.n	800b186 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 800b1ae:	bf00      	nop
 800b1b0:	0801ba65 	.word	0x0801ba65
 800b1b4:	0801bb24 	.word	0x0801bb24
 800b1b8:	0801ba8a 	.word	0x0801ba8a

0800b1bc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800b1bc:	b570      	push	{r4, r5, r6, lr}
 800b1be:	4604      	mov	r4, r0
 800b1c0:	460e      	mov	r6, r1
 800b1c2:	6860      	ldr	r0, [r4, #4]
 800b1c4:	6803      	ldr	r3, [r0, #0]
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	4798      	blx	r3
 800b1ca:	2800      	cmp	r0, #0
 800b1cc:	d1f9      	bne.n	800b1c2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800b1ce:	4d0d      	ldr	r5, [pc, #52]	; (800b204 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800b1d0:	6828      	ldr	r0, [r5, #0]
 800b1d2:	6803      	ldr	r3, [r0, #0]
 800b1d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1d6:	4798      	blx	r3
 800b1d8:	f7f6 f9f6 	bl	80015c8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800b1dc:	6828      	ldr	r0, [r5, #0]
 800b1de:	2101      	movs	r1, #1
 800b1e0:	f7ff ff48 	bl	800b074 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800b1e4:	6860      	ldr	r0, [r4, #4]
 800b1e6:	4631      	mov	r1, r6
 800b1e8:	6803      	ldr	r3, [r0, #0]
 800b1ea:	689b      	ldr	r3, [r3, #8]
 800b1ec:	4798      	blx	r3
 800b1ee:	6823      	ldr	r3, [r4, #0]
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f4:	4798      	blx	r3
 800b1f6:	6828      	ldr	r0, [r5, #0]
 800b1f8:	6803      	ldr	r3, [r0, #0]
 800b1fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b1fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b200:	4718      	bx	r3
 800b202:	bf00      	nop
 800b204:	24006894 	.word	0x24006894

0800b208 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800b208:	b508      	push	{r3, lr}
 800b20a:	f7f6 f9cf 	bl	80015ac <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800b20e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b212:	f7f6 b9d3 	b.w	80015bc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800b216 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800b216:	b510      	push	{r4, lr}
 800b218:	4604      	mov	r4, r0
 800b21a:	2114      	movs	r1, #20
 800b21c:	f00d fdff 	bl	8018e1e <_ZdlPvj>
 800b220:	4620      	mov	r0, r4
 800b222:	bd10      	pop	{r4, pc}

0800b224 <_ZN8touchgfx13DMA_Interface5startEv>:
 800b224:	b510      	push	{r4, lr}
 800b226:	4604      	mov	r4, r0
 800b228:	6840      	ldr	r0, [r0, #4]
 800b22a:	6803      	ldr	r3, [r0, #0]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	4798      	blx	r3
 800b230:	b948      	cbnz	r0, 800b246 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800b232:	7a63      	ldrb	r3, [r4, #9]
 800b234:	b13b      	cbz	r3, 800b246 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800b236:	7a23      	ldrb	r3, [r4, #8]
 800b238:	b92b      	cbnz	r3, 800b246 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800b23a:	6823      	ldr	r3, [r4, #0]
 800b23c:	4620      	mov	r0, r4
 800b23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b244:	4718      	bx	r3
 800b246:	bd10      	pop	{r4, pc}

0800b248 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800b248:	b570      	push	{r4, r5, r6, lr}
 800b24a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800b24e:	4606      	mov	r6, r0
 800b250:	1a9b      	subs	r3, r3, r2
 800b252:	2b00      	cmp	r3, #0
 800b254:	bfdc      	itt	le
 800b256:	6880      	ldrle	r0, [r0, #8]
 800b258:	181b      	addle	r3, r3, r0
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	dd13      	ble.n	800b286 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x3e>
 800b25e:	6874      	ldr	r4, [r6, #4]
 800b260:	460d      	mov	r5, r1
 800b262:	eb04 1442 	add.w	r4, r4, r2, lsl #5
 800b266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b26a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b26e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b272:	68f3      	ldr	r3, [r6, #12]
 800b274:	68b2      	ldr	r2, [r6, #8]
 800b276:	f3bf 8f5b 	dmb	ish
 800b27a:	3301      	adds	r3, #1
 800b27c:	429a      	cmp	r2, r3
 800b27e:	bfd8      	it	le
 800b280:	1a9b      	suble	r3, r3, r2
 800b282:	60f3      	str	r3, [r6, #12]
 800b284:	bd70      	pop	{r4, r5, r6, pc}
 800b286:	4b03      	ldr	r3, [pc, #12]	; (800b294 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x4c>)
 800b288:	2139      	movs	r1, #57	; 0x39
 800b28a:	4a03      	ldr	r2, [pc, #12]	; (800b298 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 800b28c:	4803      	ldr	r0, [pc, #12]	; (800b29c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 800b28e:	f00d fdf5 	bl	8018e7c <__assert_func>
 800b292:	bf00      	nop
 800b294:	0801bab0 	.word	0x0801bab0
 800b298:	0801bb54 	.word	0x0801bb54
 800b29c:	0801ba8a 	.word	0x0801ba8a

0800b2a0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800b2a0:	b510      	push	{r4, lr}
 800b2a2:	6803      	ldr	r3, [r0, #0]
 800b2a4:	4604      	mov	r4, r0
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4798      	blx	r3
 800b2aa:	b128      	cbz	r0, 800b2b8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 800b2ac:	4b07      	ldr	r3, [pc, #28]	; (800b2cc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 800b2ae:	213f      	movs	r1, #63	; 0x3f
 800b2b0:	4a07      	ldr	r2, [pc, #28]	; (800b2d0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 800b2b2:	4808      	ldr	r0, [pc, #32]	; (800b2d4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 800b2b4:	f00d fde2 	bl	8018e7c <__assert_func>
 800b2b8:	6923      	ldr	r3, [r4, #16]
 800b2ba:	68a2      	ldr	r2, [r4, #8]
 800b2bc:	f3bf 8f5b 	dmb	ish
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	bfd8      	it	le
 800b2c6:	1a9b      	suble	r3, r3, r2
 800b2c8:	6123      	str	r3, [r4, #16]
 800b2ca:	bd10      	pop	{r4, pc}
 800b2cc:	0801bad3 	.word	0x0801bad3
 800b2d0:	0801bba2 	.word	0x0801bba2
 800b2d4:	0801ba8a 	.word	0x0801ba8a

0800b2d8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800b2d8:	b570      	push	{r4, r5, r6, lr}
 800b2da:	4604      	mov	r4, r0
 800b2dc:	6840      	ldr	r0, [r0, #4]
 800b2de:	6803      	ldr	r3, [r0, #0]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4798      	blx	r3
 800b2e4:	4605      	mov	r5, r0
 800b2e6:	b930      	cbnz	r0, 800b2f6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800b2e8:	7a23      	ldrb	r3, [r4, #8]
 800b2ea:	b123      	cbz	r3, 800b2f6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800b2ec:	6860      	ldr	r0, [r4, #4]
 800b2ee:	6803      	ldr	r3, [r0, #0]
 800b2f0:	695b      	ldr	r3, [r3, #20]
 800b2f2:	4798      	blx	r3
 800b2f4:	7225      	strb	r5, [r4, #8]
 800b2f6:	6860      	ldr	r0, [r4, #4]
 800b2f8:	6803      	ldr	r3, [r0, #0]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4798      	blx	r3
 800b2fe:	b928      	cbnz	r0, 800b30c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800b300:	6823      	ldr	r3, [r4, #0]
 800b302:	4620      	mov	r0, r4
 800b304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b30a:	4718      	bx	r3
 800b30c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b310:	f7f6 b962 	b.w	80015d8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800b314 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800b314:	b510      	push	{r4, lr}
 800b316:	6082      	str	r2, [r0, #8]
 800b318:	2200      	movs	r2, #0
 800b31a:	4c03      	ldr	r4, [pc, #12]	; (800b328 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800b31c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800b320:	e9c0 4100 	strd	r4, r1, [r0]
 800b324:	bd10      	pop	{r4, pc}
 800b326:	bf00      	nop
 800b328:	0801bb08 	.word	0x0801bb08

0800b32c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800b32c:	6840      	ldr	r0, [r0, #4]
 800b32e:	6803      	ldr	r3, [r0, #0]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	4718      	bx	r3

0800b334 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
 800b334:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 800b338:	4770      	bx	lr

0800b33a <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
 800b33a:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 800b33e:	4770      	bx	lr

0800b340 <_ZN8touchgfx13ScalableImageD1Ev>:
 800b340:	4770      	bx	lr

0800b342 <_ZN8touchgfx13ScalableImageD0Ev>:
 800b342:	b510      	push	{r4, lr}
 800b344:	4604      	mov	r4, r0
 800b346:	212c      	movs	r1, #44	; 0x2c
 800b348:	f00d fd69 	bl	8018e1e <_ZdlPvj>
 800b34c:	4620      	mov	r0, r4
 800b34e:	bd10      	pop	{r4, pc}

0800b350 <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
 800b350:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b352:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800b356:	4605      	mov	r5, r0
 800b358:	2bff      	cmp	r3, #255	; 0xff
 800b35a:	d007      	beq.n	800b36c <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x1c>
 800b35c:	2300      	movs	r3, #0
 800b35e:	802b      	strh	r3, [r5, #0]
 800b360:	806b      	strh	r3, [r5, #2]
 800b362:	80ab      	strh	r3, [r5, #4]
 800b364:	80eb      	strh	r3, [r5, #6]
 800b366:	4628      	mov	r0, r5
 800b368:	b004      	add	sp, #16
 800b36a:	bd70      	pop	{r4, r5, r6, pc}
 800b36c:	f101 0426 	add.w	r4, r1, #38	; 0x26
 800b370:	4668      	mov	r0, sp
 800b372:	4621      	mov	r1, r4
 800b374:	f005 f9ea 	bl	801074c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800b378:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 800b37c:	4620      	mov	r0, r4
 800b37e:	f005 f971 	bl	8010664 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800b382:	4286      	cmp	r6, r0
 800b384:	d1ea      	bne.n	800b35c <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0xc>
 800b386:	4621      	mov	r1, r4
 800b388:	a802      	add	r0, sp, #8
 800b38a:	f005 f9df 	bl	801074c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800b38e:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800b392:	4620      	mov	r0, r4
 800b394:	f005 f9a0 	bl	80106d8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800b398:	4286      	cmp	r6, r0
 800b39a:	d1df      	bne.n	800b35c <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0xc>
 800b39c:	4621      	mov	r1, r4
 800b39e:	4628      	mov	r0, r5
 800b3a0:	f005 f9d4 	bl	801074c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800b3a4:	e7df      	b.n	800b366 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x16>
	...

0800b3a8 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>:
 800b3a8:	b538      	push	{r3, r4, r5, lr}
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	2501      	movs	r5, #1
 800b3ae:	4604      	mov	r4, r0
 800b3b0:	8083      	strh	r3, [r0, #4]
 800b3b2:	80c3      	strh	r3, [r0, #6]
 800b3b4:	8103      	strh	r3, [r0, #8]
 800b3b6:	8143      	strh	r3, [r0, #10]
 800b3b8:	8183      	strh	r3, [r0, #12]
 800b3ba:	81c3      	strh	r3, [r0, #14]
 800b3bc:	8203      	strh	r3, [r0, #16]
 800b3be:	8243      	strh	r3, [r0, #18]
 800b3c0:	61c3      	str	r3, [r0, #28]
 800b3c2:	8403      	strh	r3, [r0, #32]
 800b3c4:	8443      	strh	r3, [r0, #34]	; 0x22
 800b3c6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 800b3ca:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
 800b3ce:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800b3d2:	4b07      	ldr	r3, [pc, #28]	; (800b3f0 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x48>)
 800b3d4:	6003      	str	r3, [r0, #0]
 800b3d6:	880b      	ldrh	r3, [r1, #0]
 800b3d8:	84c3      	strh	r3, [r0, #38]	; 0x26
 800b3da:	23ff      	movs	r3, #255	; 0xff
 800b3dc:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 800b3e0:	f000 fc01 	bl	800bbe6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800b3e4:	4b03      	ldr	r3, [pc, #12]	; (800b3f4 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x4c>)
 800b3e6:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	6023      	str	r3, [r4, #0]
 800b3ee:	bd38      	pop	{r3, r4, r5, pc}
 800b3f0:	0801be18 	.word	0x0801be18
 800b3f4:	0801bbdc 	.word	0x0801bbdc

0800b3f8 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	3026      	adds	r0, #38	; 0x26
 800b3fc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800b400:	b90b      	cbnz	r3, 800b406 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
 800b402:	f003 bd63 	b.w	800eecc <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 800b406:	f003 bd71 	b.w	800eeec <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

0800b40c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 800b40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b410:	4604      	mov	r4, r0
 800b412:	469b      	mov	fp, r3
 800b414:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 800b418:	b0b3      	sub	sp, #204	; 0xcc
 800b41a:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800b41e:	f9b1 6000 	ldrsh.w	r6, [r1]
 800b422:	8888      	ldrh	r0, [r1, #4]
 800b424:	9206      	str	r2, [sp, #24]
 800b426:	2200      	movs	r2, #0
 800b428:	4430      	add	r0, r6
 800b42a:	9211      	str	r2, [sp, #68]	; 0x44
 800b42c:	b280      	uxth	r0, r0
 800b42e:	fa0f fe80 	sxth.w	lr, r0
 800b432:	4596      	cmp	lr, r2
 800b434:	e9dd a93c 	ldrd	sl, r9, [sp, #240]	; 0xf0
 800b438:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	; 0xf8
 800b43c:	f340 811a 	ble.w	800b674 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 800b440:	45b4      	cmp	ip, r6
 800b442:	f340 8117 	ble.w	800b674 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 800b446:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800b44a:	88ca      	ldrh	r2, [r1, #6]
 800b44c:	442a      	add	r2, r5
 800b44e:	b292      	uxth	r2, r2
 800b450:	b211      	sxth	r1, r2
 800b452:	2900      	cmp	r1, #0
 800b454:	f340 810e 	ble.w	800b674 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 800b458:	42ab      	cmp	r3, r5
 800b45a:	f340 810b 	ble.w	800b674 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 800b45e:	45f4      	cmp	ip, lr
 800b460:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 800b464:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800b468:	bfb8      	it	lt
 800b46a:	fa1f f08c 	uxthlt.w	r0, ip
 800b46e:	428b      	cmp	r3, r1
 800b470:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 800b474:	bfb8      	it	lt
 800b476:	b29a      	uxthlt	r2, r3
 800b478:	1b80      	subs	r0, r0, r6
 800b47a:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 800b47e:	1b52      	subs	r2, r2, r5
 800b480:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 800b484:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 800b488:	ab11      	add	r3, sp, #68	; 0x44
 800b48a:	ad13      	add	r5, sp, #76	; 0x4c
 800b48c:	6822      	ldr	r2, [r4, #0]
 800b48e:	1d26      	adds	r6, r4, #4
 800b490:	9307      	str	r3, [sp, #28]
 800b492:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b494:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b498:	e885 0003 	stmia.w	r5, {r0, r1}
 800b49c:	4629      	mov	r1, r5
 800b49e:	4620      	mov	r0, r4
 800b4a0:	4790      	blx	r2
 800b4a2:	4621      	mov	r1, r4
 800b4a4:	a815      	add	r0, sp, #84	; 0x54
 800b4a6:	f003 fc73 	bl	800ed90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800b4aa:	a815      	add	r0, sp, #84	; 0x54
 800b4ac:	f002 fa92 	bl	800d9d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800b4b0:	9b07      	ldr	r3, [sp, #28]
 800b4b2:	4631      	mov	r1, r6
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f002 fad1 	bl	800da5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800b4ba:	4628      	mov	r0, r5
 800b4bc:	f104 0526 	add.w	r5, r4, #38	; 0x26
 800b4c0:	f002 fa88 	bl	800d9d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800b4c4:	4628      	mov	r0, r5
 800b4c6:	f005 f9d5 	bl	8010874 <_ZNK8touchgfx6Bitmap7getDataEv>
 800b4ca:	9007      	str	r0, [sp, #28]
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	f000 80ce 	beq.w	800b66e <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x262>
 800b4d2:	f8db 2000 	ldr.w	r2, [fp]
 800b4d6:	a90d      	add	r1, sp, #52	; 0x34
 800b4d8:	a809      	add	r0, sp, #36	; 0x24
 800b4da:	9209      	str	r2, [sp, #36]	; 0x24
 800b4dc:	f8db 2004 	ldr.w	r2, [fp, #4]
 800b4e0:	920a      	str	r2, [sp, #40]	; 0x28
 800b4e2:	f8db 2008 	ldr.w	r2, [fp, #8]
 800b4e6:	920b      	str	r2, [sp, #44]	; 0x2c
 800b4e8:	f8db 200c 	ldr.w	r2, [fp, #12]
 800b4ec:	920c      	str	r2, [sp, #48]	; 0x30
 800b4ee:	f8da 2000 	ldr.w	r2, [sl]
 800b4f2:	920d      	str	r2, [sp, #52]	; 0x34
 800b4f4:	f8da 2004 	ldr.w	r2, [sl, #4]
 800b4f8:	920e      	str	r2, [sp, #56]	; 0x38
 800b4fa:	f8da 2008 	ldr.w	r2, [sl, #8]
 800b4fe:	920f      	str	r2, [sp, #60]	; 0x3c
 800b500:	f8da 200c 	ldr.w	r2, [sl, #12]
 800b504:	9210      	str	r2, [sp, #64]	; 0x40
 800b506:	4632      	mov	r2, r6
 800b508:	f002 fa8c 	bl	800da24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 800b50c:	4632      	mov	r2, r6
 800b50e:	a90e      	add	r1, sp, #56	; 0x38
 800b510:	a80a      	add	r0, sp, #40	; 0x28
 800b512:	f002 fa87 	bl	800da24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 800b516:	4632      	mov	r2, r6
 800b518:	a90f      	add	r1, sp, #60	; 0x3c
 800b51a:	a80b      	add	r0, sp, #44	; 0x2c
 800b51c:	f002 fa82 	bl	800da24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 800b520:	4632      	mov	r2, r6
 800b522:	a910      	add	r1, sp, #64	; 0x40
 800b524:	a80c      	add	r0, sp, #48	; 0x30
 800b526:	f002 fa7d 	bl	800da24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 800b52a:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 800b52e:	edd7 3a00 	vldr	s7, [r7]
 800b532:	eef0 6a67 	vmov.f32	s13, s15
 800b536:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 800b53a:	ed97 5a01 	vldr	s10, [r7, #4]
 800b53e:	eeb0 7a67 	vmov.f32	s14, s15
 800b542:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800b546:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 800b54a:	edd9 2a00 	vldr	s5, [r9]
 800b54e:	eeb0 6a67 	vmov.f32	s12, s15
 800b552:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 800b556:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 800b55a:	ed98 3a00 	vldr	s6, [r8]
 800b55e:	ed99 4a01 	vldr	s8, [r9, #4]
 800b562:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 800b566:	edd8 4a01 	vldr	s9, [r8, #4]
 800b56a:	edd9 5a02 	vldr	s11, [r9, #8]
 800b56e:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 800b572:	ee16 6a10 	vmov	r6, s12
 800b576:	eeb0 6a67 	vmov.f32	s12, s15
 800b57a:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 800b57e:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 800b582:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 800b586:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 800b58a:	edcd 2a20 	vstr	s5, [sp, #128]	; 0x80
 800b58e:	ed8d 3a21 	vstr	s6, [sp, #132]	; 0x84
 800b592:	ee16 0a10 	vmov	r0, s12
 800b596:	eeb0 6a67 	vmov.f32	s12, s15
 800b59a:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 800b59e:	edcd 3a22 	vstr	s7, [sp, #136]	; 0x88
 800b5a2:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 800b5a6:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 800b5aa:	ed8d 4a25 	vstr	s8, [sp, #148]	; 0x94
 800b5ae:	edcd 4a26 	vstr	s9, [sp, #152]	; 0x98
 800b5b2:	ee16 1a10 	vmov	r1, s12
 800b5b6:	eeb0 6a67 	vmov.f32	s12, s15
 800b5ba:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 800b5be:	ed8d 5a27 	vstr	s10, [sp, #156]	; 0x9c
 800b5c2:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 800b5c6:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800b5ca:	f8d8 b008 	ldr.w	fp, [r8, #8]
 800b5ce:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 800b5d2:	68ff      	ldr	r7, [r7, #12]
 800b5d4:	ee16 2a10 	vmov	r2, s12
 800b5d8:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 800b5dc:	9624      	str	r6, [sp, #144]	; 0x90
 800b5de:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 800b5e2:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 800b5e6:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 800b5ea:	4628      	mov	r0, r5
 800b5ec:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
 800b5f0:	9b06      	ldr	r3, [sp, #24]
 800b5f2:	922d      	str	r2, [sp, #180]	; 0xb4
 800b5f4:	4a21      	ldr	r2, [pc, #132]	; (800b67c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x270>)
 800b5f6:	9317      	str	r3, [sp, #92]	; 0x5c
 800b5f8:	8812      	ldrh	r2, [r2, #0]
 800b5fa:	9b07      	ldr	r3, [sp, #28]
 800b5fc:	9218      	str	r2, [sp, #96]	; 0x60
 800b5fe:	9319      	str	r3, [sp, #100]	; 0x64
 800b600:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 800b604:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 800b608:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 800b60c:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 800b610:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 800b614:	9731      	str	r7, [sp, #196]	; 0xc4
 800b616:	f005 f95f 	bl	80108d8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 800b61a:	901a      	str	r0, [sp, #104]	; 0x68
 800b61c:	4628      	mov	r0, r5
 800b61e:	f005 f821 	bl	8010664 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800b622:	901b      	str	r0, [sp, #108]	; 0x6c
 800b624:	4628      	mov	r0, r5
 800b626:	f005 f857 	bl	80106d8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800b62a:	901c      	str	r0, [sp, #112]	; 0x70
 800b62c:	4628      	mov	r0, r5
 800b62e:	f005 f819 	bl	8010664 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800b632:	4b13      	ldr	r3, [pc, #76]	; (800b680 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x274>)
 800b634:	901d      	str	r0, [sp, #116]	; 0x74
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800b63c:	b10a      	cbz	r2, 800b642 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x236>
 800b63e:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 800b640:	b905      	cbnz	r5, 800b644 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x238>
 800b642:	689d      	ldr	r5, [r3, #8]
 800b644:	682b      	ldr	r3, [r5, #0]
 800b646:	4620      	mov	r0, r4
 800b648:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 800b64a:	f7ff fed5 	bl	800b3f8 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 800b64e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b652:	aa1e      	add	r2, sp, #120	; 0x78
 800b654:	a917      	add	r1, sp, #92	; 0x5c
 800b656:	9304      	str	r3, [sp, #16]
 800b658:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b65c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b660:	ab13      	add	r3, sp, #76	; 0x4c
 800b662:	4628      	mov	r0, r5
 800b664:	9301      	str	r3, [sp, #4]
 800b666:	ab15      	add	r3, sp, #84	; 0x54
 800b668:	9300      	str	r3, [sp, #0]
 800b66a:	ab19      	add	r3, sp, #100	; 0x64
 800b66c:	47b0      	blx	r6
 800b66e:	b033      	add	sp, #204	; 0xcc
 800b670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b674:	2300      	movs	r3, #0
 800b676:	9312      	str	r3, [sp, #72]	; 0x48
 800b678:	e706      	b.n	800b488 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x7c>
 800b67a:	bf00      	nop
 800b67c:	2400688e 	.word	0x2400688e
 800b680:	24006894 	.word	0x24006894

0800b684 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
 800b684:	b570      	push	{r4, r5, r6, lr}
 800b686:	ed2d 8b04 	vpush	{d8-d9}
 800b68a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800b68e:	b098      	sub	sp, #96	; 0x60
 800b690:	4604      	mov	r4, r0
 800b692:	460e      	mov	r6, r1
 800b694:	2b00      	cmp	r3, #0
 800b696:	d065      	beq.n	800b764 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe0>
 800b698:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800b69c:	f100 0526 	add.w	r5, r0, #38	; 0x26
 800b6a0:	ed9f 8a37 	vldr	s16, [pc, #220]	; 800b780 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xfc>
 800b6a4:	ee09 3a10 	vmov	s18, r3
 800b6a8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800b6ac:	4628      	mov	r0, r5
 800b6ae:	ee08 3a90 	vmov	s17, r3
 800b6b2:	4b34      	ldr	r3, [pc, #208]	; (800b784 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x100>)
 800b6b4:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 800b6b8:	930c      	str	r3, [sp, #48]	; 0x30
 800b6ba:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 800b6be:	930d      	str	r3, [sp, #52]	; 0x34
 800b6c0:	930e      	str	r3, [sp, #56]	; 0x38
 800b6c2:	ee39 9a08 	vadd.f32	s18, s18, s16
 800b6c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6c8:	f004 ffcc 	bl	8010664 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800b6cc:	ee07 0a90 	vmov	s15, r0
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	ee78 8a88 	vadd.f32	s17, s17, s16
 800b6d6:	eef8 9a67 	vcvt.f32.u32	s19, s15
 800b6da:	f004 fffd 	bl	80106d8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800b6de:	4b2a      	ldr	r3, [pc, #168]	; (800b788 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x104>)
 800b6e0:	ee07 0a90 	vmov	s15, r0
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b6ea:	eef0 7a48 	vmov.f32	s15, s16
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d13c      	bne.n	800b76c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe8>
 800b6f2:	eef0 6a69 	vmov.f32	s13, s19
 800b6f6:	ee19 3a90 	vmov	r3, s19
 800b6fa:	eeb0 6a47 	vmov.f32	s12, s14
 800b6fe:	eef0 5a47 	vmov.f32	s11, s14
 800b702:	eef0 9a48 	vmov.f32	s19, s16
 800b706:	eeb0 7a48 	vmov.f32	s14, s16
 800b70a:	9314      	str	r3, [sp, #80]	; 0x50
 800b70c:	ab14      	add	r3, sp, #80	; 0x50
 800b70e:	2200      	movs	r2, #0
 800b710:	4631      	mov	r1, r6
 800b712:	9303      	str	r3, [sp, #12]
 800b714:	ab10      	add	r3, sp, #64	; 0x40
 800b716:	4620      	mov	r0, r4
 800b718:	edcd 7a04 	vstr	s15, [sp, #16]
 800b71c:	9302      	str	r3, [sp, #8]
 800b71e:	ab0c      	add	r3, sp, #48	; 0x30
 800b720:	ed8d 9a05 	vstr	s18, [sp, #20]
 800b724:	9301      	str	r3, [sp, #4]
 800b726:	ab08      	add	r3, sp, #32
 800b728:	ed8d 9a06 	vstr	s18, [sp, #24]
 800b72c:	9300      	str	r3, [sp, #0]
 800b72e:	ab04      	add	r3, sp, #16
 800b730:	edcd 7a07 	vstr	s15, [sp, #28]
 800b734:	edcd 7a08 	vstr	s15, [sp, #32]
 800b738:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 800b73c:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 800b740:	edcd 8a0b 	vstr	s17, [sp, #44]	; 0x2c
 800b744:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 800b748:	edcd 9a11 	vstr	s19, [sp, #68]	; 0x44
 800b74c:	edcd 5a12 	vstr	s11, [sp, #72]	; 0x48
 800b750:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 800b754:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 800b758:	ed8d 7a16 	vstr	s14, [sp, #88]	; 0x58
 800b75c:	edcd 6a17 	vstr	s13, [sp, #92]	; 0x5c
 800b760:	f7ff fe54 	bl	800b40c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 800b764:	b018      	add	sp, #96	; 0x60
 800b766:	ecbd 8b04 	vpop	{d8-d9}
 800b76a:	bd70      	pop	{r4, r5, r6, pc}
 800b76c:	eef0 6a47 	vmov.f32	s13, s14
 800b770:	ee18 3a10 	vmov	r3, s16
 800b774:	eef0 5a69 	vmov.f32	s11, s19
 800b778:	eeb0 6a48 	vmov.f32	s12, s16
 800b77c:	e7c5      	b.n	800b70a <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x86>
 800b77e:	bf00      	nop
 800b780:	00000000 	.word	0x00000000
 800b784:	42c80000 	.word	0x42c80000
 800b788:	2400688c 	.word	0x2400688c

0800b78c <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 800b78c:	2200      	movs	r2, #0
 800b78e:	8002      	strh	r2, [r0, #0]
 800b790:	8042      	strh	r2, [r0, #2]
 800b792:	8082      	strh	r2, [r0, #4]
 800b794:	80c2      	strh	r2, [r0, #6]
 800b796:	4770      	bx	lr

0800b798 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 800b798:	b570      	push	{r4, r5, r6, lr}
 800b79a:	6803      	ldr	r3, [r0, #0]
 800b79c:	4604      	mov	r4, r0
 800b79e:	4615      	mov	r5, r2
 800b7a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a2:	4798      	blx	r3
 800b7a4:	6823      	ldr	r3, [r4, #0]
 800b7a6:	4629      	mov	r1, r5
 800b7a8:	4620      	mov	r0, r4
 800b7aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b7b0:	4718      	bx	r3

0800b7b2 <_ZN8touchgfx8TextAreaD1Ev>:
 800b7b2:	4770      	bx	lr

0800b7b4 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 800b7b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b7b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b7ba:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800b7bc:	4299      	cmp	r1, r3
 800b7be:	d029      	beq.n	800b814 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 800b7c0:	4b15      	ldr	r3, [pc, #84]	; (800b818 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	b92b      	cbnz	r3, 800b7d2 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 800b7c6:	4b15      	ldr	r3, [pc, #84]	; (800b81c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 800b7c8:	21ae      	movs	r1, #174	; 0xae
 800b7ca:	4a15      	ldr	r2, [pc, #84]	; (800b820 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800b7cc:	4815      	ldr	r0, [pc, #84]	; (800b824 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 800b7ce:	f00d fb55 	bl	8018e7c <__assert_func>
 800b7d2:	4a15      	ldr	r2, [pc, #84]	; (800b828 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 800b7d4:	8812      	ldrh	r2, [r2, #0]
 800b7d6:	428a      	cmp	r2, r1
 800b7d8:	d803      	bhi.n	800b7e2 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 800b7da:	4b14      	ldr	r3, [pc, #80]	; (800b82c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 800b7dc:	21af      	movs	r1, #175	; 0xaf
 800b7de:	4a10      	ldr	r2, [pc, #64]	; (800b820 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800b7e0:	e7f4      	b.n	800b7cc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 800b7e2:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800b7e6:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800b7ea:	4b11      	ldr	r3, [pc, #68]	; (800b830 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 800b7ec:	7854      	ldrb	r4, [r2, #1]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f3c4 0481 	ubfx	r4, r4, #2, #2
 800b7f4:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 800b7f8:	682b      	ldr	r3, [r5, #0]
 800b7fa:	69de      	ldr	r6, [r3, #28]
 800b7fc:	4b0d      	ldr	r3, [pc, #52]	; (800b834 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 800b7fe:	6818      	ldr	r0, [r3, #0]
 800b800:	f7f6 ff0e 	bl	8002620 <_ZNK8touchgfx5Texts7getTextEt>
 800b804:	2300      	movs	r3, #0
 800b806:	4602      	mov	r2, r0
 800b808:	4621      	mov	r1, r4
 800b80a:	9300      	str	r3, [sp, #0]
 800b80c:	4628      	mov	r0, r5
 800b80e:	47b0      	blx	r6
 800b810:	b002      	add	sp, #8
 800b812:	bd70      	pop	{r4, r5, r6, pc}
 800b814:	2000      	movs	r0, #0
 800b816:	e7fb      	b.n	800b810 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 800b818:	240068e4 	.word	0x240068e4
 800b81c:	0801bc44 	.word	0x0801bc44
 800b820:	0801bd7c 	.word	0x0801bd7c
 800b824:	0801bc86 	.word	0x0801bc86
 800b828:	240068e8 	.word	0x240068e8
 800b82c:	0801bcaf 	.word	0x0801bcaf
 800b830:	240068ec 	.word	0x240068ec
 800b834:	240068f0 	.word	0x240068f0

0800b838 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 800b838:	b570      	push	{r4, r5, r6, lr}
 800b83a:	6803      	ldr	r3, [r0, #0]
 800b83c:	4604      	mov	r4, r0
 800b83e:	b28d      	uxth	r5, r1
 800b840:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800b842:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 800b844:	4b10      	ldr	r3, [pc, #64]	; (800b888 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	b92b      	cbnz	r3, 800b856 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 800b84a:	4b10      	ldr	r3, [pc, #64]	; (800b88c <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 800b84c:	21ae      	movs	r1, #174	; 0xae
 800b84e:	4a10      	ldr	r2, [pc, #64]	; (800b890 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 800b850:	4810      	ldr	r0, [pc, #64]	; (800b894 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 800b852:	f00d fb13 	bl	8018e7c <__assert_func>
 800b856:	4910      	ldr	r1, [pc, #64]	; (800b898 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 800b858:	8809      	ldrh	r1, [r1, #0]
 800b85a:	4291      	cmp	r1, r2
 800b85c:	d803      	bhi.n	800b866 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 800b85e:	4b0f      	ldr	r3, [pc, #60]	; (800b89c <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 800b860:	21af      	movs	r1, #175	; 0xaf
 800b862:	4a0b      	ldr	r2, [pc, #44]	; (800b890 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 800b864:	e7f4      	b.n	800b850 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 800b866:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800b86a:	4b0d      	ldr	r3, [pc, #52]	; (800b8a0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b872:	6803      	ldr	r3, [r0, #0]
 800b874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b876:	4798      	blx	r3
 800b878:	1a29      	subs	r1, r5, r0
 800b87a:	4633      	mov	r3, r6
 800b87c:	4620      	mov	r0, r4
 800b87e:	b209      	sxth	r1, r1
 800b880:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b884:	4718      	bx	r3
 800b886:	bf00      	nop
 800b888:	240068e4 	.word	0x240068e4
 800b88c:	0801bc44 	.word	0x0801bc44
 800b890:	0801bd7c 	.word	0x0801bd7c
 800b894:	0801bc86 	.word	0x0801bc86
 800b898:	240068e8 	.word	0x240068e8
 800b89c:	0801bcaf 	.word	0x0801bcaf
 800b8a0:	240068ec 	.word	0x240068ec

0800b8a4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 800b8a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b8ac:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800b8ae:	b08c      	sub	sp, #48	; 0x30
 800b8b0:	4604      	mov	r4, r0
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	4688      	mov	r8, r1
 800b8b6:	d05f      	beq.n	800b978 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 800b8b8:	4e31      	ldr	r6, [pc, #196]	; (800b980 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 800b8ba:	6832      	ldr	r2, [r6, #0]
 800b8bc:	b92a      	cbnz	r2, 800b8ca <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 800b8be:	4b31      	ldr	r3, [pc, #196]	; (800b984 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 800b8c0:	21ae      	movs	r1, #174	; 0xae
 800b8c2:	4a31      	ldr	r2, [pc, #196]	; (800b988 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 800b8c4:	4831      	ldr	r0, [pc, #196]	; (800b98c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 800b8c6:	f00d fad9 	bl	8018e7c <__assert_func>
 800b8ca:	4d31      	ldr	r5, [pc, #196]	; (800b990 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 800b8cc:	8829      	ldrh	r1, [r5, #0]
 800b8ce:	4299      	cmp	r1, r3
 800b8d0:	d803      	bhi.n	800b8da <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 800b8d2:	4b30      	ldr	r3, [pc, #192]	; (800b994 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 800b8d4:	21af      	movs	r1, #175	; 0xaf
 800b8d6:	4a2c      	ldr	r2, [pc, #176]	; (800b988 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 800b8d8:	e7f4      	b.n	800b8c4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 800b8da:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 800b8de:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800b8e2:	4b2d      	ldr	r3, [pc, #180]	; (800b998 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b8ea:	2a00      	cmp	r2, #0
 800b8ec:	d044      	beq.n	800b978 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 800b8ee:	784b      	ldrb	r3, [r1, #1]
 800b8f0:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 800b8f4:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 800b8f8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800b8fc:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 800b900:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800b904:	4b25      	ldr	r3, [pc, #148]	; (800b99c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 800b906:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 800b910:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 800b914:	9207      	str	r2, [sp, #28]
 800b916:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800b918:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800b91c:	f88d a020 	strb.w	sl, [sp, #32]
 800b920:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 800b924:	9009      	str	r0, [sp, #36]	; 0x24
 800b926:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 800b92a:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 800b92e:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 800b932:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 800b936:	b10a      	cbz	r2, 800b93c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 800b938:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 800b93a:	b907      	cbnz	r7, 800b93e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 800b93c:	689f      	ldr	r7, [r3, #8]
 800b93e:	f10d 0914 	add.w	r9, sp, #20
 800b942:	4621      	mov	r1, r4
 800b944:	4648      	mov	r0, r9
 800b946:	f003 fa23 	bl	800ed90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800b94a:	6833      	ldr	r3, [r6, #0]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d0b6      	beq.n	800b8be <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 800b950:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800b952:	882b      	ldrh	r3, [r5, #0]
 800b954:	428b      	cmp	r3, r1
 800b956:	d9bc      	bls.n	800b8d2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 800b958:	4b11      	ldr	r3, [pc, #68]	; (800b9a0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 800b95a:	6818      	ldr	r0, [r3, #0]
 800b95c:	f7f6 fe60 	bl	8002620 <_ZNK8touchgfx5Texts7getTextEt>
 800b960:	2300      	movs	r3, #0
 800b962:	9001      	str	r0, [sp, #4]
 800b964:	4638      	mov	r0, r7
 800b966:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b96a:	ab07      	add	r3, sp, #28
 800b96c:	9300      	str	r3, [sp, #0]
 800b96e:	4643      	mov	r3, r8
 800b970:	e899 0006 	ldmia.w	r9, {r1, r2}
 800b974:	f7f6 fe06 	bl	8002584 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800b978:	b00c      	add	sp, #48	; 0x30
 800b97a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b97e:	bf00      	nop
 800b980:	240068e4 	.word	0x240068e4
 800b984:	0801bc44 	.word	0x0801bc44
 800b988:	0801bd7c 	.word	0x0801bd7c
 800b98c:	0801bc86 	.word	0x0801bc86
 800b990:	240068e8 	.word	0x240068e8
 800b994:	0801bcaf 	.word	0x0801bcaf
 800b998:	240068ec 	.word	0x240068ec
 800b99c:	24006894 	.word	0x24006894
 800b9a0:	240068f0 	.word	0x240068f0

0800b9a4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 800b9a4:	b40e      	push	{r1, r2, r3}
 800b9a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b9aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ae:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800b9b0:	b09c      	sub	sp, #112	; 0x70
 800b9b2:	4604      	mov	r4, r0
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d06b      	beq.n	800ba90 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 800b9b8:	aa26      	add	r2, sp, #152	; 0x98
 800b9ba:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 800baa4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 800b9be:	9202      	str	r2, [sp, #8]
 800b9c0:	f8da 2000 	ldr.w	r2, [sl]
 800b9c4:	b92a      	cbnz	r2, 800b9d2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 800b9c6:	4b33      	ldr	r3, [pc, #204]	; (800ba94 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 800b9c8:	21ae      	movs	r1, #174	; 0xae
 800b9ca:	4a33      	ldr	r2, [pc, #204]	; (800ba98 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 800b9cc:	4833      	ldr	r0, [pc, #204]	; (800ba9c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>)
 800b9ce:	f00d fa55 	bl	8018e7c <__assert_func>
 800b9d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800baa8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x104>
 800b9d6:	f8b8 1000 	ldrh.w	r1, [r8]
 800b9da:	4299      	cmp	r1, r3
 800b9dc:	d803      	bhi.n	800b9e6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 800b9de:	4b30      	ldr	r3, [pc, #192]	; (800baa0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>)
 800b9e0:	21af      	movs	r1, #175	; 0xaf
 800b9e2:	4a2d      	ldr	r2, [pc, #180]	; (800ba98 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 800b9e4:	e7f2      	b.n	800b9cc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 800b9e6:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800baac <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x108>
 800b9ea:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800b9ee:	f8d9 3000 	ldr.w	r3, [r9]
 800b9f2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800b9f6:	682b      	ldr	r3, [r5, #0]
 800b9f8:	4628      	mov	r0, r5
 800b9fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9fc:	4798      	blx	r3
 800b9fe:	4606      	mov	r6, r0
 800ba00:	b207      	sxth	r7, r0
 800ba02:	a803      	add	r0, sp, #12
 800ba04:	f003 fd94 	bl	800f530 <_ZN8touchgfx12TextProviderC1Ev>
 800ba08:	682b      	ldr	r3, [r5, #0]
 800ba0a:	4628      	mov	r0, r5
 800ba0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba0e:	4798      	blx	r3
 800ba10:	682b      	ldr	r3, [r5, #0]
 800ba12:	4683      	mov	fp, r0
 800ba14:	4628      	mov	r0, r5
 800ba16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba18:	4798      	blx	r3
 800ba1a:	465b      	mov	r3, fp
 800ba1c:	9000      	str	r0, [sp, #0]
 800ba1e:	a803      	add	r0, sp, #12
 800ba20:	9925      	ldr	r1, [sp, #148]	; 0x94
 800ba22:	9a02      	ldr	r2, [sp, #8]
 800ba24:	f003 fdd7 	bl	800f5d6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800ba28:	f8da 3000 	ldr.w	r3, [sl]
 800ba2c:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d0c8      	beq.n	800b9c6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 800ba34:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800ba36:	f8b8 0000 	ldrh.w	r0, [r8]
 800ba3a:	4290      	cmp	r0, r2
 800ba3c:	d9cf      	bls.n	800b9de <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 800ba3e:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 800ba42:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 800ba46:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 800ba4a:	786a      	ldrb	r2, [r5, #1]
 800ba4c:	8925      	ldrh	r5, [r4, #8]
 800ba4e:	f8d9 3000 	ldr.w	r3, [r9]
 800ba52:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800ba56:	eba5 050c 	sub.w	r5, r5, ip
 800ba5a:	b22d      	sxth	r5, r5
 800ba5c:	9500      	str	r5, [sp, #0]
 800ba5e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800ba62:	a803      	add	r0, sp, #12
 800ba64:	f001 fcd1 	bl	800d40a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800ba68:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 800ba6c:	b203      	sxth	r3, r0
 800ba6e:	18b9      	adds	r1, r7, r2
 800ba70:	2900      	cmp	r1, #0
 800ba72:	dd0b      	ble.n	800ba8c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>
 800ba74:	3b01      	subs	r3, #1
 800ba76:	fb13 f302 	smulbb	r3, r3, r2
 800ba7a:	fb16 3300 	smlabb	r3, r6, r0, r3
 800ba7e:	b21f      	sxth	r7, r3
 800ba80:	4638      	mov	r0, r7
 800ba82:	b01c      	add	sp, #112	; 0x70
 800ba84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba88:	b003      	add	sp, #12
 800ba8a:	4770      	bx	lr
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	dcf7      	bgt.n	800ba80 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 800ba90:	2700      	movs	r7, #0
 800ba92:	e7f5      	b.n	800ba80 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 800ba94:	0801bc44 	.word	0x0801bc44
 800ba98:	0801bd7c 	.word	0x0801bd7c
 800ba9c:	0801bc86 	.word	0x0801bc86
 800baa0:	0801bcaf 	.word	0x0801bcaf
 800baa4:	240068e4 	.word	0x240068e4
 800baa8:	240068e8 	.word	0x240068e8
 800baac:	240068ec 	.word	0x240068ec

0800bab0 <_ZN8touchgfx8TextAreaD0Ev>:
 800bab0:	b510      	push	{r4, lr}
 800bab2:	4604      	mov	r4, r0
 800bab4:	213c      	movs	r1, #60	; 0x3c
 800bab6:	f00d f9b2 	bl	8018e1e <_ZdlPvj>
 800baba:	4620      	mov	r0, r4
 800babc:	bd10      	pop	{r4, pc}
	...

0800bac0 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 800bac0:	b570      	push	{r4, r5, r6, lr}
 800bac2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bac6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800bac8:	4604      	mov	r4, r0
 800baca:	4299      	cmp	r1, r3
 800bacc:	d01e      	beq.n	800bb0c <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 800bace:	6803      	ldr	r3, [r0, #0]
 800bad0:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 800bad2:	4b0f      	ldr	r3, [pc, #60]	; (800bb10 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	b92b      	cbnz	r3, 800bae4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 800bad8:	4b0e      	ldr	r3, [pc, #56]	; (800bb14 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 800bada:	21ae      	movs	r1, #174	; 0xae
 800badc:	4a0e      	ldr	r2, [pc, #56]	; (800bb18 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 800bade:	480f      	ldr	r0, [pc, #60]	; (800bb1c <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 800bae0:	f00d f9cc 	bl	8018e7c <__assert_func>
 800bae4:	4b0e      	ldr	r3, [pc, #56]	; (800bb20 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 800bae6:	881b      	ldrh	r3, [r3, #0]
 800bae8:	428b      	cmp	r3, r1
 800baea:	d803      	bhi.n	800baf4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 800baec:	4b0d      	ldr	r3, [pc, #52]	; (800bb24 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 800baee:	21af      	movs	r1, #175	; 0xaf
 800baf0:	4a09      	ldr	r2, [pc, #36]	; (800bb18 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 800baf2:	e7f4      	b.n	800bade <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 800baf4:	4b0c      	ldr	r3, [pc, #48]	; (800bb28 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 800baf6:	6818      	ldr	r0, [r3, #0]
 800baf8:	f7f6 fd92 	bl	8002620 <_ZNK8touchgfx5Texts7getTextEt>
 800bafc:	2300      	movs	r3, #0
 800bafe:	4601      	mov	r1, r0
 800bb00:	46ac      	mov	ip, r5
 800bb02:	4620      	mov	r0, r4
 800bb04:	461a      	mov	r2, r3
 800bb06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bb0a:	4760      	bx	ip
 800bb0c:	2000      	movs	r0, #0
 800bb0e:	bd70      	pop	{r4, r5, r6, pc}
 800bb10:	240068e4 	.word	0x240068e4
 800bb14:	0801bc44 	.word	0x0801bc44
 800bb18:	0801bd7c 	.word	0x0801bd7c
 800bb1c:	0801bc86 	.word	0x0801bc86
 800bb20:	240068e8 	.word	0x240068e8
 800bb24:	0801bcaf 	.word	0x0801bcaf
 800bb28:	240068f0 	.word	0x240068f0

0800bb2c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 800bb2c:	b538      	push	{r3, r4, r5, lr}
 800bb2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bb32:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800bb34:	4604      	mov	r4, r0
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d014      	beq.n	800bb64 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 800bb3a:	6803      	ldr	r3, [r0, #0]
 800bb3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb3e:	4798      	blx	r3
 800bb40:	6823      	ldr	r3, [r4, #0]
 800bb42:	4605      	mov	r5, r0
 800bb44:	4620      	mov	r0, r4
 800bb46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb48:	4798      	blx	r3
 800bb4a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800bb4e:	b22d      	sxth	r5, r5
 800bb50:	4601      	mov	r1, r0
 800bb52:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800bb56:	bf06      	itte	eq
 800bb58:	4602      	moveq	r2, r0
 800bb5a:	4629      	moveq	r1, r5
 800bb5c:	462a      	movne	r2, r5
 800bb5e:	4620      	mov	r0, r4
 800bb60:	f7f6 fb8d 	bl	800227e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800bb64:	bd38      	pop	{r3, r4, r5, pc}

0800bb66 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 800bb66:	888a      	ldrh	r2, [r1, #4]
 800bb68:	8582      	strh	r2, [r0, #44]	; 0x2c
 800bb6a:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 800bb6e:	b922      	cbnz	r2, 800bb7a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 800bb70:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800bb74:	b90b      	cbnz	r3, 800bb7a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 800bb76:	f7ff bfd9 	b.w	800bb2c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 800bb7a:	4770      	bx	lr

0800bb7c <_ZNK8touchgfx3Box12getSolidRectEv>:
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	8083      	strh	r3, [r0, #4]
 800bb80:	80c3      	strh	r3, [r0, #6]
 800bb82:	8003      	strh	r3, [r0, #0]
 800bb84:	8043      	strh	r3, [r0, #2]
 800bb86:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 800bb8a:	2bff      	cmp	r3, #255	; 0xff
 800bb8c:	bf01      	itttt	eq
 800bb8e:	890b      	ldrheq	r3, [r1, #8]
 800bb90:	8083      	strheq	r3, [r0, #4]
 800bb92:	894b      	ldrheq	r3, [r1, #10]
 800bb94:	80c3      	strheq	r3, [r0, #6]
 800bb96:	4770      	bx	lr

0800bb98 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800bb98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb9a:	4604      	mov	r4, r0
 800bb9c:	466b      	mov	r3, sp
 800bb9e:	6808      	ldr	r0, [r1, #0]
 800bba0:	6849      	ldr	r1, [r1, #4]
 800bba2:	c303      	stmia	r3!, {r0, r1}
 800bba4:	6823      	ldr	r3, [r4, #0]
 800bba6:	4669      	mov	r1, sp
 800bba8:	4620      	mov	r0, r4
 800bbaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbac:	4798      	blx	r3
 800bbae:	4b08      	ldr	r3, [pc, #32]	; (800bbd0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800bbb6:	b10a      	cbz	r2, 800bbbc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800bbb8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800bbba:	b900      	cbnz	r0, 800bbbe <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800bbbc:	6898      	ldr	r0, [r3, #8]
 800bbbe:	6803      	ldr	r3, [r0, #0]
 800bbc0:	4669      	mov	r1, sp
 800bbc2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800bbc4:	699d      	ldr	r5, [r3, #24]
 800bbc6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800bbca:	47a8      	blx	r5
 800bbcc:	b003      	add	sp, #12
 800bbce:	bd30      	pop	{r4, r5, pc}
 800bbd0:	24006894 	.word	0x24006894

0800bbd4 <_ZN8touchgfx3BoxD1Ev>:
 800bbd4:	4770      	bx	lr

0800bbd6 <_ZN8touchgfx3BoxD0Ev>:
 800bbd6:	b510      	push	{r4, lr}
 800bbd8:	4604      	mov	r4, r0
 800bbda:	212c      	movs	r1, #44	; 0x2c
 800bbdc:	f00d f91f 	bl	8018e1e <_ZdlPvj>
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	bd10      	pop	{r4, pc}

0800bbe4 <_ZN8touchgfx5ImageD1Ev>:
 800bbe4:	4770      	bx	lr

0800bbe6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800bbe6:	b570      	push	{r4, r5, r6, lr}
 800bbe8:	880b      	ldrh	r3, [r1, #0]
 800bbea:	460d      	mov	r5, r1
 800bbec:	4604      	mov	r4, r0
 800bbee:	84c3      	strh	r3, [r0, #38]	; 0x26
 800bbf0:	4608      	mov	r0, r1
 800bbf2:	f004 fd37 	bl	8010664 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800bbf6:	4606      	mov	r6, r0
 800bbf8:	4628      	mov	r0, r5
 800bbfa:	f004 fd6d 	bl	80106d8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800bbfe:	6823      	ldr	r3, [r4, #0]
 800bc00:	4605      	mov	r5, r0
 800bc02:	b231      	sxth	r1, r6
 800bc04:	4620      	mov	r0, r4
 800bc06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc08:	4798      	blx	r3
 800bc0a:	6823      	ldr	r3, [r4, #0]
 800bc0c:	b229      	sxth	r1, r5
 800bc0e:	4620      	mov	r0, r4
 800bc10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bc16:	4718      	bx	r3

0800bc18 <_ZN8touchgfx5ImageD0Ev>:
 800bc18:	b510      	push	{r4, lr}
 800bc1a:	4604      	mov	r4, r0
 800bc1c:	212c      	movs	r1, #44	; 0x2c
 800bc1e:	f00d f8fe 	bl	8018e1e <_ZdlPvj>
 800bc22:	4620      	mov	r0, r4
 800bc24:	bd10      	pop	{r4, pc}

0800bc26 <_ZNK8touchgfx5Image12getSolidRectEv>:
 800bc26:	b510      	push	{r4, lr}
 800bc28:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800bc2c:	4604      	mov	r4, r0
 800bc2e:	2bff      	cmp	r3, #255	; 0xff
 800bc30:	d006      	beq.n	800bc40 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 800bc32:	2300      	movs	r3, #0
 800bc34:	8003      	strh	r3, [r0, #0]
 800bc36:	8043      	strh	r3, [r0, #2]
 800bc38:	8083      	strh	r3, [r0, #4]
 800bc3a:	80c3      	strh	r3, [r0, #6]
 800bc3c:	4620      	mov	r0, r4
 800bc3e:	bd10      	pop	{r4, pc}
 800bc40:	3126      	adds	r1, #38	; 0x26
 800bc42:	f004 fd83 	bl	801074c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800bc46:	e7f9      	b.n	800bc3c <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0800bc48 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800bc48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc4c:	4604      	mov	r4, r0
 800bc4e:	b088      	sub	sp, #32
 800bc50:	2500      	movs	r5, #0
 800bc52:	460f      	mov	r7, r1
 800bc54:	f854 3b26 	ldr.w	r3, [r4], #38
 800bc58:	a904      	add	r1, sp, #16
 800bc5a:	4606      	mov	r6, r0
 800bc5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc5e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bc62:	4798      	blx	r3
 800bc64:	4620      	mov	r0, r4
 800bc66:	f004 fcfd 	bl	8010664 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800bc6a:	4680      	mov	r8, r0
 800bc6c:	4620      	mov	r0, r4
 800bc6e:	f004 fd33 	bl	80106d8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800bc72:	9506      	str	r5, [sp, #24]
 800bc74:	ad06      	add	r5, sp, #24
 800bc76:	f8ad 001e 	strh.w	r0, [sp, #30]
 800bc7a:	4639      	mov	r1, r7
 800bc7c:	f8ad 801c 	strh.w	r8, [sp, #28]
 800bc80:	4628      	mov	r0, r5
 800bc82:	f7fe fa5f 	bl	800a144 <_ZN8touchgfx4RectaNERKS0_>
 800bc86:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	dd19      	ble.n	800bcc2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800bc8e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	dd15      	ble.n	800bcc2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800bc96:	4b0c      	ldr	r3, [pc, #48]	; (800bcc8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800bc9e:	b10a      	cbz	r2, 800bca4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 800bca0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800bca2:	b900      	cbnz	r0, 800bca6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 800bca4:	6898      	ldr	r0, [r3, #8]
 800bca6:	2701      	movs	r7, #1
 800bca8:	6801      	ldr	r1, [r0, #0]
 800bcaa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800bcae:	9702      	str	r7, [sp, #8]
 800bcb0:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 800bcb4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800bcb8:	e9cd 5600 	strd	r5, r6, [sp]
 800bcbc:	688d      	ldr	r5, [r1, #8]
 800bcbe:	4621      	mov	r1, r4
 800bcc0:	47a8      	blx	r5
 800bcc2:	b008      	add	sp, #32
 800bcc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcc8:	24006894 	.word	0x24006894

0800bccc <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 800bccc:	2000      	movs	r0, #0
 800bcce:	4770      	bx	lr

0800bcd0 <_ZN8touchgfx8KeyboardD1Ev>:
 800bcd0:	4770      	bx	lr

0800bcd2 <_ZN8touchgfx10ClickEventD1Ev>:
 800bcd2:	4770      	bx	lr

0800bcd4 <_ZN8touchgfx8Keyboard14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800bcd4:	b538      	push	{r3, r4, r5, lr}
 800bcd6:	4604      	mov	r4, r0
 800bcd8:	4615      	mov	r5, r2
 800bcda:	f7fe fb0b 	bl	800a2f4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 800bcde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bce2:	81a3      	strh	r3, [r4, #12]
 800bce4:	f04f 33ff 	mov.w	r3, #4294967295
 800bce8:	6223      	str	r3, [r4, #32]
 800bcea:	682b      	ldr	r3, [r5, #0]
 800bcec:	61e3      	str	r3, [r4, #28]
 800bcee:	602c      	str	r4, [r5, #0]
 800bcf0:	bd38      	pop	{r3, r4, r5, pc}

0800bcf2 <_ZN8touchgfx10ClickEventD0Ev>:
 800bcf2:	b510      	push	{r4, lr}
 800bcf4:	4604      	mov	r4, r0
 800bcf6:	210c      	movs	r1, #12
 800bcf8:	f00d f891 	bl	8018e1e <_ZdlPvj>
 800bcfc:	4620      	mov	r0, r4
 800bcfe:	bd10      	pop	{r4, pc}

0800bd00 <_ZN8touchgfx8KeyboardD0Ev>:
 800bd00:	b510      	push	{r4, lr}
 800bd02:	4604      	mov	r4, r0
 800bd04:	21dc      	movs	r1, #220	; 0xdc
 800bd06:	f00d f88a 	bl	8018e1e <_ZdlPvj>
 800bd0a:	4620      	mov	r0, r4
 800bd0c:	bd10      	pop	{r4, pc}

0800bd0e <_ZNK8touchgfx4Rect9intersectEss>:
 800bd0e:	b510      	push	{r4, lr}
 800bd10:	f9b0 3000 	ldrsh.w	r3, [r0]
 800bd14:	428b      	cmp	r3, r1
 800bd16:	dc10      	bgt.n	800bd3a <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 800bd18:	8884      	ldrh	r4, [r0, #4]
 800bd1a:	4423      	add	r3, r4
 800bd1c:	b21b      	sxth	r3, r3
 800bd1e:	4299      	cmp	r1, r3
 800bd20:	da0b      	bge.n	800bd3a <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 800bd22:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800bd26:	4293      	cmp	r3, r2
 800bd28:	dc07      	bgt.n	800bd3a <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 800bd2a:	88c0      	ldrh	r0, [r0, #6]
 800bd2c:	4418      	add	r0, r3
 800bd2e:	b200      	sxth	r0, r0
 800bd30:	4282      	cmp	r2, r0
 800bd32:	bfac      	ite	ge
 800bd34:	2000      	movge	r0, #0
 800bd36:	2001      	movlt	r0, #1
 800bd38:	bd10      	pop	{r4, pc}
 800bd3a:	2000      	movs	r0, #0
 800bd3c:	e7fc      	b.n	800bd38 <_ZNK8touchgfx4Rect9intersectEss+0x2a>
	...

0800bd40 <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE>:
 800bd40:	b530      	push	{r4, r5, lr}
 800bd42:	f890 30d1 	ldrb.w	r3, [r0, #209]	; 0xd1
 800bd46:	b085      	sub	sp, #20
 800bd48:	4604      	mov	r4, r0
 800bd4a:	460d      	mov	r5, r1
 800bd4c:	b1f3      	cbz	r3, 800bd8c <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE+0x4c>
 800bd4e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bd52:	30b0      	adds	r0, #176	; 0xb0
 800bd54:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 800bd58:	f7ff ffd9 	bl	800bd0e <_ZNK8touchgfx4Rect9intersectEss>
 800bd5c:	b9b0      	cbnz	r0, 800bd8c <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE+0x4c>
 800bd5e:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
 800bd62:	b99b      	cbnz	r3, 800bd8c <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE+0x4c>
 800bd64:	480a      	ldr	r0, [pc, #40]	; (800bd90 <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE+0x50>)
 800bd66:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 800bd6a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 800bd6e:	9001      	str	r0, [sp, #4]
 800bd70:	2002      	movs	r0, #2
 800bd72:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bd76:	6823      	ldr	r3, [r4, #0]
 800bd78:	f88d 0008 	strb.w	r0, [sp, #8]
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	f8ad 100a 	strh.w	r1, [sp, #10]
 800bd82:	a901      	add	r1, sp, #4
 800bd84:	f8ad 200c 	strh.w	r2, [sp, #12]
 800bd88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd8a:	4798      	blx	r3
 800bd8c:	b005      	add	sp, #20
 800bd8e:	bd30      	pop	{r4, r5, pc}
 800bd90:	0801be80 	.word	0x0801be80

0800bd94 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800bd94:	b510      	push	{r4, lr}
 800bd96:	f9b1 4000 	ldrsh.w	r4, [r1]
 800bd9a:	888a      	ldrh	r2, [r1, #4]
 800bd9c:	f9b0 3000 	ldrsh.w	r3, [r0]
 800bda0:	4422      	add	r2, r4
 800bda2:	b212      	sxth	r2, r2
 800bda4:	4293      	cmp	r3, r2
 800bda6:	da15      	bge.n	800bdd4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800bda8:	8882      	ldrh	r2, [r0, #4]
 800bdaa:	4413      	add	r3, r2
 800bdac:	b21b      	sxth	r3, r3
 800bdae:	429c      	cmp	r4, r3
 800bdb0:	da10      	bge.n	800bdd4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800bdb2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800bdb6:	88c9      	ldrh	r1, [r1, #6]
 800bdb8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800bdbc:	4419      	add	r1, r3
 800bdbe:	b209      	sxth	r1, r1
 800bdc0:	428a      	cmp	r2, r1
 800bdc2:	da07      	bge.n	800bdd4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800bdc4:	88c0      	ldrh	r0, [r0, #6]
 800bdc6:	4410      	add	r0, r2
 800bdc8:	b200      	sxth	r0, r0
 800bdca:	4283      	cmp	r3, r0
 800bdcc:	bfac      	ite	ge
 800bdce:	2000      	movge	r0, #0
 800bdd0:	2001      	movlt	r0, #1
 800bdd2:	bd10      	pop	{r4, pc}
 800bdd4:	2000      	movs	r0, #0
 800bdd6:	e7fc      	b.n	800bdd2 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800bdd8 <_ZN8touchgfx8DrawableC1Ev>:
 800bdd8:	4a0a      	ldr	r2, [pc, #40]	; (800be04 <_ZN8touchgfx8DrawableC1Ev+0x2c>)
 800bdda:	6002      	str	r2, [r0, #0]
 800bddc:	2200      	movs	r2, #0
 800bdde:	8082      	strh	r2, [r0, #4]
 800bde0:	80c2      	strh	r2, [r0, #6]
 800bde2:	8102      	strh	r2, [r0, #8]
 800bde4:	8142      	strh	r2, [r0, #10]
 800bde6:	8182      	strh	r2, [r0, #12]
 800bde8:	81c2      	strh	r2, [r0, #14]
 800bdea:	8202      	strh	r2, [r0, #16]
 800bdec:	8242      	strh	r2, [r0, #18]
 800bdee:	61c2      	str	r2, [r0, #28]
 800bdf0:	8402      	strh	r2, [r0, #32]
 800bdf2:	8442      	strh	r2, [r0, #34]	; 0x22
 800bdf4:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 800bdf8:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 800be02:	4770      	bx	lr
 800be04:	0801c2e8 	.word	0x0801c2e8

0800be08 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
 800be08:	b538      	push	{r3, r4, r5, lr}
 800be0a:	4604      	mov	r4, r0
 800be0c:	460d      	mov	r5, r1
 800be0e:	2226      	movs	r2, #38	; 0x26
 800be10:	2100      	movs	r1, #0
 800be12:	f00d f8bf 	bl	8018f94 <memset>
 800be16:	4620      	mov	r0, r4
 800be18:	f7ff ffde 	bl	800bdd8 <_ZN8touchgfx8DrawableC1Ev>
 800be1c:	4b06      	ldr	r3, [pc, #24]	; (800be38 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
 800be1e:	4620      	mov	r0, r4
 800be20:	4629      	mov	r1, r5
 800be22:	6023      	str	r3, [r4, #0]
 800be24:	882b      	ldrh	r3, [r5, #0]
 800be26:	84e3      	strh	r3, [r4, #38]	; 0x26
 800be28:	23ff      	movs	r3, #255	; 0xff
 800be2a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800be2e:	f7ff feda 	bl	800bbe6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800be32:	4620      	mov	r0, r4
 800be34:	bd38      	pop	{r3, r4, r5, pc}
 800be36:	bf00      	nop
 800be38:	0801be18 	.word	0x0801be18

0800be3c <_ZN8touchgfx8KeyboardC1Ev>:
 800be3c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800be40:	4604      	mov	r4, r0
 800be42:	2500      	movs	r5, #0
 800be44:	f7ff ffc8 	bl	800bdd8 <_ZN8touchgfx8DrawableC1Ev>
 800be48:	f64f 79ff 	movw	r9, #65535	; 0xffff
 800be4c:	4b2a      	ldr	r3, [pc, #168]	; (800bef8 <_ZN8touchgfx8KeyboardC1Ev+0xbc>)
 800be4e:	f104 0838 	add.w	r8, r4, #56	; 0x38
 800be52:	ae02      	add	r6, sp, #8
 800be54:	f104 0764 	add.w	r7, r4, #100	; 0x64
 800be58:	6023      	str	r3, [r4, #0]
 800be5a:	4640      	mov	r0, r8
 800be5c:	f826 9d04 	strh.w	r9, [r6, #-4]!
 800be60:	4631      	mov	r1, r6
 800be62:	f104 0aac 	add.w	sl, r4, #172	; 0xac
 800be66:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
 800be6a:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 800be6e:	f7ff ffcb 	bl	800be08 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800be72:	2226      	movs	r2, #38	; 0x26
 800be74:	4629      	mov	r1, r5
 800be76:	4638      	mov	r0, r7
 800be78:	f00d f88c 	bl	8018f94 <memset>
 800be7c:	4638      	mov	r0, r7
 800be7e:	f7ff ffab 	bl	800bdd8 <_ZN8touchgfx8DrawableC1Ev>
 800be82:	4b1e      	ldr	r3, [pc, #120]	; (800befc <_ZN8touchgfx8KeyboardC1Ev+0xc0>)
 800be84:	4631      	mov	r1, r6
 800be86:	f8a4 9090 	strh.w	r9, [r4, #144]	; 0x90
 800be8a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800be8e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 800be92:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
 800be96:	4650      	mov	r0, sl
 800be98:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 800be9c:	4b18      	ldr	r3, [pc, #96]	; (800bf00 <_ZN8touchgfx8KeyboardC1Ev+0xc4>)
 800be9e:	f884 509c 	strb.w	r5, [r4, #156]	; 0x9c
 800bea2:	6663      	str	r3, [r4, #100]	; 0x64
 800bea4:	f884 509d 	strb.w	r5, [r4, #157]	; 0x9d
 800bea8:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 800beac:	f8ad 9004 	strh.w	r9, [sp, #4]
 800beb0:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
 800beb4:	f7ff ffa8 	bl	800be08 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800beb8:	2301      	movs	r3, #1
 800beba:	462a      	mov	r2, r5
 800bebc:	4629      	mov	r1, r5
 800bebe:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800bec2:	4640      	mov	r0, r8
 800bec4:	f884 50d8 	strb.w	r5, [r4, #216]	; 0xd8
 800bec8:	f7fe fc0c 	bl	800a6e4 <_ZN8touchgfx8Drawable5setXYEss>
 800becc:	4641      	mov	r1, r8
 800bece:	4620      	mov	r0, r4
 800bed0:	f7fd fff6 	bl	8009ec0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800bed4:	4651      	mov	r1, sl
 800bed6:	4620      	mov	r0, r4
 800bed8:	f884 50d1 	strb.w	r5, [r4, #209]	; 0xd1
 800bedc:	f7fd fff0 	bl	8009ec0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800bee0:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800bee4:	4620      	mov	r0, r4
 800bee6:	4639      	mov	r1, r7
 800bee8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800beec:	f7fd ffe8 	bl	8009ec0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800bef0:	4620      	mov	r0, r4
 800bef2:	b002      	add	sp, #8
 800bef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bef8:	0801bf38 	.word	0x0801bf38
 800befc:	0801a710 	.word	0x0801a710
 800bf00:	0801d658 	.word	0x0801d658

0800bf04 <_ZN8touchgfx8Keyboard9setBufferEPtt>:
 800bf04:	b510      	push	{r4, lr}
 800bf06:	4604      	mov	r4, r0
 800bf08:	6301      	str	r1, [r0, #48]	; 0x30
 800bf0a:	8682      	strh	r2, [r0, #52]	; 0x34
 800bf0c:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
 800bf10:	4608      	mov	r0, r1
 800bf12:	f004 fabd 	bl	8010490 <_ZN8touchgfx7Unicode6strlenEPKt>
 800bf16:	86e0      	strh	r0, [r4, #54]	; 0x36
 800bf18:	bd10      	pop	{r4, pc}

0800bf1a <_ZN8touchgfx8Keyboard9setLayoutEPKNS0_6LayoutE>:
 800bf1a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bf1e:	4605      	mov	r5, r0
 800bf20:	460c      	mov	r4, r1
 800bf22:	f8c5 10a4 	str.w	r1, [r5, #164]	; 0xa4
 800bf26:	b309      	cbz	r1, 800bf6c <_ZN8touchgfx8Keyboard9setLayoutEPKNS0_6LayoutE+0x52>
 800bf28:	460f      	mov	r7, r1
 800bf2a:	a902      	add	r1, sp, #8
 800bf2c:	f105 0664 	add.w	r6, r5, #100	; 0x64
 800bf30:	3038      	adds	r0, #56	; 0x38
 800bf32:	f837 3b1c 	ldrh.w	r3, [r7], #28
 800bf36:	f821 3d04 	strh.w	r3, [r1, #-4]!
 800bf3a:	f7ff fe54 	bl	800bbe6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800bf3e:	4639      	mov	r1, r7
 800bf40:	4630      	mov	r0, r6
 800bf42:	f7ff fe10 	bl	800bb66 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800bf46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf48:	4630      	mov	r0, r6
 800bf4a:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
 800bf4e:	f9b4 7016 	ldrsh.w	r7, [r4, #22]
 800bf52:	f9b4 8018 	ldrsh.w	r8, [r4, #24]
 800bf56:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 800bf5a:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 800bf5e:	f7fe fbc1 	bl	800a6e4 <_ZN8touchgfx8Drawable5setXYEss>
 800bf62:	4642      	mov	r2, r8
 800bf64:	4639      	mov	r1, r7
 800bf66:	4630      	mov	r0, r6
 800bf68:	f7f6 f989 	bl	800227e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800bf6c:	682b      	ldr	r3, [r5, #0]
 800bf6e:	4628      	mov	r0, r5
 800bf70:	695b      	ldr	r3, [r3, #20]
 800bf72:	4798      	blx	r3
 800bf74:	b002      	add	sp, #8
 800bf76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800bf7c <_ZN8touchgfx8Keyboard18setTextIndentationEv>:
 800bf7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf80:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800bf84:	4605      	mov	r5, r0
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d030      	beq.n	800bfec <_ZN8touchgfx8Keyboard18setTextIndentationEv+0x70>
 800bf8a:	4a19      	ldr	r2, [pc, #100]	; (800bff0 <_ZN8touchgfx8Keyboard18setTextIndentationEv+0x74>)
 800bf8c:	6812      	ldr	r2, [r2, #0]
 800bf8e:	b92a      	cbnz	r2, 800bf9c <_ZN8touchgfx8Keyboard18setTextIndentationEv+0x20>
 800bf90:	4b18      	ldr	r3, [pc, #96]	; (800bff4 <_ZN8touchgfx8Keyboard18setTextIndentationEv+0x78>)
 800bf92:	21ae      	movs	r1, #174	; 0xae
 800bf94:	4a18      	ldr	r2, [pc, #96]	; (800bff8 <_ZN8touchgfx8Keyboard18setTextIndentationEv+0x7c>)
 800bf96:	4819      	ldr	r0, [pc, #100]	; (800bffc <_ZN8touchgfx8Keyboard18setTextIndentationEv+0x80>)
 800bf98:	f00c ff70 	bl	8018e7c <__assert_func>
 800bf9c:	4818      	ldr	r0, [pc, #96]	; (800c000 <_ZN8touchgfx8Keyboard18setTextIndentationEv+0x84>)
 800bf9e:	8c19      	ldrh	r1, [r3, #32]
 800bfa0:	8800      	ldrh	r0, [r0, #0]
 800bfa2:	4288      	cmp	r0, r1
 800bfa4:	d803      	bhi.n	800bfae <_ZN8touchgfx8Keyboard18setTextIndentationEv+0x32>
 800bfa6:	4b17      	ldr	r3, [pc, #92]	; (800c004 <_ZN8touchgfx8Keyboard18setTextIndentationEv+0x88>)
 800bfa8:	21af      	movs	r1, #175	; 0xaf
 800bfaa:	4a13      	ldr	r2, [pc, #76]	; (800bff8 <_ZN8touchgfx8Keyboard18setTextIndentationEv+0x7c>)
 800bfac:	e7f3      	b.n	800bf96 <_ZN8touchgfx8Keyboard18setTextIndentationEv+0x1a>
 800bfae:	f812 1011 	ldrb.w	r1, [r2, r1, lsl #1]
 800bfb2:	f105 0764 	add.w	r7, r5, #100	; 0x64
 800bfb6:	4a14      	ldr	r2, [pc, #80]	; (800c008 <_ZN8touchgfx8Keyboard18setTextIndentationEv+0x8c>)
 800bfb8:	8adc      	ldrh	r4, [r3, #22]
 800bfba:	4638      	mov	r0, r7
 800bfbc:	6812      	ldr	r2, [r2, #0]
 800bfbe:	f9b3 8018 	ldrsh.w	r8, [r3, #24]
 800bfc2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800bfc6:	8a59      	ldrh	r1, [r3, #18]
 800bfc8:	7a16      	ldrb	r6, [r2, #8]
 800bfca:	b2b2      	uxth	r2, r6
 800bfcc:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 800bfd0:	1a89      	subs	r1, r1, r2
 800bfd2:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800bfd6:	b224      	sxth	r4, r4
 800bfd8:	b209      	sxth	r1, r1
 800bfda:	f7fe fb83 	bl	800a6e4 <_ZN8touchgfx8Drawable5setXYEss>
 800bfde:	4642      	mov	r2, r8
 800bfe0:	4621      	mov	r1, r4
 800bfe2:	4638      	mov	r0, r7
 800bfe4:	f7f6 f94b 	bl	800227e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800bfe8:	f885 609b 	strb.w	r6, [r5, #155]	; 0x9b
 800bfec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bff0:	240068e4 	.word	0x240068e4
 800bff4:	0801bc44 	.word	0x0801bc44
 800bff8:	0801bfff 	.word	0x0801bfff
 800bffc:	0801bc86 	.word	0x0801bc86
 800c000:	240068e8 	.word	0x240068e8
 800c004:	0801bcaf 	.word	0x0801bcaf
 800c008:	240068ec 	.word	0x240068ec

0800c00c <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss>:
 800c00c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c010:	4690      	mov	r8, r2
 800c012:	f8d1 70a4 	ldr.w	r7, [r1, #164]	; 0xa4
 800c016:	2200      	movs	r2, #0
 800c018:	4606      	mov	r6, r0
 800c01a:	4699      	mov	r9, r3
 800c01c:	8042      	strh	r2, [r0, #2]
 800c01e:	8082      	strh	r2, [r0, #4]
 800c020:	80c2      	strh	r2, [r0, #6]
 800c022:	8102      	strh	r2, [r0, #8]
 800c024:	7002      	strb	r2, [r0, #0]
 800c026:	b1c7      	cbz	r7, 800c05a <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss+0x4e>
 800c028:	f897 a008 	ldrb.w	sl, [r7, #8]
 800c02c:	4615      	mov	r5, r2
 800c02e:	f04f 0b0c 	mov.w	fp, #12
 800c032:	b2eb      	uxtb	r3, r5
 800c034:	459a      	cmp	sl, r3
 800c036:	d910      	bls.n	800c05a <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss+0x4e>
 800c038:	687c      	ldr	r4, [r7, #4]
 800c03a:	464a      	mov	r2, r9
 800c03c:	4641      	mov	r1, r8
 800c03e:	fb0b 4405 	mla	r4, fp, r5, r4
 800c042:	3501      	adds	r5, #1
 800c044:	1ca0      	adds	r0, r4, #2
 800c046:	f7ff fe62 	bl	800bd0e <_ZNK8touchgfx4Rect9intersectEss>
 800c04a:	2800      	cmp	r0, #0
 800c04c:	d0f1      	beq.n	800c032 <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss+0x26>
 800c04e:	6823      	ldr	r3, [r4, #0]
 800c050:	6033      	str	r3, [r6, #0]
 800c052:	6863      	ldr	r3, [r4, #4]
 800c054:	6073      	str	r3, [r6, #4]
 800c056:	68a3      	ldr	r3, [r4, #8]
 800c058:	60b3      	str	r3, [r6, #8]
 800c05a:	4630      	mov	r0, r6
 800c05c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c060 <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss>:
 800c060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c064:	2500      	movs	r5, #0
 800c066:	f8d1 70a4 	ldr.w	r7, [r1, #164]	; 0xa4
 800c06a:	4606      	mov	r6, r0
 800c06c:	4690      	mov	r8, r2
 800c06e:	4699      	mov	r9, r3
 800c070:	6085      	str	r5, [r0, #8]
 800c072:	e9c0 5500 	strd	r5, r5, [r0]
 800c076:	b307      	cbz	r7, 800c0ba <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss+0x5a>
 800c078:	f897 a010 	ldrb.w	sl, [r7, #16]
 800c07c:	b2eb      	uxtb	r3, r5
 800c07e:	459a      	cmp	sl, r3
 800c080:	d91b      	bls.n	800c0ba <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss+0x5a>
 800c082:	68fc      	ldr	r4, [r7, #12]
 800c084:	464a      	mov	r2, r9
 800c086:	4641      	mov	r1, r8
 800c088:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 800c08c:	3501      	adds	r5, #1
 800c08e:	4620      	mov	r0, r4
 800c090:	f7ff fe3d 	bl	800bd0e <_ZNK8touchgfx4Rect9intersectEss>
 800c094:	2800      	cmp	r0, #0
 800c096:	d0f1      	beq.n	800c07c <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss+0x1c>
 800c098:	4623      	mov	r3, r4
 800c09a:	4632      	mov	r2, r6
 800c09c:	f104 0508 	add.w	r5, r4, #8
 800c0a0:	6818      	ldr	r0, [r3, #0]
 800c0a2:	3308      	adds	r3, #8
 800c0a4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800c0a8:	4614      	mov	r4, r2
 800c0aa:	42ab      	cmp	r3, r5
 800c0ac:	c403      	stmia	r4!, {r0, r1}
 800c0ae:	4622      	mov	r2, r4
 800c0b0:	d1f6      	bne.n	800c0a0 <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss+0x40>
 800c0b2:	6818      	ldr	r0, [r3, #0]
 800c0b4:	6020      	str	r0, [r4, #0]
 800c0b6:	889b      	ldrh	r3, [r3, #4]
 800c0b8:	80a3      	strh	r3, [r4, #4]
 800c0ba:	4630      	mov	r0, r6
 800c0bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c0c0 <_ZNK8touchgfx8Keyboard13getCharForKeyEh>:
 800c0c0:	b570      	push	{r4, r5, r6, lr}
 800c0c2:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 800c0c6:	b160      	cbz	r0, 800c0e2 <_ZNK8touchgfx8Keyboard13getCharForKeyEh+0x22>
 800c0c8:	7906      	ldrb	r6, [r0, #4]
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	b2da      	uxtb	r2, r3
 800c0ce:	4296      	cmp	r6, r2
 800c0d0:	d908      	bls.n	800c0e4 <_ZNK8touchgfx8Keyboard13getCharForKeyEh+0x24>
 800c0d2:	009a      	lsls	r2, r3, #2
 800c0d4:	6804      	ldr	r4, [r0, #0]
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	18a5      	adds	r5, r4, r2
 800c0da:	5ca2      	ldrb	r2, [r4, r2]
 800c0dc:	428a      	cmp	r2, r1
 800c0de:	d1f5      	bne.n	800c0cc <_ZNK8touchgfx8Keyboard13getCharForKeyEh+0xc>
 800c0e0:	8868      	ldrh	r0, [r5, #2]
 800c0e2:	bd70      	pop	{r4, r5, r6, pc}
 800c0e4:	2000      	movs	r0, #0
 800c0e6:	e7fc      	b.n	800c0e2 <_ZNK8touchgfx8Keyboard13getCharForKeyEh+0x22>

0800c0e8 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE>:
 800c0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0ec:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800c0f0:	b08d      	sub	sp, #52	; 0x34
 800c0f2:	4605      	mov	r5, r0
 800c0f4:	460e      	mov	r6, r1
 800c0f6:	b92b      	cbnz	r3, 800c104 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x1c>
 800c0f8:	4b67      	ldr	r3, [pc, #412]	; (800c298 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x1b0>)
 800c0fa:	2179      	movs	r1, #121	; 0x79
 800c0fc:	4a67      	ldr	r2, [pc, #412]	; (800c29c <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x1b4>)
 800c0fe:	4868      	ldr	r0, [pc, #416]	; (800c2a0 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x1b8>)
 800c100:	f00c febc 	bl	8018e7c <__assert_func>
 800c104:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 800c106:	f004 f9d7 	bl	80104b8 <_ZN8touchgfx11FontManager7getFontEt>
 800c10a:	b918      	cbnz	r0, 800c114 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x2c>
 800c10c:	4b65      	ldr	r3, [pc, #404]	; (800c2a4 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x1bc>)
 800c10e:	217d      	movs	r1, #125	; 0x7d
 800c110:	4a62      	ldr	r2, [pc, #392]	; (800c29c <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x1b4>)
 800c112:	e7f4      	b.n	800c0fe <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x16>
 800c114:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800c118:	2400      	movs	r4, #0
 800c11a:	9007      	str	r0, [sp, #28]
 800c11c:	920a      	str	r2, [sp, #40]	; 0x28
 800c11e:	2201      	movs	r2, #1
 800c120:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 800c124:	f88d 2020 	strb.w	r2, [sp, #32]
 800c128:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
 800c12c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800c130:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c132:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
 800c136:	9209      	str	r2, [sp, #36]	; 0x24
 800c138:	9402      	str	r4, [sp, #8]
 800c13a:	6803      	ldr	r3, [r0, #0]
 800c13c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c13e:	4798      	blx	r3
 800c140:	4607      	mov	r7, r0
 800c142:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 800c146:	fa5f f884 	uxtb.w	r8, r4
 800c14a:	7a1a      	ldrb	r2, [r3, #8]
 800c14c:	4542      	cmp	r2, r8
 800c14e:	f240 809f 	bls.w	800c290 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x1a8>
 800c152:	220c      	movs	r2, #12
 800c154:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800c158:	4631      	mov	r1, r6
 800c15a:	fb02 f808 	mul.w	r8, r2, r8
 800c15e:	eb09 0a08 	add.w	sl, r9, r8
 800c162:	f10a 0a02 	add.w	sl, sl, #2
 800c166:	4650      	mov	r0, sl
 800c168:	f7ff fe14 	bl	800bd94 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800c16c:	2800      	cmp	r0, #0
 800c16e:	f000 808a 	beq.w	800c286 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x19e>
 800c172:	f819 1008 	ldrb.w	r1, [r9, r8]
 800c176:	4628      	mov	r0, r5
 800c178:	f7ff ffa2 	bl	800c0c0 <_ZNK8touchgfx8Keyboard13getCharForKeyEh>
 800c17c:	4681      	mov	r9, r0
 800c17e:	2800      	cmp	r0, #0
 800c180:	f000 8081 	beq.w	800c286 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x19e>
 800c184:	f8da 0000 	ldr.w	r0, [sl]
 800c188:	ab03      	add	r3, sp, #12
 800c18a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800c18e:	c303      	stmia	r3!, {r0, r1}
 800c190:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 800c194:	2102      	movs	r1, #2
 800c196:	f8bd 800e 	ldrh.w	r8, [sp, #14]
 800c19a:	1bd3      	subs	r3, r2, r7
 800c19c:	fb93 f3f1 	sdiv	r3, r3, r1
 800c1a0:	b29b      	uxth	r3, r3
 800c1a2:	4498      	add	r8, r3
 800c1a4:	1ad3      	subs	r3, r2, r3
 800c1a6:	fa1f f888 	uxth.w	r8, r8
 800c1aa:	f8ad 3012 	strh.w	r3, [sp, #18]
 800c1ae:	ab05      	add	r3, sp, #20
 800c1b0:	f8da 1004 	ldr.w	r1, [sl, #4]
 800c1b4:	f8ad 800e 	strh.w	r8, [sp, #14]
 800c1b8:	f8da 0000 	ldr.w	r0, [sl]
 800c1bc:	c303      	stmia	r3!, {r0, r1}
 800c1be:	4631      	mov	r1, r6
 800c1c0:	a805      	add	r0, sp, #20
 800c1c2:	f7ff fde7 	bl	800bd94 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800c1c6:	2800      	cmp	r0, #0
 800c1c8:	d05f      	beq.n	800c28a <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x1a2>
 800c1ca:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 800c1ce:	f9b6 2000 	ldrsh.w	r2, [r6]
 800c1d2:	f8bd a018 	ldrh.w	sl, [sp, #24]
 800c1d6:	4686      	mov	lr, r0
 800c1d8:	4290      	cmp	r0, r2
 800c1da:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 800c1de:	4450      	add	r0, sl
 800c1e0:	f8b6 a004 	ldrh.w	sl, [r6, #4]
 800c1e4:	bfb8      	it	lt
 800c1e6:	4696      	movlt	lr, r2
 800c1e8:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800c1ec:	4452      	add	r2, sl
 800c1ee:	b280      	uxth	r0, r0
 800c1f0:	4299      	cmp	r1, r3
 800c1f2:	468c      	mov	ip, r1
 800c1f4:	b292      	uxth	r2, r2
 800c1f6:	f8ad e014 	strh.w	lr, [sp, #20]
 800c1fa:	fa0f fb80 	sxth.w	fp, r0
 800c1fe:	bfb8      	it	lt
 800c200:	469c      	movlt	ip, r3
 800c202:	fa0f fa82 	sxth.w	sl, r2
 800c206:	f8ad c016 	strh.w	ip, [sp, #22]
 800c20a:	45d3      	cmp	fp, sl
 800c20c:	bfb8      	it	lt
 800c20e:	4602      	movlt	r2, r0
 800c210:	eba2 020e 	sub.w	r2, r2, lr
 800c214:	f8ad 2018 	strh.w	r2, [sp, #24]
 800c218:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800c21c:	4411      	add	r1, r2
 800c21e:	88f2      	ldrh	r2, [r6, #6]
 800c220:	4413      	add	r3, r2
 800c222:	b289      	uxth	r1, r1
 800c224:	b29b      	uxth	r3, r3
 800c226:	b208      	sxth	r0, r1
 800c228:	b21a      	sxth	r2, r3
 800c22a:	4290      	cmp	r0, r2
 800c22c:	bfb8      	it	lt
 800c22e:	460b      	movlt	r3, r1
 800c230:	eba3 030c 	sub.w	r3, r3, ip
 800c234:	f8ad 301a 	strh.w	r3, [sp, #26]
 800c238:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800c23c:	4628      	mov	r0, r5
 800c23e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800c242:	f8ad 9008 	strh.w	r9, [sp, #8]
 800c246:	1a9b      	subs	r3, r3, r2
 800c248:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c24c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800c250:	eba3 0808 	sub.w	r8, r3, r8
 800c254:	682b      	ldr	r3, [r5, #0]
 800c256:	f8ad 8016 	strh.w	r8, [sp, #22]
 800c25a:	f10d 080c 	add.w	r8, sp, #12
 800c25e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c260:	4641      	mov	r1, r8
 800c262:	4798      	blx	r3
 800c264:	4b10      	ldr	r3, [pc, #64]	; (800c2a8 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x1c0>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800c26c:	b10a      	cbz	r2, 800c272 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x18a>
 800c26e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c270:	b900      	cbnz	r0, 800c274 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x18c>
 800c272:	6898      	ldr	r0, [r3, #8]
 800c274:	ab02      	add	r3, sp, #8
 800c276:	9301      	str	r3, [sp, #4]
 800c278:	ab07      	add	r3, sp, #28
 800c27a:	9300      	str	r3, [sp, #0]
 800c27c:	ab05      	add	r3, sp, #20
 800c27e:	e898 0006 	ldmia.w	r8, {r1, r2}
 800c282:	f7f6 f97f 	bl	8002584 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800c286:	3401      	adds	r4, #1
 800c288:	e75b      	b.n	800c142 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x5a>
 800c28a:	e9cd 0005 	strd	r0, r0, [sp, #20]
 800c28e:	e7d3      	b.n	800c238 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x150>
 800c290:	b00d      	add	sp, #52	; 0x34
 800c292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c296:	bf00      	nop
 800c298:	0801be8c 	.word	0x0801be8c
 800c29c:	0801bfbc 	.word	0x0801bfbc
 800c2a0:	0801beba 	.word	0x0801beba
 800c2a4:	0801bee9 	.word	0x0801bee9
 800c2a8:	24006894 	.word	0x24006894

0800c2ac <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE>:
 800c2ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c2b0:	790d      	ldrb	r5, [r1, #4]
 800c2b2:	b08b      	sub	sp, #44	; 0x2c
 800c2b4:	4604      	mov	r4, r0
 800c2b6:	2d01      	cmp	r5, #1
 800c2b8:	d108      	bne.n	800c2cc <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x20>
 800c2ba:	f890 30d8 	ldrb.w	r3, [r0, #216]	; 0xd8
 800c2be:	b12b      	cbz	r3, 800c2cc <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x20>
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
 800c2c6:	b00b      	add	sp, #44	; 0x2c
 800c2c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2cc:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800c2d0:	2700      	movs	r7, #0
 800c2d2:	f9b1 9008 	ldrsh.w	r9, [r1, #8]
 800c2d6:	a806      	add	r0, sp, #24
 800c2d8:	4642      	mov	r2, r8
 800c2da:	4621      	mov	r1, r4
 800c2dc:	464b      	mov	r3, r9
 800c2de:	e9cd 7701 	strd	r7, r7, [sp, #4]
 800c2e2:	f7ff febd 	bl	800c060 <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss>
 800c2e6:	9e08      	ldr	r6, [sp, #32]
 800c2e8:	2e00      	cmp	r6, #0
 800c2ea:	d049      	beq.n	800c380 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0xd4>
 800c2ec:	2d00      	cmp	r5, #0
 800c2ee:	d133      	bne.n	800c358 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0xac>
 800c2f0:	f104 06ac 	add.w	r6, r4, #172	; 0xac
 800c2f4:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 800c2f8:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 800c2fc:	4630      	mov	r0, r6
 800c2fe:	f7fe f9f1 	bl	800a6e4 <_ZN8touchgfx8Drawable5setXYEss>
 800c302:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800c306:	a90a      	add	r1, sp, #40	; 0x28
 800c308:	f821 3d1c 	strh.w	r3, [r1, #-28]!
 800c30c:	4630      	mov	r0, r6
 800c30e:	f7ff fc6a 	bl	800bbe6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800c312:	2301      	movs	r3, #1
 800c314:	4622      	mov	r2, r4
 800c316:	f884 30d1 	strb.w	r3, [r4, #209]	; 0xd1
 800c31a:	ab01      	add	r3, sp, #4
 800c31c:	f852 0fb0 	ldr.w	r0, [r2, #176]!
 800c320:	6851      	ldr	r1, [r2, #4]
 800c322:	c303      	stmia	r3!, {r0, r1}
 800c324:	6823      	ldr	r3, [r4, #0]
 800c326:	a901      	add	r1, sp, #4
 800c328:	4620      	mov	r0, r4
 800c32a:	691b      	ldr	r3, [r3, #16]
 800c32c:	4798      	blx	r3
 800c32e:	1e6b      	subs	r3, r5, #1
 800c330:	2b01      	cmp	r3, #1
 800c332:	d8c8      	bhi.n	800c2c6 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x1a>
 800c334:	4622      	mov	r2, r4
 800c336:	ab01      	add	r3, sp, #4
 800c338:	f852 0fb0 	ldr.w	r0, [r2, #176]!
 800c33c:	6851      	ldr	r1, [r2, #4]
 800c33e:	c303      	stmia	r3!, {r0, r1}
 800c340:	2300      	movs	r3, #0
 800c342:	a901      	add	r1, sp, #4
 800c344:	4620      	mov	r0, r4
 800c346:	f884 30d1 	strb.w	r3, [r4, #209]	; 0xd1
 800c34a:	6823      	ldr	r3, [r4, #0]
 800c34c:	691b      	ldr	r3, [r3, #16]
 800c34e:	4798      	blx	r3
 800c350:	2d02      	cmp	r5, #2
 800c352:	d1b8      	bne.n	800c2c6 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x1a>
 800c354:	2301      	movs	r3, #1
 800c356:	e7b4      	b.n	800c2c2 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x16>
 800c358:	2d01      	cmp	r5, #1
 800c35a:	d1e8      	bne.n	800c32e <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 800c35c:	6833      	ldr	r3, [r6, #0]
 800c35e:	4630      	mov	r0, r6
 800c360:	68db      	ldr	r3, [r3, #12]
 800c362:	4798      	blx	r3
 800c364:	2800      	cmp	r0, #0
 800c366:	d0e5      	beq.n	800c334 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x88>
 800c368:	6833      	ldr	r3, [r6, #0]
 800c36a:	4630      	mov	r0, r6
 800c36c:	689b      	ldr	r3, [r3, #8]
 800c36e:	4798      	blx	r3
 800c370:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800c372:	2800      	cmp	r0, #0
 800c374:	d0de      	beq.n	800c334 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x88>
 800c376:	6803      	ldr	r3, [r0, #0]
 800c378:	4639      	mov	r1, r7
 800c37a:	689b      	ldr	r3, [r3, #8]
 800c37c:	4798      	blx	r3
 800c37e:	e7d6      	b.n	800c32e <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 800c380:	4621      	mov	r1, r4
 800c382:	464b      	mov	r3, r9
 800c384:	4642      	mov	r2, r8
 800c386:	a803      	add	r0, sp, #12
 800c388:	f7ff fe40 	bl	800c00c <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss>
 800c38c:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800c390:	b985      	cbnz	r5, 800c3b4 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x108>
 800c392:	2900      	cmp	r1, #0
 800c394:	d0cb      	beq.n	800c32e <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 800c396:	f104 06ac 	add.w	r6, r4, #172	; 0xac
 800c39a:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 800c39e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800c3a2:	4630      	mov	r0, r6
 800c3a4:	f7fe f99e 	bl	800a6e4 <_ZN8touchgfx8Drawable5setXYEss>
 800c3a8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800c3ac:	a90a      	add	r1, sp, #40	; 0x28
 800c3ae:	f821 3d28 	strh.w	r3, [r1, #-40]!
 800c3b2:	e7ab      	b.n	800c30c <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x60>
 800c3b4:	2d01      	cmp	r5, #1
 800c3b6:	d1ba      	bne.n	800c32e <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 800c3b8:	2900      	cmp	r1, #0
 800c3ba:	d0b8      	beq.n	800c32e <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 800c3bc:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 800c3c0:	f1b8 0f00 	cmp.w	r8, #0
 800c3c4:	d0b3      	beq.n	800c32e <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 800c3c6:	4620      	mov	r0, r4
 800c3c8:	f7ff fe7a 	bl	800c0c0 <_ZNK8touchgfx8Keyboard13getCharForKeyEh>
 800c3cc:	4607      	mov	r7, r0
 800c3ce:	2800      	cmp	r0, #0
 800c3d0:	d0ad      	beq.n	800c32e <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 800c3d2:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 800c3d4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800c3d6:	3a01      	subs	r2, #1
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	da07      	bge.n	800c3ec <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x140>
 800c3dc:	1c5a      	adds	r2, r3, #1
 800c3de:	86e2      	strh	r2, [r4, #54]	; 0x36
 800c3e0:	f828 0013 	strh.w	r0, [r8, r3, lsl #1]
 800c3e4:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 800c3e6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c3e8:	f822 6011 	strh.w	r6, [r2, r1, lsl #1]
 800c3ec:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	d09d      	beq.n	800c32e <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 800c3f2:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800c3f6:	f002 fc33 	bl	800ec60 <_ZNK8touchgfx8Drawable10invalidateEv>
 800c3fa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	d1ba      	bne.n	800c376 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0xca>
 800c400:	e795      	b.n	800c32e <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>

0800c402 <_ZN8touchgfx8Keyboard17setBufferPositionEt>:
 800c402:	86c1      	strh	r1, [r0, #54]	; 0x36
 800c404:	3064      	adds	r0, #100	; 0x64
 800c406:	f002 bc2b 	b.w	800ec60 <_ZNK8touchgfx8Drawable10invalidateEv>

0800c40a <_ZN8touchgfx8Keyboard17setKeymappingListEPKNS0_14KeyMappingListE>:
 800c40a:	6803      	ldr	r3, [r0, #0]
 800c40c:	f8c0 10a8 	str.w	r1, [r0, #168]	; 0xa8
 800c410:	695b      	ldr	r3, [r3, #20]
 800c412:	4718      	bx	r3

0800c414 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800c414:	b510      	push	{r4, lr}
 800c416:	6803      	ldr	r3, [r0, #0]
 800c418:	460c      	mov	r4, r1
 800c41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c41c:	4798      	blx	r3
 800c41e:	1b03      	subs	r3, r0, r4
 800c420:	4258      	negs	r0, r3
 800c422:	4158      	adcs	r0, r3
 800c424:	bd10      	pop	{r4, pc}
	...

0800c428 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800c428:	4b01      	ldr	r3, [pc, #4]	; (800c430 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800c42a:	6019      	str	r1, [r3, #0]
 800c42c:	4770      	bx	lr
 800c42e:	bf00      	nop
 800c430:	2400689c 	.word	0x2400689c

0800c434 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800c434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c438:	4696      	mov	lr, r2
 800c43a:	b097      	sub	sp, #92	; 0x5c
 800c43c:	4605      	mov	r5, r0
 800c43e:	4614      	mov	r4, r2
 800c440:	460e      	mov	r6, r1
 800c442:	461f      	mov	r7, r3
 800c444:	f10d 0c1c 	add.w	ip, sp, #28
 800c448:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 800c44c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 800c450:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 800c454:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c458:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c45c:	f8de 3000 	ldr.w	r3, [lr]
 800c460:	f104 0e14 	add.w	lr, r4, #20
 800c464:	f8cc 3000 	str.w	r3, [ip]
 800c468:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800c46c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c470:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c474:	f8de 3000 	ldr.w	r3, [lr]
 800c478:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800c47c:	f8cc 3000 	str.w	r3, [ip]
 800c480:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800c484:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c488:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c48c:	f8de 3000 	ldr.w	r3, [lr]
 800c490:	4631      	mov	r1, r6
 800c492:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c494:	4628      	mov	r0, r5
 800c496:	f8cc 3000 	str.w	r3, [ip]
 800c49a:	682b      	ldr	r3, [r5, #0]
 800c49c:	9201      	str	r2, [sp, #4]
 800c49e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c4a0:	f8cd 8008 	str.w	r8, [sp, #8]
 800c4a4:	9200      	str	r2, [sp, #0]
 800c4a6:	aa07      	add	r2, sp, #28
 800c4a8:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800c4ac:	f8d3 b034 	ldr.w	fp, [r3, #52]	; 0x34
 800c4b0:	463b      	mov	r3, r7
 800c4b2:	47d8      	blx	fp
 800c4b4:	46a6      	mov	lr, r4
 800c4b6:	f10d 0c1c 	add.w	ip, sp, #28
 800c4ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c4be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c4c2:	f8de 3000 	ldr.w	r3, [lr]
 800c4c6:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800c4ca:	343c      	adds	r4, #60	; 0x3c
 800c4cc:	f8cc 3000 	str.w	r3, [ip]
 800c4d0:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800c4d4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c4d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c4dc:	f8de 3000 	ldr.w	r3, [lr]
 800c4e0:	f8cc 3000 	str.w	r3, [ip]
 800c4e4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800c4e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c4ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c4ee:	6823      	ldr	r3, [r4, #0]
 800c4f0:	4631      	mov	r1, r6
 800c4f2:	4628      	mov	r0, r5
 800c4f4:	f8cc 3000 	str.w	r3, [ip]
 800c4f8:	682b      	ldr	r3, [r5, #0]
 800c4fa:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800c4fe:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c500:	f8cd 8008 	str.w	r8, [sp, #8]
 800c504:	9201      	str	r2, [sp, #4]
 800c506:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c508:	9200      	str	r2, [sp, #0]
 800c50a:	aa07      	add	r2, sp, #28
 800c50c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800c50e:	463b      	mov	r3, r7
 800c510:	47a0      	blx	r4
 800c512:	b017      	add	sp, #92	; 0x5c
 800c514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c518 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800c518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c51c:	b08d      	sub	sp, #52	; 0x34
 800c51e:	4688      	mov	r8, r1
 800c520:	f8d3 c000 	ldr.w	ip, [r3]
 800c524:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c526:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 800c52a:	680f      	ldr	r7, [r1, #0]
 800c52c:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 800c530:	eba7 070c 	sub.w	r7, r7, ip
 800c534:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 800c538:	edd3 6a07 	vldr	s13, [r3, #28]
 800c53c:	42bc      	cmp	r4, r7
 800c53e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c540:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800c544:	bfa8      	it	ge
 800c546:	463c      	movge	r4, r7
 800c548:	f9b1 9000 	ldrsh.w	r9, [r1]
 800c54c:	f9ba 1000 	ldrsh.w	r1, [sl]
 800c550:	ee07 4a90 	vmov	s15, r4
 800c554:	eb09 0e0c 	add.w	lr, r9, ip
 800c558:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 800c55c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800c560:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800c564:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 800c568:	4571      	cmp	r1, lr
 800c56a:	ee25 4a04 	vmul.f32	s8, s10, s8
 800c56e:	ee65 4a24 	vmul.f32	s9, s10, s9
 800c572:	ee25 5a27 	vmul.f32	s10, s10, s15
 800c576:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c57a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800c57e:	ee32 1a05 	vadd.f32	s2, s4, s10
 800c582:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c586:	ee36 0a84 	vadd.f32	s0, s13, s8
 800c58a:	ee61 1a87 	vmul.f32	s3, s3, s14
 800c58e:	ee22 2a07 	vmul.f32	s4, s4, s14
 800c592:	f340 808c 	ble.w	800c6ae <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 800c596:	eba1 060e 	sub.w	r6, r1, lr
 800c59a:	fb96 f5f4 	sdiv	r5, r6, r4
 800c59e:	ee07 5a10 	vmov	s14, r5
 800c5a2:	2d00      	cmp	r5, #0
 800c5a4:	fb04 6615 	mls	r6, r4, r5, r6
 800c5a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c5ac:	eea7 0a04 	vfma.f32	s0, s14, s8
 800c5b0:	eee7 0a24 	vfma.f32	s1, s14, s9
 800c5b4:	eea7 1a05 	vfma.f32	s2, s14, s10
 800c5b8:	dd12      	ble.n	800c5e0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 800c5ba:	ee70 6a44 	vsub.f32	s13, s0, s8
 800c5be:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800c5c2:	ee31 2a45 	vsub.f32	s4, s2, s10
 800c5c6:	eef5 6a40 	vcmp.f32	s13, #0.0
 800c5ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5ce:	bf14      	ite	ne
 800c5d0:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800c5d4:	eeb0 7a67 	vmoveq.f32	s14, s15
 800c5d8:	ee61 1a87 	vmul.f32	s3, s3, s14
 800c5dc:	ee22 2a07 	vmul.f32	s4, s4, s14
 800c5e0:	fb05 f204 	mul.w	r2, r5, r4
 800c5e4:	1abf      	subs	r7, r7, r2
 800c5e6:	4494      	add	ip, r2
 800c5e8:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800c5ec:	4411      	add	r1, r2
 800c5ee:	eb09 020c 	add.w	r2, r9, ip
 800c5f2:	b209      	sxth	r1, r1
 800c5f4:	443a      	add	r2, r7
 800c5f6:	428a      	cmp	r2, r1
 800c5f8:	bfc4      	itt	gt
 800c5fa:	eba1 0209 	subgt.w	r2, r1, r9
 800c5fe:	eba2 070c 	subgt.w	r7, r2, ip
 800c602:	2f00      	cmp	r7, #0
 800c604:	dd50      	ble.n	800c6a8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 800c606:	fb97 f1f4 	sdiv	r1, r7, r4
 800c60a:	fb04 7211 	mls	r2, r4, r1, r7
 800c60e:	b90a      	cbnz	r2, 800c614 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 800c610:	3901      	subs	r1, #1
 800c612:	4622      	mov	r2, r4
 800c614:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800c618:	6840      	ldr	r0, [r0, #4]
 800c61a:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 800c61e:	44b6      	add	lr, r6
 800c620:	f8d0 a000 	ldr.w	sl, [r0]
 800c624:	2900      	cmp	r1, #0
 800c626:	bfcc      	ite	gt
 800c628:	46a1      	movgt	r9, r4
 800c62a:	4691      	movle	r9, r2
 800c62c:	900b      	str	r0, [sp, #44]	; 0x2c
 800c62e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c630:	fb04 e505 	mla	r5, r4, r5, lr
 800c634:	eef0 6a42 	vmov.f32	s13, s4
 800c638:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800c63c:	9008      	str	r0, [sp, #32]
 800c63e:	eeb0 7a61 	vmov.f32	s14, s3
 800c642:	9818      	ldr	r0, [sp, #96]	; 0x60
 800c644:	695b      	ldr	r3, [r3, #20]
 800c646:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800c64a:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800c64e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800c652:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c654:	445b      	add	r3, fp
 800c656:	9307      	str	r3, [sp, #28]
 800c658:	ee16 3a90 	vmov	r3, s13
 800c65c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800c660:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800c664:	ee21 3a23 	vmul.f32	s6, s2, s7
 800c668:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800c66c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800c670:	ee17 7a90 	vmov	r7, s15
 800c674:	ee73 7a42 	vsub.f32	s15, s6, s4
 800c678:	fb97 f7f4 	sdiv	r7, r7, r4
 800c67c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800c680:	ee17 ca90 	vmov	ip, s15
 800c684:	fb9c fcf4 	sdiv	ip, ip, r4
 800c688:	fb0c 3306 	mla	r3, ip, r6, r3
 800c68c:	9302      	str	r3, [sp, #8]
 800c68e:	ee17 3a10 	vmov	r3, s14
 800c692:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800c696:	fb07 3706 	mla	r7, r7, r6, r3
 800c69a:	eba9 0306 	sub.w	r3, r9, r6
 800c69e:	e9cd 4700 	strd	r4, r7, [sp]
 800c6a2:	f8da 4008 	ldr.w	r4, [sl, #8]
 800c6a6:	47a0      	blx	r4
 800c6a8:	b00d      	add	sp, #52	; 0x34
 800c6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ae:	2500      	movs	r5, #0
 800c6b0:	462e      	mov	r6, r5
 800c6b2:	e799      	b.n	800c5e8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0800c6b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800c6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6b8:	b0db      	sub	sp, #364	; 0x16c
 800c6ba:	461d      	mov	r5, r3
 800c6bc:	4614      	mov	r4, r2
 800c6be:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 800c6c2:	910f      	str	r1, [sp, #60]	; 0x3c
 800c6c4:	4629      	mov	r1, r5
 800c6c6:	930a      	str	r3, [sp, #40]	; 0x28
 800c6c8:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 800c6cc:	9009      	str	r0, [sp, #36]	; 0x24
 800c6ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800c6d0:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 800c6d4:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 800c6d8:	9310      	str	r3, [sp, #64]	; 0x40
 800c6da:	6803      	ldr	r3, [r0, #0]
 800c6dc:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 800c6de:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c6e2:	47b8      	blx	r7
 800c6e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6e6:	6058      	str	r0, [r3, #4]
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	f000 83a1 	beq.w	800ce30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c6ee:	682b      	ldr	r3, [r5, #0]
 800c6f0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800c6f4:	ed94 7a02 	vldr	s14, [r4, #8]
 800c6f8:	9314      	str	r3, [sp, #80]	; 0x50
 800c6fa:	686b      	ldr	r3, [r5, #4]
 800c6fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c700:	9315      	str	r3, [sp, #84]	; 0x54
 800c702:	4bc1      	ldr	r3, [pc, #772]	; (800ca08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800c704:	7819      	ldrb	r1, [r3, #0]
 800c706:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800c70a:	2900      	cmp	r1, #0
 800c70c:	bf16      	itet	ne
 800c70e:	4619      	movne	r1, r3
 800c710:	4611      	moveq	r1, r2
 800c712:	4613      	movne	r3, r2
 800c714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c718:	9116      	str	r1, [sp, #88]	; 0x58
 800c71a:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 800c71e:	f240 8387 	bls.w	800ce30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c722:	ed94 7a07 	vldr	s14, [r4, #28]
 800c726:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c72e:	f240 837f 	bls.w	800ce30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c732:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 800c736:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c73a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c73e:	f240 8377 	bls.w	800ce30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c742:	6822      	ldr	r2, [r4, #0]
 800c744:	4bb1      	ldr	r3, [pc, #708]	; (800ca0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800c746:	429a      	cmp	r2, r3
 800c748:	f2c0 8372 	blt.w	800ce30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c74c:	49b0      	ldr	r1, [pc, #704]	; (800ca10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800c74e:	6963      	ldr	r3, [r4, #20]
 800c750:	428a      	cmp	r2, r1
 800c752:	f300 836d 	bgt.w	800ce30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c756:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800c75a:	48ae      	ldr	r0, [pc, #696]	; (800ca14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800c75c:	33ff      	adds	r3, #255	; 0xff
 800c75e:	4283      	cmp	r3, r0
 800c760:	f200 8366 	bhi.w	800ce30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c764:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c766:	4dac      	ldr	r5, [pc, #688]	; (800ca18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800c768:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800c76c:	33ff      	adds	r3, #255	; 0xff
 800c76e:	42ab      	cmp	r3, r5
 800c770:	f200 835e 	bhi.w	800ce30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c774:	6862      	ldr	r2, [r4, #4]
 800c776:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 800c77a:	33ff      	adds	r3, #255	; 0xff
 800c77c:	4283      	cmp	r3, r0
 800c77e:	f200 8357 	bhi.w	800ce30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c782:	69a1      	ldr	r1, [r4, #24]
 800c784:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 800c788:	33ff      	adds	r3, #255	; 0xff
 800c78a:	4283      	cmp	r3, r0
 800c78c:	f200 8350 	bhi.w	800ce30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c790:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c792:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 800c796:	30ff      	adds	r0, #255	; 0xff
 800c798:	42a8      	cmp	r0, r5
 800c79a:	f200 8349 	bhi.w	800ce30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800c79e:	428a      	cmp	r2, r1
 800c7a0:	f280 8110 	bge.w	800c9c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	f300 8119 	bgt.w	800c9dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800c7aa:	4299      	cmp	r1, r3
 800c7ac:	f280 811d 	bge.w	800c9ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800c7b0:	2502      	movs	r5, #2
 800c7b2:	2701      	movs	r7, #1
 800c7b4:	46a9      	mov	r9, r5
 800c7b6:	46b8      	mov	r8, r7
 800c7b8:	f04f 0a00 	mov.w	sl, #0
 800c7bc:	4621      	mov	r1, r4
 800c7be:	a849      	add	r0, sp, #292	; 0x124
 800c7c0:	f003 fc86 	bl	80100d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800c7c4:	4622      	mov	r2, r4
 800c7c6:	4653      	mov	r3, sl
 800c7c8:	a949      	add	r1, sp, #292	; 0x124
 800c7ca:	f8cd 9000 	str.w	r9, [sp]
 800c7ce:	a819      	add	r0, sp, #100	; 0x64
 800c7d0:	f003 fdae 	bl	8010330 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800c7d4:	4622      	mov	r2, r4
 800c7d6:	4653      	mov	r3, sl
 800c7d8:	a949      	add	r1, sp, #292	; 0x124
 800c7da:	f8cd 8000 	str.w	r8, [sp]
 800c7de:	a829      	add	r0, sp, #164	; 0xa4
 800c7e0:	f003 fda6 	bl	8010330 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800c7e4:	4643      	mov	r3, r8
 800c7e6:	4622      	mov	r2, r4
 800c7e8:	a949      	add	r1, sp, #292	; 0x124
 800c7ea:	f8cd 9000 	str.w	r9, [sp]
 800c7ee:	a839      	add	r0, sp, #228	; 0xe4
 800c7f0:	f003 fd9e 	bl	8010330 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800c7f4:	42af      	cmp	r7, r5
 800c7f6:	af12      	add	r7, sp, #72	; 0x48
 800c7f8:	bfb7      	itett	lt
 800c7fa:	2300      	movlt	r3, #0
 800c7fc:	2301      	movge	r3, #1
 800c7fe:	ad29      	addlt	r5, sp, #164	; 0xa4
 800c800:	ac19      	addlt	r4, sp, #100	; 0x64
 800c802:	bfb1      	iteee	lt
 800c804:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c806:	ad19      	addge	r5, sp, #100	; 0x64
 800c808:	930e      	strge	r3, [sp, #56]	; 0x38
 800c80a:	ac29      	addge	r4, sp, #164	; 0xa4
 800c80c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c80e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c812:	e887 0003 	stmia.w	r7, {r0, r1}
 800c816:	b928      	cbnz	r0, 800c824 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800c818:	4b80      	ldr	r3, [pc, #512]	; (800ca1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800c81a:	6818      	ldr	r0, [r3, #0]
 800c81c:	6803      	ldr	r3, [r0, #0]
 800c81e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c820:	4798      	blx	r3
 800c822:	6038      	str	r0, [r7, #0]
 800c824:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800c826:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800c82a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c82e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800c830:	930c      	str	r3, [sp, #48]	; 0x30
 800c832:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c834:	6963      	ldr	r3, [r4, #20]
 800c836:	440b      	add	r3, r1
 800c838:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800c83c:	4408      	add	r0, r1
 800c83e:	b200      	sxth	r0, r0
 800c840:	4283      	cmp	r3, r0
 800c842:	900d      	str	r0, [sp, #52]	; 0x34
 800c844:	f280 80dd 	bge.w	800ca02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800c848:	428b      	cmp	r3, r1
 800c84a:	da08      	bge.n	800c85e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800c84c:	2a00      	cmp	r2, #0
 800c84e:	dd06      	ble.n	800c85e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800c850:	1acb      	subs	r3, r1, r3
 800c852:	429a      	cmp	r2, r3
 800c854:	f2c0 80e4 	blt.w	800ca20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800c858:	2b00      	cmp	r3, #0
 800c85a:	f300 80e2 	bgt.w	800ca22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800c85e:	6967      	ldr	r7, [r4, #20]
 800c860:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800c864:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c866:	443b      	add	r3, r7
 800c868:	461f      	mov	r7, r3
 800c86a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c86c:	1bdf      	subs	r7, r3, r7
 800c86e:	4297      	cmp	r7, r2
 800c870:	bfa8      	it	ge
 800c872:	4617      	movge	r7, r2
 800c874:	2f00      	cmp	r7, #0
 800c876:	f340 8166 	ble.w	800cb46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800c87a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800c87c:	6829      	ldr	r1, [r5, #0]
 800c87e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c882:	f9bb 3000 	ldrsh.w	r3, [fp]
 800c886:	4411      	add	r1, r2
 800c888:	6820      	ldr	r0, [r4, #0]
 800c88a:	4299      	cmp	r1, r3
 800c88c:	dd1a      	ble.n	800c8c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800c88e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800c892:	4402      	add	r2, r0
 800c894:	440b      	add	r3, r1
 800c896:	b21b      	sxth	r3, r3
 800c898:	429a      	cmp	r2, r3
 800c89a:	dc13      	bgt.n	800c8c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800c89c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c89e:	a912      	add	r1, sp, #72	; 0x48
 800c8a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	9206      	str	r2, [sp, #24]
 800c8a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c8aa:	9500      	str	r5, [sp, #0]
 800c8ac:	9205      	str	r2, [sp, #20]
 800c8ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c8b0:	e9cd b203 	strd	fp, r2, [sp, #12]
 800c8b4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800c8b6:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800c8ba:	aa49      	add	r2, sp, #292	; 0x124
 800c8bc:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 800c8c0:	4623      	mov	r3, r4
 800c8c2:	47c8      	blx	r9
 800c8c4:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800c8c8:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800c8cc:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800c8d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c8d4:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800c8d8:	68a1      	ldr	r1, [r4, #8]
 800c8da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8de:	ed94 6a08 	vldr	s12, [r4, #32]
 800c8e2:	edd4 6a07 	vldr	s13, [r4, #28]
 800c8e6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800c8ea:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c8ee:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800c8f2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c8f6:	edc4 6a07 	vstr	s13, [r4, #28]
 800c8fa:	441a      	add	r2, r3
 800c8fc:	6963      	ldr	r3, [r4, #20]
 800c8fe:	3301      	adds	r3, #1
 800c900:	6022      	str	r2, [r4, #0]
 800c902:	6163      	str	r3, [r4, #20]
 800c904:	69a3      	ldr	r3, [r4, #24]
 800c906:	3b01      	subs	r3, #1
 800c908:	61a3      	str	r3, [r4, #24]
 800c90a:	6923      	ldr	r3, [r4, #16]
 800c90c:	440b      	add	r3, r1
 800c90e:	68e1      	ldr	r1, [r4, #12]
 800c910:	428b      	cmp	r3, r1
 800c912:	6123      	str	r3, [r4, #16]
 800c914:	db15      	blt.n	800c942 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800c916:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800c91a:	3201      	adds	r2, #1
 800c91c:	1a5b      	subs	r3, r3, r1
 800c91e:	ee76 6a26 	vadd.f32	s13, s12, s13
 800c922:	6022      	str	r2, [r4, #0]
 800c924:	6123      	str	r3, [r4, #16]
 800c926:	edc4 6a07 	vstr	s13, [r4, #28]
 800c92a:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800c92e:	ee36 7a87 	vadd.f32	s14, s13, s14
 800c932:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800c936:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800c93a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c93e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800c942:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800c946:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800c94a:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800c94e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c952:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800c956:	68a9      	ldr	r1, [r5, #8]
 800c958:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c95c:	ed95 6a08 	vldr	s12, [r5, #32]
 800c960:	edd5 6a07 	vldr	s13, [r5, #28]
 800c964:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800c968:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c96c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800c970:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c974:	edc5 6a07 	vstr	s13, [r5, #28]
 800c978:	441a      	add	r2, r3
 800c97a:	696b      	ldr	r3, [r5, #20]
 800c97c:	3301      	adds	r3, #1
 800c97e:	602a      	str	r2, [r5, #0]
 800c980:	616b      	str	r3, [r5, #20]
 800c982:	69ab      	ldr	r3, [r5, #24]
 800c984:	3b01      	subs	r3, #1
 800c986:	61ab      	str	r3, [r5, #24]
 800c988:	692b      	ldr	r3, [r5, #16]
 800c98a:	440b      	add	r3, r1
 800c98c:	68e9      	ldr	r1, [r5, #12]
 800c98e:	428b      	cmp	r3, r1
 800c990:	612b      	str	r3, [r5, #16]
 800c992:	db15      	blt.n	800c9c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800c994:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800c998:	3201      	adds	r2, #1
 800c99a:	1a5b      	subs	r3, r3, r1
 800c99c:	ee76 6a26 	vadd.f32	s13, s12, s13
 800c9a0:	602a      	str	r2, [r5, #0]
 800c9a2:	612b      	str	r3, [r5, #16]
 800c9a4:	edc5 6a07 	vstr	s13, [r5, #28]
 800c9a8:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800c9ac:	ee36 7a87 	vadd.f32	s14, s13, s14
 800c9b0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800c9b4:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800c9b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c9bc:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800c9c0:	3f01      	subs	r7, #1
 800c9c2:	e757      	b.n	800c874 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800c9c4:	4299      	cmp	r1, r3
 800c9c6:	dc13      	bgt.n	800c9f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	da14      	bge.n	800c9f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800c9cc:	2502      	movs	r5, #2
 800c9ce:	2703      	movs	r7, #3
 800c9d0:	f04f 0800 	mov.w	r8, #0
 800c9d4:	46a9      	mov	r9, r5
 800c9d6:	f04f 0a01 	mov.w	sl, #1
 800c9da:	e6ef      	b.n	800c7bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800c9dc:	2501      	movs	r5, #1
 800c9de:	2700      	movs	r7, #0
 800c9e0:	46a9      	mov	r9, r5
 800c9e2:	46b8      	mov	r8, r7
 800c9e4:	f04f 0a02 	mov.w	sl, #2
 800c9e8:	e6e8      	b.n	800c7bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800c9ea:	2501      	movs	r5, #1
 800c9ec:	2702      	movs	r7, #2
 800c9ee:	e6e1      	b.n	800c7b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800c9f0:	2500      	movs	r5, #0
 800c9f2:	2701      	movs	r7, #1
 800c9f4:	e7f4      	b.n	800c9e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800c9f6:	2702      	movs	r7, #2
 800c9f8:	2503      	movs	r5, #3
 800c9fa:	f04f 0900 	mov.w	r9, #0
 800c9fe:	46b8      	mov	r8, r7
 800ca00:	e7e9      	b.n	800c9d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800ca02:	4613      	mov	r3, r2
 800ca04:	e728      	b.n	800c858 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800ca06:	bf00      	nop
 800ca08:	2400688c 	.word	0x2400688c
 800ca0c:	fffd8f01 	.word	0xfffd8f01
 800ca10:	00027100 	.word	0x00027100
 800ca14:	0004e1ff 	.word	0x0004e1ff
 800ca18:	0004e1fe 	.word	0x0004e1fe
 800ca1c:	24006894 	.word	0x24006894
 800ca20:	4613      	mov	r3, r2
 800ca22:	992b      	ldr	r1, [sp, #172]	; 0xac
 800ca24:	469e      	mov	lr, r3
 800ca26:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800ca28:	469c      	mov	ip, r3
 800ca2a:	9111      	str	r1, [sp, #68]	; 0x44
 800ca2c:	f04f 0900 	mov.w	r9, #0
 800ca30:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 800ca34:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 800ca38:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 800ca3c:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 800ca40:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 800ca44:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800ca48:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 800ca4c:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 800ca50:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 800ca54:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 800ca58:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 800ca5c:	f1bc 0f00 	cmp.w	ip, #0
 800ca60:	d147      	bne.n	800caf2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800ca62:	eb03 0c07 	add.w	ip, r3, r7
 800ca66:	1ad7      	subs	r7, r2, r3
 800ca68:	f1b9 0f00 	cmp.w	r9, #0
 800ca6c:	d009      	beq.n	800ca82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800ca6e:	9029      	str	r0, [sp, #164]	; 0xa4
 800ca70:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 800ca74:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800ca78:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 800ca7c:	912d      	str	r1, [sp, #180]	; 0xb4
 800ca7e:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 800ca82:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800ca84:	f04f 0800 	mov.w	r8, #0
 800ca88:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800ca8c:	9111      	str	r1, [sp, #68]	; 0x44
 800ca8e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800ca92:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800ca96:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800ca9a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800ca9e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800caa2:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800caa6:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800caaa:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800caae:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800cab2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800cab6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800caba:	f1be 0f00 	cmp.w	lr, #0
 800cabe:	d031      	beq.n	800cb24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800cac0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800cac2:	4450      	add	r0, sl
 800cac4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800cac8:	4431      	add	r1, r6
 800caca:	ee37 7a04 	vadd.f32	s14, s14, s8
 800cace:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800cad2:	4549      	cmp	r1, r9
 800cad4:	db08      	blt.n	800cae8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800cad6:	ee77 7a85 	vadd.f32	s15, s15, s10
 800cada:	3001      	adds	r0, #1
 800cadc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800cae0:	eba1 0109 	sub.w	r1, r1, r9
 800cae4:	ee37 7a06 	vadd.f32	s14, s14, s12
 800cae8:	f10e 3eff 	add.w	lr, lr, #4294967295
 800caec:	f04f 0801 	mov.w	r8, #1
 800caf0:	e7e3      	b.n	800caba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800caf2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800caf4:	4450      	add	r0, sl
 800caf6:	ee37 7a24 	vadd.f32	s14, s14, s9
 800cafa:	4431      	add	r1, r6
 800cafc:	ee77 7a84 	vadd.f32	s15, s15, s8
 800cb00:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800cb04:	4541      	cmp	r1, r8
 800cb06:	db08      	blt.n	800cb1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800cb08:	ee76 6a85 	vadd.f32	s13, s13, s10
 800cb0c:	3001      	adds	r0, #1
 800cb0e:	ee37 7a25 	vadd.f32	s14, s14, s11
 800cb12:	eba1 0108 	sub.w	r1, r1, r8
 800cb16:	ee77 7a86 	vadd.f32	s15, s15, s12
 800cb1a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cb1e:	f04f 0901 	mov.w	r9, #1
 800cb22:	e79b      	b.n	800ca5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800cb24:	449c      	add	ip, r3
 800cb26:	1aff      	subs	r7, r7, r3
 800cb28:	f1b8 0f00 	cmp.w	r8, #0
 800cb2c:	d009      	beq.n	800cb42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800cb2e:	9019      	str	r0, [sp, #100]	; 0x64
 800cb30:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800cb34:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800cb38:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800cb3c:	911d      	str	r1, [sp, #116]	; 0x74
 800cb3e:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800cb42:	1ad2      	subs	r2, r2, r3
 800cb44:	e68b      	b.n	800c85e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800cb46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb48:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	f000 80d1 	beq.w	800ccf2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800cb50:	ad19      	add	r5, sp, #100	; 0x64
 800cb52:	ac39      	add	r4, sp, #228	; 0xe4
 800cb54:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800cb56:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800cb5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cb5e:	930c      	str	r3, [sp, #48]	; 0x30
 800cb60:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cb62:	6963      	ldr	r3, [r4, #20]
 800cb64:	440b      	add	r3, r1
 800cb66:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800cb6a:	4408      	add	r0, r1
 800cb6c:	b200      	sxth	r0, r0
 800cb6e:	4283      	cmp	r3, r0
 800cb70:	900d      	str	r0, [sp, #52]	; 0x34
 800cb72:	f280 80c1 	bge.w	800ccf8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800cb76:	428b      	cmp	r3, r1
 800cb78:	da08      	bge.n	800cb8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800cb7a:	2a00      	cmp	r2, #0
 800cb7c:	dd06      	ble.n	800cb8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800cb7e:	1acb      	subs	r3, r1, r3
 800cb80:	429a      	cmp	r2, r3
 800cb82:	f2c0 80bb 	blt.w	800ccfc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	f300 80b9 	bgt.w	800ccfe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800cb8c:	6967      	ldr	r7, [r4, #20]
 800cb8e:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800cb92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb94:	443b      	add	r3, r7
 800cb96:	461f      	mov	r7, r3
 800cb98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb9a:	1bdf      	subs	r7, r3, r7
 800cb9c:	4297      	cmp	r7, r2
 800cb9e:	bfa8      	it	ge
 800cba0:	4617      	movge	r7, r2
 800cba2:	2f00      	cmp	r7, #0
 800cba4:	f340 813c 	ble.w	800ce20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800cba8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800cbaa:	6829      	ldr	r1, [r5, #0]
 800cbac:	f9b3 2000 	ldrsh.w	r2, [r3]
 800cbb0:	f9bb 3000 	ldrsh.w	r3, [fp]
 800cbb4:	4411      	add	r1, r2
 800cbb6:	6820      	ldr	r0, [r4, #0]
 800cbb8:	4299      	cmp	r1, r3
 800cbba:	dd1a      	ble.n	800cbf2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800cbbc:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800cbc0:	4402      	add	r2, r0
 800cbc2:	440b      	add	r3, r1
 800cbc4:	b21b      	sxth	r3, r3
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	dc13      	bgt.n	800cbf2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800cbca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cbcc:	a912      	add	r1, sp, #72	; 0x48
 800cbce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	9206      	str	r2, [sp, #24]
 800cbd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cbd8:	9500      	str	r5, [sp, #0]
 800cbda:	9205      	str	r2, [sp, #20]
 800cbdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cbde:	e9cd b203 	strd	fp, r2, [sp, #12]
 800cbe2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800cbe4:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800cbe8:	aa49      	add	r2, sp, #292	; 0x124
 800cbea:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 800cbee:	4623      	mov	r3, r4
 800cbf0:	47c8      	blx	r9
 800cbf2:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800cbf6:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800cbfa:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800cbfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cc02:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800cc06:	68a1      	ldr	r1, [r4, #8]
 800cc08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc0c:	ed94 6a08 	vldr	s12, [r4, #32]
 800cc10:	edd4 6a07 	vldr	s13, [r4, #28]
 800cc14:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800cc18:	ee76 6a86 	vadd.f32	s13, s13, s12
 800cc1c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800cc20:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cc24:	edc4 6a07 	vstr	s13, [r4, #28]
 800cc28:	441a      	add	r2, r3
 800cc2a:	6963      	ldr	r3, [r4, #20]
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	6022      	str	r2, [r4, #0]
 800cc30:	6163      	str	r3, [r4, #20]
 800cc32:	69a3      	ldr	r3, [r4, #24]
 800cc34:	3b01      	subs	r3, #1
 800cc36:	61a3      	str	r3, [r4, #24]
 800cc38:	6923      	ldr	r3, [r4, #16]
 800cc3a:	440b      	add	r3, r1
 800cc3c:	68e1      	ldr	r1, [r4, #12]
 800cc3e:	428b      	cmp	r3, r1
 800cc40:	6123      	str	r3, [r4, #16]
 800cc42:	db15      	blt.n	800cc70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800cc44:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800cc48:	3201      	adds	r2, #1
 800cc4a:	1a5b      	subs	r3, r3, r1
 800cc4c:	ee76 6a26 	vadd.f32	s13, s12, s13
 800cc50:	6022      	str	r2, [r4, #0]
 800cc52:	6123      	str	r3, [r4, #16]
 800cc54:	edc4 6a07 	vstr	s13, [r4, #28]
 800cc58:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800cc5c:	ee36 7a87 	vadd.f32	s14, s13, s14
 800cc60:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800cc64:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800cc68:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cc6c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800cc70:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800cc74:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800cc78:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800cc7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cc80:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800cc84:	68a9      	ldr	r1, [r5, #8]
 800cc86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc8a:	ed95 6a08 	vldr	s12, [r5, #32]
 800cc8e:	edd5 6a07 	vldr	s13, [r5, #28]
 800cc92:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800cc96:	ee76 6a86 	vadd.f32	s13, s13, s12
 800cc9a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800cc9e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cca2:	edc5 6a07 	vstr	s13, [r5, #28]
 800cca6:	441a      	add	r2, r3
 800cca8:	696b      	ldr	r3, [r5, #20]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	602a      	str	r2, [r5, #0]
 800ccae:	616b      	str	r3, [r5, #20]
 800ccb0:	69ab      	ldr	r3, [r5, #24]
 800ccb2:	3b01      	subs	r3, #1
 800ccb4:	61ab      	str	r3, [r5, #24]
 800ccb6:	692b      	ldr	r3, [r5, #16]
 800ccb8:	440b      	add	r3, r1
 800ccba:	68e9      	ldr	r1, [r5, #12]
 800ccbc:	428b      	cmp	r3, r1
 800ccbe:	612b      	str	r3, [r5, #16]
 800ccc0:	db15      	blt.n	800ccee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800ccc2:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800ccc6:	3201      	adds	r2, #1
 800ccc8:	1a5b      	subs	r3, r3, r1
 800ccca:	ee76 6a26 	vadd.f32	s13, s12, s13
 800ccce:	602a      	str	r2, [r5, #0]
 800ccd0:	612b      	str	r3, [r5, #16]
 800ccd2:	edc5 6a07 	vstr	s13, [r5, #28]
 800ccd6:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800ccda:	ee36 7a87 	vadd.f32	s14, s13, s14
 800ccde:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800cce2:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800cce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ccea:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800ccee:	3f01      	subs	r7, #1
 800ccf0:	e757      	b.n	800cba2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800ccf2:	ad39      	add	r5, sp, #228	; 0xe4
 800ccf4:	ac19      	add	r4, sp, #100	; 0x64
 800ccf6:	e72d      	b.n	800cb54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800ccf8:	4613      	mov	r3, r2
 800ccfa:	e744      	b.n	800cb86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800ccfc:	4613      	mov	r3, r2
 800ccfe:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 800cd00:	469e      	mov	lr, r3
 800cd02:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 800cd06:	461f      	mov	r7, r3
 800cd08:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800cd0c:	f04f 0900 	mov.w	r9, #0
 800cd10:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 800cd14:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 800cd18:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 800cd1c:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 800cd20:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 800cd24:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800cd26:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 800cd2a:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 800cd2e:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 800cd32:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 800cd36:	960e      	str	r6, [sp, #56]	; 0x38
 800cd38:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 800cd3c:	2f00      	cmp	r7, #0
 800cd3e:	d146      	bne.n	800cdce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800cd40:	449c      	add	ip, r3
 800cd42:	1ad7      	subs	r7, r2, r3
 800cd44:	f1b9 0f00 	cmp.w	r9, #0
 800cd48:	d009      	beq.n	800cd5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800cd4a:	9039      	str	r0, [sp, #228]	; 0xe4
 800cd4c:	913d      	str	r1, [sp, #244]	; 0xf4
 800cd4e:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800cd52:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800cd56:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 800cd5a:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 800cd5e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800cd60:	f04f 0800 	mov.w	r8, #0
 800cd64:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800cd68:	910e      	str	r1, [sp, #56]	; 0x38
 800cd6a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800cd6e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800cd72:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800cd76:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800cd7a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800cd7e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800cd82:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800cd86:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800cd8a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800cd8e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800cd92:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800cd96:	f1be 0f00 	cmp.w	lr, #0
 800cd9a:	d030      	beq.n	800cdfe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800cd9c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800cd9e:	4450      	add	r0, sl
 800cda0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800cda4:	4431      	add	r1, r6
 800cda6:	ee37 7a04 	vadd.f32	s14, s14, s8
 800cdaa:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800cdae:	4549      	cmp	r1, r9
 800cdb0:	db08      	blt.n	800cdc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800cdb2:	ee77 7a85 	vadd.f32	s15, s15, s10
 800cdb6:	3001      	adds	r0, #1
 800cdb8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800cdbc:	eba1 0109 	sub.w	r1, r1, r9
 800cdc0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800cdc4:	f10e 3eff 	add.w	lr, lr, #4294967295
 800cdc8:	f04f 0801 	mov.w	r8, #1
 800cdcc:	e7e3      	b.n	800cd96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800cdce:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800cdd0:	4450      	add	r0, sl
 800cdd2:	ee37 7a24 	vadd.f32	s14, s14, s9
 800cdd6:	4431      	add	r1, r6
 800cdd8:	ee77 7a84 	vadd.f32	s15, s15, s8
 800cddc:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800cde0:	4541      	cmp	r1, r8
 800cde2:	db08      	blt.n	800cdf6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800cde4:	ee76 6a85 	vadd.f32	s13, s13, s10
 800cde8:	3001      	adds	r0, #1
 800cdea:	ee37 7a25 	vadd.f32	s14, s14, s11
 800cdee:	eba1 0108 	sub.w	r1, r1, r8
 800cdf2:	ee77 7a86 	vadd.f32	s15, s15, s12
 800cdf6:	3f01      	subs	r7, #1
 800cdf8:	f04f 0901 	mov.w	r9, #1
 800cdfc:	e79e      	b.n	800cd3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800cdfe:	449c      	add	ip, r3
 800ce00:	1aff      	subs	r7, r7, r3
 800ce02:	f1b8 0f00 	cmp.w	r8, #0
 800ce06:	d009      	beq.n	800ce1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800ce08:	9019      	str	r0, [sp, #100]	; 0x64
 800ce0a:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800ce0e:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800ce12:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800ce16:	911d      	str	r1, [sp, #116]	; 0x74
 800ce18:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800ce1c:	1ad2      	subs	r2, r2, r3
 800ce1e:	e6b5      	b.n	800cb8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800ce20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	b923      	cbnz	r3, 800ce30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ce26:	4b04      	ldr	r3, [pc, #16]	; (800ce38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800ce28:	6818      	ldr	r0, [r3, #0]
 800ce2a:	6803      	ldr	r3, [r0, #0]
 800ce2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce2e:	4798      	blx	r3
 800ce30:	b05b      	add	sp, #364	; 0x16c
 800ce32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce36:	bf00      	nop
 800ce38:	24006894 	.word	0x24006894

0800ce3c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 800ce3c:	b570      	push	{r4, r5, r6, lr}
 800ce3e:	4604      	mov	r4, r0
 800ce40:	2500      	movs	r5, #0
 800ce42:	9804      	ldr	r0, [sp, #16]
 800ce44:	7223      	strb	r3, [r4, #8]
 800ce46:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800ce4a:	8025      	strh	r5, [r4, #0]
 800ce4c:	6061      	str	r1, [r4, #4]
 800ce4e:	7263      	strb	r3, [r4, #9]
 800ce50:	60e0      	str	r0, [r4, #12]
 800ce52:	8222      	strh	r2, [r4, #16]
 800ce54:	8265      	strh	r5, [r4, #18]
 800ce56:	82a5      	strh	r5, [r4, #20]
 800ce58:	82e5      	strh	r5, [r4, #22]
 800ce5a:	8325      	strh	r5, [r4, #24]
 800ce5c:	8365      	strh	r5, [r4, #26]
 800ce5e:	83a5      	strh	r5, [r4, #28]
 800ce60:	77a5      	strb	r5, [r4, #30]
 800ce62:	6803      	ldr	r3, [r0, #0]
 800ce64:	695b      	ldr	r3, [r3, #20]
 800ce66:	4798      	blx	r3
 800ce68:	4606      	mov	r6, r0
 800ce6a:	b1f8      	cbz	r0, 800ceac <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 800ce6c:	68e0      	ldr	r0, [r4, #12]
 800ce6e:	4631      	mov	r1, r6
 800ce70:	6803      	ldr	r3, [r0, #0]
 800ce72:	68db      	ldr	r3, [r3, #12]
 800ce74:	4798      	blx	r3
 800ce76:	7b43      	ldrb	r3, [r0, #13]
 800ce78:	7a82      	ldrb	r2, [r0, #10]
 800ce7a:	4605      	mov	r5, r0
 800ce7c:	005b      	lsls	r3, r3, #1
 800ce7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce82:	4313      	orrs	r3, r2
 800ce84:	83a3      	strh	r3, [r4, #28]
 800ce86:	7a63      	ldrb	r3, [r4, #9]
 800ce88:	2b04      	cmp	r3, #4
 800ce8a:	d10f      	bne.n	800ceac <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 800ce8c:	68e0      	ldr	r0, [r4, #12]
 800ce8e:	462a      	mov	r2, r5
 800ce90:	4631      	mov	r1, r6
 800ce92:	6803      	ldr	r3, [r0, #0]
 800ce94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce96:	4798      	blx	r3
 800ce98:	7b6b      	ldrb	r3, [r5, #13]
 800ce9a:	005b      	lsls	r3, r3, #1
 800ce9c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800cea0:	7aab      	ldrb	r3, [r5, #10]
 800cea2:	4313      	orrs	r3, r2
 800cea4:	4418      	add	r0, r3
 800cea6:	8ba3      	ldrh	r3, [r4, #28]
 800cea8:	4418      	add	r0, r3
 800ceaa:	83a0      	strh	r0, [r4, #28]
 800ceac:	4620      	mov	r0, r4
 800ceae:	bd70      	pop	{r4, r5, r6, pc}

0800ceb0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 800ceb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceb4:	2400      	movs	r4, #0
 800ceb6:	b085      	sub	sp, #20
 800ceb8:	4681      	mov	r9, r0
 800ceba:	4688      	mov	r8, r1
 800cebc:	4692      	mov	sl, r2
 800cebe:	469b      	mov	fp, r3
 800cec0:	4627      	mov	r7, r4
 800cec2:	4625      	mov	r5, r4
 800cec4:	4626      	mov	r6, r4
 800cec6:	4554      	cmp	r4, sl
 800cec8:	da2a      	bge.n	800cf20 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800ceca:	2300      	movs	r3, #0
 800cecc:	9303      	str	r3, [sp, #12]
 800cece:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800ced2:	429d      	cmp	r5, r3
 800ced4:	d004      	beq.n	800cee0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 800ced6:	f242 030b 	movw	r3, #8203	; 0x200b
 800ceda:	429d      	cmp	r5, r3
 800cedc:	bf18      	it	ne
 800cede:	462f      	movne	r7, r5
 800cee0:	ab03      	add	r3, sp, #12
 800cee2:	4642      	mov	r2, r8
 800cee4:	4659      	mov	r1, fp
 800cee6:	4648      	mov	r0, r9
 800cee8:	f002 fe76 	bl	800fbd8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800ceec:	4605      	mov	r5, r0
 800ceee:	b1b8      	cbz	r0, 800cf20 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800cef0:	280a      	cmp	r0, #10
 800cef2:	d015      	beq.n	800cf20 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800cef4:	9a03      	ldr	r2, [sp, #12]
 800cef6:	b18a      	cbz	r2, 800cf1c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 800cef8:	7b50      	ldrb	r0, [r2, #13]
 800cefa:	4639      	mov	r1, r7
 800cefc:	7a93      	ldrb	r3, [r2, #10]
 800cefe:	0040      	lsls	r0, r0, #1
 800cf00:	8895      	ldrh	r5, [r2, #4]
 800cf02:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800cf06:	4303      	orrs	r3, r0
 800cf08:	4640      	mov	r0, r8
 800cf0a:	9301      	str	r3, [sp, #4]
 800cf0c:	f8d8 3000 	ldr.w	r3, [r8]
 800cf10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf12:	4798      	blx	r3
 800cf14:	9b01      	ldr	r3, [sp, #4]
 800cf16:	4418      	add	r0, r3
 800cf18:	4406      	add	r6, r0
 800cf1a:	b2b6      	uxth	r6, r6
 800cf1c:	3401      	adds	r4, #1
 800cf1e:	e7d2      	b.n	800cec6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 800cf20:	4630      	mov	r0, r6
 800cf22:	b005      	add	sp, #20
 800cf24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cf28 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 800cf28:	2a02      	cmp	r2, #2
 800cf2a:	b530      	push	{r4, r5, lr}
 800cf2c:	d011      	beq.n	800cf52 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 800cf2e:	2a03      	cmp	r2, #3
 800cf30:	d01c      	beq.n	800cf6c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 800cf32:	2a01      	cmp	r2, #1
 800cf34:	d10c      	bne.n	800cf50 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800cf36:	888b      	ldrh	r3, [r1, #4]
 800cf38:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800cf3c:	8801      	ldrh	r1, [r0, #0]
 800cf3e:	1a9b      	subs	r3, r3, r2
 800cf40:	8844      	ldrh	r4, [r0, #2]
 800cf42:	1a5b      	subs	r3, r3, r1
 800cf44:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800cf48:	8004      	strh	r4, [r0, #0]
 800cf4a:	8043      	strh	r3, [r0, #2]
 800cf4c:	8081      	strh	r1, [r0, #4]
 800cf4e:	80c2      	strh	r2, [r0, #6]
 800cf50:	bd30      	pop	{r4, r5, pc}
 800cf52:	88cb      	ldrh	r3, [r1, #6]
 800cf54:	88c2      	ldrh	r2, [r0, #6]
 800cf56:	1a9b      	subs	r3, r3, r2
 800cf58:	8842      	ldrh	r2, [r0, #2]
 800cf5a:	1a9b      	subs	r3, r3, r2
 800cf5c:	888a      	ldrh	r2, [r1, #4]
 800cf5e:	8881      	ldrh	r1, [r0, #4]
 800cf60:	8043      	strh	r3, [r0, #2]
 800cf62:	1a52      	subs	r2, r2, r1
 800cf64:	8801      	ldrh	r1, [r0, #0]
 800cf66:	1a52      	subs	r2, r2, r1
 800cf68:	8002      	strh	r2, [r0, #0]
 800cf6a:	e7f1      	b.n	800cf50 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800cf6c:	88cb      	ldrh	r3, [r1, #6]
 800cf6e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800cf72:	8841      	ldrh	r1, [r0, #2]
 800cf74:	1a9b      	subs	r3, r3, r2
 800cf76:	f9b0 5000 	ldrsh.w	r5, [r0]
 800cf7a:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800cf7e:	1a5b      	subs	r3, r3, r1
 800cf80:	8045      	strh	r5, [r0, #2]
 800cf82:	8082      	strh	r2, [r0, #4]
 800cf84:	8003      	strh	r3, [r0, #0]
 800cf86:	80c4      	strh	r4, [r0, #6]
 800cf88:	e7e2      	b.n	800cf50 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0800cf8a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 800cf8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf8e:	b09f      	sub	sp, #124	; 0x7c
 800cf90:	9116      	str	r1, [sp, #88]	; 0x58
 800cf92:	9317      	str	r3, [sp, #92]	; 0x5c
 800cf94:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800cf96:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800cf98:	8809      	ldrh	r1, [r1, #0]
 800cf9a:	889b      	ldrh	r3, [r3, #4]
 800cf9c:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 800cfa0:	440b      	add	r3, r1
 800cfa2:	9212      	str	r2, [sp, #72]	; 0x48
 800cfa4:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800cfa8:	b21b      	sxth	r3, r3
 800cfaa:	9011      	str	r0, [sp, #68]	; 0x44
 800cfac:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 800cfb0:	9310      	str	r3, [sp, #64]	; 0x40
 800cfb2:	f8d8 3000 	ldr.w	r3, [r8]
 800cfb6:	7a59      	ldrb	r1, [r3, #9]
 800cfb8:	7a1b      	ldrb	r3, [r3, #8]
 800cfba:	9114      	str	r1, [sp, #80]	; 0x50
 800cfbc:	9315      	str	r3, [sp, #84]	; 0x54
 800cfbe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800cfc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cfc4:	2a00      	cmp	r2, #0
 800cfc6:	d067      	beq.n	800d098 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 800cfc8:	f898 3010 	ldrb.w	r3, [r8, #16]
 800cfcc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800cfce:	2b04      	cmp	r3, #4
 800cfd0:	bf14      	ite	ne
 800cfd2:	2301      	movne	r3, #1
 800cfd4:	2302      	moveq	r3, #2
 800cfd6:	4413      	add	r3, r2
 800cfd8:	f04f 0900 	mov.w	r9, #0
 800cfdc:	930f      	str	r3, [sp, #60]	; 0x3c
 800cfde:	464c      	mov	r4, r9
 800cfe0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800cfe4:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 800cfe8:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 800cfec:	4293      	cmp	r3, r2
 800cfee:	f280 808c 	bge.w	800d10a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800cff2:	2300      	movs	r3, #0
 800cff4:	931c      	str	r3, [sp, #112]	; 0x70
 800cff6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800cffa:	429c      	cmp	r4, r3
 800cffc:	d006      	beq.n	800d00c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 800cffe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d000:	f242 020b 	movw	r2, #8203	; 0x200b
 800d004:	4294      	cmp	r4, r2
 800d006:	bf18      	it	ne
 800d008:	4623      	movne	r3, r4
 800d00a:	930d      	str	r3, [sp, #52]	; 0x34
 800d00c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d00e:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800d010:	f8d8 2000 	ldr.w	r2, [r8]
 800d014:	428b      	cmp	r3, r1
 800d016:	db41      	blt.n	800d09c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 800d018:	6813      	ldr	r3, [r2, #0]
 800d01a:	4610      	mov	r0, r2
 800d01c:	695b      	ldr	r3, [r3, #20]
 800d01e:	4798      	blx	r3
 800d020:	4604      	mov	r4, r0
 800d022:	f8d8 0000 	ldr.w	r0, [r8]
 800d026:	aa1d      	add	r2, sp, #116	; 0x74
 800d028:	4621      	mov	r1, r4
 800d02a:	6803      	ldr	r3, [r0, #0]
 800d02c:	689e      	ldr	r6, [r3, #8]
 800d02e:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 800d032:	47b0      	blx	r6
 800d034:	901c      	str	r0, [sp, #112]	; 0x70
 800d036:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800d03a:	429c      	cmp	r4, r3
 800d03c:	f000 80ea 	beq.w	800d214 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800d040:	f242 030b 	movw	r3, #8203	; 0x200b
 800d044:	429c      	cmp	r4, r3
 800d046:	f000 80e5 	beq.w	800d214 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800d04a:	2c00      	cmp	r4, #0
 800d04c:	f000 80f7 	beq.w	800d23e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 800d050:	2c0a      	cmp	r4, #10
 800d052:	d060      	beq.n	800d116 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800d054:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d056:	b36a      	cbz	r2, 800d0b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 800d058:	8894      	ldrh	r4, [r2, #4]
 800d05a:	f1bb 0f00 	cmp.w	fp, #0
 800d05e:	d03b      	beq.n	800d0d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 800d060:	f892 900d 	ldrb.w	r9, [r2, #13]
 800d064:	f1bb 0f01 	cmp.w	fp, #1
 800d068:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800d06c:	f409 7380 	and.w	r3, r9, #256	; 0x100
 800d070:	f892 900a 	ldrb.w	r9, [r2, #10]
 800d074:	ea49 0903 	orr.w	r9, r9, r3
 800d078:	d134      	bne.n	800d0e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 800d07a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d07c:	eba5 0509 	sub.w	r5, r5, r9
 800d080:	2b00      	cmp	r3, #0
 800d082:	d14f      	bne.n	800d124 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800d084:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d086:	eb09 0305 	add.w	r3, r9, r5
 800d08a:	4413      	add	r3, r2
 800d08c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800d08e:	f9b2 2000 	ldrsh.w	r2, [r2]
 800d092:	4293      	cmp	r3, r2
 800d094:	da51      	bge.n	800d13a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 800d096:	e038      	b.n	800d10a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800d098:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d09a:	e79d      	b.n	800cfd8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 800d09c:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 800d0a0:	4659      	mov	r1, fp
 800d0a2:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800d0a4:	9301      	str	r3, [sp, #4]
 800d0a6:	ab1d      	add	r3, sp, #116	; 0x74
 800d0a8:	9300      	str	r3, [sp, #0]
 800d0aa:	ab1c      	add	r3, sp, #112	; 0x70
 800d0ac:	f002 fdec 	bl	800fc88 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 800d0b0:	4604      	mov	r4, r0
 800d0b2:	e7c0      	b.n	800d036 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 800d0b4:	f8d8 0000 	ldr.w	r0, [r8]
 800d0b8:	6803      	ldr	r3, [r0, #0]
 800d0ba:	691b      	ldr	r3, [r3, #16]
 800d0bc:	4798      	blx	r3
 800d0be:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800d0c2:	4298      	cmp	r0, r3
 800d0c4:	f000 80a6 	beq.w	800d214 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800d0c8:	f242 030b 	movw	r3, #8203	; 0x200b
 800d0cc:	4298      	cmp	r0, r3
 800d0ce:	f000 80a1 	beq.w	800d214 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800d0d2:	f1bb 0f00 	cmp.w	fp, #0
 800d0d6:	d100      	bne.n	800d0da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 800d0d8:	444d      	add	r5, r9
 800d0da:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d0dc:	2a00      	cmp	r2, #0
 800d0de:	d1bf      	bne.n	800d060 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 800d0e0:	4691      	mov	r9, r2
 800d0e2:	e097      	b.n	800d214 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800d0e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	f000 80ab 	beq.w	800d242 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 800d0ec:	f1bb 0f00 	cmp.w	fp, #0
 800d0f0:	d118      	bne.n	800d124 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800d0f2:	f8d8 0000 	ldr.w	r0, [r8]
 800d0f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d0f8:	6803      	ldr	r3, [r0, #0]
 800d0fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0fc:	4798      	blx	r3
 800d0fe:	4405      	add	r5, r0
 800d100:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d102:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d104:	1aeb      	subs	r3, r5, r3
 800d106:	4293      	cmp	r3, r2
 800d108:	dd17      	ble.n	800d13a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 800d10a:	2c00      	cmp	r4, #0
 800d10c:	f000 8097 	beq.w	800d23e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 800d110:	2c0a      	cmp	r4, #10
 800d112:	f040 8085 	bne.w	800d220 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 800d116:	240a      	movs	r4, #10
 800d118:	fab4 f084 	clz	r0, r4
 800d11c:	0940      	lsrs	r0, r0, #5
 800d11e:	b01f      	add	sp, #124	; 0x7c
 800d120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d124:	f8d8 0000 	ldr.w	r0, [r8]
 800d128:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d12a:	6803      	ldr	r3, [r0, #0]
 800d12c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d12e:	4798      	blx	r3
 800d130:	f1bb 0f01 	cmp.w	fp, #1
 800d134:	eba5 0500 	sub.w	r5, r5, r0
 800d138:	d0a4      	beq.n	800d084 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 800d13a:	981c      	ldr	r0, [sp, #112]	; 0x70
 800d13c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800d13e:	f990 1009 	ldrsb.w	r1, [r0, #9]
 800d142:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d146:	7b43      	ldrb	r3, [r0, #13]
 800d148:	4429      	add	r1, r5
 800d14a:	015b      	lsls	r3, r3, #5
 800d14c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800d150:	7983      	ldrb	r3, [r0, #6]
 800d152:	4313      	orrs	r3, r2
 800d154:	440b      	add	r3, r1
 800d156:	42b3      	cmp	r3, r6
 800d158:	db5c      	blt.n	800d214 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800d15a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d15c:	4299      	cmp	r1, r3
 800d15e:	da59      	bge.n	800d214 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800d160:	f8d8 0000 	ldr.w	r0, [r8]
 800d164:	42ae      	cmp	r6, r5
 800d166:	6803      	ldr	r3, [r0, #0]
 800d168:	bfcc      	ite	gt
 800d16a:	1b76      	subgt	r6, r6, r5
 800d16c:	2600      	movle	r6, #0
 800d16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d170:	bfc8      	it	gt
 800d172:	b2b6      	uxthgt	r6, r6
 800d174:	4798      	blx	r3
 800d176:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d178:	7b5a      	ldrb	r2, [r3, #13]
 800d17a:	00d1      	lsls	r1, r2, #3
 800d17c:	f401 7780 	and.w	r7, r1, #256	; 0x100
 800d180:	7a19      	ldrb	r1, [r3, #8]
 800d182:	4339      	orrs	r1, r7
 800d184:	0657      	lsls	r7, r2, #25
 800d186:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800d188:	bf48      	it	mi
 800d18a:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 800d18e:	4407      	add	r7, r0
 800d190:	bf48      	it	mi
 800d192:	b209      	sxthmi	r1, r1
 800d194:	1a7f      	subs	r7, r7, r1
 800d196:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800d198:	b2bf      	uxth	r7, r7
 800d19a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800d19e:	fa0f fa87 	sxth.w	sl, r7
 800d1a2:	4551      	cmp	r1, sl
 800d1a4:	dd3a      	ble.n	800d21c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 800d1a6:	0112      	lsls	r2, r2, #4
 800d1a8:	79d8      	ldrb	r0, [r3, #7]
 800d1aa:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800d1ae:	4302      	orrs	r2, r0
 800d1b0:	4492      	add	sl, r2
 800d1b2:	4551      	cmp	r1, sl
 800d1b4:	dc2e      	bgt.n	800d214 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 800d1b6:	1bcf      	subs	r7, r1, r7
 800d1b8:	468a      	mov	sl, r1
 800d1ba:	b2bf      	uxth	r7, r7
 800d1bc:	9319      	str	r3, [sp, #100]	; 0x64
 800d1be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d1c0:	f8d8 0000 	ldr.w	r0, [r8]
 800d1c4:	681a      	ldr	r2, [r3, #0]
 800d1c6:	6801      	ldr	r1, [r0, #0]
 800d1c8:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800d1ca:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d1cc:	9313      	str	r3, [sp, #76]	; 0x4c
 800d1ce:	9218      	str	r2, [sp, #96]	; 0x60
 800d1d0:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800d1d2:	4788      	blx	r1
 800d1d4:	f898 1006 	ldrb.w	r1, [r8, #6]
 800d1d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d1da:	910b      	str	r1, [sp, #44]	; 0x2c
 800d1dc:	f898 100e 	ldrb.w	r1, [r8, #14]
 800d1e0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d1e2:	910a      	str	r1, [sp, #40]	; 0x28
 800d1e4:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 800d1e8:	9109      	str	r1, [sp, #36]	; 0x24
 800d1ea:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800d1ee:	9305      	str	r3, [sp, #20]
 800d1f0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800d1f2:	9206      	str	r2, [sp, #24]
 800d1f4:	e9cd a601 	strd	sl, r6, [sp, #4]
 800d1f8:	442e      	add	r6, r5
 800d1fa:	e9cd 7303 	strd	r7, r3, [sp, #12]
 800d1fe:	b236      	sxth	r6, r6
 800d200:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d202:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800d206:	9600      	str	r6, [sp, #0]
 800d208:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d20a:	681a      	ldr	r2, [r3, #0]
 800d20c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d20e:	685b      	ldr	r3, [r3, #4]
 800d210:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800d212:	47b0      	blx	r6
 800d214:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d216:	3301      	adds	r3, #1
 800d218:	930e      	str	r3, [sp, #56]	; 0x38
 800d21a:	e6e5      	b.n	800cfe8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 800d21c:	2700      	movs	r7, #0
 800d21e:	e7cd      	b.n	800d1bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 800d220:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800d222:	3501      	adds	r5, #1
 800d224:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d226:	429d      	cmp	r5, r3
 800d228:	f6bf af76 	bge.w	800d118 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800d22c:	4659      	mov	r1, fp
 800d22e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800d230:	f7f5 f964 	bl	80024fc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800d234:	4604      	mov	r4, r0
 800d236:	b110      	cbz	r0, 800d23e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 800d238:	280a      	cmp	r0, #10
 800d23a:	d1f2      	bne.n	800d222 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 800d23c:	e76b      	b.n	800d116 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800d23e:	2400      	movs	r4, #0
 800d240:	e76a      	b.n	800d118 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800d242:	f1bb 0f00 	cmp.w	fp, #0
 800d246:	f43f af5b 	beq.w	800d100 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 800d24a:	e776      	b.n	800d13a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

0800d24c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 800d24c:	b530      	push	{r4, r5, lr}
 800d24e:	8a44      	ldrh	r4, [r0, #18]
 800d250:	8ac5      	ldrh	r5, [r0, #22]
 800d252:	82c3      	strh	r3, [r0, #22]
 800d254:	442c      	add	r4, r5
 800d256:	1ae4      	subs	r4, r4, r3
 800d258:	8b03      	ldrh	r3, [r0, #24]
 800d25a:	8244      	strh	r4, [r0, #18]
 800d25c:	8a84      	ldrh	r4, [r0, #20]
 800d25e:	4422      	add	r2, r4
 800d260:	440c      	add	r4, r1
 800d262:	1a59      	subs	r1, r3, r1
 800d264:	8342      	strh	r2, [r0, #26]
 800d266:	8284      	strh	r4, [r0, #20]
 800d268:	8301      	strh	r1, [r0, #24]
 800d26a:	bd30      	pop	{r4, r5, pc}

0800d26c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 800d26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d270:	7a43      	ldrb	r3, [r0, #9]
 800d272:	b087      	sub	sp, #28
 800d274:	4604      	mov	r4, r0
 800d276:	460f      	mov	r7, r1
 800d278:	1eda      	subs	r2, r3, #3
 800d27a:	b2d2      	uxtb	r2, r2
 800d27c:	2900      	cmp	r1, #0
 800d27e:	d036      	beq.n	800d2ee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 800d280:	2a01      	cmp	r2, #1
 800d282:	d932      	bls.n	800d2ea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 800d284:	1e58      	subs	r0, r3, #1
 800d286:	f1d0 0b00 	rsbs	fp, r0, #0
 800d28a:	eb4b 0b00 	adc.w	fp, fp, r0
 800d28e:	1e99      	subs	r1, r3, #2
 800d290:	424b      	negs	r3, r1
 800d292:	414b      	adcs	r3, r1
 800d294:	9303      	str	r3, [sp, #12]
 800d296:	2300      	movs	r3, #0
 800d298:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800d29c:	2500      	movs	r5, #0
 800d29e:	f242 0a0b 	movw	sl, #8203	; 0x200b
 800d2a2:	46a9      	mov	r9, r5
 800d2a4:	8265      	strh	r5, [r4, #18]
 800d2a6:	82a5      	strh	r5, [r4, #20]
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	9305      	str	r3, [sp, #20]
 800d2ac:	8823      	ldrh	r3, [r4, #0]
 800d2ae:	2b20      	cmp	r3, #32
 800d2b0:	d02b      	beq.n	800d30a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 800d2b2:	eba3 020a 	sub.w	r2, r3, sl
 800d2b6:	4256      	negs	r6, r2
 800d2b8:	4156      	adcs	r6, r2
 800d2ba:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d004      	beq.n	800d2cc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 800d2c2:	4553      	cmp	r3, sl
 800d2c4:	bf16      	itet	ne
 800d2c6:	4699      	movne	r9, r3
 800d2c8:	2601      	moveq	r6, #1
 800d2ca:	2600      	movne	r6, #0
 800d2cc:	ab05      	add	r3, sp, #20
 800d2ce:	68e2      	ldr	r2, [r4, #12]
 800d2d0:	7a21      	ldrb	r1, [r4, #8]
 800d2d2:	6860      	ldr	r0, [r4, #4]
 800d2d4:	f002 fc80 	bl	800fbd8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800d2d8:	8020      	strh	r0, [r4, #0]
 800d2da:	b9c8      	cbnz	r0, 800d310 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 800d2dc:	8b22      	ldrh	r2, [r4, #24]
 800d2de:	2300      	movs	r3, #0
 800d2e0:	4611      	mov	r1, r2
 800d2e2:	4620      	mov	r0, r4
 800d2e4:	f7ff ffb2 	bl	800d24c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800d2e8:	e066      	b.n	800d3b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 800d2ea:	468b      	mov	fp, r1
 800d2ec:	e7cf      	b.n	800d28e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 800d2ee:	3b01      	subs	r3, #1
 800d2f0:	2a01      	cmp	r2, #1
 800d2f2:	9103      	str	r1, [sp, #12]
 800d2f4:	468b      	mov	fp, r1
 800d2f6:	bf8c      	ite	hi
 800d2f8:	2200      	movhi	r2, #0
 800d2fa:	2201      	movls	r2, #1
 800d2fc:	2b01      	cmp	r3, #1
 800d2fe:	9202      	str	r2, [sp, #8]
 800d300:	bf8c      	ite	hi
 800d302:	2300      	movhi	r3, #0
 800d304:	2301      	movls	r3, #1
 800d306:	9301      	str	r3, [sp, #4]
 800d308:	e7c8      	b.n	800d29c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 800d30a:	4699      	mov	r9, r3
 800d30c:	2601      	movs	r6, #1
 800d30e:	e7dd      	b.n	800d2cc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 800d310:	8ae3      	ldrh	r3, [r4, #22]
 800d312:	280a      	cmp	r0, #10
 800d314:	f103 0301 	add.w	r3, r3, #1
 800d318:	82e3      	strh	r3, [r4, #22]
 800d31a:	d0df      	beq.n	800d2dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 800d31c:	9a05      	ldr	r2, [sp, #20]
 800d31e:	bb42      	cbnz	r2, 800d372 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 800d320:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800d324:	4298      	cmp	r0, r3
 800d326:	d001      	beq.n	800d32c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 800d328:	4550      	cmp	r0, sl
 800d32a:	d1bd      	bne.n	800d2a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800d32c:	8823      	ldrh	r3, [r4, #0]
 800d32e:	8b21      	ldrh	r1, [r4, #24]
 800d330:	2b20      	cmp	r3, #32
 800d332:	d001      	beq.n	800d338 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 800d334:	4553      	cmp	r3, sl
 800d336:	d131      	bne.n	800d39c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 800d338:	2e00      	cmp	r6, #0
 800d33a:	bf0a      	itet	eq
 800d33c:	460d      	moveq	r5, r1
 800d33e:	4630      	movne	r0, r6
 800d340:	2001      	moveq	r0, #1
 800d342:	440a      	add	r2, r1
 800d344:	8aa3      	ldrh	r3, [r4, #20]
 800d346:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800d34a:	b292      	uxth	r2, r2
 800d34c:	8322      	strh	r2, [r4, #24]
 800d34e:	4413      	add	r3, r2
 800d350:	2f00      	cmp	r7, #0
 800d352:	d03a      	beq.n	800d3ca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 800d354:	f1bb 0f00 	cmp.w	fp, #0
 800d358:	d102      	bne.n	800d360 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 800d35a:	9903      	ldr	r1, [sp, #12]
 800d35c:	b301      	cbz	r1, 800d3a0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 800d35e:	b1f8      	cbz	r0, 800d3a0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 800d360:	8ba1      	ldrh	r1, [r4, #28]
 800d362:	4419      	add	r1, r3
 800d364:	458c      	cmp	ip, r1
 800d366:	da2a      	bge.n	800d3be <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 800d368:	8a61      	ldrh	r1, [r4, #18]
 800d36a:	b341      	cbz	r1, 800d3be <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 800d36c:	4563      	cmp	r3, ip
 800d36e:	dd9b      	ble.n	800d2a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800d370:	e01c      	b.n	800d3ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 800d372:	8893      	ldrh	r3, [r2, #4]
 800d374:	4649      	mov	r1, r9
 800d376:	8023      	strh	r3, [r4, #0]
 800d378:	f892 800d 	ldrb.w	r8, [r2, #13]
 800d37c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800d380:	f408 7080 	and.w	r0, r8, #256	; 0x100
 800d384:	f892 800a 	ldrb.w	r8, [r2, #10]
 800d388:	ea48 0800 	orr.w	r8, r8, r0
 800d38c:	68e0      	ldr	r0, [r4, #12]
 800d38e:	6803      	ldr	r3, [r0, #0]
 800d390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d392:	4798      	blx	r3
 800d394:	eb08 0200 	add.w	r2, r8, r0
 800d398:	b292      	uxth	r2, r2
 800d39a:	e7c7      	b.n	800d32c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 800d39c:	2000      	movs	r0, #0
 800d39e:	e7d0      	b.n	800d342 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 800d3a0:	4563      	cmp	r3, ip
 800d3a2:	dd81      	ble.n	800d2a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800d3a4:	8a63      	ldrh	r3, [r4, #18]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	f43f af7e 	beq.w	800d2a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	8ba2      	ldrh	r2, [r4, #28]
 800d3b0:	77a3      	strb	r3, [r4, #30]
 800d3b2:	8b63      	ldrh	r3, [r4, #26]
 800d3b4:	4413      	add	r3, r2
 800d3b6:	8363      	strh	r3, [r4, #26]
 800d3b8:	b007      	add	sp, #28
 800d3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3be:	2300      	movs	r3, #0
 800d3c0:	4611      	mov	r1, r2
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	f7ff ff42 	bl	800d24c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800d3c8:	e76e      	b.n	800d2a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800d3ca:	4563      	cmp	r3, ip
 800d3cc:	dd14      	ble.n	800d3f8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 800d3ce:	9b02      	ldr	r3, [sp, #8]
 800d3d0:	b113      	cbz	r3, 800d3d8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	460a      	mov	r2, r1
 800d3d6:	e783      	b.n	800d2e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 800d3d8:	9b01      	ldr	r3, [sp, #4]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	f43f af64 	beq.w	800d2a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800d3e0:	2800      	cmp	r0, #0
 800d3e2:	f47f af61 	bne.w	800d2a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800d3e6:	b116      	cbz	r6, 800d3ee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	462a      	mov	r2, r5
 800d3ec:	e779      	b.n	800d2e2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 800d3ee:	8a63      	ldrh	r3, [r4, #18]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	f43f af59 	beq.w	800d2a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800d3f6:	e7df      	b.n	800d3b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 800d3f8:	2800      	cmp	r0, #0
 800d3fa:	f47f af55 	bne.w	800d2a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800d3fe:	2e00      	cmp	r6, #0
 800d400:	f43f af52 	beq.w	800d2a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 800d404:	2301      	movs	r3, #1
 800d406:	462a      	mov	r2, r5
 800d408:	e7db      	b.n	800d3c2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0800d40a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 800d40a:	b530      	push	{r4, r5, lr}
 800d40c:	4605      	mov	r5, r0
 800d40e:	b08b      	sub	sp, #44	; 0x2c
 800d410:	b191      	cbz	r1, 800d438 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 800d412:	2401      	movs	r4, #1
 800d414:	e9cd 3100 	strd	r3, r1, [sp]
 800d418:	4613      	mov	r3, r2
 800d41a:	4601      	mov	r1, r0
 800d41c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 800d420:	a802      	add	r0, sp, #8
 800d422:	f7ff fd0b 	bl	800ce3c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 800d426:	2100      	movs	r1, #0
 800d428:	a802      	add	r0, sp, #8
 800d42a:	f7ff ff1f 	bl	800d26c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800d42e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800d432:	b163      	cbz	r3, 800d44e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 800d434:	3401      	adds	r4, #1
 800d436:	e7f6      	b.n	800d426 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 800d438:	2401      	movs	r4, #1
 800d43a:	f002 fcc7 	bl	800fdcc <_ZN8touchgfx12TextProvider11getNextCharEv>
 800d43e:	280a      	cmp	r0, #10
 800d440:	4628      	mov	r0, r5
 800d442:	bf08      	it	eq
 800d444:	3401      	addeq	r4, #1
 800d446:	f002 fcc1 	bl	800fdcc <_ZN8touchgfx12TextProvider11getNextCharEv>
 800d44a:	2800      	cmp	r0, #0
 800d44c:	d1f7      	bne.n	800d43e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 800d44e:	b2a0      	uxth	r0, r4
 800d450:	b00b      	add	sp, #44	; 0x2c
 800d452:	bd30      	pop	{r4, r5, pc}

0800d454 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 800d454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d458:	b0e5      	sub	sp, #404	; 0x194
 800d45a:	4689      	mov	r9, r1
 800d45c:	461c      	mov	r4, r3
 800d45e:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 800d462:	900a      	str	r0, [sp, #40]	; 0x28
 800d464:	f1ba 0f00 	cmp.w	sl, #0
 800d468:	f000 80b4 	beq.w	800d5d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	f000 80b0 	beq.w	800d5d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800d474:	7ba3      	ldrb	r3, [r4, #14]
 800d476:	2b00      	cmp	r3, #0
 800d478:	f000 80ac 	beq.w	800d5d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800d47c:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 800d480:	6810      	ldr	r0, [r2, #0]
 800d482:	6851      	ldr	r1, [r2, #4]
 800d484:	2500      	movs	r5, #0
 800d486:	4643      	mov	r3, r8
 800d488:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 800d48c:	950f      	str	r5, [sp, #60]	; 0x3c
 800d48e:	af19      	add	r7, sp, #100	; 0x64
 800d490:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800d494:	79a2      	ldrb	r2, [r4, #6]
 800d496:	c303      	stmia	r3!, {r0, r1}
 800d498:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 800d49c:	a90f      	add	r1, sp, #60	; 0x3c
 800d49e:	4640      	mov	r0, r8
 800d4a0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800d4a4:	f7ff fd40 	bl	800cf28 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800d4a8:	a90f      	add	r1, sp, #60	; 0x3c
 800d4aa:	79a2      	ldrb	r2, [r4, #6]
 800d4ac:	4608      	mov	r0, r1
 800d4ae:	f7ff fd3b 	bl	800cf28 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800d4b2:	4638      	mov	r0, r7
 800d4b4:	f002 f83c 	bl	800f530 <_ZN8touchgfx12TextProviderC1Ev>
 800d4b8:	6820      	ldr	r0, [r4, #0]
 800d4ba:	6803      	ldr	r3, [r0, #0]
 800d4bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4be:	4798      	blx	r3
 800d4c0:	4606      	mov	r6, r0
 800d4c2:	6820      	ldr	r0, [r4, #0]
 800d4c4:	6803      	ldr	r3, [r0, #0]
 800d4c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4c8:	4798      	blx	r3
 800d4ca:	4633      	mov	r3, r6
 800d4cc:	9000      	str	r0, [sp, #0]
 800d4ce:	4651      	mov	r1, sl
 800d4d0:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 800d4d2:	4638      	mov	r0, r7
 800d4d4:	f002 f87f 	bl	800f5d6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800d4d8:	7923      	ldrb	r3, [r4, #4]
 800d4da:	6820      	ldr	r0, [r4, #0]
 800d4dc:	9308      	str	r3, [sp, #32]
 800d4de:	6803      	ldr	r3, [r0, #0]
 800d4e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4e2:	4798      	blx	r3
 800d4e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4e8:	181e      	adds	r6, r3, r0
 800d4ea:	42ae      	cmp	r6, r5
 800d4ec:	dd06      	ble.n	800d4fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 800d4ee:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 800d4f2:	4282      	cmp	r2, r0
 800d4f4:	bfa4      	itt	ge
 800d4f6:	189d      	addge	r5, r3, r2
 800d4f8:	fb95 f5f6 	sdivge	r5, r5, r6
 800d4fc:	a832      	add	r0, sp, #200	; 0xc8
 800d4fe:	f002 f817 	bl	800f530 <_ZN8touchgfx12TextProviderC1Ev>
 800d502:	7c23      	ldrb	r3, [r4, #16]
 800d504:	b17b      	cbz	r3, 800d526 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 800d506:	6820      	ldr	r0, [r4, #0]
 800d508:	6803      	ldr	r3, [r0, #0]
 800d50a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d50c:	4798      	blx	r3
 800d50e:	4683      	mov	fp, r0
 800d510:	6820      	ldr	r0, [r4, #0]
 800d512:	6803      	ldr	r3, [r0, #0]
 800d514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d516:	4798      	blx	r3
 800d518:	465b      	mov	r3, fp
 800d51a:	9000      	str	r0, [sp, #0]
 800d51c:	4651      	mov	r1, sl
 800d51e:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 800d520:	a832      	add	r0, sp, #200	; 0xc8
 800d522:	f002 f858 	bl	800f5d6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800d526:	7be1      	ldrb	r1, [r4, #15]
 800d528:	a811      	add	r0, sp, #68	; 0x44
 800d52a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800d52e:	7963      	ldrb	r3, [r4, #5]
 800d530:	1a52      	subs	r2, r2, r1
 800d532:	7c21      	ldrb	r1, [r4, #16]
 800d534:	9101      	str	r1, [sp, #4]
 800d536:	b292      	uxth	r2, r2
 800d538:	6821      	ldr	r1, [r4, #0]
 800d53a:	9100      	str	r1, [sp, #0]
 800d53c:	a932      	add	r1, sp, #200	; 0xc8
 800d53e:	f7ff fc7d 	bl	800ce3c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 800d542:	7c23      	ldrb	r3, [r4, #16]
 800d544:	b9bb      	cbnz	r3, 800d576 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 800d546:	fa1f fa86 	uxth.w	sl, r6
 800d54a:	2d00      	cmp	r5, #0
 800d54c:	dd45      	ble.n	800d5da <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 800d54e:	4638      	mov	r0, r7
 800d550:	f002 fc3c 	bl	800fdcc <_ZN8touchgfx12TextProvider11getNextCharEv>
 800d554:	2800      	cmp	r0, #0
 800d556:	d03d      	beq.n	800d5d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800d558:	280a      	cmp	r0, #10
 800d55a:	d1f6      	bne.n	800d54a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 800d55c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800d560:	3d01      	subs	r5, #1
 800d562:	4453      	add	r3, sl
 800d564:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800d568:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800d56c:	eba3 030a 	sub.w	r3, r3, sl
 800d570:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800d574:	e7e9      	b.n	800d54a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 800d576:	0073      	lsls	r3, r6, #1
 800d578:	f64f 7bff 	movw	fp, #65535	; 0xffff
 800d57c:	fa1f fa86 	uxth.w	sl, r6
 800d580:	9309      	str	r3, [sp, #36]	; 0x24
 800d582:	2d00      	cmp	r5, #0
 800d584:	dd29      	ble.n	800d5da <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 800d586:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800d58a:	a811      	add	r0, sp, #68	; 0x44
 800d58c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d58e:	428b      	cmp	r3, r1
 800d590:	bfd4      	ite	le
 800d592:	2100      	movle	r1, #0
 800d594:	2101      	movgt	r1, #1
 800d596:	f7ff fe69 	bl	800d26c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800d59a:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 800d59e:	3b01      	subs	r3, #1
 800d5a0:	b29b      	uxth	r3, r3
 800d5a2:	455b      	cmp	r3, fp
 800d5a4:	930b      	str	r3, [sp, #44]	; 0x2c
 800d5a6:	d005      	beq.n	800d5b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 800d5a8:	7961      	ldrb	r1, [r4, #5]
 800d5aa:	4638      	mov	r0, r7
 800d5ac:	f7f4 ffa6 	bl	80024fc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800d5b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5b2:	e7f4      	b.n	800d59e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 800d5b4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800d5b8:	3d01      	subs	r5, #1
 800d5ba:	4453      	add	r3, sl
 800d5bc:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800d5c0:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 800d5c4:	eba3 030a 	sub.w	r3, r3, sl
 800d5c8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800d5cc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d1d6      	bne.n	800d582 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 800d5d4:	b065      	add	sp, #404	; 0x194
 800d5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5da:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 800d5de:	ad4b      	add	r5, sp, #300	; 0x12c
 800d5e0:	f04f 0b00 	mov.w	fp, #0
 800d5e4:	7c23      	ldrb	r3, [r4, #16]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d067      	beq.n	800d6ba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 800d5ea:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800d5ee:	a811      	add	r0, sp, #68	; 0x44
 800d5f0:	458a      	cmp	sl, r1
 800d5f2:	bfd4      	ite	le
 800d5f4:	2100      	movle	r1, #0
 800d5f6:	2101      	movgt	r1, #1
 800d5f8:	f7ff fe38 	bl	800d26c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800d5fc:	9b08      	ldr	r3, [sp, #32]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d056      	beq.n	800d6b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 800d602:	7c23      	ldrb	r3, [r4, #16]
 800d604:	2264      	movs	r2, #100	; 0x64
 800d606:	4639      	mov	r1, r7
 800d608:	4628      	mov	r0, r5
 800d60a:	9309      	str	r3, [sp, #36]	; 0x24
 800d60c:	f00b fcb4 	bl	8018f78 <memcpy>
 800d610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d612:	2b00      	cmp	r3, #0
 800d614:	d059      	beq.n	800d6ca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x276>
 800d616:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 800d61a:	7922      	ldrb	r2, [r4, #4]
 800d61c:	2a01      	cmp	r2, #1
 800d61e:	d13d      	bne.n	800d69c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 800d620:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 800d624:	1ac0      	subs	r0, r0, r3
 800d626:	2302      	movs	r3, #2
 800d628:	fb90 f0f3 	sdiv	r0, r0, r3
 800d62c:	b200      	sxth	r0, r0
 800d62e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800d632:	4418      	add	r0, r3
 800d634:	7c23      	ldrb	r3, [r4, #16]
 800d636:	f8ad 012c 	strh.w	r0, [sp, #300]	; 0x12c
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d03a      	beq.n	800d6b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 800d63e:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 800d642:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 800d646:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 800d64a:	9500      	str	r5, [sp, #0]
 800d64c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d64e:	e9cd 2105 	strd	r2, r1, [sp, #20]
 800d652:	e9cd b703 	strd	fp, r7, [sp, #12]
 800d656:	e9cd 8401 	strd	r8, r4, [sp, #4]
 800d65a:	464a      	mov	r2, r9
 800d65c:	2100      	movs	r1, #0
 800d65e:	f7ff fc94 	bl	800cf8a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 800d662:	2800      	cmp	r0, #0
 800d664:	d1b6      	bne.n	800d5d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800d666:	b2b2      	uxth	r2, r6
 800d668:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800d66c:	4611      	mov	r1, r2
 800d66e:	4413      	add	r3, r2
 800d670:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800d674:	b21b      	sxth	r3, r3
 800d676:	1a52      	subs	r2, r2, r1
 800d678:	7c21      	ldrb	r1, [r4, #16]
 800d67a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800d67e:	b212      	sxth	r2, r2
 800d680:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 800d684:	b109      	cbz	r1, 800d68a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 800d686:	42b2      	cmp	r2, r6
 800d688:	dba4      	blt.n	800d5d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800d68a:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 800d68e:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 800d692:	440a      	add	r2, r1
 800d694:	b212      	sxth	r2, r2
 800d696:	4293      	cmp	r3, r2
 800d698:	dda4      	ble.n	800d5e4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x190>
 800d69a:	e79b      	b.n	800d5d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 800d69c:	2a02      	cmp	r2, #2
 800d69e:	d105      	bne.n	800d6ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 800d6a0:	7be2      	ldrb	r2, [r4, #15]
 800d6a2:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 800d6a6:	1a80      	subs	r0, r0, r2
 800d6a8:	1ac0      	subs	r0, r0, r3
 800d6aa:	e7bf      	b.n	800d62c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d8>
 800d6ac:	2000      	movs	r0, #0
 800d6ae:	e7be      	b.n	800d62e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 800d6b0:	7be0      	ldrb	r0, [r4, #15]
 800d6b2:	e7bc      	b.n	800d62e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 800d6b4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d6b8:	e7c3      	b.n	800d642 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 800d6ba:	9b08      	ldr	r3, [sp, #32]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d0f7      	beq.n	800d6b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 800d6c0:	2264      	movs	r2, #100	; 0x64
 800d6c2:	4639      	mov	r1, r7
 800d6c4:	4628      	mov	r0, r5
 800d6c6:	f00b fc57 	bl	8018f78 <memcpy>
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d6d0:	6821      	ldr	r1, [r4, #0]
 800d6d2:	4628      	mov	r0, r5
 800d6d4:	f7ff fbec 	bl	800ceb0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800d6d8:	b203      	sxth	r3, r0
 800d6da:	e79e      	b.n	800d61a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>

0800d6dc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800d6dc:	2b02      	cmp	r3, #2
 800d6de:	b510      	push	{r4, lr}
 800d6e0:	f9b0 4000 	ldrsh.w	r4, [r0]
 800d6e4:	d00b      	beq.n	800d6fe <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 800d6e6:	2b03      	cmp	r3, #3
 800d6e8:	d00e      	beq.n	800d708 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 800d6ea:	2b01      	cmp	r3, #1
 800d6ec:	d001      	beq.n	800d6f2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 800d6ee:	1860      	adds	r0, r4, r1
 800d6f0:	bd10      	pop	{r4, pc}
 800d6f2:	8880      	ldrh	r0, [r0, #4]
 800d6f4:	4420      	add	r0, r4
 800d6f6:	b200      	sxth	r0, r0
 800d6f8:	1a80      	subs	r0, r0, r2
 800d6fa:	3801      	subs	r0, #1
 800d6fc:	e7f8      	b.n	800d6f0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 800d6fe:	8880      	ldrh	r0, [r0, #4]
 800d700:	4420      	add	r0, r4
 800d702:	b200      	sxth	r0, r0
 800d704:	1a40      	subs	r0, r0, r1
 800d706:	e7f8      	b.n	800d6fa <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800d708:	18a0      	adds	r0, r4, r2
 800d70a:	e7f1      	b.n	800d6f0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0800d70c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800d70c:	2b02      	cmp	r3, #2
 800d70e:	b510      	push	{r4, lr}
 800d710:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800d714:	d006      	beq.n	800d724 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 800d716:	2b03      	cmp	r3, #3
 800d718:	d00a      	beq.n	800d730 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800d71a:	2b01      	cmp	r3, #1
 800d71c:	bf14      	ite	ne
 800d71e:	18a0      	addne	r0, r4, r2
 800d720:	1860      	addeq	r0, r4, r1
 800d722:	bd10      	pop	{r4, pc}
 800d724:	88c0      	ldrh	r0, [r0, #6]
 800d726:	4420      	add	r0, r4
 800d728:	b200      	sxth	r0, r0
 800d72a:	1a80      	subs	r0, r0, r2
 800d72c:	3801      	subs	r0, #1
 800d72e:	e7f8      	b.n	800d722 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 800d730:	88c0      	ldrh	r0, [r0, #6]
 800d732:	4420      	add	r0, r4
 800d734:	b200      	sxth	r0, r0
 800d736:	1a40      	subs	r0, r0, r1
 800d738:	e7f8      	b.n	800d72c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0800d73c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800d73c:	4b01      	ldr	r3, [pc, #4]	; (800d744 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800d73e:	2200      	movs	r2, #0
 800d740:	601a      	str	r2, [r3, #0]
 800d742:	4770      	bx	lr
 800d744:	2400689c 	.word	0x2400689c

0800d748 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 800d748:	4603      	mov	r3, r0
 800d74a:	b1c8      	cbz	r0, 800d780 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 800d74c:	0c02      	lsrs	r2, r0, #16
 800d74e:	0412      	lsls	r2, r2, #16
 800d750:	b9a2      	cbnz	r2, 800d77c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800d752:	0403      	lsls	r3, r0, #16
 800d754:	2010      	movs	r0, #16
 800d756:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d75a:	bf04      	itt	eq
 800d75c:	021b      	lsleq	r3, r3, #8
 800d75e:	3008      	addeq	r0, #8
 800d760:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d764:	bf04      	itt	eq
 800d766:	011b      	lsleq	r3, r3, #4
 800d768:	3004      	addeq	r0, #4
 800d76a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d76e:	bf04      	itt	eq
 800d770:	009b      	lsleq	r3, r3, #2
 800d772:	3002      	addeq	r0, #2
 800d774:	2b00      	cmp	r3, #0
 800d776:	db04      	blt.n	800d782 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800d778:	3001      	adds	r0, #1
 800d77a:	4770      	bx	lr
 800d77c:	2000      	movs	r0, #0
 800d77e:	e7ea      	b.n	800d756 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800d780:	2020      	movs	r0, #32
 800d782:	4770      	bx	lr

0800d784 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800d784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d788:	b087      	sub	sp, #28
 800d78a:	4681      	mov	r9, r0
 800d78c:	4698      	mov	r8, r3
 800d78e:	4610      	mov	r0, r2
 800d790:	460d      	mov	r5, r1
 800d792:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 800d796:	b981      	cbnz	r1, 800d7ba <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 800d798:	b14b      	cbz	r3, 800d7ae <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 800d79a:	460b      	mov	r3, r1
 800d79c:	464a      	mov	r2, r9
 800d79e:	4641      	mov	r1, r8
 800d7a0:	e9cd 4700 	strd	r4, r7, [sp]
 800d7a4:	f7ff ffee 	bl	800d784 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800d7a8:	b007      	add	sp, #28
 800d7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ae:	f04f 33ff 	mov.w	r3, #4294967295
 800d7b2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800d7b6:	603b      	str	r3, [r7, #0]
 800d7b8:	e7f6      	b.n	800d7a8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800d7ba:	fa32 fa01 	lsrs.w	sl, r2, r1
 800d7be:	d107      	bne.n	800d7d0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 800d7c0:	fb09 f602 	mul.w	r6, r9, r2
 800d7c4:	fbb6 f0f4 	udiv	r0, r6, r4
 800d7c8:	fb04 6610 	mls	r6, r4, r0, r6
 800d7cc:	603e      	str	r6, [r7, #0]
 800d7ce:	e7eb      	b.n	800d7a8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 800d7d0:	2601      	movs	r6, #1
 800d7d2:	fa09 fb01 	lsl.w	fp, r9, r1
 800d7d6:	408e      	lsls	r6, r1
 800d7d8:	fbbb f3f4 	udiv	r3, fp, r4
 800d7dc:	3e01      	subs	r6, #1
 800d7de:	9302      	str	r3, [sp, #8]
 800d7e0:	fb0a f303 	mul.w	r3, sl, r3
 800d7e4:	4016      	ands	r6, r2
 800d7e6:	9303      	str	r3, [sp, #12]
 800d7e8:	4630      	mov	r0, r6
 800d7ea:	f7ff ffad 	bl	800d748 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800d7ee:	464a      	mov	r2, r9
 800d7f0:	460b      	mov	r3, r1
 800d7f2:	4601      	mov	r1, r0
 800d7f4:	4630      	mov	r0, r6
 800d7f6:	e9cd 4700 	strd	r4, r7, [sp]
 800d7fa:	f7ff ffc3 	bl	800d784 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800d7fe:	9b02      	ldr	r3, [sp, #8]
 800d800:	4606      	mov	r6, r0
 800d802:	eb05 0108 	add.w	r1, r5, r8
 800d806:	fb04 bb13 	mls	fp, r4, r3, fp
 800d80a:	4658      	mov	r0, fp
 800d80c:	f7ff ff9c 	bl	800d748 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800d810:	ab05      	add	r3, sp, #20
 800d812:	465a      	mov	r2, fp
 800d814:	e9cd 4300 	strd	r4, r3, [sp]
 800d818:	4603      	mov	r3, r0
 800d81a:	4650      	mov	r0, sl
 800d81c:	f7ff ffb2 	bl	800d784 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800d820:	6839      	ldr	r1, [r7, #0]
 800d822:	9a05      	ldr	r2, [sp, #20]
 800d824:	9b03      	ldr	r3, [sp, #12]
 800d826:	4411      	add	r1, r2
 800d828:	fbb1 f2f4 	udiv	r2, r1, r4
 800d82c:	18d3      	adds	r3, r2, r3
 800d82e:	fb04 1412 	mls	r4, r4, r2, r1
 800d832:	441e      	add	r6, r3
 800d834:	603c      	str	r4, [r7, #0]
 800d836:	4430      	add	r0, r6
 800d838:	e7b6      	b.n	800d7a8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0800d83a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800d83a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d83e:	b085      	sub	sp, #20
 800d840:	f1b0 0900 	subs.w	r9, r0, #0
 800d844:	461d      	mov	r5, r3
 800d846:	4617      	mov	r7, r2
 800d848:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d84a:	bfbb      	ittet	lt
 800d84c:	f1c9 0900 	rsblt	r9, r9, #0
 800d850:	f04f 36ff 	movlt.w	r6, #4294967295
 800d854:	2601      	movge	r6, #1
 800d856:	6823      	ldrlt	r3, [r4, #0]
 800d858:	bfbc      	itt	lt
 800d85a:	425b      	neglt	r3, r3
 800d85c:	6023      	strlt	r3, [r4, #0]
 800d85e:	2a00      	cmp	r2, #0
 800d860:	da04      	bge.n	800d86c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800d862:	6823      	ldr	r3, [r4, #0]
 800d864:	4257      	negs	r7, r2
 800d866:	4276      	negs	r6, r6
 800d868:	425b      	negs	r3, r3
 800d86a:	6023      	str	r3, [r4, #0]
 800d86c:	2d00      	cmp	r5, #0
 800d86e:	4638      	mov	r0, r7
 800d870:	bfba      	itte	lt
 800d872:	426d      	neglt	r5, r5
 800d874:	f04f 38ff 	movlt.w	r8, #4294967295
 800d878:	f04f 0801 	movge.w	r8, #1
 800d87c:	f7ff ff64 	bl	800d748 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800d880:	ab03      	add	r3, sp, #12
 800d882:	463a      	mov	r2, r7
 800d884:	e9cd 5300 	strd	r5, r3, [sp]
 800d888:	4603      	mov	r3, r0
 800d88a:	4648      	mov	r0, r9
 800d88c:	f7ff ff7a 	bl	800d784 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800d890:	6823      	ldr	r3, [r4, #0]
 800d892:	9a03      	ldr	r2, [sp, #12]
 800d894:	4546      	cmp	r6, r8
 800d896:	441a      	add	r2, r3
 800d898:	fb92 f3f5 	sdiv	r3, r2, r5
 800d89c:	4418      	add	r0, r3
 800d89e:	fb05 2313 	mls	r3, r5, r3, r2
 800d8a2:	bf18      	it	ne
 800d8a4:	4240      	negne	r0, r0
 800d8a6:	1c72      	adds	r2, r6, #1
 800d8a8:	6023      	str	r3, [r4, #0]
 800d8aa:	d105      	bne.n	800d8b8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	f1c3 0200 	rsb	r2, r3, #0
 800d8b2:	db0b      	blt.n	800d8cc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 800d8b4:	6022      	str	r2, [r4, #0]
 800d8b6:	e006      	b.n	800d8c6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800d8b8:	2e01      	cmp	r6, #1
 800d8ba:	d104      	bne.n	800d8c6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	da02      	bge.n	800d8c6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800d8c0:	442b      	add	r3, r5
 800d8c2:	3801      	subs	r0, #1
 800d8c4:	6023      	str	r3, [r4, #0]
 800d8c6:	b005      	add	sp, #20
 800d8c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d8cc:	3801      	subs	r0, #1
 800d8ce:	1b52      	subs	r2, r2, r5
 800d8d0:	e7f0      	b.n	800d8b4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0800d8d4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800d8d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800d8d8:	4c1c      	ldr	r4, [pc, #112]	; (800d94c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800d8da:	4605      	mov	r5, r0
 800d8dc:	6807      	ldr	r7, [r0, #0]
 800d8de:	69a3      	ldr	r3, [r4, #24]
 800d8e0:	b92b      	cbnz	r3, 800d8ee <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800d8e2:	6840      	ldr	r0, [r0, #4]
 800d8e4:	e9c5 7000 	strd	r7, r0, [r5]
 800d8e8:	b004      	add	sp, #16
 800d8ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8ee:	f04f 0802 	mov.w	r8, #2
 800d8f2:	68a2      	ldr	r2, [r4, #8]
 800d8f4:	ae04      	add	r6, sp, #16
 800d8f6:	6820      	ldr	r0, [r4, #0]
 800d8f8:	fb93 f1f8 	sdiv	r1, r3, r8
 800d8fc:	440a      	add	r2, r1
 800d8fe:	69e1      	ldr	r1, [r4, #28]
 800d900:	f846 2d04 	str.w	r2, [r6, #-4]!
 800d904:	463a      	mov	r2, r7
 800d906:	9600      	str	r6, [sp, #0]
 800d908:	f7ff ff97 	bl	800d83a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800d90c:	69a3      	ldr	r3, [r4, #24]
 800d90e:	4607      	mov	r7, r0
 800d910:	686a      	ldr	r2, [r5, #4]
 800d912:	6a21      	ldr	r1, [r4, #32]
 800d914:	9600      	str	r6, [sp, #0]
 800d916:	6860      	ldr	r0, [r4, #4]
 800d918:	f7ff ff8f 	bl	800d83a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800d91c:	69a3      	ldr	r3, [r4, #24]
 800d91e:	6962      	ldr	r2, [r4, #20]
 800d920:	4407      	add	r7, r0
 800d922:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d924:	9600      	str	r6, [sp, #0]
 800d926:	68e0      	ldr	r0, [r4, #12]
 800d928:	fb93 f8f8 	sdiv	r8, r3, r8
 800d92c:	4442      	add	r2, r8
 800d92e:	9203      	str	r2, [sp, #12]
 800d930:	682a      	ldr	r2, [r5, #0]
 800d932:	f7ff ff82 	bl	800d83a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800d936:	4680      	mov	r8, r0
 800d938:	9600      	str	r6, [sp, #0]
 800d93a:	69a3      	ldr	r3, [r4, #24]
 800d93c:	686a      	ldr	r2, [r5, #4]
 800d93e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800d940:	6920      	ldr	r0, [r4, #16]
 800d942:	f7ff ff7a 	bl	800d83a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800d946:	4440      	add	r0, r8
 800d948:	e7cc      	b.n	800d8e4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800d94a:	bf00      	nop
 800d94c:	240068a0 	.word	0x240068a0

0800d950 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800d950:	4b07      	ldr	r3, [pc, #28]	; (800d970 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 800d952:	781b      	ldrb	r3, [r3, #0]
 800d954:	2b01      	cmp	r3, #1
 800d956:	d109      	bne.n	800d96c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 800d958:	f9b1 3000 	ldrsh.w	r3, [r1]
 800d95c:	f9b0 2000 	ldrsh.w	r2, [r0]
 800d960:	8003      	strh	r3, [r0, #0]
 800d962:	4b04      	ldr	r3, [pc, #16]	; (800d974 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800d964:	881b      	ldrh	r3, [r3, #0]
 800d966:	3b01      	subs	r3, #1
 800d968:	1a9b      	subs	r3, r3, r2
 800d96a:	800b      	strh	r3, [r1, #0]
 800d96c:	4770      	bx	lr
 800d96e:	bf00      	nop
 800d970:	2400688c 	.word	0x2400688c
 800d974:	24006890 	.word	0x24006890

0800d978 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800d978:	4b07      	ldr	r3, [pc, #28]	; (800d998 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800d97a:	b510      	push	{r4, lr}
 800d97c:	781b      	ldrb	r3, [r3, #0]
 800d97e:	2b01      	cmp	r3, #1
 800d980:	d108      	bne.n	800d994 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800d982:	4b06      	ldr	r3, [pc, #24]	; (800d99c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800d984:	880c      	ldrh	r4, [r1, #0]
 800d986:	881b      	ldrh	r3, [r3, #0]
 800d988:	f9b0 2000 	ldrsh.w	r2, [r0]
 800d98c:	3b01      	subs	r3, #1
 800d98e:	1b1b      	subs	r3, r3, r4
 800d990:	8003      	strh	r3, [r0, #0]
 800d992:	800a      	strh	r2, [r1, #0]
 800d994:	bd10      	pop	{r4, pc}
 800d996:	bf00      	nop
 800d998:	2400688c 	.word	0x2400688c
 800d99c:	24006890 	.word	0x24006890

0800d9a0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800d9a0:	4b0a      	ldr	r3, [pc, #40]	; (800d9cc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800d9a2:	b510      	push	{r4, lr}
 800d9a4:	781b      	ldrb	r3, [r3, #0]
 800d9a6:	2b01      	cmp	r3, #1
 800d9a8:	d10e      	bne.n	800d9c8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800d9aa:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800d9ae:	8843      	ldrh	r3, [r0, #2]
 800d9b0:	f9b0 4000 	ldrsh.w	r4, [r0]
 800d9b4:	18ca      	adds	r2, r1, r3
 800d9b6:	4b06      	ldr	r3, [pc, #24]	; (800d9d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800d9b8:	8044      	strh	r4, [r0, #2]
 800d9ba:	881b      	ldrh	r3, [r3, #0]
 800d9bc:	1a9b      	subs	r3, r3, r2
 800d9be:	8003      	strh	r3, [r0, #0]
 800d9c0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800d9c4:	8081      	strh	r1, [r0, #4]
 800d9c6:	80c3      	strh	r3, [r0, #6]
 800d9c8:	bd10      	pop	{r4, pc}
 800d9ca:	bf00      	nop
 800d9cc:	2400688c 	.word	0x2400688c
 800d9d0:	24006890 	.word	0x24006890

0800d9d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800d9d4:	4b08      	ldr	r3, [pc, #32]	; (800d9f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 800d9d6:	781b      	ldrb	r3, [r3, #0]
 800d9d8:	2b01      	cmp	r3, #1
 800d9da:	d10c      	bne.n	800d9f6 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 800d9dc:	8803      	ldrh	r3, [r0, #0]
 800d9de:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800d9e2:	8842      	ldrh	r2, [r0, #2]
 800d9e4:	8002      	strh	r2, [r0, #0]
 800d9e6:	185a      	adds	r2, r3, r1
 800d9e8:	4b04      	ldr	r3, [pc, #16]	; (800d9fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800d9ea:	881b      	ldrh	r3, [r3, #0]
 800d9ec:	1a9b      	subs	r3, r3, r2
 800d9ee:	8043      	strh	r3, [r0, #2]
 800d9f0:	88c3      	ldrh	r3, [r0, #6]
 800d9f2:	80c1      	strh	r1, [r0, #6]
 800d9f4:	8083      	strh	r3, [r0, #4]
 800d9f6:	4770      	bx	lr
 800d9f8:	2400688c 	.word	0x2400688c
 800d9fc:	24006890 	.word	0x24006890

0800da00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800da00:	4b07      	ldr	r3, [pc, #28]	; (800da20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800da02:	b510      	push	{r4, lr}
 800da04:	781b      	ldrb	r3, [r3, #0]
 800da06:	2b01      	cmp	r3, #1
 800da08:	d108      	bne.n	800da1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800da0a:	f9b1 3000 	ldrsh.w	r3, [r1]
 800da0e:	f9b0 4000 	ldrsh.w	r4, [r0]
 800da12:	8003      	strh	r3, [r0, #0]
 800da14:	8893      	ldrh	r3, [r2, #4]
 800da16:	3b01      	subs	r3, #1
 800da18:	1b1b      	subs	r3, r3, r4
 800da1a:	800b      	strh	r3, [r1, #0]
 800da1c:	bd10      	pop	{r4, pc}
 800da1e:	bf00      	nop
 800da20:	2400688c 	.word	0x2400688c

0800da24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 800da24:	4b0b      	ldr	r3, [pc, #44]	; (800da54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 800da26:	781b      	ldrb	r3, [r3, #0]
 800da28:	2b01      	cmp	r3, #1
 800da2a:	d111      	bne.n	800da50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 800da2c:	680b      	ldr	r3, [r1, #0]
 800da2e:	ed90 7a00 	vldr	s14, [r0]
 800da32:	6003      	str	r3, [r0, #0]
 800da34:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800da38:	eddf 6a07 	vldr	s13, [pc, #28]	; 800da58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 800da3c:	ee07 3a90 	vmov	s15, r3
 800da40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da44:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800da48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800da4c:	edc1 7a00 	vstr	s15, [r1]
 800da50:	4770      	bx	lr
 800da52:	bf00      	nop
 800da54:	2400688c 	.word	0x2400688c
 800da58:	38d1b717 	.word	0x38d1b717

0800da5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800da5c:	4b0a      	ldr	r3, [pc, #40]	; (800da88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800da5e:	460a      	mov	r2, r1
 800da60:	b510      	push	{r4, lr}
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	2b01      	cmp	r3, #1
 800da66:	d10d      	bne.n	800da84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800da68:	8881      	ldrh	r1, [r0, #4]
 800da6a:	8803      	ldrh	r3, [r0, #0]
 800da6c:	440b      	add	r3, r1
 800da6e:	4601      	mov	r1, r0
 800da70:	3b01      	subs	r3, #1
 800da72:	f821 3b02 	strh.w	r3, [r1], #2
 800da76:	f7ff ffc3 	bl	800da00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800da7a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800da7e:	88c2      	ldrh	r2, [r0, #6]
 800da80:	80c3      	strh	r3, [r0, #6]
 800da82:	8082      	strh	r2, [r0, #4]
 800da84:	bd10      	pop	{r4, pc}
 800da86:	bf00      	nop
 800da88:	2400688c 	.word	0x2400688c

0800da8c <_ZN8touchgfx11Application13requestRedrawEv>:
 800da8c:	4b06      	ldr	r3, [pc, #24]	; (800daa8 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 800da8e:	2100      	movs	r1, #0
 800da90:	f9b3 2000 	ldrsh.w	r2, [r3]
 800da94:	4b05      	ldr	r3, [pc, #20]	; (800daac <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800da96:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 800da9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da9e:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 800daa2:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 800daa6:	4770      	bx	lr
 800daa8:	24006888 	.word	0x24006888
 800daac:	2400688a 	.word	0x2400688a

0800dab0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800dab0:	4b03      	ldr	r3, [pc, #12]	; (800dac0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800dab2:	6818      	ldr	r0, [r3, #0]
 800dab4:	b110      	cbz	r0, 800dabc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800dab6:	6803      	ldr	r3, [r0, #0]
 800dab8:	699b      	ldr	r3, [r3, #24]
 800daba:	4718      	bx	r3
 800dabc:	4770      	bx	lr
 800dabe:	bf00      	nop
 800dac0:	240068d0 	.word	0x240068d0

0800dac4 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800dac4:	4770      	bx	lr
	...

0800dac8 <_ZN8touchgfx11Application4drawEv>:
 800dac8:	4b09      	ldr	r3, [pc, #36]	; (800daf0 <_ZN8touchgfx11Application4drawEv+0x28>)
 800daca:	b507      	push	{r0, r1, r2, lr}
 800dacc:	f9b3 2000 	ldrsh.w	r2, [r3]
 800dad0:	2100      	movs	r1, #0
 800dad2:	4b08      	ldr	r3, [pc, #32]	; (800daf4 <_ZN8touchgfx11Application4drawEv+0x2c>)
 800dad4:	9100      	str	r1, [sp, #0]
 800dad6:	4669      	mov	r1, sp
 800dad8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dadc:	f8ad 2004 	strh.w	r2, [sp, #4]
 800dae0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800dae4:	6803      	ldr	r3, [r0, #0]
 800dae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dae8:	4798      	blx	r3
 800daea:	b003      	add	sp, #12
 800daec:	f85d fb04 	ldr.w	pc, [sp], #4
 800daf0:	24006888 	.word	0x24006888
 800daf4:	2400688a 	.word	0x2400688a

0800daf8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800daf8:	4b03      	ldr	r3, [pc, #12]	; (800db08 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800dafa:	6818      	ldr	r0, [r3, #0]
 800dafc:	b110      	cbz	r0, 800db04 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800dafe:	6803      	ldr	r3, [r0, #0]
 800db00:	69db      	ldr	r3, [r3, #28]
 800db02:	4718      	bx	r3
 800db04:	4770      	bx	lr
 800db06:	bf00      	nop
 800db08:	240068d0 	.word	0x240068d0

0800db0c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800db0c:	4b03      	ldr	r3, [pc, #12]	; (800db1c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800db0e:	6818      	ldr	r0, [r3, #0]
 800db10:	b110      	cbz	r0, 800db18 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800db12:	6803      	ldr	r3, [r0, #0]
 800db14:	6a1b      	ldr	r3, [r3, #32]
 800db16:	4718      	bx	r3
 800db18:	4770      	bx	lr
 800db1a:	bf00      	nop
 800db1c:	240068d0 	.word	0x240068d0

0800db20 <_ZN8touchgfx11Application14handleKeyEventEh>:
 800db20:	4b03      	ldr	r3, [pc, #12]	; (800db30 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800db22:	6818      	ldr	r0, [r3, #0]
 800db24:	b110      	cbz	r0, 800db2c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800db26:	6803      	ldr	r3, [r0, #0]
 800db28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db2a:	4718      	bx	r3
 800db2c:	4770      	bx	lr
 800db2e:	bf00      	nop
 800db30:	240068d0 	.word	0x240068d0

0800db34 <_ZN8touchgfx11ApplicationD1Ev>:
 800db34:	4770      	bx	lr

0800db36 <_ZN8touchgfx11ApplicationD0Ev>:
 800db36:	b510      	push	{r4, lr}
 800db38:	4604      	mov	r4, r0
 800db3a:	f44f 719c 	mov.w	r1, #312	; 0x138
 800db3e:	f00b f96e 	bl	8018e1e <_ZdlPvj>
 800db42:	4620      	mov	r0, r4
 800db44:	bd10      	pop	{r4, pc}
	...

0800db48 <_ZN8touchgfx11Application15handleTickEventEv>:
 800db48:	b570      	push	{r4, r5, r6, lr}
 800db4a:	4d38      	ldr	r5, [pc, #224]	; (800dc2c <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 800db4c:	4604      	mov	r4, r0
 800db4e:	6828      	ldr	r0, [r5, #0]
 800db50:	b140      	cbz	r0, 800db64 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800db52:	7a03      	ldrb	r3, [r0, #8]
 800db54:	b933      	cbnz	r3, 800db64 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800db56:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 800db5a:	6803      	ldr	r3, [r0, #0]
 800db5c:	689b      	ldr	r3, [r3, #8]
 800db5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800db62:	4718      	bx	r3
 800db64:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 800db68:	b97b      	cbnz	r3, 800db8a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800db6a:	b170      	cbz	r0, 800db8a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800db6c:	7a03      	ldrb	r3, [r0, #8]
 800db6e:	b163      	cbz	r3, 800db8a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800db70:	4b2f      	ldr	r3, [pc, #188]	; (800dc30 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 800db72:	6818      	ldr	r0, [r3, #0]
 800db74:	b110      	cbz	r0, 800db7c <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 800db76:	6803      	ldr	r3, [r0, #0]
 800db78:	691b      	ldr	r3, [r3, #16]
 800db7a:	4798      	blx	r3
 800db7c:	6828      	ldr	r0, [r5, #0]
 800db7e:	6803      	ldr	r3, [r0, #0]
 800db80:	68db      	ldr	r3, [r3, #12]
 800db82:	4798      	blx	r3
 800db84:	2301      	movs	r3, #1
 800db86:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 800db8a:	2500      	movs	r5, #0
 800db8c:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 800db90:	42a8      	cmp	r0, r5
 800db92:	dd0c      	ble.n	800dbae <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 800db94:	1963      	adds	r3, r4, r5
 800db96:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 800db9a:	b132      	cbz	r2, 800dbaa <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 800db9c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800dba0:	4413      	add	r3, r2
 800dba2:	6858      	ldr	r0, [r3, #4]
 800dba4:	6803      	ldr	r3, [r0, #0]
 800dba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dba8:	4798      	blx	r3
 800dbaa:	3501      	adds	r5, #1
 800dbac:	e7ee      	b.n	800db8c <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 800dbae:	2300      	movs	r3, #0
 800dbb0:	461a      	mov	r2, r3
 800dbb2:	4298      	cmp	r0, r3
 800dbb4:	d10f      	bne.n	800dbd6 <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 800dbb6:	1d25      	adds	r5, r4, #4
 800dbb8:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 800dbbc:	4291      	cmp	r1, r2
 800dbbe:	dd2d      	ble.n	800dc1c <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 800dbc0:	1e48      	subs	r0, r1, #1
 800dbc2:	b280      	uxth	r0, r0
 800dbc4:	4288      	cmp	r0, r1
 800dbc6:	d31a      	bcc.n	800dbfe <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 800dbc8:	4b1a      	ldr	r3, [pc, #104]	; (800dc34 <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 800dbca:	f240 11a9 	movw	r1, #425	; 0x1a9
 800dbce:	4a1a      	ldr	r2, [pc, #104]	; (800dc38 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 800dbd0:	481a      	ldr	r0, [pc, #104]	; (800dc3c <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 800dbd2:	f00b f953 	bl	8018e7c <__assert_func>
 800dbd6:	18e1      	adds	r1, r4, r3
 800dbd8:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 800dbdc:	b16d      	cbz	r5, 800dbfa <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	d00a      	beq.n	800dbf8 <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 800dbe2:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800dbe6:	4431      	add	r1, r6
 800dbe8:	684e      	ldr	r6, [r1, #4]
 800dbea:	b291      	uxth	r1, r2
 800dbec:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800dbf0:	604e      	str	r6, [r1, #4]
 800dbf2:	18a1      	adds	r1, r4, r2
 800dbf4:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 800dbf8:	3201      	adds	r2, #1
 800dbfa:	3301      	adds	r3, #1
 800dbfc:	e7d9      	b.n	800dbb2 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 800dbfe:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 800dc02:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800dc06:	3304      	adds	r3, #4
 800dc08:	428b      	cmp	r3, r1
 800dc0a:	d004      	beq.n	800dc16 <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 800dc0c:	f853 6f04 	ldr.w	r6, [r3, #4]!
 800dc10:	f843 6c04 	str.w	r6, [r3, #-4]
 800dc14:	e7f8      	b.n	800dc08 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 800dc16:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 800dc1a:	e7cd      	b.n	800dbb8 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 800dc1c:	4b04      	ldr	r3, [pc, #16]	; (800dc30 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 800dc1e:	6818      	ldr	r0, [r3, #0]
 800dc20:	b110      	cbz	r0, 800dc28 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 800dc22:	6803      	ldr	r3, [r0, #0]
 800dc24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc26:	e79a      	b.n	800db5e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 800dc28:	bd70      	pop	{r4, r5, r6, pc}
 800dc2a:	bf00      	nop
 800dc2c:	240068d4 	.word	0x240068d4
 800dc30:	240068d0 	.word	0x240068d0
 800dc34:	0801c061 	.word	0x0801c061
 800dc38:	0801c24c 	.word	0x0801c24c
 800dc3c:	0801c06f 	.word	0x0801c06f

0800dc40 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800dc40:	b570      	push	{r4, r5, r6, lr}
 800dc42:	4606      	mov	r6, r0
 800dc44:	460c      	mov	r4, r1
 800dc46:	b929      	cbnz	r1, 800dc54 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 800dc48:	4b0c      	ldr	r3, [pc, #48]	; (800dc7c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 800dc4a:	2167      	movs	r1, #103	; 0x67
 800dc4c:	4a0c      	ldr	r2, [pc, #48]	; (800dc80 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 800dc4e:	480d      	ldr	r0, [pc, #52]	; (800dc84 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 800dc50:	f00b f914 	bl	8018e7c <__assert_func>
 800dc54:	2300      	movs	r3, #0
 800dc56:	4d0c      	ldr	r5, [pc, #48]	; (800dc88 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 800dc58:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 800dc5c:	6828      	ldr	r0, [r5, #0]
 800dc5e:	b110      	cbz	r0, 800dc66 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 800dc60:	6803      	ldr	r3, [r0, #0]
 800dc62:	695b      	ldr	r3, [r3, #20]
 800dc64:	4798      	blx	r3
 800dc66:	602c      	str	r4, [r5, #0]
 800dc68:	4620      	mov	r0, r4
 800dc6a:	6823      	ldr	r3, [r4, #0]
 800dc6c:	68db      	ldr	r3, [r3, #12]
 800dc6e:	4798      	blx	r3
 800dc70:	6833      	ldr	r3, [r6, #0]
 800dc72:	4630      	mov	r0, r6
 800dc74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc7a:	4718      	bx	r3
 800dc7c:	0801c02d 	.word	0x0801c02d
 800dc80:	0801c10c 	.word	0x0801c10c
 800dc84:	0801c037 	.word	0x0801c037
 800dc88:	240068d0 	.word	0x240068d0

0800dc8c <_ZNK8touchgfx4Rect8includesERKS0_>:
 800dc8c:	b570      	push	{r4, r5, r6, lr}
 800dc8e:	f9b1 4000 	ldrsh.w	r4, [r1]
 800dc92:	f9b0 5000 	ldrsh.w	r5, [r0]
 800dc96:	42ac      	cmp	r4, r5
 800dc98:	db18      	blt.n	800dccc <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 800dc9a:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800dc9e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800dca2:	429a      	cmp	r2, r3
 800dca4:	db12      	blt.n	800dccc <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 800dca6:	8886      	ldrh	r6, [r0, #4]
 800dca8:	4435      	add	r5, r6
 800dcaa:	888e      	ldrh	r6, [r1, #4]
 800dcac:	4434      	add	r4, r6
 800dcae:	b22d      	sxth	r5, r5
 800dcb0:	b224      	sxth	r4, r4
 800dcb2:	42a5      	cmp	r5, r4
 800dcb4:	db0a      	blt.n	800dccc <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 800dcb6:	88c0      	ldrh	r0, [r0, #6]
 800dcb8:	4418      	add	r0, r3
 800dcba:	88cb      	ldrh	r3, [r1, #6]
 800dcbc:	441a      	add	r2, r3
 800dcbe:	b200      	sxth	r0, r0
 800dcc0:	b212      	sxth	r2, r2
 800dcc2:	4290      	cmp	r0, r2
 800dcc4:	bfb4      	ite	lt
 800dcc6:	2000      	movlt	r0, #0
 800dcc8:	2001      	movge	r0, #1
 800dcca:	bd70      	pop	{r4, r5, r6, pc}
 800dccc:	2000      	movs	r0, #0
 800dcce:	e7fc      	b.n	800dcca <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0800dcd0 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800dcd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcd2:	4604      	mov	r4, r0
 800dcd4:	4608      	mov	r0, r1
 800dcd6:	460d      	mov	r5, r1
 800dcd8:	f7fc fa77 	bl	800a1ca <_ZNK8touchgfx4Rect7isEmptyEv>
 800dcdc:	b978      	cbnz	r0, 800dcfe <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800dcde:	4620      	mov	r0, r4
 800dce0:	f7fc fa73 	bl	800a1ca <_ZNK8touchgfx4Rect7isEmptyEv>
 800dce4:	f9b5 6000 	ldrsh.w	r6, [r5]
 800dce8:	b150      	cbz	r0, 800dd00 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800dcea:	8026      	strh	r6, [r4, #0]
 800dcec:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800dcf0:	8063      	strh	r3, [r4, #2]
 800dcf2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800dcf6:	80a3      	strh	r3, [r4, #4]
 800dcf8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800dcfc:	80e3      	strh	r3, [r4, #6]
 800dcfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd00:	f9b4 1000 	ldrsh.w	r1, [r4]
 800dd04:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800dd08:	42b1      	cmp	r1, r6
 800dd0a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800dd0e:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800dd12:	460f      	mov	r7, r1
 800dd14:	88ed      	ldrh	r5, [r5, #6]
 800dd16:	bfa8      	it	ge
 800dd18:	4637      	movge	r7, r6
 800dd1a:	4293      	cmp	r3, r2
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	4466      	add	r6, ip
 800dd20:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800dd24:	bfa8      	it	ge
 800dd26:	4610      	movge	r0, r2
 800dd28:	442a      	add	r2, r5
 800dd2a:	88e5      	ldrh	r5, [r4, #6]
 800dd2c:	4461      	add	r1, ip
 800dd2e:	b236      	sxth	r6, r6
 800dd30:	8027      	strh	r7, [r4, #0]
 800dd32:	442b      	add	r3, r5
 800dd34:	b209      	sxth	r1, r1
 800dd36:	b212      	sxth	r2, r2
 800dd38:	8060      	strh	r0, [r4, #2]
 800dd3a:	b21b      	sxth	r3, r3
 800dd3c:	428e      	cmp	r6, r1
 800dd3e:	bfac      	ite	ge
 800dd40:	ebc7 0106 	rsbge	r1, r7, r6
 800dd44:	ebc7 0101 	rsblt	r1, r7, r1
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	bfac      	ite	ge
 800dd4c:	ebc0 0202 	rsbge	r2, r0, r2
 800dd50:	ebc0 0203 	rsblt	r2, r0, r3
 800dd54:	80a1      	strh	r1, [r4, #4]
 800dd56:	80e2      	strh	r2, [r4, #6]
 800dd58:	e7d1      	b.n	800dcfe <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0800dd5c <_ZN8touchgfx11Application11getInstanceEv>:
 800dd5c:	4b01      	ldr	r3, [pc, #4]	; (800dd64 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800dd5e:	6818      	ldr	r0, [r3, #0]
 800dd60:	4770      	bx	lr
 800dd62:	bf00      	nop
 800dd64:	240068e0 	.word	0x240068e0

0800dd68 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 800dd68:	2300      	movs	r3, #0
 800dd6a:	f100 0288 	add.w	r2, r0, #136	; 0x88
 800dd6e:	30a8      	adds	r0, #168	; 0xa8
 800dd70:	f820 3c24 	strh.w	r3, [r0, #-36]
 800dd74:	f802 3b01 	strb.w	r3, [r2], #1
 800dd78:	4282      	cmp	r2, r0
 800dd7a:	d1fb      	bne.n	800dd74 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 800dd7c:	4770      	bx	lr

0800dd7e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800dd7e:	4603      	mov	r3, r0
 800dd80:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800dd84:	2200      	movs	r2, #0
 800dd86:	801a      	strh	r2, [r3, #0]
 800dd88:	3308      	adds	r3, #8
 800dd8a:	f823 2c06 	strh.w	r2, [r3, #-6]
 800dd8e:	f823 2c04 	strh.w	r2, [r3, #-4]
 800dd92:	f823 2c02 	strh.w	r2, [r3, #-2]
 800dd96:	428b      	cmp	r3, r1
 800dd98:	d1f5      	bne.n	800dd86 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800dd9a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800dd9e:	4770      	bx	lr

0800dda0 <_ZN8touchgfx11ApplicationC1Ev>:
 800dda0:	b570      	push	{r4, r5, r6, lr}
 800dda2:	4b1a      	ldr	r3, [pc, #104]	; (800de0c <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 800dda4:	2500      	movs	r5, #0
 800dda6:	4604      	mov	r4, r0
 800dda8:	30a8      	adds	r0, #168	; 0xa8
 800ddaa:	f840 3ca8 	str.w	r3, [r0, #-168]
 800ddae:	f820 5c24 	strh.w	r5, [r0, #-36]
 800ddb2:	f7ff ffe4 	bl	800dd7e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800ddb6:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 800ddba:	f7ff ffe0 	bl	800dd7e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800ddbe:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 800ddc2:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 800ddc6:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 800ddca:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 800ddce:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 800ddd2:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 800ddd6:	490e      	ldr	r1, [pc, #56]	; (800de10 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 800ddd8:	480e      	ldr	r0, [pc, #56]	; (800de14 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 800ddda:	f00a fe13 	bl	8018a04 <CRC_Lock>
 800ddde:	4e0e      	ldr	r6, [pc, #56]	; (800de18 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 800dde0:	4b0e      	ldr	r3, [pc, #56]	; (800de1c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 800dde2:	b158      	cbz	r0, 800ddfc <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 800dde4:	801d      	strh	r5, [r3, #0]
 800dde6:	2300      	movs	r3, #0
 800dde8:	4a0d      	ldr	r2, [pc, #52]	; (800de20 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 800ddea:	4620      	mov	r0, r4
 800ddec:	6013      	str	r3, [r2, #0]
 800ddee:	4a0d      	ldr	r2, [pc, #52]	; (800de24 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 800ddf0:	6033      	str	r3, [r6, #0]
 800ddf2:	6013      	str	r3, [r2, #0]
 800ddf4:	f7ff ffb8 	bl	800dd68 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 800ddf8:	4620      	mov	r0, r4
 800ddfa:	bd70      	pop	{r4, r5, r6, pc}
 800ddfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800de00:	2002      	movs	r0, #2
 800de02:	801a      	strh	r2, [r3, #0]
 800de04:	6030      	str	r0, [r6, #0]
 800de06:	f001 fa19 	bl	800f23c <_ZN8touchgfx6Screen4drawEv>
 800de0a:	e7ec      	b.n	800dde6 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 800de0c:	0801c0d0 	.word	0x0801c0d0
 800de10:	b5e8b5cd 	.word	0xb5e8b5cd
 800de14:	f407a5c2 	.word	0xf407a5c2
 800de18:	240068d0 	.word	0x240068d0
 800de1c:	24000080 	.word	0x24000080
 800de20:	240068e0 	.word	0x240068e0
 800de24:	240068d4 	.word	0x240068d4

0800de28 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800de28:	b510      	push	{r4, lr}
 800de2a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800de2e:	428b      	cmp	r3, r1
 800de30:	d806      	bhi.n	800de40 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 800de32:	4b0b      	ldr	r3, [pc, #44]	; (800de60 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 800de34:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800de38:	4a0a      	ldr	r2, [pc, #40]	; (800de64 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 800de3a:	480b      	ldr	r0, [pc, #44]	; (800de68 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 800de3c:	f00b f81e 	bl	8018e7c <__assert_func>
 800de40:	3b01      	subs	r3, #1
 800de42:	b29b      	uxth	r3, r3
 800de44:	428b      	cmp	r3, r1
 800de46:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 800de4a:	d908      	bls.n	800de5e <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 800de4c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800de50:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800de54:	681a      	ldr	r2, [r3, #0]
 800de56:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 800de5a:	685a      	ldr	r2, [r3, #4]
 800de5c:	6062      	str	r2, [r4, #4]
 800de5e:	bd10      	pop	{r4, pc}
 800de60:	0801c061 	.word	0x0801c061
 800de64:	0801c150 	.word	0x0801c150
 800de68:	0801c06f 	.word	0x0801c06f

0800de6c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 800de6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de6e:	466b      	mov	r3, sp
 800de70:	4604      	mov	r4, r0
 800de72:	e883 0006 	stmia.w	r3, {r1, r2}
 800de76:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 800de7a:	2a07      	cmp	r2, #7
 800de7c:	d906      	bls.n	800de8c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 800de7e:	4b09      	ldr	r3, [pc, #36]	; (800dea4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 800de80:	f44f 71c1 	mov.w	r1, #386	; 0x182
 800de84:	4a08      	ldr	r2, [pc, #32]	; (800dea8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 800de86:	4809      	ldr	r0, [pc, #36]	; (800deac <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 800de88:	f00a fff8 	bl	8018e7c <__assert_func>
 800de8c:	1c51      	adds	r1, r2, #1
 800de8e:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 800de92:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 800de96:	cb03      	ldmia	r3!, {r0, r1}
 800de98:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 800de9c:	6069      	str	r1, [r5, #4]
 800de9e:	b003      	add	sp, #12
 800dea0:	bd30      	pop	{r4, r5, pc}
 800dea2:	bf00      	nop
 800dea4:	0801c098 	.word	0x0801c098
 800dea8:	0801c1e6 	.word	0x0801c1e6
 800deac:	0801c06f 	.word	0x0801c06f

0800deb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800deb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deb4:	b08d      	sub	sp, #52	; 0x34
 800deb6:	4683      	mov	fp, r0
 800deb8:	ac08      	add	r4, sp, #32
 800deba:	4620      	mov	r0, r4
 800debc:	e884 0006 	stmia.w	r4, {r1, r2}
 800dec0:	f7fc f983 	bl	800a1ca <_ZNK8touchgfx4Rect7isEmptyEv>
 800dec4:	2800      	cmp	r0, #0
 800dec6:	d16a      	bne.n	800df9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 800dec8:	9402      	str	r4, [sp, #8]
 800deca:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 800dece:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 800ded2:	2400      	movs	r4, #0
 800ded4:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 800ded8:	9301      	str	r3, [sp, #4]
 800deda:	36a0      	adds	r6, #160	; 0xa0
 800dedc:	42a5      	cmp	r5, r4
 800dede:	d00d      	beq.n	800defc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 800dee0:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 800dee4:	9802      	ldr	r0, [sp, #8]
 800dee6:	f7ff fed1 	bl	800dc8c <_ZNK8touchgfx4Rect8includesERKS0_>
 800deea:	b128      	cbz	r0, 800def8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 800deec:	1e69      	subs	r1, r5, #1
 800deee:	9801      	ldr	r0, [sp, #4]
 800def0:	1b09      	subs	r1, r1, r4
 800def2:	b289      	uxth	r1, r1
 800def4:	f7ff ff98 	bl	800de28 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800def8:	3401      	adds	r4, #1
 800defa:	e7ef      	b.n	800dedc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800defc:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 800df00:	1e7b      	subs	r3, r7, #1
 800df02:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 800df06:	9703      	str	r7, [sp, #12]
 800df08:	9300      	str	r3, [sp, #0]
 800df0a:	2400      	movs	r4, #0
 800df0c:	4655      	mov	r5, sl
 800df0e:	9704      	str	r7, [sp, #16]
 800df10:	4626      	mov	r6, r4
 800df12:	9b04      	ldr	r3, [sp, #16]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d078      	beq.n	800e00a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 800df18:	9902      	ldr	r1, [sp, #8]
 800df1a:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 800df1e:	f7fd ff39 	bl	800bd94 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800df22:	b360      	cbz	r0, 800df7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 800df24:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 800df28:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 800df2c:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 800df30:	45e6      	cmp	lr, ip
 800df32:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 800df36:	db35      	blt.n	800dfa4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 800df38:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800df3c:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 800df40:	4472      	add	r2, lr
 800df42:	4463      	add	r3, ip
 800df44:	b212      	sxth	r2, r2
 800df46:	b21b      	sxth	r3, r3
 800df48:	429a      	cmp	r2, r3
 800df4a:	dc2b      	bgt.n	800dfa4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 800df4c:	fa1f f288 	uxth.w	r2, r8
 800df50:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 800df54:	45c1      	cmp	r9, r8
 800df56:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800df5a:	4413      	add	r3, r2
 800df5c:	fa1f fc89 	uxth.w	ip, r9
 800df60:	b29b      	uxth	r3, r3
 800df62:	fa0f fe83 	sxth.w	lr, r3
 800df66:	db0f      	blt.n	800df88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 800df68:	eba3 030c 	sub.w	r3, r3, ip
 800df6c:	1ac9      	subs	r1, r1, r3
 800df6e:	b209      	sxth	r1, r1
 800df70:	2900      	cmp	r1, #0
 800df72:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 800df76:	dd12      	ble.n	800df9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 800df78:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 800df7c:	4604      	mov	r4, r0
 800df7e:	9b04      	ldr	r3, [sp, #16]
 800df80:	3d08      	subs	r5, #8
 800df82:	3b01      	subs	r3, #1
 800df84:	9304      	str	r3, [sp, #16]
 800df86:	e7c4      	b.n	800df12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 800df88:	4461      	add	r1, ip
 800df8a:	b209      	sxth	r1, r1
 800df8c:	4571      	cmp	r1, lr
 800df8e:	dc3a      	bgt.n	800e006 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 800df90:	eba2 020c 	sub.w	r2, r2, ip
 800df94:	b212      	sxth	r2, r2
 800df96:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 800df9a:	2a00      	cmp	r2, #0
 800df9c:	dcee      	bgt.n	800df7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 800df9e:	b00d      	add	sp, #52	; 0x34
 800dfa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfa4:	45c1      	cmp	r9, r8
 800dfa6:	db2e      	blt.n	800e006 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 800dfa8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800dfac:	4499      	add	r9, r3
 800dfae:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 800dfb2:	4498      	add	r8, r3
 800dfb4:	fa0f f989 	sxth.w	r9, r9
 800dfb8:	fa0f f888 	sxth.w	r8, r8
 800dfbc:	45c1      	cmp	r9, r8
 800dfbe:	dc22      	bgt.n	800e006 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 800dfc0:	fa1f f28c 	uxth.w	r2, ip
 800dfc4:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 800dfc8:	45e6      	cmp	lr, ip
 800dfca:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800dfce:	4413      	add	r3, r2
 800dfd0:	fa1f f88e 	uxth.w	r8, lr
 800dfd4:	b29b      	uxth	r3, r3
 800dfd6:	fa0f f983 	sxth.w	r9, r3
 800dfda:	db0a      	blt.n	800dff2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 800dfdc:	eba3 0308 	sub.w	r3, r3, r8
 800dfe0:	1ac9      	subs	r1, r1, r3
 800dfe2:	b209      	sxth	r1, r1
 800dfe4:	2900      	cmp	r1, #0
 800dfe6:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 800dfea:	ddd8      	ble.n	800df9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 800dfec:	f8ad 9020 	strh.w	r9, [sp, #32]
 800dff0:	e7c4      	b.n	800df7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 800dff2:	4441      	add	r1, r8
 800dff4:	b209      	sxth	r1, r1
 800dff6:	4549      	cmp	r1, r9
 800dff8:	dc05      	bgt.n	800e006 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 800dffa:	eba2 0208 	sub.w	r2, r2, r8
 800dffe:	b212      	sxth	r2, r2
 800e000:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 800e004:	e7c9      	b.n	800df9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 800e006:	4606      	mov	r6, r0
 800e008:	e7b9      	b.n	800df7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 800e00a:	2c00      	cmp	r4, #0
 800e00c:	f47f af7d 	bne.w	800df0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 800e010:	2e00      	cmp	r6, #0
 800e012:	f000 81dc 	beq.w	800e3ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 800e016:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 800e01a:	4655      	mov	r5, sl
 800e01c:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 800e020:	b2b9      	uxth	r1, r7
 800e022:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800e026:	b2b3      	uxth	r3, r6
 800e028:	9104      	str	r1, [sp, #16]
 800e02a:	9804      	ldr	r0, [sp, #16]
 800e02c:	441a      	add	r2, r3
 800e02e:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800e032:	b292      	uxth	r2, r2
 800e034:	4401      	add	r1, r0
 800e036:	fa0f f882 	sxth.w	r8, r2
 800e03a:	b289      	uxth	r1, r1
 800e03c:	9105      	str	r1, [sp, #20]
 800e03e:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 800e042:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e046:	9b03      	ldr	r3, [sp, #12]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d054      	beq.n	800e0f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 800e04c:	9902      	ldr	r1, [sp, #8]
 800e04e:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 800e052:	f7fd fe9f 	bl	800bd94 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800e056:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e05a:	b1d8      	cbz	r0, 800e094 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800e05c:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 800e060:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 800e064:	4576      	cmp	r6, lr
 800e066:	dc26      	bgt.n	800e0b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800e068:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 800e06c:	44f4      	add	ip, lr
 800e06e:	fa0f fc8c 	sxth.w	ip, ip
 800e072:	45e0      	cmp	r8, ip
 800e074:	db1f      	blt.n	800e0b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800e076:	428f      	cmp	r7, r1
 800e078:	fa1f fc81 	uxth.w	ip, r1
 800e07c:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 800e080:	dc0f      	bgt.n	800e0a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 800e082:	9805      	ldr	r0, [sp, #20]
 800e084:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 800e088:	eba0 0c0c 	sub.w	ip, r0, ip
 800e08c:	eba1 010c 	sub.w	r1, r1, ip
 800e090:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 800e094:	4620      	mov	r0, r4
 800e096:	9903      	ldr	r1, [sp, #12]
 800e098:	3d08      	subs	r5, #8
 800e09a:	4604      	mov	r4, r0
 800e09c:	3901      	subs	r1, #1
 800e09e:	9103      	str	r1, [sp, #12]
 800e0a0:	e7cf      	b.n	800e042 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 800e0a2:	4461      	add	r1, ip
 800e0a4:	b209      	sxth	r1, r1
 800e0a6:	4549      	cmp	r1, r9
 800e0a8:	dcf5      	bgt.n	800e096 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800e0aa:	9904      	ldr	r1, [sp, #16]
 800e0ac:	eba1 0c0c 	sub.w	ip, r1, ip
 800e0b0:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 800e0b4:	e7ee      	b.n	800e094 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800e0b6:	428f      	cmp	r7, r1
 800e0b8:	dced      	bgt.n	800e096 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800e0ba:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 800e0be:	4461      	add	r1, ip
 800e0c0:	b209      	sxth	r1, r1
 800e0c2:	4589      	cmp	r9, r1
 800e0c4:	dbe7      	blt.n	800e096 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800e0c6:	4576      	cmp	r6, lr
 800e0c8:	fa1f fc8e 	uxth.w	ip, lr
 800e0cc:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 800e0d0:	dc08      	bgt.n	800e0e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 800e0d2:	eba2 0c0c 	sub.w	ip, r2, ip
 800e0d6:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 800e0da:	eba1 010c 	sub.w	r1, r1, ip
 800e0de:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 800e0e2:	e7d7      	b.n	800e094 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800e0e4:	4461      	add	r1, ip
 800e0e6:	b209      	sxth	r1, r1
 800e0e8:	4588      	cmp	r8, r1
 800e0ea:	dbd4      	blt.n	800e096 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800e0ec:	eba3 0c0c 	sub.w	ip, r3, ip
 800e0f0:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 800e0f4:	e7ce      	b.n	800e094 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 800e0f6:	2c00      	cmp	r4, #0
 800e0f8:	f000 8169 	beq.w	800e3ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 800e0fc:	9b00      	ldr	r3, [sp, #0]
 800e0fe:	3301      	adds	r3, #1
 800e100:	f000 8165 	beq.w	800e3ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 800e104:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 800e108:	9802      	ldr	r0, [sp, #8]
 800e10a:	4621      	mov	r1, r4
 800e10c:	f7ff fdbe 	bl	800dc8c <_ZNK8touchgfx4Rect8includesERKS0_>
 800e110:	b120      	cbz	r0, 800e11c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 800e112:	f8bd 1000 	ldrh.w	r1, [sp]
 800e116:	9801      	ldr	r0, [sp, #4]
 800e118:	f7ff fe86 	bl	800de28 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800e11c:	9902      	ldr	r1, [sp, #8]
 800e11e:	4620      	mov	r0, r4
 800e120:	f7fd fe38 	bl	800bd94 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800e124:	2800      	cmp	r0, #0
 800e126:	f000 809b 	beq.w	800e260 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 800e12a:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 800e12e:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 800e132:	fa1f f288 	uxth.w	r2, r8
 800e136:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 800e13a:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 800e13e:	19d5      	adds	r5, r2, r7
 800e140:	b2a1      	uxth	r1, r4
 800e142:	45a0      	cmp	r8, r4
 800e144:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 800e148:	fa1f f985 	uxth.w	r9, r5
 800e14c:	440b      	add	r3, r1
 800e14e:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 800e152:	fa0f f589 	sxth.w	r5, r9
 800e156:	b29b      	uxth	r3, r3
 800e158:	9503      	str	r5, [sp, #12]
 800e15a:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 800e15e:	9507      	str	r5, [sp, #28]
 800e160:	f340 809d 	ble.w	800e29e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 800e164:	1a52      	subs	r2, r2, r1
 800e166:	4584      	cmp	ip, r0
 800e168:	fa0f fe83 	sxth.w	lr, r3
 800e16c:	b292      	uxth	r2, r2
 800e16e:	b215      	sxth	r5, r2
 800e170:	dd2f      	ble.n	800e1d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 800e172:	9e00      	ldr	r6, [sp, #0]
 800e174:	fa1f fc8c 	uxth.w	ip, ip
 800e178:	b280      	uxth	r0, r0
 800e17a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800e17e:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 800e182:	9e03      	ldr	r6, [sp, #12]
 800e184:	ebac 0300 	sub.w	r3, ip, r0
 800e188:	448c      	add	ip, r1
 800e18a:	eba6 060e 	sub.w	r6, r6, lr
 800e18e:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 800e192:	b29b      	uxth	r3, r3
 800e194:	4470      	add	r0, lr
 800e196:	fa0f fc8c 	sxth.w	ip, ip
 800e19a:	b21c      	sxth	r4, r3
 800e19c:	b200      	sxth	r0, r0
 800e19e:	4366      	muls	r6, r4
 800e1a0:	ebac 0000 	sub.w	r0, ip, r0
 800e1a4:	4368      	muls	r0, r5
 800e1a6:	4286      	cmp	r6, r0
 800e1a8:	db09      	blt.n	800e1be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 800e1aa:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 800e1ae:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 800e1b2:	4417      	add	r7, r2
 800e1b4:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e1b8:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 800e1bc:	e685      	b.n	800deca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800e1be:	440b      	add	r3, r1
 800e1c0:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 800e1c4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800e1c8:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 800e1cc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800e1d0:	e67b      	b.n	800deca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800e1d2:	9e03      	ldr	r6, [sp, #12]
 800e1d4:	45b6      	cmp	lr, r6
 800e1d6:	da28      	bge.n	800e22a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 800e1d8:	9b00      	ldr	r3, [sp, #0]
 800e1da:	eba6 060e 	sub.w	r6, r6, lr
 800e1de:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 800e1e2:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 800e1e6:	eb04 030c 	add.w	r3, r4, ip
 800e1ea:	fa1f f883 	uxth.w	r8, r3
 800e1ee:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 800e1f2:	4403      	add	r3, r0
 800e1f4:	fa0f f988 	sxth.w	r9, r8
 800e1f8:	eba0 000c 	sub.w	r0, r0, ip
 800e1fc:	eba3 0308 	sub.w	r3, r3, r8
 800e200:	4368      	muls	r0, r5
 800e202:	b29b      	uxth	r3, r3
 800e204:	fa0f f883 	sxth.w	r8, r3
 800e208:	fb08 f606 	mul.w	r6, r8, r6
 800e20c:	42b0      	cmp	r0, r6
 800e20e:	dc06      	bgt.n	800e21e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 800e210:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 800e214:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 800e218:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 800e21c:	e7c9      	b.n	800e1b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 800e21e:	4423      	add	r3, r4
 800e220:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 800e224:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800e228:	e64f      	b.n	800deca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800e22a:	eba3 0309 	sub.w	r3, r3, r9
 800e22e:	9807      	ldr	r0, [sp, #28]
 800e230:	b29b      	uxth	r3, r3
 800e232:	2806      	cmp	r0, #6
 800e234:	fa0f fc83 	sxth.w	ip, r3
 800e238:	d818      	bhi.n	800e26c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 800e23a:	4652      	mov	r2, sl
 800e23c:	ab0a      	add	r3, sp, #40	; 0x28
 800e23e:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 800e242:	6851      	ldr	r1, [r2, #4]
 800e244:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 800e248:	c303      	stmia	r3!, {r0, r1}
 800e24a:	9b03      	ldr	r3, [sp, #12]
 800e24c:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 800e250:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 800e254:	ab0a      	add	r3, sp, #40	; 0x28
 800e256:	9801      	ldr	r0, [sp, #4]
 800e258:	e893 0006 	ldmia.w	r3, {r1, r2}
 800e25c:	f7ff fe06 	bl	800de6c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800e260:	9b00      	ldr	r3, [sp, #0]
 800e262:	f1aa 0a08 	sub.w	sl, sl, #8
 800e266:	3b01      	subs	r3, #1
 800e268:	9300      	str	r3, [sp, #0]
 800e26a:	e747      	b.n	800e0fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 800e26c:	9800      	ldr	r0, [sp, #0]
 800e26e:	45ac      	cmp	ip, r5
 800e270:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 800e274:	db0c      	blt.n	800e290 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 800e276:	4417      	add	r7, r2
 800e278:	4458      	add	r0, fp
 800e27a:	f8ad 4020 	strh.w	r4, [sp, #32]
 800e27e:	b2bf      	uxth	r7, r7
 800e280:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 800e284:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 800e288:	440f      	add	r7, r1
 800e28a:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 800e28e:	e61c      	b.n	800deca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800e290:	4458      	add	r0, fp
 800e292:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 800e296:	443b      	add	r3, r7
 800e298:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800e29c:	e615      	b.n	800deca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800e29e:	fa1f f18c 	uxth.w	r1, ip
 800e2a2:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 800e2a6:	b282      	uxth	r2, r0
 800e2a8:	4584      	cmp	ip, r0
 800e2aa:	eb01 0e05 	add.w	lr, r1, r5
 800e2ae:	9204      	str	r2, [sp, #16]
 800e2b0:	fa1f fe8e 	uxth.w	lr, lr
 800e2b4:	9e04      	ldr	r6, [sp, #16]
 800e2b6:	fa0f f28e 	sxth.w	r2, lr
 800e2ba:	9205      	str	r2, [sp, #20]
 800e2bc:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 800e2c0:	4432      	add	r2, r6
 800e2c2:	b292      	uxth	r2, r2
 800e2c4:	9206      	str	r2, [sp, #24]
 800e2c6:	da26      	bge.n	800e316 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 800e2c8:	eba3 0309 	sub.w	r3, r3, r9
 800e2cc:	eba2 020e 	sub.w	r2, r2, lr
 800e2d0:	eba0 000c 	sub.w	r0, r0, ip
 800e2d4:	eba4 0408 	sub.w	r4, r4, r8
 800e2d8:	b29b      	uxth	r3, r3
 800e2da:	b292      	uxth	r2, r2
 800e2dc:	fa0f fa83 	sxth.w	sl, r3
 800e2e0:	b211      	sxth	r1, r2
 800e2e2:	fb0a f000 	mul.w	r0, sl, r0
 800e2e6:	434c      	muls	r4, r1
 800e2e8:	42a0      	cmp	r0, r4
 800e2ea:	9800      	ldr	r0, [sp, #0]
 800e2ec:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 800e2f0:	dc06      	bgt.n	800e300 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 800e2f2:	4458      	add	r0, fp
 800e2f4:	9a05      	ldr	r2, [sp, #20]
 800e2f6:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 800e2fa:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 800e2fe:	e7ca      	b.n	800e296 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 800e300:	eb0b 0300 	add.w	r3, fp, r0
 800e304:	9903      	ldr	r1, [sp, #12]
 800e306:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 800e30a:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 800e30e:	442a      	add	r2, r5
 800e310:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 800e314:	e5d9      	b.n	800deca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800e316:	9e04      	ldr	r6, [sp, #16]
 800e318:	9a03      	ldr	r2, [sp, #12]
 800e31a:	1b89      	subs	r1, r1, r6
 800e31c:	b21e      	sxth	r6, r3
 800e31e:	b289      	uxth	r1, r1
 800e320:	4296      	cmp	r6, r2
 800e322:	fa0f fc81 	sxth.w	ip, r1
 800e326:	dd25      	ble.n	800e374 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 800e328:	eba3 0309 	sub.w	r3, r3, r9
 800e32c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 800e330:	9e05      	ldr	r6, [sp, #20]
 800e332:	eba4 0408 	sub.w	r4, r4, r8
 800e336:	b29b      	uxth	r3, r3
 800e338:	eba6 0902 	sub.w	r9, r6, r2
 800e33c:	fb0c f404 	mul.w	r4, ip, r4
 800e340:	b218      	sxth	r0, r3
 800e342:	9a00      	ldr	r2, [sp, #0]
 800e344:	fb00 f909 	mul.w	r9, r0, r9
 800e348:	00d2      	lsls	r2, r2, #3
 800e34a:	454c      	cmp	r4, r9
 800e34c:	db03      	blt.n	800e356 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 800e34e:	445a      	add	r2, fp
 800e350:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 800e354:	e79f      	b.n	800e296 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 800e356:	eb0b 0302 	add.w	r3, fp, r2
 800e35a:	9a03      	ldr	r2, [sp, #12]
 800e35c:	4429      	add	r1, r5
 800e35e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 800e362:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 800e366:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800e36a:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 800e36e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800e372:	e5aa      	b.n	800deca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800e374:	9b06      	ldr	r3, [sp, #24]
 800e376:	9c07      	ldr	r4, [sp, #28]
 800e378:	eba3 020e 	sub.w	r2, r3, lr
 800e37c:	2c06      	cmp	r4, #6
 800e37e:	b292      	uxth	r2, r2
 800e380:	b213      	sxth	r3, r2
 800e382:	d80d      	bhi.n	800e3a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 800e384:	4651      	mov	r1, sl
 800e386:	aa0a      	add	r2, sp, #40	; 0x28
 800e388:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 800e38c:	6849      	ldr	r1, [r1, #4]
 800e38e:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 800e392:	9b05      	ldr	r3, [sp, #20]
 800e394:	c203      	stmia	r2!, {r0, r1}
 800e396:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 800e39a:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 800e39e:	e759      	b.n	800e254 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 800e3a0:	9c00      	ldr	r4, [sp, #0]
 800e3a2:	4563      	cmp	r3, ip
 800e3a4:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800e3a8:	db0d      	blt.n	800e3c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 800e3aa:	4429      	add	r1, r5
 800e3ac:	9a04      	ldr	r2, [sp, #16]
 800e3ae:	445c      	add	r4, fp
 800e3b0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800e3b4:	b289      	uxth	r1, r1
 800e3b6:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 800e3ba:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 800e3be:	4411      	add	r1, r2
 800e3c0:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 800e3c4:	e581      	b.n	800deca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800e3c6:	445c      	add	r4, fp
 800e3c8:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 800e3cc:	e79f      	b.n	800e30e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 800e3ce:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 800e3d2:	2f07      	cmp	r7, #7
 800e3d4:	d806      	bhi.n	800e3e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 800e3d6:	ab08      	add	r3, sp, #32
 800e3d8:	9801      	ldr	r0, [sp, #4]
 800e3da:	e893 0006 	ldmia.w	r3, {r1, r2}
 800e3de:	f7ff fd45 	bl	800de6c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800e3e2:	e5dc      	b.n	800df9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 800e3e4:	f107 39ff 	add.w	r9, r7, #4294967295
 800e3e8:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 800e3ec:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 800e3f0:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800e3f4:	f04f 35ff 	mov.w	r5, #4294967295
 800e3f8:	2400      	movs	r4, #0
 800e3fa:	9304      	str	r3, [sp, #16]
 800e3fc:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 800e400:	f109 32ff 	add.w	r2, r9, #4294967295
 800e404:	9300      	str	r3, [sp, #0]
 800e406:	4690      	mov	r8, r2
 800e408:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 800e40c:	9303      	str	r3, [sp, #12]
 800e40e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800e412:	f1b8 3fff 	cmp.w	r8, #4294967295
 800e416:	6818      	ldr	r0, [r3, #0]
 800e418:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 800e41c:	9206      	str	r2, [sp, #24]
 800e41e:	bf16      	itet	ne
 800e420:	9904      	ldrne	r1, [sp, #16]
 800e422:	f8dd e008 	ldreq.w	lr, [sp, #8]
 800e426:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 800e42a:	9305      	str	r3, [sp, #20]
 800e42c:	f8be 1006 	ldrh.w	r1, [lr, #6]
 800e430:	f8be 6004 	ldrh.w	r6, [lr, #4]
 800e434:	fb16 f601 	smulbb	r6, r6, r1
 800e438:	6859      	ldr	r1, [r3, #4]
 800e43a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800e43e:	4671      	mov	r1, lr
 800e440:	a80a      	add	r0, sp, #40	; 0x28
 800e442:	f7ff fc45 	bl	800dcd0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800e446:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 800e44a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 800e44e:	9b03      	ldr	r3, [sp, #12]
 800e450:	9a00      	ldr	r2, [sp, #0]
 800e452:	fb11 f100 	smulbb	r1, r1, r0
 800e456:	2008      	movs	r0, #8
 800e458:	fb02 6603 	mla	r6, r2, r3, r6
 800e45c:	1b8e      	subs	r6, r1, r6
 800e45e:	fb91 f1f0 	sdiv	r1, r1, r0
 800e462:	42b1      	cmp	r1, r6
 800e464:	dc21      	bgt.n	800e4aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 800e466:	4556      	cmp	r6, sl
 800e468:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 800e46c:	da03      	bge.n	800e476 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 800e46e:	b1e6      	cbz	r6, 800e4aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 800e470:	46b2      	mov	sl, r6
 800e472:	4645      	mov	r5, r8
 800e474:	464c      	mov	r4, r9
 800e476:	f108 38ff 	add.w	r8, r8, #4294967295
 800e47a:	f118 0f02 	cmn.w	r8, #2
 800e47e:	d1c8      	bne.n	800e412 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 800e480:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e484:	f1a7 0708 	sub.w	r7, r7, #8
 800e488:	4691      	mov	r9, r2
 800e48a:	d1b7      	bne.n	800e3fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 800e48c:	9b01      	ldr	r3, [sp, #4]
 800e48e:	b2a6      	uxth	r6, r4
 800e490:	00e4      	lsls	r4, r4, #3
 800e492:	1918      	adds	r0, r3, r4
 800e494:	1c6b      	adds	r3, r5, #1
 800e496:	d10b      	bne.n	800e4b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 800e498:	4601      	mov	r1, r0
 800e49a:	9802      	ldr	r0, [sp, #8]
 800e49c:	f7ff fc18 	bl	800dcd0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800e4a0:	4631      	mov	r1, r6
 800e4a2:	9801      	ldr	r0, [sp, #4]
 800e4a4:	f7ff fcc0 	bl	800de28 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800e4a8:	e50f      	b.n	800deca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 800e4aa:	4645      	mov	r5, r8
 800e4ac:	464c      	mov	r4, r9
 800e4ae:	e7ed      	b.n	800e48c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 800e4b0:	9b01      	ldr	r3, [sp, #4]
 800e4b2:	00ed      	lsls	r5, r5, #3
 800e4b4:	445c      	add	r4, fp
 800e4b6:	1959      	adds	r1, r3, r5
 800e4b8:	445d      	add	r5, fp
 800e4ba:	f7ff fc09 	bl	800dcd0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800e4be:	9b02      	ldr	r3, [sp, #8]
 800e4c0:	cb03      	ldmia	r3!, {r0, r1}
 800e4c2:	9b02      	ldr	r3, [sp, #8]
 800e4c4:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 800e4c8:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 800e4cc:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 800e4d0:	6861      	ldr	r1, [r4, #4]
 800e4d2:	c303      	stmia	r3!, {r0, r1}
 800e4d4:	e7e4      	b.n	800e4a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

0800e4d8 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800e4d8:	4b1d      	ldr	r3, [pc, #116]	; (800e550 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 800e4da:	b530      	push	{r4, r5, lr}
 800e4dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e4e0:	b085      	sub	sp, #20
 800e4e2:	4b1c      	ldr	r3, [pc, #112]	; (800e554 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 800e4e4:	460c      	mov	r4, r1
 800e4e6:	2100      	movs	r1, #0
 800e4e8:	4605      	mov	r5, r0
 800e4ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e4ee:	6820      	ldr	r0, [r4, #0]
 800e4f0:	9100      	str	r1, [sp, #0]
 800e4f2:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e4f6:	ab02      	add	r3, sp, #8
 800e4f8:	6861      	ldr	r1, [r4, #4]
 800e4fa:	f8ad 2004 	strh.w	r2, [sp, #4]
 800e4fe:	c303      	stmia	r3!, {r0, r1}
 800e500:	4669      	mov	r1, sp
 800e502:	a802      	add	r0, sp, #8
 800e504:	f7fb fe1e 	bl	800a144 <_ZN8touchgfx4RectaNERKS0_>
 800e508:	ab02      	add	r3, sp, #8
 800e50a:	cb03      	ldmia	r3!, {r0, r1}
 800e50c:	4b12      	ldr	r3, [pc, #72]	; (800e558 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 800e50e:	6020      	str	r0, [r4, #0]
 800e510:	6818      	ldr	r0, [r3, #0]
 800e512:	6061      	str	r1, [r4, #4]
 800e514:	b138      	cbz	r0, 800e526 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 800e516:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 800e51a:	b133      	cbz	r3, 800e52a <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 800e51c:	6821      	ldr	r1, [r4, #0]
 800e51e:	4628      	mov	r0, r5
 800e520:	6862      	ldr	r2, [r4, #4]
 800e522:	f7ff fcc5 	bl	800deb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800e526:	b005      	add	sp, #20
 800e528:	bd30      	pop	{r4, r5, pc}
 800e52a:	6803      	ldr	r3, [r0, #0]
 800e52c:	4621      	mov	r1, r4
 800e52e:	689b      	ldr	r3, [r3, #8]
 800e530:	4798      	blx	r3
 800e532:	4b0a      	ldr	r3, [pc, #40]	; (800e55c <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 800e534:	6818      	ldr	r0, [r3, #0]
 800e536:	b118      	cbz	r0, 800e540 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 800e538:	6803      	ldr	r3, [r0, #0]
 800e53a:	4621      	mov	r1, r4
 800e53c:	689b      	ldr	r3, [r3, #8]
 800e53e:	4798      	blx	r3
 800e540:	4b07      	ldr	r3, [pc, #28]	; (800e560 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 800e542:	4621      	mov	r1, r4
 800e544:	6818      	ldr	r0, [r3, #0]
 800e546:	6803      	ldr	r3, [r0, #0]
 800e548:	69db      	ldr	r3, [r3, #28]
 800e54a:	4798      	blx	r3
 800e54c:	e7eb      	b.n	800e526 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 800e54e:	bf00      	nop
 800e550:	24006888 	.word	0x24006888
 800e554:	2400688a 	.word	0x2400688a
 800e558:	240068d0 	.word	0x240068d0
 800e55c:	240068cc 	.word	0x240068cc
 800e560:	24006894 	.word	0x24006894

0800e564 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 800e564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e568:	4604      	mov	r4, r0
 800e56a:	b09b      	sub	sp, #108	; 0x6c
 800e56c:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 800e570:	b129      	cbz	r1, 800e57e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 800e572:	2300      	movs	r3, #0
 800e574:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 800e578:	b01b      	add	sp, #108	; 0x6c
 800e57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e57e:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 800e582:	4630      	mov	r0, r6
 800e584:	f7fb fe21 	bl	800a1ca <_ZNK8touchgfx4Rect7isEmptyEv>
 800e588:	4605      	mov	r5, r0
 800e58a:	b940      	cbnz	r0, 800e59e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 800e58c:	4620      	mov	r0, r4
 800e58e:	e896 0006 	ldmia.w	r6, {r1, r2}
 800e592:	f7ff fc8d 	bl	800deb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800e596:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 800e59a:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 800e59e:	4ba6      	ldr	r3, [pc, #664]	; (800e838 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	b33b      	cbz	r3, 800e5f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 800e5a4:	4da5      	ldr	r5, [pc, #660]	; (800e83c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 800e5a6:	4628      	mov	r0, r5
 800e5a8:	f7fb fe0f 	bl	800a1ca <_ZNK8touchgfx4Rect7isEmptyEv>
 800e5ac:	4606      	mov	r6, r0
 800e5ae:	bb08      	cbnz	r0, 800e5f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 800e5b0:	4628      	mov	r0, r5
 800e5b2:	f7ff f9f5 	bl	800d9a0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800e5b6:	6829      	ldr	r1, [r5, #0]
 800e5b8:	686a      	ldr	r2, [r5, #4]
 800e5ba:	4620      	mov	r0, r4
 800e5bc:	f7ff fc78 	bl	800deb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800e5c0:	802e      	strh	r6, [r5, #0]
 800e5c2:	806e      	strh	r6, [r5, #2]
 800e5c4:	80ae      	strh	r6, [r5, #4]
 800e5c6:	80ee      	strh	r6, [r5, #6]
 800e5c8:	4f9d      	ldr	r7, [pc, #628]	; (800e840 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 800e5ca:	a809      	add	r0, sp, #36	; 0x24
 800e5cc:	f7ff fbd7 	bl	800dd7e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800e5d0:	883d      	ldrh	r5, [r7, #0]
 800e5d2:	462e      	mov	r6, r5
 800e5d4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800e5d8:	42b3      	cmp	r3, r6
 800e5da:	d910      	bls.n	800e5fe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 800e5dc:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800e5e0:	3601      	adds	r6, #1
 800e5e2:	a809      	add	r0, sp, #36	; 0x24
 800e5e4:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800e5e8:	b2b6      	uxth	r6, r6
 800e5ea:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800e5ee:	f7ff fc3d 	bl	800de6c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800e5f2:	e7ef      	b.n	800e5d4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 800e5f4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d1e5      	bne.n	800e5c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 800e5fc:	e7bc      	b.n	800e578 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 800e5fe:	462e      	mov	r6, r5
 800e600:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 800e604:	42b3      	cmp	r3, r6
 800e606:	d90b      	bls.n	800e620 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 800e608:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800e60c:	3601      	adds	r6, #1
 800e60e:	4620      	mov	r0, r4
 800e610:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 800e614:	b2b6      	uxth	r6, r6
 800e616:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 800e61a:	f7ff fc49 	bl	800deb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 800e61e:	e7ef      	b.n	800e600 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 800e620:	4a88      	ldr	r2, [pc, #544]	; (800e844 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 800e622:	6813      	ldr	r3, [r2, #0]
 800e624:	4690      	mov	r8, r2
 800e626:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e62a:	2b01      	cmp	r3, #1
 800e62c:	f040 8094 	bne.w	800e758 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 800e630:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 800e634:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 800e638:	f04f 0900 	mov.w	r9, #0
 800e63c:	33aa      	adds	r3, #170	; 0xaa
 800e63e:	42a8      	cmp	r0, r5
 800e640:	f103 0308 	add.w	r3, r3, #8
 800e644:	dd0a      	ble.n	800e65c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 800e646:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 800e64a:	3501      	adds	r5, #1
 800e64c:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 800e650:	440a      	add	r2, r1
 800e652:	b212      	sxth	r2, r2
 800e654:	4591      	cmp	r9, r2
 800e656:	bfb8      	it	lt
 800e658:	4691      	movlt	r9, r2
 800e65a:	e7f0      	b.n	800e63e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 800e65c:	4b7a      	ldr	r3, [pc, #488]	; (800e848 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 800e65e:	4e7b      	ldr	r6, [pc, #492]	; (800e84c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 800e660:	881d      	ldrh	r5, [r3, #0]
 800e662:	2300      	movs	r3, #0
 800e664:	2d0f      	cmp	r5, #15
 800e666:	bf8c      	ite	hi
 800e668:	08ed      	lsrhi	r5, r5, #3
 800e66a:	2501      	movls	r5, #1
 800e66c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800e670:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800e674:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 800e678:	f8d8 0000 	ldr.w	r0, [r8]
 800e67c:	440b      	add	r3, r1
 800e67e:	6802      	ldr	r2, [r0, #0]
 800e680:	b21b      	sxth	r3, r3
 800e682:	4599      	cmp	r9, r3
 800e684:	dd4b      	ble.n	800e71e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 800e686:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800e68a:	4798      	blx	r3
 800e68c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800e690:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800e694:	4413      	add	r3, r2
 800e696:	b21b      	sxth	r3, r3
 800e698:	195a      	adds	r2, r3, r5
 800e69a:	4290      	cmp	r0, r2
 800e69c:	da07      	bge.n	800e6ae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 800e69e:	4581      	cmp	r9, r0
 800e6a0:	dd05      	ble.n	800e6ae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 800e6a2:	4298      	cmp	r0, r3
 800e6a4:	da33      	bge.n	800e70e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	dd31      	ble.n	800e70e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 800e6aa:	4648      	mov	r0, r9
 800e6ac:	e004      	b.n	800e6b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 800e6ae:	4298      	cmp	r0, r3
 800e6b0:	dbfb      	blt.n	800e6aa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 800e6b2:	4548      	cmp	r0, r9
 800e6b4:	bfa8      	it	ge
 800e6b6:	4648      	movge	r0, r9
 800e6b8:	f9b6 2000 	ldrsh.w	r2, [r6]
 800e6bc:	2100      	movs	r1, #0
 800e6be:	1ac0      	subs	r0, r0, r3
 800e6c0:	f8b7 a000 	ldrh.w	sl, [r7]
 800e6c4:	f8ad 1014 	strh.w	r1, [sp, #20]
 800e6c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e6cc:	f8ad 2018 	strh.w	r2, [sp, #24]
 800e6d0:	f8ad 001a 	strh.w	r0, [sp, #26]
 800e6d4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800e6d8:	4553      	cmp	r3, sl
 800e6da:	d9c9      	bls.n	800e670 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 800e6dc:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 800e6e0:	ab07      	add	r3, sp, #28
 800e6e2:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 800e6e6:	6851      	ldr	r1, [r2, #4]
 800e6e8:	c303      	stmia	r3!, {r0, r1}
 800e6ea:	a807      	add	r0, sp, #28
 800e6ec:	a905      	add	r1, sp, #20
 800e6ee:	f7fb fd29 	bl	800a144 <_ZN8touchgfx4RectaNERKS0_>
 800e6f2:	a807      	add	r0, sp, #28
 800e6f4:	f7fb fd69 	bl	800a1ca <_ZNK8touchgfx4Rect7isEmptyEv>
 800e6f8:	b920      	cbnz	r0, 800e704 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 800e6fa:	6823      	ldr	r3, [r4, #0]
 800e6fc:	a907      	add	r1, sp, #28
 800e6fe:	4620      	mov	r0, r4
 800e700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e702:	4798      	blx	r3
 800e704:	f10a 0a01 	add.w	sl, sl, #1
 800e708:	fa1f fa8a 	uxth.w	sl, sl
 800e70c:	e7e2      	b.n	800e6d4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 800e70e:	f8d8 0000 	ldr.w	r0, [r8]
 800e712:	2101      	movs	r1, #1
 800e714:	6803      	ldr	r3, [r0, #0]
 800e716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e71a:	4798      	blx	r3
 800e71c:	e7a8      	b.n	800e670 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 800e71e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800e720:	4798      	blx	r3
 800e722:	4b4b      	ldr	r3, [pc, #300]	; (800e850 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 800e724:	781b      	ldrb	r3, [r3, #0]
 800e726:	2b00      	cmp	r3, #0
 800e728:	f43f af26 	beq.w	800e578 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 800e72c:	2300      	movs	r3, #0
 800e72e:	883d      	ldrh	r5, [r7, #0]
 800e730:	34ea      	adds	r4, #234	; 0xea
 800e732:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 800e736:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 800e73a:	42ab      	cmp	r3, r5
 800e73c:	f67f af1c 	bls.w	800e578 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 800e740:	ab1a      	add	r3, sp, #104	; 0x68
 800e742:	4620      	mov	r0, r4
 800e744:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e748:	3501      	adds	r5, #1
 800e74a:	3b44      	subs	r3, #68	; 0x44
 800e74c:	b2ad      	uxth	r5, r5
 800e74e:	e893 0006 	ldmia.w	r3, {r1, r2}
 800e752:	f7ff fb8b 	bl	800de6c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 800e756:	e7ee      	b.n	800e736 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 800e758:	2b02      	cmp	r3, #2
 800e75a:	f040 813d 	bne.w	800e9d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 800e75e:	4b3d      	ldr	r3, [pc, #244]	; (800e854 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 800e760:	781b      	ldrb	r3, [r3, #0]
 800e762:	2b01      	cmp	r3, #1
 800e764:	d02c      	beq.n	800e7c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 800e766:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 800e76a:	883a      	ldrh	r2, [r7, #0]
 800e76c:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 800e770:	3201      	adds	r2, #1
 800e772:	b292      	uxth	r2, r2
 800e774:	2900      	cmp	r1, #0
 800e776:	d0d4      	beq.n	800e722 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 800e778:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 800e77c:	4610      	mov	r0, r2
 800e77e:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 800e782:	f04f 0a00 	mov.w	sl, #0
 800e786:	441d      	add	r5, r3
 800e788:	b22d      	sxth	r5, r5
 800e78a:	b283      	uxth	r3, r0
 800e78c:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 800e790:	4299      	cmp	r1, r3
 800e792:	f240 80c3 	bls.w	800e91c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 800e796:	4426      	add	r6, r4
 800e798:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 800e79c:	4684      	mov	ip, r0
 800e79e:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 800e7a2:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 800e7a6:	4573      	cmp	r3, lr
 800e7a8:	f340 80a5 	ble.w	800e8f6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 800e7ac:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 800e7b0:	4475      	add	r5, lr
 800e7b2:	b22d      	sxth	r5, r5
 800e7b4:	429d      	cmp	r5, r3
 800e7b6:	bfa8      	it	ge
 800e7b8:	461d      	movge	r5, r3
 800e7ba:	3001      	adds	r0, #1
 800e7bc:	46e2      	mov	sl, ip
 800e7be:	e7e4      	b.n	800e78a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 800e7c0:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 800e7c4:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 800e7c8:	f1bb 0f00 	cmp.w	fp, #0
 800e7cc:	d0a9      	beq.n	800e722 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 800e7ce:	883b      	ldrh	r3, [r7, #0]
 800e7d0:	2600      	movs	r6, #0
 800e7d2:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 800e7d6:	3301      	adds	r3, #1
 800e7d8:	b29b      	uxth	r3, r3
 800e7da:	b299      	uxth	r1, r3
 800e7dc:	00f5      	lsls	r5, r6, #3
 800e7de:	458b      	cmp	fp, r1
 800e7e0:	d93a      	bls.n	800e858 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 800e7e2:	4425      	add	r5, r4
 800e7e4:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 800e7e8:	469c      	mov	ip, r3
 800e7ea:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 800e7ee:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 800e7f2:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 800e7f6:	4408      	add	r0, r1
 800e7f8:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 800e7fc:	4471      	add	r1, lr
 800e7fe:	b200      	sxth	r0, r0
 800e800:	b209      	sxth	r1, r1
 800e802:	4288      	cmp	r0, r1
 800e804:	da06      	bge.n	800e814 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 800e806:	4586      	cmp	lr, r0
 800e808:	4672      	mov	r2, lr
 800e80a:	bfb8      	it	lt
 800e80c:	4602      	movlt	r2, r0
 800e80e:	3301      	adds	r3, #1
 800e810:	4666      	mov	r6, ip
 800e812:	e7e2      	b.n	800e7da <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 800e814:	d10b      	bne.n	800e82e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 800e816:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 800e81a:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 800e81e:	458c      	cmp	ip, r1
 800e820:	bfb4      	ite	lt
 800e822:	469c      	movlt	ip, r3
 800e824:	46b4      	movge	ip, r6
 800e826:	4572      	cmp	r2, lr
 800e828:	bfb8      	it	lt
 800e82a:	4672      	movlt	r2, lr
 800e82c:	e7ef      	b.n	800e80e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 800e82e:	428a      	cmp	r2, r1
 800e830:	46b4      	mov	ip, r6
 800e832:	bfb8      	it	lt
 800e834:	460a      	movlt	r2, r1
 800e836:	e7ea      	b.n	800e80e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 800e838:	240068cc 	.word	0x240068cc
 800e83c:	240068d8 	.word	0x240068d8
 800e840:	24000080 	.word	0x24000080
 800e844:	24006894 	.word	0x24006894
 800e848:	2400688a 	.word	0x2400688a
 800e84c:	24006888 	.word	0x24006888
 800e850:	24006892 	.word	0x24006892
 800e854:	2400688c 	.word	0x2400688c
 800e858:	1961      	adds	r1, r4, r5
 800e85a:	ab07      	add	r3, sp, #28
 800e85c:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 800e860:	6849      	ldr	r1, [r1, #4]
 800e862:	c303      	stmia	r3!, {r0, r1}
 800e864:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800e868:	a807      	add	r0, sp, #28
 800e86a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800e86e:	2b13      	cmp	r3, #19
 800e870:	440b      	add	r3, r1
 800e872:	bfd8      	it	le
 800e874:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 800e878:	1a9b      	subs	r3, r3, r2
 800e87a:	f8ad 201c 	strh.w	r2, [sp, #28]
 800e87e:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e882:	f7ff f8a7 	bl	800d9d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800e886:	a807      	add	r0, sp, #28
 800e888:	f7fb fc9f 	bl	800a1ca <_ZNK8touchgfx4Rect7isEmptyEv>
 800e88c:	2800      	cmp	r0, #0
 800e88e:	d199      	bne.n	800e7c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 800e890:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 800e894:	4425      	add	r5, r4
 800e896:	f8d8 0000 	ldr.w	r0, [r8]
 800e89a:	f1bc 0f14 	cmp.w	ip, #20
 800e89e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800e8a2:	f8d0 e000 	ldr.w	lr, [r0]
 800e8a6:	bfa8      	it	ge
 800e8a8:	f04f 0c14 	movge.w	ip, #20
 800e8ac:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800e8b0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800e8b4:	fa1f fc8c 	uxth.w	ip, ip
 800e8b8:	f8cd c000 	str.w	ip, [sp]
 800e8bc:	f8de a088 	ldr.w	sl, [lr, #136]	; 0x88
 800e8c0:	47d0      	blx	sl
 800e8c2:	4682      	mov	sl, r0
 800e8c4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800e8c8:	a807      	add	r0, sp, #28
 800e8ca:	f7ff f869 	bl	800d9a0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800e8ce:	6823      	ldr	r3, [r4, #0]
 800e8d0:	4620      	mov	r0, r4
 800e8d2:	a907      	add	r1, sp, #28
 800e8d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8d6:	4798      	blx	r3
 800e8d8:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 800e8dc:	eba0 000a 	sub.w	r0, r0, sl
 800e8e0:	b200      	sxth	r0, r0
 800e8e2:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 800e8e6:	2800      	cmp	r0, #0
 800e8e8:	f47f af6c 	bne.w	800e7c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 800e8ec:	b2b1      	uxth	r1, r6
 800e8ee:	4648      	mov	r0, r9
 800e8f0:	f7ff fa9a 	bl	800de28 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800e8f4:	e766      	b.n	800e7c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 800e8f6:	d10c      	bne.n	800e912 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 800e8f8:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 800e8fc:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 800e900:	45b4      	cmp	ip, r6
 800e902:	bfb4      	ite	lt
 800e904:	4684      	movlt	ip, r0
 800e906:	46d4      	movge	ip, sl
 800e908:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 800e90c:	4433      	add	r3, r6
 800e90e:	b21b      	sxth	r3, r3
 800e910:	e750      	b.n	800e7b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 800e912:	4575      	cmp	r5, lr
 800e914:	46d4      	mov	ip, sl
 800e916:	bfa8      	it	ge
 800e918:	4675      	movge	r5, lr
 800e91a:	e74e      	b.n	800e7ba <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 800e91c:	eb0b 0006 	add.w	r0, fp, r6
 800e920:	4426      	add	r6, r4
 800e922:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 800e926:	f1b9 0f13 	cmp.w	r9, #19
 800e92a:	bfdc      	itt	le
 800e92c:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 800e930:	444d      	addle	r5, r9
 800e932:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800e936:	bfd8      	it	le
 800e938:	b22d      	sxthle	r5, r5
 800e93a:	f7fb fc46 	bl	800a1ca <_ZNK8touchgfx4Rect7isEmptyEv>
 800e93e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800e942:	2800      	cmp	r0, #0
 800e944:	f47f af16 	bne.w	800e774 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 800e948:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 800e94c:	fa1f f989 	uxth.w	r9, r9
 800e950:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800e954:	eba5 050c 	sub.w	r5, r5, ip
 800e958:	fa1f f28c 	uxth.w	r2, ip
 800e95c:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 800e960:	eb02 0009 	add.w	r0, r2, r9
 800e964:	2d14      	cmp	r5, #20
 800e966:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 800e96a:	bfa8      	it	ge
 800e96c:	2514      	movge	r5, #20
 800e96e:	b200      	sxth	r0, r0
 800e970:	f8ad 101c 	strh.w	r1, [sp, #28]
 800e974:	b289      	uxth	r1, r1
 800e976:	fa1f fe85 	uxth.w	lr, r5
 800e97a:	eba0 000c 	sub.w	r0, r0, ip
 800e97e:	f8ad c01e 	strh.w	ip, [sp, #30]
 800e982:	4586      	cmp	lr, r0
 800e984:	f8d8 0000 	ldr.w	r0, [r8]
 800e988:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e98c:	b29b      	uxth	r3, r3
 800e98e:	bfb8      	it	lt
 800e990:	46f1      	movlt	r9, lr
 800e992:	6805      	ldr	r5, [r0, #0]
 800e994:	f8cd 9000 	str.w	r9, [sp]
 800e998:	f8d5 5088 	ldr.w	r5, [r5, #136]	; 0x88
 800e99c:	47a8      	blx	r5
 800e99e:	6823      	ldr	r3, [r4, #0]
 800e9a0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 800e9a4:	a907      	add	r1, sp, #28
 800e9a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9a8:	4620      	mov	r0, r4
 800e9aa:	4798      	blx	r3
 800e9ac:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800e9b0:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 800e9b4:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 800e9b8:	1a5b      	subs	r3, r3, r1
 800e9ba:	440a      	add	r2, r1
 800e9bc:	b21b      	sxth	r3, r3
 800e9be:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 800e9c2:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	f47f aecf 	bne.w	800e76a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 800e9cc:	fa1f f18a 	uxth.w	r1, sl
 800e9d0:	4658      	mov	r0, fp
 800e9d2:	f7ff fa29 	bl	800de28 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800e9d6:	e6c8      	b.n	800e76a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 800e9d8:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 800e9dc:	42ab      	cmp	r3, r5
 800e9de:	f67f aea0 	bls.w	800e722 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 800e9e2:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 800e9e6:	ab07      	add	r3, sp, #28
 800e9e8:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 800e9ec:	6851      	ldr	r1, [r2, #4]
 800e9ee:	c303      	stmia	r3!, {r0, r1}
 800e9f0:	a807      	add	r0, sp, #28
 800e9f2:	f7fb fbea 	bl	800a1ca <_ZNK8touchgfx4Rect7isEmptyEv>
 800e9f6:	b920      	cbnz	r0, 800ea02 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 800e9f8:	6823      	ldr	r3, [r4, #0]
 800e9fa:	a907      	add	r1, sp, #28
 800e9fc:	4620      	mov	r0, r4
 800e9fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea00:	4798      	blx	r3
 800ea02:	3501      	adds	r5, #1
 800ea04:	b2ad      	uxth	r5, r5
 800ea06:	e7e7      	b.n	800e9d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

0800ea08 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800ea08:	4b03      	ldr	r3, [pc, #12]	; (800ea18 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	801a      	strh	r2, [r3, #0]
 800ea0e:	805a      	strh	r2, [r3, #2]
 800ea10:	809a      	strh	r2, [r3, #4]
 800ea12:	80da      	strh	r2, [r3, #6]
 800ea14:	4770      	bx	lr
 800ea16:	bf00      	nop
 800ea18:	240068d8 	.word	0x240068d8

0800ea1c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 800ea1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea20:	b09d      	sub	sp, #116	; 0x74
 800ea22:	4606      	mov	r6, r0
 800ea24:	4614      	mov	r4, r2
 800ea26:	468a      	mov	sl, r1
 800ea28:	a803      	add	r0, sp, #12
 800ea2a:	461d      	mov	r5, r3
 800ea2c:	f000 fd80 	bl	800f530 <_ZN8touchgfx12TextProviderC1Ev>
 800ea30:	6833      	ldr	r3, [r6, #0]
 800ea32:	4630      	mov	r0, r6
 800ea34:	f242 0b0b 	movw	fp, #8203	; 0x200b
 800ea38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea3a:	4798      	blx	r3
 800ea3c:	6833      	ldr	r3, [r6, #0]
 800ea3e:	4607      	mov	r7, r0
 800ea40:	4630      	mov	r0, r6
 800ea42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea44:	4798      	blx	r3
 800ea46:	462a      	mov	r2, r5
 800ea48:	2500      	movs	r5, #0
 800ea4a:	4621      	mov	r1, r4
 800ea4c:	9000      	str	r0, [sp, #0]
 800ea4e:	463b      	mov	r3, r7
 800ea50:	462c      	mov	r4, r5
 800ea52:	46a9      	mov	r9, r5
 800ea54:	46a8      	mov	r8, r5
 800ea56:	a803      	add	r0, sp, #12
 800ea58:	f000 fdbd 	bl	800f5d6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	9302      	str	r3, [sp, #8]
 800ea60:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800ea64:	429c      	cmp	r4, r3
 800ea66:	d002      	beq.n	800ea6e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 800ea68:	455c      	cmp	r4, fp
 800ea6a:	bf18      	it	ne
 800ea6c:	4625      	movne	r5, r4
 800ea6e:	ab02      	add	r3, sp, #8
 800ea70:	4632      	mov	r2, r6
 800ea72:	4651      	mov	r1, sl
 800ea74:	a803      	add	r0, sp, #12
 800ea76:	f001 f8af 	bl	800fbd8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800ea7a:	4604      	mov	r4, r0
 800ea7c:	b108      	cbz	r0, 800ea82 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 800ea7e:	280a      	cmp	r0, #10
 800ea80:	d10a      	bne.n	800ea98 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 800ea82:	45c1      	cmp	r9, r8
 800ea84:	bf38      	it	cc
 800ea86:	46c1      	movcc	r9, r8
 800ea88:	f04f 0800 	mov.w	r8, #0
 800ea8c:	2c00      	cmp	r4, #0
 800ea8e:	d1e5      	bne.n	800ea5c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800ea90:	4648      	mov	r0, r9
 800ea92:	b01d      	add	sp, #116	; 0x74
 800ea94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea98:	9a02      	ldr	r2, [sp, #8]
 800ea9a:	2a00      	cmp	r2, #0
 800ea9c:	d0de      	beq.n	800ea5c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800ea9e:	7b57      	ldrb	r7, [r2, #13]
 800eaa0:	4629      	mov	r1, r5
 800eaa2:	6833      	ldr	r3, [r6, #0]
 800eaa4:	007f      	lsls	r7, r7, #1
 800eaa6:	8894      	ldrh	r4, [r2, #4]
 800eaa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eaaa:	f407 7080 	and.w	r0, r7, #256	; 0x100
 800eaae:	7a97      	ldrb	r7, [r2, #10]
 800eab0:	4307      	orrs	r7, r0
 800eab2:	4630      	mov	r0, r6
 800eab4:	4798      	blx	r3
 800eab6:	4438      	add	r0, r7
 800eab8:	4480      	add	r8, r0
 800eaba:	fa1f f888 	uxth.w	r8, r8
 800eabe:	e7e5      	b.n	800ea8c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0800eac0 <_ZNK8touchgfx4Font12getCharWidthEt>:
 800eac0:	b508      	push	{r3, lr}
 800eac2:	6803      	ldr	r3, [r0, #0]
 800eac4:	68db      	ldr	r3, [r3, #12]
 800eac6:	4798      	blx	r3
 800eac8:	b128      	cbz	r0, 800ead6 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 800eaca:	7b43      	ldrb	r3, [r0, #13]
 800eacc:	7a80      	ldrb	r0, [r0, #10]
 800eace:	005b      	lsls	r3, r3, #1
 800ead0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ead4:	4318      	orrs	r0, r3
 800ead6:	bd08      	pop	{r3, pc}

0800ead8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800ead8:	b40e      	push	{r1, r2, r3}
 800eada:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eadc:	b09e      	sub	sp, #120	; 0x78
 800eade:	4605      	mov	r5, r0
 800eae0:	ab23      	add	r3, sp, #140	; 0x8c
 800eae2:	a805      	add	r0, sp, #20
 800eae4:	f853 4b04 	ldr.w	r4, [r3], #4
 800eae8:	9303      	str	r3, [sp, #12]
 800eaea:	f000 fd21 	bl	800f530 <_ZN8touchgfx12TextProviderC1Ev>
 800eaee:	682b      	ldr	r3, [r5, #0]
 800eaf0:	4628      	mov	r0, r5
 800eaf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eaf4:	4798      	blx	r3
 800eaf6:	682b      	ldr	r3, [r5, #0]
 800eaf8:	4606      	mov	r6, r0
 800eafa:	4628      	mov	r0, r5
 800eafc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eafe:	4798      	blx	r3
 800eb00:	4633      	mov	r3, r6
 800eb02:	4621      	mov	r1, r4
 800eb04:	ae1e      	add	r6, sp, #120	; 0x78
 800eb06:	2400      	movs	r4, #0
 800eb08:	9000      	str	r0, [sp, #0]
 800eb0a:	9a03      	ldr	r2, [sp, #12]
 800eb0c:	a805      	add	r0, sp, #20
 800eb0e:	f000 fd62 	bl	800f5d6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800eb12:	f846 4d68 	str.w	r4, [r6, #-104]!
 800eb16:	462a      	mov	r2, r5
 800eb18:	4633      	mov	r3, r6
 800eb1a:	4621      	mov	r1, r4
 800eb1c:	a805      	add	r0, sp, #20
 800eb1e:	f001 f85b 	bl	800fbd8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800eb22:	b300      	cbz	r0, 800eb66 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 800eb24:	280a      	cmp	r0, #10
 800eb26:	d01a      	beq.n	800eb5e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800eb28:	9f04      	ldr	r7, [sp, #16]
 800eb2a:	b1c7      	cbz	r7, 800eb5e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800eb2c:	7b78      	ldrb	r0, [r7, #13]
 800eb2e:	7a3b      	ldrb	r3, [r7, #8]
 800eb30:	00c1      	lsls	r1, r0, #3
 800eb32:	88aa      	ldrh	r2, [r5, #4]
 800eb34:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800eb38:	4319      	orrs	r1, r3
 800eb3a:	0643      	lsls	r3, r0, #25
 800eb3c:	ea4f 1000 	mov.w	r0, r0, lsl #4
 800eb40:	bf48      	it	mi
 800eb42:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 800eb46:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800eb4a:	bf48      	it	mi
 800eb4c:	b219      	sxthmi	r1, r3
 800eb4e:	79fb      	ldrb	r3, [r7, #7]
 800eb50:	4303      	orrs	r3, r0
 800eb52:	4413      	add	r3, r2
 800eb54:	1a5b      	subs	r3, r3, r1
 800eb56:	b29b      	uxth	r3, r3
 800eb58:	42a3      	cmp	r3, r4
 800eb5a:	bfc8      	it	gt
 800eb5c:	b21c      	sxthgt	r4, r3
 800eb5e:	4633      	mov	r3, r6
 800eb60:	462a      	mov	r2, r5
 800eb62:	2100      	movs	r1, #0
 800eb64:	e7da      	b.n	800eb1c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 800eb66:	b2a0      	uxth	r0, r4
 800eb68:	b01e      	add	sp, #120	; 0x78
 800eb6a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800eb6e:	b003      	add	sp, #12
 800eb70:	4770      	bx	lr

0800eb72 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800eb72:	b40e      	push	{r1, r2, r3}
 800eb74:	b570      	push	{r4, r5, r6, lr}
 800eb76:	b09d      	sub	sp, #116	; 0x74
 800eb78:	4604      	mov	r4, r0
 800eb7a:	ab21      	add	r3, sp, #132	; 0x84
 800eb7c:	a803      	add	r0, sp, #12
 800eb7e:	f853 5b04 	ldr.w	r5, [r3], #4
 800eb82:	9302      	str	r3, [sp, #8]
 800eb84:	f000 fcd4 	bl	800f530 <_ZN8touchgfx12TextProviderC1Ev>
 800eb88:	6823      	ldr	r3, [r4, #0]
 800eb8a:	4620      	mov	r0, r4
 800eb8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb8e:	4798      	blx	r3
 800eb90:	6823      	ldr	r3, [r4, #0]
 800eb92:	4606      	mov	r6, r0
 800eb94:	4620      	mov	r0, r4
 800eb96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb98:	2401      	movs	r4, #1
 800eb9a:	4798      	blx	r3
 800eb9c:	4633      	mov	r3, r6
 800eb9e:	9000      	str	r0, [sp, #0]
 800eba0:	4629      	mov	r1, r5
 800eba2:	9a02      	ldr	r2, [sp, #8]
 800eba4:	a803      	add	r0, sp, #12
 800eba6:	f000 fd16 	bl	800f5d6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800ebaa:	a803      	add	r0, sp, #12
 800ebac:	f001 f90e 	bl	800fdcc <_ZN8touchgfx12TextProvider11getNextCharEv>
 800ebb0:	b2a3      	uxth	r3, r4
 800ebb2:	b138      	cbz	r0, 800ebc4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 800ebb4:	280a      	cmp	r0, #10
 800ebb6:	a803      	add	r0, sp, #12
 800ebb8:	bf04      	itt	eq
 800ebba:	3301      	addeq	r3, #1
 800ebbc:	b21c      	sxtheq	r4, r3
 800ebbe:	f001 f905 	bl	800fdcc <_ZN8touchgfx12TextProvider11getNextCharEv>
 800ebc2:	e7f5      	b.n	800ebb0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	b01d      	add	sp, #116	; 0x74
 800ebc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ebcc:	b003      	add	sp, #12
 800ebce:	4770      	bx	lr

0800ebd0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800ebd0:	b40e      	push	{r1, r2, r3}
 800ebd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebd4:	b09e      	sub	sp, #120	; 0x78
 800ebd6:	4604      	mov	r4, r0
 800ebd8:	ab23      	add	r3, sp, #140	; 0x8c
 800ebda:	a805      	add	r0, sp, #20
 800ebdc:	f853 5b04 	ldr.w	r5, [r3], #4
 800ebe0:	9303      	str	r3, [sp, #12]
 800ebe2:	f000 fca5 	bl	800f530 <_ZN8touchgfx12TextProviderC1Ev>
 800ebe6:	6823      	ldr	r3, [r4, #0]
 800ebe8:	4620      	mov	r0, r4
 800ebea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebec:	4798      	blx	r3
 800ebee:	6823      	ldr	r3, [r4, #0]
 800ebf0:	4606      	mov	r6, r0
 800ebf2:	4620      	mov	r0, r4
 800ebf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ebf6:	4798      	blx	r3
 800ebf8:	4633      	mov	r3, r6
 800ebfa:	4629      	mov	r1, r5
 800ebfc:	9000      	str	r0, [sp, #0]
 800ebfe:	9a03      	ldr	r2, [sp, #12]
 800ec00:	a805      	add	r0, sp, #20
 800ec02:	f000 fce8 	bl	800f5d6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800ec06:	ad1e      	add	r5, sp, #120	; 0x78
 800ec08:	2100      	movs	r1, #0
 800ec0a:	26ff      	movs	r6, #255	; 0xff
 800ec0c:	4622      	mov	r2, r4
 800ec0e:	a805      	add	r0, sp, #20
 800ec10:	f845 1d68 	str.w	r1, [r5, #-104]!
 800ec14:	462b      	mov	r3, r5
 800ec16:	f000 ffdf 	bl	800fbd8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800ec1a:	b1d8      	cbz	r0, 800ec54 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 800ec1c:	280a      	cmp	r0, #10
 800ec1e:	d012      	beq.n	800ec46 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 800ec20:	9804      	ldr	r0, [sp, #16]
 800ec22:	b180      	cbz	r0, 800ec46 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 800ec24:	7b47      	ldrb	r7, [r0, #13]
 800ec26:	7922      	ldrb	r2, [r4, #4]
 800ec28:	00fb      	lsls	r3, r7, #3
 800ec2a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800ec2e:	7a03      	ldrb	r3, [r0, #8]
 800ec30:	430b      	orrs	r3, r1
 800ec32:	0679      	lsls	r1, r7, #25
 800ec34:	bf44      	itt	mi
 800ec36:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800ec3a:	b21b      	sxthmi	r3, r3
 800ec3c:	1ad3      	subs	r3, r2, r3
 800ec3e:	b2db      	uxtb	r3, r3
 800ec40:	429e      	cmp	r6, r3
 800ec42:	bf28      	it	cs
 800ec44:	461e      	movcs	r6, r3
 800ec46:	462b      	mov	r3, r5
 800ec48:	4622      	mov	r2, r4
 800ec4a:	2100      	movs	r1, #0
 800ec4c:	a805      	add	r0, sp, #20
 800ec4e:	f000 ffc3 	bl	800fbd8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800ec52:	e7e2      	b.n	800ec1a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 800ec54:	4630      	mov	r0, r6
 800ec56:	b01e      	add	sp, #120	; 0x78
 800ec58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ec5c:	b003      	add	sp, #12
 800ec5e:	4770      	bx	lr

0800ec60 <_ZNK8touchgfx8Drawable10invalidateEv>:
 800ec60:	b513      	push	{r0, r1, r4, lr}
 800ec62:	6803      	ldr	r3, [r0, #0]
 800ec64:	2400      	movs	r4, #0
 800ec66:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800ec6a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800ec6e:	f8ad 1004 	strh.w	r1, [sp, #4]
 800ec72:	4669      	mov	r1, sp
 800ec74:	691b      	ldr	r3, [r3, #16]
 800ec76:	9400      	str	r4, [sp, #0]
 800ec78:	f8ad 2006 	strh.w	r2, [sp, #6]
 800ec7c:	4798      	blx	r3
 800ec7e:	b002      	add	sp, #8
 800ec80:	bd10      	pop	{r4, pc}

0800ec82 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 800ec82:	b538      	push	{r3, r4, r5, lr}
 800ec84:	680b      	ldr	r3, [r1, #0]
 800ec86:	460c      	mov	r4, r1
 800ec88:	4605      	mov	r5, r0
 800ec8a:	68db      	ldr	r3, [r3, #12]
 800ec8c:	4798      	blx	r3
 800ec8e:	6823      	ldr	r3, [r4, #0]
 800ec90:	4620      	mov	r0, r4
 800ec92:	4629      	mov	r1, r5
 800ec94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec96:	4798      	blx	r3
 800ec98:	4628      	mov	r0, r5
 800ec9a:	bd38      	pop	{r3, r4, r5, pc}

0800ec9c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 800ec9c:	b410      	push	{r4}
 800ec9e:	880a      	ldrh	r2, [r1, #0]
 800eca0:	8884      	ldrh	r4, [r0, #4]
 800eca2:	4422      	add	r2, r4
 800eca4:	800a      	strh	r2, [r1, #0]
 800eca6:	884a      	ldrh	r2, [r1, #2]
 800eca8:	88c4      	ldrh	r4, [r0, #6]
 800ecaa:	4422      	add	r2, r4
 800ecac:	804a      	strh	r2, [r1, #2]
 800ecae:	6940      	ldr	r0, [r0, #20]
 800ecb0:	b120      	cbz	r0, 800ecbc <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 800ecb2:	6803      	ldr	r3, [r0, #0]
 800ecb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecba:	4718      	bx	r3
 800ecbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecc0:	4770      	bx	lr

0800ecc2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 800ecc2:	b570      	push	{r4, r5, r6, lr}
 800ecc4:	8882      	ldrh	r2, [r0, #4]
 800ecc6:	460c      	mov	r4, r1
 800ecc8:	880b      	ldrh	r3, [r1, #0]
 800ecca:	4605      	mov	r5, r0
 800eccc:	4413      	add	r3, r2
 800ecce:	800b      	strh	r3, [r1, #0]
 800ecd0:	884b      	ldrh	r3, [r1, #2]
 800ecd2:	88c2      	ldrh	r2, [r0, #6]
 800ecd4:	4413      	add	r3, r2
 800ecd6:	804b      	strh	r3, [r1, #2]
 800ecd8:	1d01      	adds	r1, r0, #4
 800ecda:	4620      	mov	r0, r4
 800ecdc:	f7fb fa32 	bl	800a144 <_ZN8touchgfx4RectaNERKS0_>
 800ece0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	dd0b      	ble.n	800ed00 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800ece8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	dd07      	ble.n	800ed00 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800ecf0:	6968      	ldr	r0, [r5, #20]
 800ecf2:	b128      	cbz	r0, 800ed00 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800ecf4:	6803      	ldr	r3, [r0, #0]
 800ecf6:	4621      	mov	r1, r4
 800ecf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ecfe:	4718      	bx	r3
 800ed00:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ed04 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 800ed04:	b570      	push	{r4, r5, r6, lr}
 800ed06:	8882      	ldrh	r2, [r0, #4]
 800ed08:	460c      	mov	r4, r1
 800ed0a:	880b      	ldrh	r3, [r1, #0]
 800ed0c:	4605      	mov	r5, r0
 800ed0e:	4413      	add	r3, r2
 800ed10:	800b      	strh	r3, [r1, #0]
 800ed12:	884b      	ldrh	r3, [r1, #2]
 800ed14:	88c2      	ldrh	r2, [r0, #6]
 800ed16:	4413      	add	r3, r2
 800ed18:	804b      	strh	r3, [r1, #2]
 800ed1a:	1d01      	adds	r1, r0, #4
 800ed1c:	4620      	mov	r0, r4
 800ed1e:	f7fb fa11 	bl	800a144 <_ZN8touchgfx4RectaNERKS0_>
 800ed22:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	dd15      	ble.n	800ed56 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 800ed2a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	dd11      	ble.n	800ed56 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 800ed32:	6968      	ldr	r0, [r5, #20]
 800ed34:	b128      	cbz	r0, 800ed42 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 800ed36:	6803      	ldr	r3, [r0, #0]
 800ed38:	691b      	ldr	r3, [r3, #16]
 800ed3a:	4621      	mov	r1, r4
 800ed3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ed40:	4718      	bx	r3
 800ed42:	4b05      	ldr	r3, [pc, #20]	; (800ed58 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x54>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	3304      	adds	r3, #4
 800ed48:	429d      	cmp	r5, r3
 800ed4a:	d104      	bne.n	800ed56 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 800ed4c:	f7ff f806 	bl	800dd5c <_ZN8touchgfx11Application11getInstanceEv>
 800ed50:	6803      	ldr	r3, [r0, #0]
 800ed52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed54:	e7f1      	b.n	800ed3a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x36>
 800ed56:	bd70      	pop	{r4, r5, r6, pc}
 800ed58:	240068d0 	.word	0x240068d0

0800ed5c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 800ed5c:	b570      	push	{r4, r5, r6, lr}
 800ed5e:	4604      	mov	r4, r0
 800ed60:	4616      	mov	r6, r2
 800ed62:	460d      	mov	r5, r1
 800ed64:	b901      	cbnz	r1, 800ed68 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 800ed66:	b192      	cbz	r2, 800ed8e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 800ed68:	6823      	ldr	r3, [r4, #0]
 800ed6a:	4620      	mov	r0, r4
 800ed6c:	695b      	ldr	r3, [r3, #20]
 800ed6e:	4798      	blx	r3
 800ed70:	88e2      	ldrh	r2, [r4, #6]
 800ed72:	88a1      	ldrh	r1, [r4, #4]
 800ed74:	4620      	mov	r0, r4
 800ed76:	4432      	add	r2, r6
 800ed78:	4429      	add	r1, r5
 800ed7a:	b212      	sxth	r2, r2
 800ed7c:	b209      	sxth	r1, r1
 800ed7e:	f7fb fcb1 	bl	800a6e4 <_ZN8touchgfx8Drawable5setXYEss>
 800ed82:	6823      	ldr	r3, [r4, #0]
 800ed84:	4620      	mov	r0, r4
 800ed86:	695b      	ldr	r3, [r3, #20]
 800ed88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ed8c:	4718      	bx	r3
 800ed8e:	bd70      	pop	{r4, r5, r6, pc}

0800ed90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 800ed90:	b510      	push	{r4, lr}
 800ed92:	2300      	movs	r3, #0
 800ed94:	4604      	mov	r4, r0
 800ed96:	4608      	mov	r0, r1
 800ed98:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800ed9c:	8023      	strh	r3, [r4, #0]
 800ed9e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800eda2:	8063      	strh	r3, [r4, #2]
 800eda4:	6803      	ldr	r3, [r0, #0]
 800eda6:	80a1      	strh	r1, [r4, #4]
 800eda8:	4621      	mov	r1, r4
 800edaa:	80e2      	strh	r2, [r4, #6]
 800edac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edae:	4798      	blx	r3
 800edb0:	4620      	mov	r0, r4
 800edb2:	bd10      	pop	{r4, pc}

0800edb4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 800edb4:	b530      	push	{r4, r5, lr}
 800edb6:	8083      	strh	r3, [r0, #4]
 800edb8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800edbc:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800edc0:	7183      	strb	r3, [r0, #6]
 800edc2:	79c3      	ldrb	r3, [r0, #7]
 800edc4:	6101      	str	r1, [r0, #16]
 800edc6:	f365 0306 	bfi	r3, r5, #0, #7
 800edca:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800edce:	8282      	strh	r2, [r0, #20]
 800edd0:	f365 13c7 	bfi	r3, r5, #7, #1
 800edd4:	71c3      	strb	r3, [r0, #7]
 800edd6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800edda:	7203      	strb	r3, [r0, #8]
 800eddc:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800ede0:	7243      	strb	r3, [r0, #9]
 800ede2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800ede6:	8143      	strh	r3, [r0, #10]
 800ede8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800edec:	8183      	strh	r3, [r0, #12]
 800edee:	4b01      	ldr	r3, [pc, #4]	; (800edf4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 800edf0:	6003      	str	r3, [r0, #0]
 800edf2:	bd30      	pop	{r4, r5, pc}
 800edf4:	0801c34c 	.word	0x0801c34c

0800edf8 <_ZNK8touchgfx9ConstFont4findEt>:
 800edf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edfa:	6904      	ldr	r4, [r0, #16]
 800edfc:	b3bc      	cbz	r4, 800ee6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800edfe:	88a3      	ldrh	r3, [r4, #4]
 800ee00:	8a82      	ldrh	r2, [r0, #20]
 800ee02:	1acb      	subs	r3, r1, r3
 800ee04:	f102 32ff 	add.w	r2, r2, #4294967295
 800ee08:	d431      	bmi.n	800ee6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800ee0a:	4293      	cmp	r3, r2
 800ee0c:	dd0c      	ble.n	800ee28 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800ee0e:	230e      	movs	r3, #14
 800ee10:	fb03 4302 	mla	r3, r3, r2, r4
 800ee14:	889b      	ldrh	r3, [r3, #4]
 800ee16:	1a5b      	subs	r3, r3, r1
 800ee18:	1ad3      	subs	r3, r2, r3
 800ee1a:	429a      	cmp	r2, r3
 800ee1c:	db27      	blt.n	800ee6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	bfbc      	itt	lt
 800ee22:	2302      	movlt	r3, #2
 800ee24:	fb92 f3f3 	sdivlt	r3, r2, r3
 800ee28:	2500      	movs	r5, #0
 800ee2a:	260e      	movs	r6, #14
 800ee2c:	4295      	cmp	r5, r2
 800ee2e:	dc1e      	bgt.n	800ee6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800ee30:	fb06 4003 	mla	r0, r6, r3, r4
 800ee34:	8887      	ldrh	r7, [r0, #4]
 800ee36:	42b9      	cmp	r1, r7
 800ee38:	d01a      	beq.n	800ee70 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800ee3a:	d20d      	bcs.n	800ee58 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 800ee3c:	1e5a      	subs	r2, r3, #1
 800ee3e:	4295      	cmp	r5, r2
 800ee40:	dc15      	bgt.n	800ee6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800ee42:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 800ee46:	1a5b      	subs	r3, r3, r1
 800ee48:	1ad3      	subs	r3, r2, r3
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	db0f      	blt.n	800ee6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800ee4e:	429d      	cmp	r5, r3
 800ee50:	ddec      	ble.n	800ee2c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800ee52:	1953      	adds	r3, r2, r5
 800ee54:	105b      	asrs	r3, r3, #1
 800ee56:	e7e9      	b.n	800ee2c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800ee58:	1c5d      	adds	r5, r3, #1
 800ee5a:	42aa      	cmp	r2, r5
 800ee5c:	db07      	blt.n	800ee6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800ee5e:	8a43      	ldrh	r3, [r0, #18]
 800ee60:	1acb      	subs	r3, r1, r3
 800ee62:	442b      	add	r3, r5
 800ee64:	429d      	cmp	r5, r3
 800ee66:	dc02      	bgt.n	800ee6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800ee68:	429a      	cmp	r2, r3
 800ee6a:	dadf      	bge.n	800ee2c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800ee6c:	e7f1      	b.n	800ee52 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 800ee6e:	2000      	movs	r0, #0
 800ee70:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ee72 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800ee72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee74:	4604      	mov	r4, r0
 800ee76:	4617      	mov	r7, r2
 800ee78:	461e      	mov	r6, r3
 800ee7a:	b911      	cbnz	r1, 800ee82 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 800ee7c:	2500      	movs	r5, #0
 800ee7e:	4628      	mov	r0, r5
 800ee80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee82:	290a      	cmp	r1, #10
 800ee84:	d0fa      	beq.n	800ee7c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800ee86:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800ee8a:	4291      	cmp	r1, r2
 800ee8c:	d0f6      	beq.n	800ee7c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800ee8e:	f242 020b 	movw	r2, #8203	; 0x200b
 800ee92:	4291      	cmp	r1, r2
 800ee94:	d0f2      	beq.n	800ee7c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800ee96:	f7ff ffaf 	bl	800edf8 <_ZNK8touchgfx9ConstFont4findEt>
 800ee9a:	4605      	mov	r5, r0
 800ee9c:	b950      	cbnz	r0, 800eeb4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 800ee9e:	6823      	ldr	r3, [r4, #0]
 800eea0:	4620      	mov	r0, r4
 800eea2:	691b      	ldr	r3, [r3, #16]
 800eea4:	4798      	blx	r3
 800eea6:	4601      	mov	r1, r0
 800eea8:	4620      	mov	r0, r4
 800eeaa:	f7ff ffa5 	bl	800edf8 <_ZNK8touchgfx9ConstFont4findEt>
 800eeae:	4605      	mov	r5, r0
 800eeb0:	2800      	cmp	r0, #0
 800eeb2:	d0e3      	beq.n	800ee7c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800eeb4:	6823      	ldr	r3, [r4, #0]
 800eeb6:	4629      	mov	r1, r5
 800eeb8:	4620      	mov	r0, r4
 800eeba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eebc:	4798      	blx	r3
 800eebe:	6038      	str	r0, [r7, #0]
 800eec0:	6823      	ldr	r3, [r4, #0]
 800eec2:	4620      	mov	r0, r4
 800eec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eec6:	4798      	blx	r3
 800eec8:	7030      	strb	r0, [r6, #0]
 800eeca:	e7d8      	b.n	800ee7e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0800eecc <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 800eecc:	b538      	push	{r3, r4, r5, lr}
 800eece:	4605      	mov	r5, r0
 800eed0:	f001 fd5a 	bl	8010988 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800eed4:	4604      	mov	r4, r0
 800eed6:	4628      	mov	r0, r5
 800eed8:	f001 fc92 	bl	8010800 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 800eedc:	2800      	cmp	r0, #0
 800eede:	bf14      	ite	ne
 800eee0:	2002      	movne	r0, #2
 800eee2:	2000      	moveq	r0, #0
 800eee4:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 800eee8:	b280      	uxth	r0, r0
 800eeea:	bd38      	pop	{r3, r4, r5, pc}

0800eeec <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 800eeec:	b538      	push	{r3, r4, r5, lr}
 800eeee:	4605      	mov	r5, r0
 800eef0:	f001 fd4a 	bl	8010988 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800eef4:	4604      	mov	r4, r0
 800eef6:	4628      	mov	r0, r5
 800eef8:	f001 fc82 	bl	8010800 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 800eefc:	2800      	cmp	r0, #0
 800eefe:	bf14      	ite	ne
 800ef00:	2002      	movne	r0, #2
 800ef02:	2000      	moveq	r0, #0
 800ef04:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 800ef08:	f040 0001 	orr.w	r0, r0, #1
 800ef0c:	b280      	uxth	r0, r0
 800ef0e:	bd38      	pop	{r3, r4, r5, pc}

0800ef10 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 800ef10:	2001      	movs	r0, #1
 800ef12:	4770      	bx	lr

0800ef14 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 800ef14:	2002      	movs	r0, #2
 800ef16:	4770      	bx	lr

0800ef18 <_ZN8touchgfx6ScreenD1Ev>:
 800ef18:	4770      	bx	lr

0800ef1a <_ZN8touchgfx12GestureEventD1Ev>:
 800ef1a:	4770      	bx	lr

0800ef1c <_ZN8touchgfx9DragEventD1Ev>:
 800ef1c:	4770      	bx	lr

0800ef1e <_ZN8touchgfx9DragEventD0Ev>:
 800ef1e:	b510      	push	{r4, lr}
 800ef20:	4604      	mov	r4, r0
 800ef22:	2110      	movs	r1, #16
 800ef24:	f009 ff7b 	bl	8018e1e <_ZdlPvj>
 800ef28:	4620      	mov	r0, r4
 800ef2a:	bd10      	pop	{r4, pc}

0800ef2c <_ZN8touchgfx12GestureEventD0Ev>:
 800ef2c:	b510      	push	{r4, lr}
 800ef2e:	4604      	mov	r4, r0
 800ef30:	210c      	movs	r1, #12
 800ef32:	f009 ff74 	bl	8018e1e <_ZdlPvj>
 800ef36:	4620      	mov	r0, r4
 800ef38:	bd10      	pop	{r4, pc}

0800ef3a <_ZN8touchgfx6ScreenD0Ev>:
 800ef3a:	b510      	push	{r4, lr}
 800ef3c:	4604      	mov	r4, r0
 800ef3e:	213c      	movs	r1, #60	; 0x3c
 800ef40:	f009 ff6d 	bl	8018e1e <_ZdlPvj>
 800ef44:	4620      	mov	r0, r4
 800ef46:	bd10      	pop	{r4, pc}

0800ef48 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 800ef48:	b530      	push	{r4, r5, lr}
 800ef4a:	460d      	mov	r5, r1
 800ef4c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800ef4e:	b087      	sub	sp, #28
 800ef50:	4604      	mov	r4, r0
 800ef52:	b301      	cbz	r1, 800ef96 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 800ef54:	a801      	add	r0, sp, #4
 800ef56:	f7ff ff1b 	bl	800ed90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ef5a:	892a      	ldrh	r2, [r5, #8]
 800ef5c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800ef60:	7928      	ldrb	r0, [r5, #4]
 800ef62:	1ad2      	subs	r2, r2, r3
 800ef64:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800ef66:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 800ef6a:	441a      	add	r2, r3
 800ef6c:	896b      	ldrh	r3, [r5, #10]
 800ef6e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800ef72:	f88d 0010 	strb.w	r0, [sp, #16]
 800ef76:	1b5b      	subs	r3, r3, r5
 800ef78:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 800ef7a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800ef7c:	442b      	add	r3, r5
 800ef7e:	4d07      	ldr	r5, [pc, #28]	; (800ef9c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 800ef80:	f8ad 1012 	strh.w	r1, [sp, #18]
 800ef84:	a903      	add	r1, sp, #12
 800ef86:	9503      	str	r5, [sp, #12]
 800ef88:	f8ad 2014 	strh.w	r2, [sp, #20]
 800ef8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ef90:	6803      	ldr	r3, [r0, #0]
 800ef92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef94:	4798      	blx	r3
 800ef96:	b007      	add	sp, #28
 800ef98:	bd30      	pop	{r4, r5, pc}
 800ef9a:	bf00      	nop
 800ef9c:	0801c3b8 	.word	0x0801c3b8

0800efa0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 800efa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efa4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800efa6:	b08a      	sub	sp, #40	; 0x28
 800efa8:	4604      	mov	r4, r0
 800efaa:	460d      	mov	r5, r1
 800efac:	b113      	cbz	r3, 800efb4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 800efae:	790b      	ldrb	r3, [r1, #4]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d044      	beq.n	800f03e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800efb4:	f104 0804 	add.w	r8, r4, #4
 800efb8:	a803      	add	r0, sp, #12
 800efba:	4641      	mov	r1, r8
 800efbc:	f7ff fee8 	bl	800ed90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800efc0:	792b      	ldrb	r3, [r5, #4]
 800efc2:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 800efc6:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800efca:	b983      	cbnz	r3, 800efee <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 800efcc:	f104 0336 	add.w	r3, r4, #54	; 0x36
 800efd0:	892a      	ldrh	r2, [r5, #8]
 800efd2:	88e9      	ldrh	r1, [r5, #6]
 800efd4:	4640      	mov	r0, r8
 800efd6:	1b92      	subs	r2, r2, r6
 800efd8:	9301      	str	r3, [sp, #4]
 800efda:	1bc9      	subs	r1, r1, r7
 800efdc:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800efe0:	b212      	sxth	r2, r2
 800efe2:	9300      	str	r3, [sp, #0]
 800efe4:	b209      	sxth	r1, r1
 800efe6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800efea:	f7fa ffc9 	bl	8009f80 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 800efee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800eff0:	b329      	cbz	r1, 800f03e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800eff2:	a805      	add	r0, sp, #20
 800eff4:	f7ff fecc 	bl	800ed90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800eff8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800effc:	792b      	ldrb	r3, [r5, #4]
 800effe:	a907      	add	r1, sp, #28
 800f000:	1abf      	subs	r7, r7, r2
 800f002:	88ea      	ldrh	r2, [r5, #6]
 800f004:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f006:	4417      	add	r7, r2
 800f008:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 800f00a:	f88d 3020 	strb.w	r3, [sp, #32]
 800f00e:	4417      	add	r7, r2
 800f010:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800f014:	1ab6      	subs	r6, r6, r2
 800f016:	892a      	ldrh	r2, [r5, #8]
 800f018:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 800f01c:	4416      	add	r6, r2
 800f01e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800f020:	4416      	add	r6, r2
 800f022:	4a08      	ldr	r2, [pc, #32]	; (800f044 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 800f024:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 800f028:	2600      	movs	r6, #0
 800f02a:	9207      	str	r2, [sp, #28]
 800f02c:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 800f030:	6803      	ldr	r3, [r0, #0]
 800f032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f034:	4798      	blx	r3
 800f036:	792b      	ldrb	r3, [r5, #4]
 800f038:	b10b      	cbz	r3, 800f03e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800f03a:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 800f03e:	b00a      	add	sp, #40	; 0x28
 800f040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f044:	0801be80 	.word	0x0801be80

0800f048 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 800f048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f04c:	460c      	mov	r4, r1
 800f04e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800f050:	b088      	sub	sp, #32
 800f052:	4605      	mov	r5, r0
 800f054:	2900      	cmp	r1, #0
 800f056:	d06d      	beq.n	800f134 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 800f058:	4668      	mov	r0, sp
 800f05a:	f7ff fe99 	bl	800ed90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f05e:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 800f060:	88e3      	ldrh	r3, [r4, #6]
 800f062:	f9bd 8000 	ldrsh.w	r8, [sp]
 800f066:	440b      	add	r3, r1
 800f068:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 800f06c:	b21b      	sxth	r3, r3
 800f06e:	4543      	cmp	r3, r8
 800f070:	db31      	blt.n	800f0d6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800f072:	f8bd c004 	ldrh.w	ip, [sp, #4]
 800f076:	44c4      	add	ip, r8
 800f078:	fa0f fc8c 	sxth.w	ip, ip
 800f07c:	4563      	cmp	r3, ip
 800f07e:	da2a      	bge.n	800f0d6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800f080:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 800f082:	8926      	ldrh	r6, [r4, #8]
 800f084:	4416      	add	r6, r2
 800f086:	b236      	sxth	r6, r6
 800f088:	42be      	cmp	r6, r7
 800f08a:	db24      	blt.n	800f0d6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800f08c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800f090:	4438      	add	r0, r7
 800f092:	b200      	sxth	r0, r0
 800f094:	4286      	cmp	r6, r0
 800f096:	da1e      	bge.n	800f0d6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800f098:	8963      	ldrh	r3, [r4, #10]
 800f09a:	4419      	add	r1, r3
 800f09c:	b209      	sxth	r1, r1
 800f09e:	4541      	cmp	r1, r8
 800f0a0:	db08      	blt.n	800f0b4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800f0a2:	4561      	cmp	r1, ip
 800f0a4:	da06      	bge.n	800f0b4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800f0a6:	89a3      	ldrh	r3, [r4, #12]
 800f0a8:	441a      	add	r2, r3
 800f0aa:	b212      	sxth	r2, r2
 800f0ac:	42ba      	cmp	r2, r7
 800f0ae:	db01      	blt.n	800f0b4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800f0b0:	4282      	cmp	r2, r0
 800f0b2:	db10      	blt.n	800f0d6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800f0b4:	4b21      	ldr	r3, [pc, #132]	; (800f13c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 800f0b6:	a904      	add	r1, sp, #16
 800f0b8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800f0ba:	9304      	str	r3, [sp, #16]
 800f0bc:	2302      	movs	r3, #2
 800f0be:	f88d 3014 	strb.w	r3, [sp, #20]
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f0c8:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f0cc:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f0d0:	6803      	ldr	r3, [r0, #0]
 800f0d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0d4:	4798      	blx	r3
 800f0d6:	1d29      	adds	r1, r5, #4
 800f0d8:	a802      	add	r0, sp, #8
 800f0da:	f7ff fe59 	bl	800ed90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f0de:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800f0e2:	88e0      	ldrh	r0, [r4, #6]
 800f0e4:	eba3 0808 	sub.w	r8, r3, r8
 800f0e8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800f0ec:	7921      	ldrb	r1, [r4, #4]
 800f0ee:	fa1f f888 	uxth.w	r8, r8
 800f0f2:	1bdf      	subs	r7, r3, r7
 800f0f4:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 800f0f8:	b2bb      	uxth	r3, r7
 800f0fa:	4440      	add	r0, r8
 800f0fc:	8922      	ldrh	r2, [r4, #8]
 800f0fe:	8967      	ldrh	r7, [r4, #10]
 800f100:	4460      	add	r0, ip
 800f102:	89a4      	ldrh	r4, [r4, #12]
 800f104:	441a      	add	r2, r3
 800f106:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 800f108:	44b8      	add	r8, r7
 800f10a:	4423      	add	r3, r4
 800f10c:	f8ad 0016 	strh.w	r0, [sp, #22]
 800f110:	4432      	add	r2, r6
 800f112:	44e0      	add	r8, ip
 800f114:	4433      	add	r3, r6
 800f116:	4c0a      	ldr	r4, [pc, #40]	; (800f140 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 800f118:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800f11a:	f88d 1014 	strb.w	r1, [sp, #20]
 800f11e:	a904      	add	r1, sp, #16
 800f120:	9404      	str	r4, [sp, #16]
 800f122:	f8ad 2018 	strh.w	r2, [sp, #24]
 800f126:	f8ad 801a 	strh.w	r8, [sp, #26]
 800f12a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f12e:	6803      	ldr	r3, [r0, #0]
 800f130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f132:	4798      	blx	r3
 800f134:	b008      	add	sp, #32
 800f136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f13a:	bf00      	nop
 800f13c:	0801be80 	.word	0x0801be80
 800f140:	0801c3a4 	.word	0x0801c3a4

0800f144 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 800f144:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f146:	4604      	mov	r4, r0
 800f148:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 800f14c:	3201      	adds	r2, #1
 800f14e:	d112      	bne.n	800f176 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 800f150:	2500      	movs	r5, #0
 800f152:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800f156:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800f15a:	6803      	ldr	r3, [r0, #0]
 800f15c:	9500      	str	r5, [sp, #0]
 800f15e:	466d      	mov	r5, sp
 800f160:	f8ad 1004 	strh.w	r1, [sp, #4]
 800f164:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f168:	4629      	mov	r1, r5
 800f16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f16c:	4798      	blx	r3
 800f16e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f172:	e884 0003 	stmia.w	r4, {r0, r1}
 800f176:	4620      	mov	r0, r4
 800f178:	b003      	add	sp, #12
 800f17a:	bd30      	pop	{r4, r5, pc}

0800f17c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 800f17c:	b513      	push	{r0, r1, r4, lr}
 800f17e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 800f182:	4604      	mov	r4, r0
 800f184:	3301      	adds	r3, #1
 800f186:	d109      	bne.n	800f19c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 800f188:	4601      	mov	r1, r0
 800f18a:	4668      	mov	r0, sp
 800f18c:	f7ff fe00 	bl	800ed90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f190:	f8bd 3000 	ldrh.w	r3, [sp]
 800f194:	8423      	strh	r3, [r4, #32]
 800f196:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f19a:	8463      	strh	r3, [r4, #34]	; 0x22
 800f19c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 800f1a0:	b002      	add	sp, #8
 800f1a2:	bd10      	pop	{r4, pc}

0800f1a4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 800f1a4:	b513      	push	{r0, r1, r4, lr}
 800f1a6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 800f1aa:	4604      	mov	r4, r0
 800f1ac:	3301      	adds	r3, #1
 800f1ae:	d109      	bne.n	800f1c4 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 800f1b0:	4601      	mov	r1, r0
 800f1b2:	4668      	mov	r0, sp
 800f1b4:	f7ff fdec 	bl	800ed90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f1b8:	f8bd 3000 	ldrh.w	r3, [sp]
 800f1bc:	8423      	strh	r3, [r4, #32]
 800f1be:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f1c2:	8463      	strh	r3, [r4, #34]	; 0x22
 800f1c4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 800f1c8:	b002      	add	sp, #8
 800f1ca:	bd10      	pop	{r4, pc}

0800f1cc <_ZN8touchgfx6ScreenC1Ev>:
 800f1cc:	b570      	push	{r4, r5, r6, lr}
 800f1ce:	4b17      	ldr	r3, [pc, #92]	; (800f22c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 800f1d0:	4605      	mov	r5, r0
 800f1d2:	4a17      	ldr	r2, [pc, #92]	; (800f230 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 800f1d4:	2101      	movs	r1, #1
 800f1d6:	f845 3b04 	str.w	r3, [r5], #4
 800f1da:	2300      	movs	r3, #0
 800f1dc:	6042      	str	r2, [r0, #4]
 800f1de:	4604      	mov	r4, r0
 800f1e0:	8103      	strh	r3, [r0, #8]
 800f1e2:	8143      	strh	r3, [r0, #10]
 800f1e4:	8183      	strh	r3, [r0, #12]
 800f1e6:	81c3      	strh	r3, [r0, #14]
 800f1e8:	8203      	strh	r3, [r0, #16]
 800f1ea:	8243      	strh	r3, [r0, #18]
 800f1ec:	8283      	strh	r3, [r0, #20]
 800f1ee:	82c3      	strh	r3, [r0, #22]
 800f1f0:	6203      	str	r3, [r0, #32]
 800f1f2:	8483      	strh	r3, [r0, #36]	; 0x24
 800f1f4:	84c3      	strh	r3, [r0, #38]	; 0x26
 800f1f6:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 800f1fa:	6343      	str	r3, [r0, #52]	; 0x34
 800f1fc:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 800f200:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 800f204:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800f208:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 800f20c:	4b09      	ldr	r3, [pc, #36]	; (800f234 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 800f20e:	4628      	mov	r0, r5
 800f210:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f214:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800f216:	4a08      	ldr	r2, [pc, #32]	; (800f238 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 800f218:	f9b2 1000 	ldrsh.w	r1, [r2]
 800f21c:	4798      	blx	r3
 800f21e:	6863      	ldr	r3, [r4, #4]
 800f220:	4628      	mov	r0, r5
 800f222:	4631      	mov	r1, r6
 800f224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f226:	4798      	blx	r3
 800f228:	4620      	mov	r0, r4
 800f22a:	bd70      	pop	{r4, r5, r6, pc}
 800f22c:	0801c3cc 	.word	0x0801c3cc
 800f230:	0801b35c 	.word	0x0801b35c
 800f234:	2400688a 	.word	0x2400688a
 800f238:	24006888 	.word	0x24006888

0800f23c <_ZN8touchgfx6Screen4drawEv>:
 800f23c:	4b09      	ldr	r3, [pc, #36]	; (800f264 <_ZN8touchgfx6Screen4drawEv+0x28>)
 800f23e:	b507      	push	{r0, r1, r2, lr}
 800f240:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f244:	2100      	movs	r1, #0
 800f246:	4b08      	ldr	r3, [pc, #32]	; (800f268 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 800f248:	9100      	str	r1, [sp, #0]
 800f24a:	4669      	mov	r1, sp
 800f24c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f250:	f8ad 2004 	strh.w	r2, [sp, #4]
 800f254:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f258:	6803      	ldr	r3, [r0, #0]
 800f25a:	689b      	ldr	r3, [r3, #8]
 800f25c:	4798      	blx	r3
 800f25e:	b003      	add	sp, #12
 800f260:	f85d fb04 	ldr.w	pc, [sp], #4
 800f264:	24006888 	.word	0x24006888
 800f268:	2400688a 	.word	0x2400688a

0800f26c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 800f26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f270:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800f274:	b089      	sub	sp, #36	; 0x24
 800f276:	4680      	mov	r8, r0
 800f278:	460c      	mov	r4, r1
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	4615      	mov	r5, r2
 800f27e:	dd0e      	ble.n	800f29e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800f280:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800f284:	2b00      	cmp	r3, #0
 800f286:	dd0a      	ble.n	800f29e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800f288:	4628      	mov	r0, r5
 800f28a:	f7ff ff5b 	bl	800f144 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800f28e:	4621      	mov	r1, r4
 800f290:	f7fc fd80 	bl	800bd94 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800f294:	69eb      	ldr	r3, [r5, #28]
 800f296:	b928      	cbnz	r0, 800f2a4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 800f298:	461d      	mov	r5, r3
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d1f4      	bne.n	800f288 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 800f29e:	b009      	add	sp, #36	; 0x24
 800f2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2a4:	ae04      	add	r6, sp, #16
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	f000 80b5 	beq.w	800f416 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800f2ac:	682b      	ldr	r3, [r5, #0]
 800f2ae:	4629      	mov	r1, r5
 800f2b0:	a802      	add	r0, sp, #8
 800f2b2:	68db      	ldr	r3, [r3, #12]
 800f2b4:	4798      	blx	r3
 800f2b6:	4628      	mov	r0, r5
 800f2b8:	f7ff ff60 	bl	800f17c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800f2bc:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 800f2c0:	4407      	add	r7, r0
 800f2c2:	4628      	mov	r0, r5
 800f2c4:	f7ff ff6e 	bl	800f1a4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800f2c8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800f2cc:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800f2d0:	b23f      	sxth	r7, r7
 800f2d2:	4418      	add	r0, r3
 800f2d4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800f2d8:	4621      	mov	r1, r4
 800f2da:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f2de:	f8ad 0012 	strh.w	r0, [sp, #18]
 800f2e2:	4630      	mov	r0, r6
 800f2e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f2e8:	f8ad 7010 	strh.w	r7, [sp, #16]
 800f2ec:	f7fa ff2a 	bl	800a144 <_ZN8touchgfx4RectaNERKS0_>
 800f2f0:	4628      	mov	r0, r5
 800f2f2:	f7ff ff27 	bl	800f144 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800f2f6:	ab06      	add	r3, sp, #24
 800f2f8:	4602      	mov	r2, r0
 800f2fa:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f2fe:	e883 0003 	stmia.w	r3, {r0, r1}
 800f302:	4611      	mov	r1, r2
 800f304:	4618      	mov	r0, r3
 800f306:	f7fa ff1d 	bl	800a144 <_ZN8touchgfx4RectaNERKS0_>
 800f30a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800f30e:	f9b4 1000 	ldrsh.w	r1, [r4]
 800f312:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 800f316:	4299      	cmp	r1, r3
 800f318:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 800f31c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 800f320:	d10b      	bne.n	800f33a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800f322:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800f326:	4552      	cmp	r2, sl
 800f328:	d107      	bne.n	800f33a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800f32a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800f32e:	455a      	cmp	r2, fp
 800f330:	d103      	bne.n	800f33a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800f332:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800f336:	454a      	cmp	r2, r9
 800f338:	d06d      	beq.n	800f416 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800f33a:	f1bb 0f00 	cmp.w	fp, #0
 800f33e:	dd65      	ble.n	800f40c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800f340:	f1b9 0f00 	cmp.w	r9, #0
 800f344:	dd62      	ble.n	800f40c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800f346:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800f34a:	fa1f f08a 	uxth.w	r0, sl
 800f34e:	4552      	cmp	r2, sl
 800f350:	9000      	str	r0, [sp, #0]
 800f352:	da12      	bge.n	800f37a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 800f354:	9301      	str	r3, [sp, #4]
 800f356:	9b00      	ldr	r3, [sp, #0]
 800f358:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800f35c:	f8ad 2012 	strh.w	r2, [sp, #18]
 800f360:	1a9a      	subs	r2, r3, r2
 800f362:	f8ad 1010 	strh.w	r1, [sp, #16]
 800f366:	4631      	mov	r1, r6
 800f368:	f8ad 0014 	strh.w	r0, [sp, #20]
 800f36c:	4640      	mov	r0, r8
 800f36e:	f8ad 2016 	strh.w	r2, [sp, #22]
 800f372:	69ea      	ldr	r2, [r5, #28]
 800f374:	f7ff ff7a 	bl	800f26c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800f378:	9b01      	ldr	r3, [sp, #4]
 800f37a:	f9b4 2000 	ldrsh.w	r2, [r4]
 800f37e:	b29f      	uxth	r7, r3
 800f380:	429a      	cmp	r2, r3
 800f382:	da0d      	bge.n	800f3a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 800f384:	f8ad 2010 	strh.w	r2, [sp, #16]
 800f388:	1aba      	subs	r2, r7, r2
 800f38a:	f8ad a012 	strh.w	sl, [sp, #18]
 800f38e:	4631      	mov	r1, r6
 800f390:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f394:	4640      	mov	r0, r8
 800f396:	f8ad 9016 	strh.w	r9, [sp, #22]
 800f39a:	69ea      	ldr	r2, [r5, #28]
 800f39c:	f7ff ff66 	bl	800f26c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800f3a0:	8822      	ldrh	r2, [r4, #0]
 800f3a2:	445f      	add	r7, fp
 800f3a4:	88a3      	ldrh	r3, [r4, #4]
 800f3a6:	b2bf      	uxth	r7, r7
 800f3a8:	4413      	add	r3, r2
 800f3aa:	b23a      	sxth	r2, r7
 800f3ac:	b29b      	uxth	r3, r3
 800f3ae:	b219      	sxth	r1, r3
 800f3b0:	4291      	cmp	r1, r2
 800f3b2:	dd0d      	ble.n	800f3d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 800f3b4:	1bdb      	subs	r3, r3, r7
 800f3b6:	f8ad 2010 	strh.w	r2, [sp, #16]
 800f3ba:	f8ad a012 	strh.w	sl, [sp, #18]
 800f3be:	4631      	mov	r1, r6
 800f3c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f3c4:	4640      	mov	r0, r8
 800f3c6:	f8ad 9016 	strh.w	r9, [sp, #22]
 800f3ca:	69ea      	ldr	r2, [r5, #28]
 800f3cc:	f7ff ff4e 	bl	800f26c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800f3d0:	88e2      	ldrh	r2, [r4, #6]
 800f3d2:	8863      	ldrh	r3, [r4, #2]
 800f3d4:	4413      	add	r3, r2
 800f3d6:	9a00      	ldr	r2, [sp, #0]
 800f3d8:	444a      	add	r2, r9
 800f3da:	b29b      	uxth	r3, r3
 800f3dc:	fa1f f982 	uxth.w	r9, r2
 800f3e0:	b219      	sxth	r1, r3
 800f3e2:	fa0f f289 	sxth.w	r2, r9
 800f3e6:	428a      	cmp	r2, r1
 800f3e8:	da15      	bge.n	800f416 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800f3ea:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800f3ee:	eba3 0309 	sub.w	r3, r3, r9
 800f3f2:	f9b4 0000 	ldrsh.w	r0, [r4]
 800f3f6:	f8ad 1014 	strh.w	r1, [sp, #20]
 800f3fa:	4631      	mov	r1, r6
 800f3fc:	f8ad 0010 	strh.w	r0, [sp, #16]
 800f400:	f8ad 2012 	strh.w	r2, [sp, #18]
 800f404:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f408:	69ea      	ldr	r2, [r5, #28]
 800f40a:	e001      	b.n	800f410 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 800f40c:	69ea      	ldr	r2, [r5, #28]
 800f40e:	4621      	mov	r1, r4
 800f410:	4640      	mov	r0, r8
 800f412:	f7ff ff2b 	bl	800f26c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800f416:	4628      	mov	r0, r5
 800f418:	f7ff fe94 	bl	800f144 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800f41c:	6861      	ldr	r1, [r4, #4]
 800f41e:	4602      	mov	r2, r0
 800f420:	4633      	mov	r3, r6
 800f422:	6820      	ldr	r0, [r4, #0]
 800f424:	c303      	stmia	r3!, {r0, r1}
 800f426:	4611      	mov	r1, r2
 800f428:	4630      	mov	r0, r6
 800f42a:	f7fa fe8b 	bl	800a144 <_ZN8touchgfx4RectaNERKS0_>
 800f42e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800f432:	2b00      	cmp	r3, #0
 800f434:	f77f af33 	ble.w	800f29e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800f438:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	f77f af2e 	ble.w	800f29e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800f442:	4628      	mov	r0, r5
 800f444:	f7ff fe9a 	bl	800f17c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800f448:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800f44c:	1a18      	subs	r0, r3, r0
 800f44e:	f8ad 0010 	strh.w	r0, [sp, #16]
 800f452:	4628      	mov	r0, r5
 800f454:	f7ff fea6 	bl	800f1a4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800f458:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800f45c:	4631      	mov	r1, r6
 800f45e:	1a18      	subs	r0, r3, r0
 800f460:	f8ad 0012 	strh.w	r0, [sp, #18]
 800f464:	4628      	mov	r0, r5
 800f466:	682b      	ldr	r3, [r5, #0]
 800f468:	689b      	ldr	r3, [r3, #8]
 800f46a:	4798      	blx	r3
 800f46c:	e717      	b.n	800f29e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0800f46e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 800f46e:	b570      	push	{r4, r5, r6, lr}
 800f470:	1d06      	adds	r6, r0, #4
 800f472:	b086      	sub	sp, #24
 800f474:	460c      	mov	r4, r1
 800f476:	2300      	movs	r3, #0
 800f478:	4631      	mov	r1, r6
 800f47a:	4605      	mov	r5, r0
 800f47c:	a802      	add	r0, sp, #8
 800f47e:	9301      	str	r3, [sp, #4]
 800f480:	f7ff fc86 	bl	800ed90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f484:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800f488:	8822      	ldrh	r2, [r4, #0]
 800f48a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800f48e:	1ad2      	subs	r2, r2, r3
 800f490:	8863      	ldrh	r3, [r4, #2]
 800f492:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800f496:	1a5b      	subs	r3, r3, r1
 800f498:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800f49c:	f8ad 2010 	strh.w	r2, [sp, #16]
 800f4a0:	aa01      	add	r2, sp, #4
 800f4a2:	f8ad 0014 	strh.w	r0, [sp, #20]
 800f4a6:	4630      	mov	r0, r6
 800f4a8:	f8ad 1016 	strh.w	r1, [sp, #22]
 800f4ac:	a904      	add	r1, sp, #16
 800f4ae:	f8ad 3012 	strh.w	r3, [sp, #18]
 800f4b2:	f7fa ff1f 	bl	800a2f4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 800f4b6:	9a01      	ldr	r2, [sp, #4]
 800f4b8:	b11a      	cbz	r2, 800f4c2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 800f4ba:	4621      	mov	r1, r4
 800f4bc:	4628      	mov	r0, r5
 800f4be:	f7ff fed5 	bl	800f26c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800f4c2:	b006      	add	sp, #24
 800f4c4:	bd70      	pop	{r4, r5, r6, pc}

0800f4c6 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 800f4c6:	4602      	mov	r2, r0
 800f4c8:	b530      	push	{r4, r5, lr}
 800f4ca:	4604      	mov	r4, r0
 800f4cc:	b085      	sub	sp, #20
 800f4ce:	f852 0f08 	ldr.w	r0, [r2, #8]!
 800f4d2:	460d      	mov	r5, r1
 800f4d4:	466b      	mov	r3, sp
 800f4d6:	6851      	ldr	r1, [r2, #4]
 800f4d8:	c303      	stmia	r3!, {r0, r1}
 800f4da:	4629      	mov	r1, r5
 800f4dc:	4668      	mov	r0, sp
 800f4de:	f7fa fe31 	bl	800a144 <_ZN8touchgfx4RectaNERKS0_>
 800f4e2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800f4e6:	b12b      	cbz	r3, 800f4f4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 800f4e8:	4669      	mov	r1, sp
 800f4ea:	4620      	mov	r0, r4
 800f4ec:	f7ff ffbf 	bl	800f46e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 800f4f0:	b005      	add	sp, #20
 800f4f2:	bd30      	pop	{r4, r5, pc}
 800f4f4:	3404      	adds	r4, #4
 800f4f6:	a802      	add	r0, sp, #8
 800f4f8:	4621      	mov	r1, r4
 800f4fa:	f7ff fc49 	bl	800ed90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f4fe:	f8bd 3000 	ldrh.w	r3, [sp]
 800f502:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800f506:	4669      	mov	r1, sp
 800f508:	4620      	mov	r0, r4
 800f50a:	1a9b      	subs	r3, r3, r2
 800f50c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800f510:	f8ad 3000 	strh.w	r3, [sp]
 800f514:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f518:	1a9b      	subs	r3, r3, r2
 800f51a:	f8ad 3002 	strh.w	r3, [sp, #2]
 800f51e:	f7fa feb0 	bl	800a282 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 800f522:	e7e5      	b.n	800f4f0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0800f524 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 800f524:	460b      	mov	r3, r1
 800f526:	680a      	ldr	r2, [r1, #0]
 800f528:	1d01      	adds	r1, r0, #4
 800f52a:	6992      	ldr	r2, [r2, #24]
 800f52c:	4618      	mov	r0, r3
 800f52e:	4710      	bx	r2

0800f530 <_ZN8touchgfx12TextProviderC1Ev>:
 800f530:	b538      	push	{r3, r4, r5, lr}
 800f532:	2500      	movs	r5, #0
 800f534:	2302      	movs	r3, #2
 800f536:	4604      	mov	r4, r0
 800f538:	220e      	movs	r2, #14
 800f53a:	7403      	strb	r3, [r0, #16]
 800f53c:	4629      	mov	r1, r5
 800f53e:	6145      	str	r5, [r0, #20]
 800f540:	7605      	strb	r5, [r0, #24]
 800f542:	83c5      	strh	r5, [r0, #30]
 800f544:	8405      	strh	r5, [r0, #32]
 800f546:	86c5      	strh	r5, [r0, #54]	; 0x36
 800f548:	8705      	strh	r5, [r0, #56]	; 0x38
 800f54a:	87c5      	strh	r5, [r0, #62]	; 0x3e
 800f54c:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 800f550:	e9c0 5500 	strd	r5, r5, [r0]
 800f554:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 800f558:	304c      	adds	r0, #76	; 0x4c
 800f55a:	f009 fd1b 	bl	8018f94 <memset>
 800f55e:	2301      	movs	r3, #1
 800f560:	4620      	mov	r0, r4
 800f562:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 800f566:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800f56a:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 800f56e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 800f572:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 800f576:	f7f3 f803 	bl	8002580 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800f57a:	4620      	mov	r0, r4
 800f57c:	bd38      	pop	{r3, r4, r5, pc}

0800f57e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 800f57e:	b530      	push	{r4, r5, lr}
 800f580:	2500      	movs	r5, #0
 800f582:	2401      	movs	r4, #1
 800f584:	6843      	ldr	r3, [r0, #4]
 800f586:	b913      	cbnz	r3, 800f58e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800f588:	6803      	ldr	r3, [r0, #0]
 800f58a:	b313      	cbz	r3, 800f5d2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800f58c:	6043      	str	r3, [r0, #4]
 800f58e:	7e03      	ldrb	r3, [r0, #24]
 800f590:	b143      	cbz	r3, 800f5a4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800f592:	6943      	ldr	r3, [r0, #20]
 800f594:	b12b      	cbz	r3, 800f5a2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800f596:	881a      	ldrh	r2, [r3, #0]
 800f598:	b11a      	cbz	r2, 800f5a2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800f59a:	1c9a      	adds	r2, r3, #2
 800f59c:	6142      	str	r2, [r0, #20]
 800f59e:	8818      	ldrh	r0, [r3, #0]
 800f5a0:	bd30      	pop	{r4, r5, pc}
 800f5a2:	7605      	strb	r5, [r0, #24]
 800f5a4:	6843      	ldr	r3, [r0, #4]
 800f5a6:	8819      	ldrh	r1, [r3, #0]
 800f5a8:	b199      	cbz	r1, 800f5d2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800f5aa:	1c9a      	adds	r2, r3, #2
 800f5ac:	2902      	cmp	r1, #2
 800f5ae:	6042      	str	r2, [r0, #4]
 800f5b0:	d1f5      	bne.n	800f59e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 800f5b2:	7c03      	ldrb	r3, [r0, #16]
 800f5b4:	2b01      	cmp	r3, #1
 800f5b6:	d8e5      	bhi.n	800f584 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800f5b8:	1c5a      	adds	r2, r3, #1
 800f5ba:	3302      	adds	r3, #2
 800f5bc:	7402      	strb	r2, [r0, #16]
 800f5be:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800f5c2:	6143      	str	r3, [r0, #20]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d0dd      	beq.n	800f584 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800f5c8:	881b      	ldrh	r3, [r3, #0]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d0da      	beq.n	800f584 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800f5ce:	7604      	strb	r4, [r0, #24]
 800f5d0:	e7d8      	b.n	800f584 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800f5d2:	2000      	movs	r0, #0
 800f5d4:	e7e4      	b.n	800f5a0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0800f5d6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 800f5d6:	b430      	push	{r4, r5}
 800f5d8:	6815      	ldr	r5, [r2, #0]
 800f5da:	6085      	str	r5, [r0, #8]
 800f5dc:	6852      	ldr	r2, [r2, #4]
 800f5de:	6443      	str	r3, [r0, #68]	; 0x44
 800f5e0:	60c2      	str	r2, [r0, #12]
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	9b02      	ldr	r3, [sp, #8]
 800f5e6:	7402      	strb	r2, [r0, #16]
 800f5e8:	6001      	str	r1, [r0, #0]
 800f5ea:	6483      	str	r3, [r0, #72]	; 0x48
 800f5ec:	6042      	str	r2, [r0, #4]
 800f5ee:	6142      	str	r2, [r0, #20]
 800f5f0:	7602      	strb	r2, [r0, #24]
 800f5f2:	8702      	strh	r2, [r0, #56]	; 0x38
 800f5f4:	8402      	strh	r2, [r0, #32]
 800f5f6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800f5fa:	bc30      	pop	{r4, r5}
 800f5fc:	f7f2 bfc0 	b.w	8002580 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0800f600 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 800f600:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f602:	4605      	mov	r5, r0
 800f604:	4608      	mov	r0, r1
 800f606:	b1f1      	cbz	r1, 800f646 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 800f608:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 800f60c:	460b      	mov	r3, r1
 800f60e:	f101 0708 	add.w	r7, r1, #8
 800f612:	4622      	mov	r2, r4
 800f614:	6818      	ldr	r0, [r3, #0]
 800f616:	3308      	adds	r3, #8
 800f618:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800f61c:	4626      	mov	r6, r4
 800f61e:	42bb      	cmp	r3, r7
 800f620:	c603      	stmia	r6!, {r0, r1}
 800f622:	4634      	mov	r4, r6
 800f624:	d1f6      	bne.n	800f614 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800f626:	6818      	ldr	r0, [r3, #0]
 800f628:	6030      	str	r0, [r6, #0]
 800f62a:	4610      	mov	r0, r2
 800f62c:	889b      	ldrh	r3, [r3, #4]
 800f62e:	80b3      	strh	r3, [r6, #4]
 800f630:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 800f634:	015b      	lsls	r3, r3, #5
 800f636:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800f63a:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 800f63e:	430b      	orrs	r3, r1
 800f640:	425b      	negs	r3, r3
 800f642:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 800f646:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f648 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 800f648:	b538      	push	{r3, r4, r5, lr}
 800f64a:	460c      	mov	r4, r1
 800f64c:	6811      	ldr	r1, [r2, #0]
 800f64e:	4610      	mov	r0, r2
 800f650:	68cd      	ldr	r5, [r1, #12]
 800f652:	4619      	mov	r1, r3
 800f654:	47a8      	blx	r5
 800f656:	2800      	cmp	r0, #0
 800f658:	bf08      	it	eq
 800f65a:	4620      	moveq	r0, r4
 800f65c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800f660 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 800f660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f662:	4604      	mov	r4, r0
 800f664:	4615      	mov	r5, r2
 800f666:	4608      	mov	r0, r1
 800f668:	b93a      	cbnz	r2, 800f67a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 800f66a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 800f66e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 800f672:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 800f676:	4628      	mov	r0, r5
 800f678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f67a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800f67e:	8893      	ldrh	r3, [r2, #4]
 800f680:	ea4f 160c 	mov.w	r6, ip, lsl #4
 800f684:	f406 7280 	and.w	r2, r6, #256	; 0x100
 800f688:	79ee      	ldrb	r6, [r5, #7]
 800f68a:	4316      	orrs	r6, r2
 800f68c:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 800f690:	189a      	adds	r2, r3, r2
 800f692:	b2b7      	uxth	r7, r6
 800f694:	b291      	uxth	r1, r2
 800f696:	291d      	cmp	r1, #29
 800f698:	f200 8084 	bhi.w	800f7a4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 800f69c:	2201      	movs	r2, #1
 800f69e:	10f6      	asrs	r6, r6, #3
 800f6a0:	408a      	lsls	r2, r1
 800f6a2:	4978      	ldr	r1, [pc, #480]	; (800f884 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 800f6a4:	420a      	tst	r2, r1
 800f6a6:	d12e      	bne.n	800f706 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 800f6a8:	f412 7f60 	tst.w	r2, #896	; 0x380
 800f6ac:	d07a      	beq.n	800f7a4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 800f6ae:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 800f6b2:	462b      	mov	r3, r5
 800f6b4:	f105 0e08 	add.w	lr, r5, #8
 800f6b8:	4615      	mov	r5, r2
 800f6ba:	6818      	ldr	r0, [r3, #0]
 800f6bc:	3308      	adds	r3, #8
 800f6be:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800f6c2:	4694      	mov	ip, r2
 800f6c4:	4573      	cmp	r3, lr
 800f6c6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800f6ca:	4662      	mov	r2, ip
 800f6cc:	d1f5      	bne.n	800f6ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 800f6ce:	6818      	ldr	r0, [r3, #0]
 800f6d0:	f8cc 0000 	str.w	r0, [ip]
 800f6d4:	889b      	ldrh	r3, [r3, #4]
 800f6d6:	f8ac 3004 	strh.w	r3, [ip, #4]
 800f6da:	b2b3      	uxth	r3, r6
 800f6dc:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800f6e0:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 800f6e4:	1aca      	subs	r2, r1, r3
 800f6e6:	1bcf      	subs	r7, r1, r7
 800f6e8:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 800f6ec:	b292      	uxth	r2, r2
 800f6ee:	1afb      	subs	r3, r7, r3
 800f6f0:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 800f6f4:	10d2      	asrs	r2, r2, #3
 800f6f6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800f6fa:	4302      	orrs	r2, r0
 800f6fc:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 800f700:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 800f704:	e7b7      	b.n	800f676 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 800f706:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800f708:	b92b      	cbnz	r3, 800f716 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 800f70a:	4b5f      	ldr	r3, [pc, #380]	; (800f888 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 800f70c:	21c0      	movs	r1, #192	; 0xc0
 800f70e:	4a5f      	ldr	r2, [pc, #380]	; (800f88c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 800f710:	485f      	ldr	r0, [pc, #380]	; (800f890 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 800f712:	f009 fbb3 	bl	8018e7c <__assert_func>
 800f716:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800f718:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f71c:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800f71e:	f640 6333 	movw	r3, #3635	; 0xe33
 800f722:	4299      	cmp	r1, r3
 800f724:	d110      	bne.n	800f748 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 800f726:	6803      	ldr	r3, [r0, #0]
 800f728:	68db      	ldr	r3, [r3, #12]
 800f72a:	4798      	blx	r3
 800f72c:	7b41      	ldrb	r1, [r0, #13]
 800f72e:	00cb      	lsls	r3, r1, #3
 800f730:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800f734:	7a03      	ldrb	r3, [r0, #8]
 800f736:	0648      	lsls	r0, r1, #25
 800f738:	ea43 0302 	orr.w	r3, r3, r2
 800f73c:	bf44      	itt	mi
 800f73e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800f742:	b21b      	sxthmi	r3, r3
 800f744:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800f748:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800f74c:	462a      	mov	r2, r5
 800f74e:	f105 0c08 	add.w	ip, r5, #8
 800f752:	443b      	add	r3, r7
 800f754:	4433      	add	r3, r6
 800f756:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 800f75a:	b29b      	uxth	r3, r3
 800f75c:	4635      	mov	r5, r6
 800f75e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800f762:	6810      	ldr	r0, [r2, #0]
 800f764:	3208      	adds	r2, #8
 800f766:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800f76a:	4637      	mov	r7, r6
 800f76c:	4562      	cmp	r2, ip
 800f76e:	c703      	stmia	r7!, {r0, r1}
 800f770:	463e      	mov	r6, r7
 800f772:	d1f6      	bne.n	800f762 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 800f774:	6810      	ldr	r0, [r2, #0]
 800f776:	6038      	str	r0, [r7, #0]
 800f778:	8892      	ldrh	r2, [r2, #4]
 800f77a:	80ba      	strh	r2, [r7, #4]
 800f77c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800f780:	10db      	asrs	r3, r3, #3
 800f782:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800f786:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f78a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800f78e:	4313      	orrs	r3, r2
 800f790:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 800f794:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800f798:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 800f79c:	1a9b      	subs	r3, r3, r2
 800f79e:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 800f7a2:	e768      	b.n	800f676 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 800f7a4:	f023 0204 	bic.w	r2, r3, #4
 800f7a8:	f640 611b 	movw	r1, #3611	; 0xe1b
 800f7ac:	428a      	cmp	r2, r1
 800f7ae:	d003      	beq.n	800f7b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 800f7b0:	f640 621d 	movw	r2, #3613	; 0xe1d
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	d120      	bne.n	800f7fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 800f7b8:	3b01      	subs	r3, #1
 800f7ba:	4602      	mov	r2, r0
 800f7bc:	4629      	mov	r1, r5
 800f7be:	4620      	mov	r0, r4
 800f7c0:	b29b      	uxth	r3, r3
 800f7c2:	f7ff ff41 	bl	800f648 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800f7c6:	7b41      	ldrb	r1, [r0, #13]
 800f7c8:	00cb      	lsls	r3, r1, #3
 800f7ca:	0649      	lsls	r1, r1, #25
 800f7cc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800f7d0:	7a03      	ldrb	r3, [r0, #8]
 800f7d2:	ea43 0302 	orr.w	r3, r3, r2
 800f7d6:	bf44      	itt	mi
 800f7d8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800f7dc:	b21b      	sxthmi	r3, r3
 800f7de:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800f7e2:	7b6b      	ldrb	r3, [r5, #13]
 800f7e4:	7aaa      	ldrb	r2, [r5, #10]
 800f7e6:	005b      	lsls	r3, r3, #1
 800f7e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f7ec:	4313      	orrs	r3, r2
 800f7ee:	115a      	asrs	r2, r3, #5
 800f7f0:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 800f7f4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 800f7f8:	e035      	b.n	800f866 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 800f7fa:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 800f7fe:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800f802:	f402 7180 	and.w	r1, r2, #256	; 0x100
 800f806:	7a2a      	ldrb	r2, [r5, #8]
 800f808:	ea42 0201 	orr.w	r2, r2, r1
 800f80c:	f640 6109 	movw	r1, #3593	; 0xe09
 800f810:	bf1c      	itt	ne
 800f812:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 800f816:	b212      	sxthne	r2, r2
 800f818:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 800f81c:	f023 0210 	bic.w	r2, r3, #16
 800f820:	428a      	cmp	r2, r1
 800f822:	d003      	beq.n	800f82c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 800f824:	f640 6213 	movw	r2, #3603	; 0xe13
 800f828:	4293      	cmp	r3, r2
 800f82a:	d129      	bne.n	800f880 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 800f82c:	7b6e      	ldrb	r6, [r5, #13]
 800f82e:	4629      	mov	r1, r5
 800f830:	0076      	lsls	r6, r6, #1
 800f832:	f406 7280 	and.w	r2, r6, #256	; 0x100
 800f836:	7aae      	ldrb	r6, [r5, #10]
 800f838:	4316      	orrs	r6, r2
 800f83a:	f640 6213 	movw	r2, #3603	; 0xe13
 800f83e:	4293      	cmp	r3, r2
 800f840:	4602      	mov	r2, r0
 800f842:	4620      	mov	r0, r4
 800f844:	bf16      	itet	ne
 800f846:	f103 33ff 	addne.w	r3, r3, #4294967295
 800f84a:	f640 630c 	movweq	r3, #3596	; 0xe0c
 800f84e:	b29b      	uxthne	r3, r3
 800f850:	f7ff fefa 	bl	800f648 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800f854:	7b43      	ldrb	r3, [r0, #13]
 800f856:	7a82      	ldrb	r2, [r0, #10]
 800f858:	005b      	lsls	r3, r3, #1
 800f85a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f85e:	4313      	orrs	r3, r2
 800f860:	1af6      	subs	r6, r6, r3
 800f862:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 800f866:	7b69      	ldrb	r1, [r5, #13]
 800f868:	00cb      	lsls	r3, r1, #3
 800f86a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800f86e:	7a2b      	ldrb	r3, [r5, #8]
 800f870:	4313      	orrs	r3, r2
 800f872:	064a      	lsls	r2, r1, #25
 800f874:	bf44      	itt	mi
 800f876:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800f87a:	b21b      	sxthmi	r3, r3
 800f87c:	1bdb      	subs	r3, r3, r7
 800f87e:	e73f      	b.n	800f700 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 800f880:	2300      	movs	r3, #0
 800f882:	e7b7      	b.n	800f7f4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 800f884:	3fc00079 	.word	0x3fc00079
 800f888:	0801ab40 	.word	0x0801ab40
 800f88c:	0801c627 	.word	0x0801c627
 800f890:	0801ac12 	.word	0x0801ac12

0800f894 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 800f894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f898:	4604      	mov	r4, r0
 800f89a:	b942      	cbnz	r2, 800f8ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 800f89c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f8a0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 800f8a4:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800f8a8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 800f8ac:	e046      	b.n	800f93c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 800f8ae:	7b51      	ldrb	r1, [r2, #13]
 800f8b0:	8893      	ldrh	r3, [r2, #4]
 800f8b2:	010f      	lsls	r7, r1, #4
 800f8b4:	f407 7080 	and.w	r0, r7, #256	; 0x100
 800f8b8:	79d7      	ldrb	r7, [r2, #7]
 800f8ba:	4307      	orrs	r7, r0
 800f8bc:	2f04      	cmp	r7, #4
 800f8be:	b2bd      	uxth	r5, r7
 800f8c0:	bfcc      	ite	gt
 800f8c2:	08bf      	lsrgt	r7, r7, #2
 800f8c4:	2701      	movle	r7, #1
 800f8c6:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 800f8ca:	f200 80ab 	bhi.w	800fa24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 800f8ce:	f240 60e7 	movw	r0, #1767	; 0x6e7
 800f8d2:	4283      	cmp	r3, r0
 800f8d4:	d216      	bcs.n	800f904 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800f8d6:	f240 605b 	movw	r0, #1627	; 0x65b
 800f8da:	4283      	cmp	r3, r0
 800f8dc:	d859      	bhi.n	800f992 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 800f8de:	f240 6057 	movw	r0, #1623	; 0x657
 800f8e2:	4283      	cmp	r3, r0
 800f8e4:	d20e      	bcs.n	800f904 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800f8e6:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 800f8ea:	d24a      	bcs.n	800f982 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 800f8ec:	f240 604e 	movw	r0, #1614	; 0x64e
 800f8f0:	4283      	cmp	r3, r0
 800f8f2:	d207      	bcs.n	800f904 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800f8f4:	f240 601a 	movw	r0, #1562	; 0x61a
 800f8f8:	4283      	cmp	r3, r0
 800f8fa:	d02a      	beq.n	800f952 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800f8fc:	d821      	bhi.n	800f942 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 800f8fe:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 800f902:	d35b      	bcc.n	800f9bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800f904:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 800f908:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800f90c:	f040 80d0 	bne.w	800fab0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 800f910:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 800f914:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800f918:	f040 80ca 	bne.w	800fab0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 800f91c:	00cb      	lsls	r3, r1, #3
 800f91e:	0649      	lsls	r1, r1, #25
 800f920:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800f924:	7a13      	ldrb	r3, [r2, #8]
 800f926:	ea43 0300 	orr.w	r3, r3, r0
 800f92a:	bf44      	itt	mi
 800f92c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800f930:	b21b      	sxthmi	r3, r3
 800f932:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800f936:	1b5d      	subs	r5, r3, r5
 800f938:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800f93c:	4610      	mov	r0, r2
 800f93e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f942:	f240 604b 	movw	r0, #1611	; 0x64b
 800f946:	4283      	cmp	r3, r0
 800f948:	d338      	bcc.n	800f9bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800f94a:	f240 604c 	movw	r0, #1612	; 0x64c
 800f94e:	4283      	cmp	r3, r0
 800f950:	d9d8      	bls.n	800f904 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800f952:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 800f956:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 800f95a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800f95e:	f040 80f2 	bne.w	800fb46 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 800f962:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800f966:	f040 80ee 	bne.w	800fb46 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 800f96a:	00cb      	lsls	r3, r1, #3
 800f96c:	064e      	lsls	r6, r1, #25
 800f96e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800f972:	7a13      	ldrb	r3, [r2, #8]
 800f974:	ea43 0300 	orr.w	r3, r3, r0
 800f978:	bf44      	itt	mi
 800f97a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800f97e:	b21b      	sxthmi	r3, r3
 800f980:	e7d9      	b.n	800f936 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 800f982:	f240 6054 	movw	r0, #1620	; 0x654
 800f986:	4283      	cmp	r3, r0
 800f988:	d8e3      	bhi.n	800f952 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800f98a:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 800f98e:	d9e0      	bls.n	800f952 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800f990:	e7b8      	b.n	800f904 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800f992:	f240 6074 	movw	r0, #1652	; 0x674
 800f996:	4283      	cmp	r3, r0
 800f998:	d0b4      	beq.n	800f904 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800f99a:	d82d      	bhi.n	800f9f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 800f99c:	f240 605e 	movw	r0, #1630	; 0x65e
 800f9a0:	4283      	cmp	r3, r0
 800f9a2:	d804      	bhi.n	800f9ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 800f9a4:	f240 605d 	movw	r0, #1629	; 0x65d
 800f9a8:	4283      	cmp	r3, r0
 800f9aa:	d3d2      	bcc.n	800f952 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800f9ac:	e7aa      	b.n	800f904 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800f9ae:	f240 605f 	movw	r0, #1631	; 0x65f
 800f9b2:	4283      	cmp	r3, r0
 800f9b4:	d0cd      	beq.n	800f952 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800f9b6:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 800f9ba:	d0a3      	beq.n	800f904 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800f9bc:	00cb      	lsls	r3, r1, #3
 800f9be:	0649      	lsls	r1, r1, #25
 800f9c0:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800f9c4:	7a13      	ldrb	r3, [r2, #8]
 800f9c6:	ea43 0300 	orr.w	r3, r3, r0
 800f9ca:	bf44      	itt	mi
 800f9cc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800f9d0:	b21b      	sxthmi	r3, r3
 800f9d2:	1b5d      	subs	r5, r3, r5
 800f9d4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800f9d8:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800f9dc:	7b53      	ldrb	r3, [r2, #13]
 800f9de:	015b      	lsls	r3, r3, #5
 800f9e0:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800f9e4:	7993      	ldrb	r3, [r2, #6]
 800f9e6:	430b      	orrs	r3, r1
 800f9e8:	2105      	movs	r1, #5
 800f9ea:	005b      	lsls	r3, r3, #1
 800f9ec:	fb93 f3f1 	sdiv	r3, r3, r1
 800f9f0:	f992 1009 	ldrsb.w	r1, [r2, #9]
 800f9f4:	440b      	add	r3, r1
 800f9f6:	e757      	b.n	800f8a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 800f9f8:	f240 60e2 	movw	r0, #1762	; 0x6e2
 800f9fc:	4283      	cmp	r3, r0
 800f9fe:	d809      	bhi.n	800fa14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 800fa00:	f240 60df 	movw	r0, #1759	; 0x6df
 800fa04:	4283      	cmp	r3, r0
 800fa06:	f4bf af7d 	bcs.w	800f904 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800fa0a:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 800fa0e:	2b05      	cmp	r3, #5
 800fa10:	d8d4      	bhi.n	800f9bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800fa12:	e777      	b.n	800f904 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800fa14:	f240 60e3 	movw	r0, #1763	; 0x6e3
 800fa18:	4283      	cmp	r3, r0
 800fa1a:	d09a      	beq.n	800f952 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800fa1c:	f240 60e4 	movw	r0, #1764	; 0x6e4
 800fa20:	4283      	cmp	r3, r0
 800fa22:	e7ca      	b.n	800f9ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 800fa24:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 800fa28:	d22b      	bcs.n	800fa82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 800fa2a:	f640 00ed 	movw	r0, #2285	; 0x8ed
 800fa2e:	4283      	cmp	r3, r0
 800fa30:	d28f      	bcs.n	800f952 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800fa32:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800fa36:	4283      	cmp	r3, r0
 800fa38:	d816      	bhi.n	800fa68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 800fa3a:	f640 00e4 	movw	r0, #2276	; 0x8e4
 800fa3e:	4283      	cmp	r3, r0
 800fa40:	f4bf af60 	bcs.w	800f904 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800fa44:	f240 60ec 	movw	r0, #1772	; 0x6ec
 800fa48:	4283      	cmp	r3, r0
 800fa4a:	d80a      	bhi.n	800fa62 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 800fa4c:	f240 60eb 	movw	r0, #1771	; 0x6eb
 800fa50:	4283      	cmp	r3, r0
 800fa52:	f4bf af57 	bcs.w	800f904 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800fa56:	f240 60ea 	movw	r0, #1770	; 0x6ea
 800fa5a:	4283      	cmp	r3, r0
 800fa5c:	f43f af79 	beq.w	800f952 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800fa60:	e7ac      	b.n	800f9bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800fa62:	f240 60ed 	movw	r0, #1773	; 0x6ed
 800fa66:	e7f8      	b.n	800fa5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 800fa68:	f640 00e8 	movw	r0, #2280	; 0x8e8
 800fa6c:	4283      	cmp	r3, r0
 800fa6e:	d802      	bhi.n	800fa76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 800fa70:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800fa74:	e798      	b.n	800f9a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 800fa76:	f640 00e9 	movw	r0, #2281	; 0x8e9
 800fa7a:	4283      	cmp	r3, r0
 800fa7c:	f47f af42 	bne.w	800f904 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800fa80:	e767      	b.n	800f952 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800fa82:	f640 00f6 	movw	r0, #2294	; 0x8f6
 800fa86:	4283      	cmp	r3, r0
 800fa88:	f43f af63 	beq.w	800f952 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800fa8c:	d802      	bhi.n	800fa94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 800fa8e:	f640 00f2 	movw	r0, #2290	; 0x8f2
 800fa92:	e7f2      	b.n	800fa7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 800fa94:	f640 00fa 	movw	r0, #2298	; 0x8fa
 800fa98:	4283      	cmp	r3, r0
 800fa9a:	d805      	bhi.n	800faa8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 800fa9c:	f640 00f9 	movw	r0, #2297	; 0x8f9
 800faa0:	4283      	cmp	r3, r0
 800faa2:	f4ff af2f 	bcc.w	800f904 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800faa6:	e754      	b.n	800f952 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800faa8:	f640 00fe 	movw	r0, #2302	; 0x8fe
 800faac:	4283      	cmp	r3, r0
 800faae:	e7af      	b.n	800fa10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 800fab0:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 800fab4:	4617      	mov	r7, r2
 800fab6:	f102 0808 	add.w	r8, r2, #8
 800faba:	4666      	mov	r6, ip
 800fabc:	6838      	ldr	r0, [r7, #0]
 800fabe:	3708      	adds	r7, #8
 800fac0:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800fac4:	46e6      	mov	lr, ip
 800fac6:	4547      	cmp	r7, r8
 800fac8:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800facc:	46f4      	mov	ip, lr
 800face:	d1f5      	bne.n	800fabc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 800fad0:	6838      	ldr	r0, [r7, #0]
 800fad2:	f8ce 0000 	str.w	r0, [lr]
 800fad6:	88b9      	ldrh	r1, [r7, #4]
 800fad8:	f8ae 1004 	strh.w	r1, [lr, #4]
 800fadc:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 800fae0:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800fae4:	d009      	beq.n	800fafa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 800fae6:	7b51      	ldrb	r1, [r2, #13]
 800fae8:	7992      	ldrb	r2, [r2, #6]
 800faea:	0149      	lsls	r1, r1, #5
 800faec:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800faf0:	4311      	orrs	r1, r2
 800faf2:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800faf6:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 800fafa:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800fafe:	d00d      	beq.n	800fb1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 800fb00:	442b      	add	r3, r5
 800fb02:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800fb06:	b29b      	uxth	r3, r3
 800fb08:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800fb0c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800fb10:	10db      	asrs	r3, r3, #3
 800fb12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fb16:	4313      	orrs	r3, r2
 800fb18:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800fb1c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 800fb20:	00cb      	lsls	r3, r1, #3
 800fb22:	064f      	lsls	r7, r1, #25
 800fb24:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800fb28:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800fb2c:	ea43 0302 	orr.w	r3, r3, r2
 800fb30:	bf44      	itt	mi
 800fb32:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800fb36:	b21b      	sxthmi	r3, r3
 800fb38:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800fb3c:	1b5d      	subs	r5, r3, r5
 800fb3e:	4632      	mov	r2, r6
 800fb40:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 800fb44:	e6fa      	b.n	800f93c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 800fb46:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 800fb4a:	4694      	mov	ip, r2
 800fb4c:	f102 0908 	add.w	r9, r2, #8
 800fb50:	4676      	mov	r6, lr
 800fb52:	f8dc 0000 	ldr.w	r0, [ip]
 800fb56:	f10c 0c08 	add.w	ip, ip, #8
 800fb5a:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 800fb5e:	46f0      	mov	r8, lr
 800fb60:	45cc      	cmp	ip, r9
 800fb62:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800fb66:	46c6      	mov	lr, r8
 800fb68:	d1f3      	bne.n	800fb52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 800fb6a:	f8dc 0000 	ldr.w	r0, [ip]
 800fb6e:	f8c8 0000 	str.w	r0, [r8]
 800fb72:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 800fb76:	f8a8 1004 	strh.w	r1, [r8, #4]
 800fb7a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 800fb7e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800fb82:	d009      	beq.n	800fb98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 800fb84:	7b51      	ldrb	r1, [r2, #13]
 800fb86:	7992      	ldrb	r2, [r2, #6]
 800fb88:	0149      	lsls	r1, r1, #5
 800fb8a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800fb8e:	4311      	orrs	r1, r2
 800fb90:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800fb94:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 800fb98:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800fb9c:	d00d      	beq.n	800fbba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 800fb9e:	1bdb      	subs	r3, r3, r7
 800fba0:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 800fba4:	b29b      	uxth	r3, r3
 800fba6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800fbaa:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800fbae:	10db      	asrs	r3, r3, #3
 800fbb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fbb4:	4313      	orrs	r3, r2
 800fbb6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 800fbba:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 800fbbe:	00cb      	lsls	r3, r1, #3
 800fbc0:	0648      	lsls	r0, r1, #25
 800fbc2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800fbc6:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 800fbca:	ea43 0302 	orr.w	r3, r3, r2
 800fbce:	bf44      	itt	mi
 800fbd0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800fbd4:	b21b      	sxthmi	r3, r3
 800fbd6:	e7b1      	b.n	800fb3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0800fbd8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 800fbd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbdc:	461e      	mov	r6, r3
 800fbde:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 800fbe0:	4604      	mov	r4, r0
 800fbe2:	4617      	mov	r7, r2
 800fbe4:	b92b      	cbnz	r3, 800fbf2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 800fbe6:	4b25      	ldr	r3, [pc, #148]	; (800fc7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 800fbe8:	21c0      	movs	r1, #192	; 0xc0
 800fbea:	4a25      	ldr	r2, [pc, #148]	; (800fc80 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 800fbec:	4825      	ldr	r0, [pc, #148]	; (800fc84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 800fbee:	f009 f945 	bl	8018e7c <__assert_func>
 800fbf2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800fbf4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800fbf8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 800fbfc:	f7f2 fc7e 	bl	80024fc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800fc00:	4605      	mov	r5, r0
 800fc02:	b918      	cbnz	r0, 800fc0c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 800fc04:	6030      	str	r0, [r6, #0]
 800fc06:	4628      	mov	r0, r5
 800fc08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	4601      	mov	r1, r0
 800fc10:	4638      	mov	r0, r7
 800fc12:	68db      	ldr	r3, [r3, #12]
 800fc14:	4798      	blx	r3
 800fc16:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 800fc1a:	4602      	mov	r2, r0
 800fc1c:	6030      	str	r0, [r6, #0]
 800fc1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fc22:	d213      	bcs.n	800fc4c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 800fc24:	4643      	mov	r3, r8
 800fc26:	4639      	mov	r1, r7
 800fc28:	4620      	mov	r0, r4
 800fc2a:	f7ff fe33 	bl	800f894 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800fc2e:	6030      	str	r0, [r6, #0]
 800fc30:	6833      	ldr	r3, [r6, #0]
 800fc32:	b143      	cbz	r3, 800fc46 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 800fc34:	7b5a      	ldrb	r2, [r3, #13]
 800fc36:	7a9b      	ldrb	r3, [r3, #10]
 800fc38:	0052      	lsls	r2, r2, #1
 800fc3a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800fc3e:	4313      	orrs	r3, r2
 800fc40:	bf0c      	ite	eq
 800fc42:	2301      	moveq	r3, #1
 800fc44:	2300      	movne	r3, #0
 800fc46:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 800fc4a:	e7dc      	b.n	800fc06 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 800fc4c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 800fc50:	b29b      	uxth	r3, r3
 800fc52:	2b7f      	cmp	r3, #127	; 0x7f
 800fc54:	d804      	bhi.n	800fc60 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 800fc56:	4639      	mov	r1, r7
 800fc58:	4620      	mov	r0, r4
 800fc5a:	f7ff fd01 	bl	800f660 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800fc5e:	e7e6      	b.n	800fc2e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 800fc60:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d0e3      	beq.n	800fc30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 800fc68:	f640 1302 	movw	r3, #2306	; 0x902
 800fc6c:	429d      	cmp	r5, r3
 800fc6e:	d1df      	bne.n	800fc30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 800fc70:	4601      	mov	r1, r0
 800fc72:	4620      	mov	r0, r4
 800fc74:	f7ff fcc4 	bl	800f600 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800fc78:	e7d9      	b.n	800fc2e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 800fc7a:	bf00      	nop
 800fc7c:	0801ab40 	.word	0x0801ab40
 800fc80:	0801c627 	.word	0x0801c627
 800fc84:	0801ac12 	.word	0x0801ac12

0800fc88 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 800fc88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc8c:	461e      	mov	r6, r3
 800fc8e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 800fc90:	4604      	mov	r4, r0
 800fc92:	4617      	mov	r7, r2
 800fc94:	b92b      	cbnz	r3, 800fca2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 800fc96:	4b26      	ldr	r3, [pc, #152]	; (800fd30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 800fc98:	21c0      	movs	r1, #192	; 0xc0
 800fc9a:	4a26      	ldr	r2, [pc, #152]	; (800fd34 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 800fc9c:	4826      	ldr	r0, [pc, #152]	; (800fd38 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 800fc9e:	f009 f8ed 	bl	8018e7c <__assert_func>
 800fca2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800fca4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800fca8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 800fcac:	f7f2 fc26 	bl	80024fc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800fcb0:	4605      	mov	r5, r0
 800fcb2:	b918      	cbnz	r0, 800fcbc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 800fcb4:	6030      	str	r0, [r6, #0]
 800fcb6:	4628      	mov	r0, r5
 800fcb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcbc:	683b      	ldr	r3, [r7, #0]
 800fcbe:	4601      	mov	r1, r0
 800fcc0:	4638      	mov	r0, r7
 800fcc2:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800fcc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fcca:	47c8      	blx	r9
 800fccc:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 800fcd0:	4602      	mov	r2, r0
 800fcd2:	6030      	str	r0, [r6, #0]
 800fcd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fcd8:	d213      	bcs.n	800fd02 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 800fcda:	4643      	mov	r3, r8
 800fcdc:	4639      	mov	r1, r7
 800fcde:	4620      	mov	r0, r4
 800fce0:	f7ff fdd8 	bl	800f894 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800fce4:	6030      	str	r0, [r6, #0]
 800fce6:	6833      	ldr	r3, [r6, #0]
 800fce8:	b143      	cbz	r3, 800fcfc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 800fcea:	7b5a      	ldrb	r2, [r3, #13]
 800fcec:	7a9b      	ldrb	r3, [r3, #10]
 800fcee:	0052      	lsls	r2, r2, #1
 800fcf0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800fcf4:	4313      	orrs	r3, r2
 800fcf6:	bf0c      	ite	eq
 800fcf8:	2301      	moveq	r3, #1
 800fcfa:	2300      	movne	r3, #0
 800fcfc:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 800fd00:	e7d9      	b.n	800fcb6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 800fd02:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 800fd06:	b29b      	uxth	r3, r3
 800fd08:	2b7f      	cmp	r3, #127	; 0x7f
 800fd0a:	d804      	bhi.n	800fd16 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 800fd0c:	4639      	mov	r1, r7
 800fd0e:	4620      	mov	r0, r4
 800fd10:	f7ff fca6 	bl	800f660 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800fd14:	e7e6      	b.n	800fce4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 800fd16:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d0e3      	beq.n	800fce6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 800fd1e:	f640 1302 	movw	r3, #2306	; 0x902
 800fd22:	429d      	cmp	r5, r3
 800fd24:	d1df      	bne.n	800fce6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 800fd26:	4601      	mov	r1, r0
 800fd28:	4620      	mov	r0, r4
 800fd2a:	f7ff fc69 	bl	800f600 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800fd2e:	e7d9      	b.n	800fce4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 800fd30:	0801ab40 	.word	0x0801ab40
 800fd34:	0801c627 	.word	0x0801c627
 800fd38:	0801ac12 	.word	0x0801ac12

0800fd3c <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 800fd3c:	b510      	push	{r4, lr}
 800fd3e:	4604      	mov	r4, r0
 800fd40:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 800fd44:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800fd46:	b9d9      	cbnz	r1, 800fd80 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 800fd48:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800fd4a:	2b0a      	cmp	r3, #10
 800fd4c:	d037      	beq.n	800fdbe <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 800fd4e:	4620      	mov	r0, r4
 800fd50:	f7ff fc15 	bl	800f57e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 800fd54:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800fd56:	2b09      	cmp	r3, #9
 800fd58:	d906      	bls.n	800fd68 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 800fd5a:	4b19      	ldr	r3, [pc, #100]	; (800fdc0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 800fd5c:	f44f 7182 	mov.w	r1, #260	; 0x104
 800fd60:	4a18      	ldr	r2, [pc, #96]	; (800fdc4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 800fd62:	4819      	ldr	r0, [pc, #100]	; (800fdc8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 800fd64:	f009 f88a 	bl	8018e7c <__assert_func>
 800fd68:	1c5a      	adds	r2, r3, #1
 800fd6a:	8722      	strh	r2, [r4, #56]	; 0x38
 800fd6c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800fd6e:	4413      	add	r3, r2
 800fd70:	b29b      	uxth	r3, r3
 800fd72:	2b09      	cmp	r3, #9
 800fd74:	bf88      	it	hi
 800fd76:	3b0a      	subhi	r3, #10
 800fd78:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800fd7c:	8458      	strh	r0, [r3, #34]	; 0x22
 800fd7e:	e7e3      	b.n	800fd48 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 800fd80:	2b0a      	cmp	r3, #10
 800fd82:	d01c      	beq.n	800fdbe <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 800fd84:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800fd86:	3901      	subs	r1, #1
 800fd88:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800fd8c:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 800fd8e:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 800fd92:	1c51      	adds	r1, r2, #1
 800fd94:	b289      	uxth	r1, r1
 800fd96:	2901      	cmp	r1, #1
 800fd98:	bf8a      	itet	hi
 800fd9a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800fd9e:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 800fda0:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 800fda2:	2b09      	cmp	r3, #9
 800fda4:	d8d9      	bhi.n	800fd5a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 800fda6:	1c5a      	adds	r2, r3, #1
 800fda8:	8722      	strh	r2, [r4, #56]	; 0x38
 800fdaa:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800fdac:	4413      	add	r3, r2
 800fdae:	b29b      	uxth	r3, r3
 800fdb0:	2b09      	cmp	r3, #9
 800fdb2:	bf88      	it	hi
 800fdb4:	3b0a      	subhi	r3, #10
 800fdb6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800fdba:	8458      	strh	r0, [r3, #34]	; 0x22
 800fdbc:	e7c0      	b.n	800fd40 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 800fdbe:	bd10      	pop	{r4, pc}
 800fdc0:	0801c3f8 	.word	0x0801c3f8
 800fdc4:	0801c77d 	.word	0x0801c77d
 800fdc8:	0801ac12 	.word	0x0801ac12

0800fdcc <_ZN8touchgfx12TextProvider11getNextCharEv>:
 800fdcc:	b538      	push	{r3, r4, r5, lr}
 800fdce:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 800fdd0:	4604      	mov	r4, r0
 800fdd2:	b92a      	cbnz	r2, 800fde0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 800fdd4:	4b13      	ldr	r3, [pc, #76]	; (800fe24 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 800fdd6:	21d5      	movs	r1, #213	; 0xd5
 800fdd8:	4a13      	ldr	r2, [pc, #76]	; (800fe28 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 800fdda:	4814      	ldr	r0, [pc, #80]	; (800fe2c <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 800fddc:	f009 f84e 	bl	8018e7c <__assert_func>
 800fde0:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800fde2:	3a01      	subs	r2, #1
 800fde4:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 800fde8:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 800fdea:	8702      	strh	r2, [r0, #56]	; 0x38
 800fdec:	1c5a      	adds	r2, r3, #1
 800fdee:	b292      	uxth	r2, r2
 800fdf0:	2a09      	cmp	r2, #9
 800fdf2:	bf8a      	itet	hi
 800fdf4:	3b09      	subhi	r3, #9
 800fdf6:	86c2      	strhls	r2, [r0, #54]	; 0x36
 800fdf8:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 800fdfa:	f7ff ff9f 	bl	800fd3c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800fdfe:	8c23      	ldrh	r3, [r4, #32]
 800fe00:	2b01      	cmp	r3, #1
 800fe02:	bf9c      	itt	ls
 800fe04:	3301      	addls	r3, #1
 800fe06:	8423      	strhls	r3, [r4, #32]
 800fe08:	8be3      	ldrh	r3, [r4, #30]
 800fe0a:	b90b      	cbnz	r3, 800fe10 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 800fe0c:	2302      	movs	r3, #2
 800fe0e:	83e3      	strh	r3, [r4, #30]
 800fe10:	8be3      	ldrh	r3, [r4, #30]
 800fe12:	4628      	mov	r0, r5
 800fe14:	3b01      	subs	r3, #1
 800fe16:	b29b      	uxth	r3, r3
 800fe18:	83e3      	strh	r3, [r4, #30]
 800fe1a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800fe1e:	8365      	strh	r5, [r4, #26]
 800fe20:	bd38      	pop	{r3, r4, r5, pc}
 800fe22:	bf00      	nop
 800fe24:	0801ab40 	.word	0x0801ab40
 800fe28:	0801c6d2 	.word	0x0801c6d2
 800fe2c:	0801ac12 	.word	0x0801ac12

0800fe30 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 800fe30:	428a      	cmp	r2, r1
 800fe32:	b538      	push	{r3, r4, r5, lr}
 800fe34:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 800fe36:	d90c      	bls.n	800fe52 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 800fe38:	b92c      	cbnz	r4, 800fe46 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 800fe3a:	4b1c      	ldr	r3, [pc, #112]	; (800feac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 800fe3c:	21e1      	movs	r1, #225	; 0xe1
 800fe3e:	4a1c      	ldr	r2, [pc, #112]	; (800feb0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 800fe40:	481c      	ldr	r0, [pc, #112]	; (800feb4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 800fe42:	f009 f81b 	bl	8018e7c <__assert_func>
 800fe46:	3c01      	subs	r4, #1
 800fe48:	4b1b      	ldr	r3, [pc, #108]	; (800feb8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 800fe4a:	4a1c      	ldr	r2, [pc, #112]	; (800febc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 800fe4c:	21c5      	movs	r1, #197	; 0xc5
 800fe4e:	8704      	strh	r4, [r0, #56]	; 0x38
 800fe50:	e7f6      	b.n	800fe40 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 800fe52:	428c      	cmp	r4, r1
 800fe54:	d203      	bcs.n	800fe5e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 800fe56:	4b1a      	ldr	r3, [pc, #104]	; (800fec0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 800fe58:	21cb      	movs	r1, #203	; 0xcb
 800fe5a:	4a1a      	ldr	r2, [pc, #104]	; (800fec4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 800fe5c:	e7f0      	b.n	800fe40 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 800fe5e:	1a64      	subs	r4, r4, r1
 800fe60:	250a      	movs	r5, #10
 800fe62:	8704      	strh	r4, [r0, #56]	; 0x38
 800fe64:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 800fe66:	4421      	add	r1, r4
 800fe68:	b289      	uxth	r1, r1
 800fe6a:	2909      	cmp	r1, #9
 800fe6c:	bf88      	it	hi
 800fe6e:	390a      	subhi	r1, #10
 800fe70:	86c1      	strh	r1, [r0, #54]	; 0x36
 800fe72:	b1ba      	cbz	r2, 800fea4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 800fe74:	3a01      	subs	r2, #1
 800fe76:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 800fe78:	b292      	uxth	r2, r2
 800fe7a:	2909      	cmp	r1, #9
 800fe7c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 800fe80:	d903      	bls.n	800fe8a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 800fe82:	4b11      	ldr	r3, [pc, #68]	; (800fec8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 800fe84:	21e6      	movs	r1, #230	; 0xe6
 800fe86:	4a11      	ldr	r2, [pc, #68]	; (800fecc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 800fe88:	e7da      	b.n	800fe40 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 800fe8a:	3101      	adds	r1, #1
 800fe8c:	8701      	strh	r1, [r0, #56]	; 0x38
 800fe8e:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 800fe90:	b901      	cbnz	r1, 800fe94 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 800fe92:	86c5      	strh	r5, [r0, #54]	; 0x36
 800fe94:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 800fe96:	3901      	subs	r1, #1
 800fe98:	b289      	uxth	r1, r1
 800fe9a:	86c1      	strh	r1, [r0, #54]	; 0x36
 800fe9c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800fea0:	844c      	strh	r4, [r1, #34]	; 0x22
 800fea2:	e7e6      	b.n	800fe72 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 800fea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fea8:	f7ff bf48 	b.w	800fd3c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800feac:	0801ab40 	.word	0x0801ab40
 800feb0:	0801c4ab 	.word	0x0801c4ab
 800feb4:	0801ac12 	.word	0x0801ac12
 800feb8:	0801ac3e 	.word	0x0801ac3e
 800febc:	0801c555 	.word	0x0801c555
 800fec0:	0801c404 	.word	0x0801c404
 800fec4:	0801c82c 	.word	0x0801c82c
 800fec8:	0801c410 	.word	0x0801c410
 800fecc:	0801c423 	.word	0x0801c423

0800fed0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 800fed0:	3a01      	subs	r2, #1
 800fed2:	b570      	push	{r4, r5, r6, lr}
 800fed4:	b292      	uxth	r2, r2
 800fed6:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800feda:	42b2      	cmp	r2, r6
 800fedc:	d019      	beq.n	800ff12 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 800fede:	8c04      	ldrh	r4, [r0, #32]
 800fee0:	f831 5b02 	ldrh.w	r5, [r1], #2
 800fee4:	4294      	cmp	r4, r2
 800fee6:	d805      	bhi.n	800fef4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 800fee8:	4b19      	ldr	r3, [pc, #100]	; (800ff50 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 800feea:	4a1a      	ldr	r2, [pc, #104]	; (800ff54 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 800feec:	21c5      	movs	r1, #197	; 0xc5
 800feee:	481a      	ldr	r0, [pc, #104]	; (800ff58 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 800fef0:	f008 ffc4 	bl	8018e7c <__assert_func>
 800fef4:	8bc4      	ldrh	r4, [r0, #30]
 800fef6:	4414      	add	r4, r2
 800fef8:	3a01      	subs	r2, #1
 800fefa:	b2a4      	uxth	r4, r4
 800fefc:	b292      	uxth	r2, r2
 800fefe:	2c01      	cmp	r4, #1
 800ff00:	bf88      	it	hi
 800ff02:	3c02      	subhi	r4, #2
 800ff04:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800ff08:	8b64      	ldrh	r4, [r4, #26]
 800ff0a:	42ac      	cmp	r4, r5
 800ff0c:	d0e5      	beq.n	800feda <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 800ff0e:	2000      	movs	r0, #0
 800ff10:	bd70      	pop	{r4, r5, r6, pc}
 800ff12:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800ff16:	2400      	movs	r4, #0
 800ff18:	4413      	add	r3, r2
 800ff1a:	b2a2      	uxth	r2, r4
 800ff1c:	429a      	cmp	r2, r3
 800ff1e:	da14      	bge.n	800ff4a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 800ff20:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 800ff22:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 800ff26:	4296      	cmp	r6, r2
 800ff28:	d802      	bhi.n	800ff30 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 800ff2a:	4b09      	ldr	r3, [pc, #36]	; (800ff50 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 800ff2c:	4a0b      	ldr	r2, [pc, #44]	; (800ff5c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 800ff2e:	e7dd      	b.n	800feec <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 800ff30:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 800ff32:	3401      	adds	r4, #1
 800ff34:	4432      	add	r2, r6
 800ff36:	b292      	uxth	r2, r2
 800ff38:	2a09      	cmp	r2, #9
 800ff3a:	bf88      	it	hi
 800ff3c:	3a0a      	subhi	r2, #10
 800ff3e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800ff42:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800ff44:	42aa      	cmp	r2, r5
 800ff46:	d0e8      	beq.n	800ff1a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 800ff48:	e7e1      	b.n	800ff0e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 800ff4a:	2001      	movs	r0, #1
 800ff4c:	e7e0      	b.n	800ff10 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 800ff4e:	bf00      	nop
 800ff50:	0801ac3e 	.word	0x0801ac3e
 800ff54:	0801c8b0 	.word	0x0801c8b0
 800ff58:	0801ac12 	.word	0x0801ac12
 800ff5c:	0801c555 	.word	0x0801c555

0800ff60 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 800ff60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff64:	4605      	mov	r5, r0
 800ff66:	4616      	mov	r6, r2
 800ff68:	1c8c      	adds	r4, r1, #2
 800ff6a:	8809      	ldrh	r1, [r1, #0]
 800ff6c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 800ff70:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 800ff74:	42b3      	cmp	r3, r6
 800ff76:	d124      	bne.n	800ffc2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 800ff78:	f3c1 2903 	ubfx	r9, r1, #8, #4
 800ff7c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 800ff80:	f001 070f 	and.w	r7, r1, #15
 800ff84:	4652      	mov	r2, sl
 800ff86:	f8cd 8000 	str.w	r8, [sp]
 800ff8a:	464b      	mov	r3, r9
 800ff8c:	4621      	mov	r1, r4
 800ff8e:	4628      	mov	r0, r5
 800ff90:	f7ff ff9e 	bl	800fed0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 800ff94:	4683      	mov	fp, r0
 800ff96:	b168      	cbz	r0, 800ffb4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 800ff98:	eb0a 0109 	add.w	r1, sl, r9
 800ff9c:	463a      	mov	r2, r7
 800ff9e:	4628      	mov	r0, r5
 800ffa0:	4441      	add	r1, r8
 800ffa2:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 800ffa6:	4649      	mov	r1, r9
 800ffa8:	f7ff ff42 	bl	800fe30 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 800ffac:	4658      	mov	r0, fp
 800ffae:	b003      	add	sp, #12
 800ffb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffb4:	eb07 010a 	add.w	r1, r7, sl
 800ffb8:	4449      	add	r1, r9
 800ffba:	4441      	add	r1, r8
 800ffbc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800ffc0:	e7d2      	b.n	800ff68 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 800ffc2:	f04f 0b00 	mov.w	fp, #0
 800ffc6:	e7f1      	b.n	800ffac <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0800ffc8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 800ffc8:	b570      	push	{r4, r5, r6, lr}
 800ffca:	8810      	ldrh	r0, [r2, #0]
 800ffcc:	4298      	cmp	r0, r3
 800ffce:	d817      	bhi.n	8010000 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800ffd0:	1e48      	subs	r0, r1, #1
 800ffd2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 800ffd6:	4298      	cmp	r0, r3
 800ffd8:	d312      	bcc.n	8010000 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800ffda:	2400      	movs	r4, #0
 800ffdc:	428c      	cmp	r4, r1
 800ffde:	d20f      	bcs.n	8010000 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800ffe0:	1860      	adds	r0, r4, r1
 800ffe2:	1040      	asrs	r0, r0, #1
 800ffe4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 800ffe8:	0085      	lsls	r5, r0, #2
 800ffea:	42b3      	cmp	r3, r6
 800ffec:	d902      	bls.n	800fff4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 800ffee:	3001      	adds	r0, #1
 800fff0:	b284      	uxth	r4, r0
 800fff2:	e7f3      	b.n	800ffdc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800fff4:	d201      	bcs.n	800fffa <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 800fff6:	b281      	uxth	r1, r0
 800fff8:	e7f0      	b.n	800ffdc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800fffa:	442a      	add	r2, r5
 800fffc:	8850      	ldrh	r0, [r2, #2]
 800fffe:	bd70      	pop	{r4, r5, r6, pc}
 8010000:	2000      	movs	r0, #0
 8010002:	e7fc      	b.n	800fffe <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08010004 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8010004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010008:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801000a:	4604      	mov	r4, r0
 801000c:	260b      	movs	r6, #11
 801000e:	886f      	ldrh	r7, [r5, #2]
 8010010:	087f      	lsrs	r7, r7, #1
 8010012:	3e01      	subs	r6, #1
 8010014:	d01b      	beq.n	801004e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8010016:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8010018:	b92b      	cbnz	r3, 8010026 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801001a:	4b0e      	ldr	r3, [pc, #56]	; (8010054 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801001c:	21c0      	movs	r1, #192	; 0xc0
 801001e:	4a0e      	ldr	r2, [pc, #56]	; (8010058 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 8010020:	480e      	ldr	r0, [pc, #56]	; (801005c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 8010022:	f008 ff2b 	bl	8018e7c <__assert_func>
 8010026:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8010028:	462a      	mov	r2, r5
 801002a:	4639      	mov	r1, r7
 801002c:	4620      	mov	r0, r4
 801002e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8010032:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8010036:	4643      	mov	r3, r8
 8010038:	f7ff ffc6 	bl	800ffc8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801003c:	b138      	cbz	r0, 801004e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801003e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8010042:	4642      	mov	r2, r8
 8010044:	4620      	mov	r0, r4
 8010046:	f7ff ff8b 	bl	800ff60 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801004a:	2800      	cmp	r0, #0
 801004c:	d1e1      	bne.n	8010012 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801004e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010052:	bf00      	nop
 8010054:	0801ab40 	.word	0x0801ab40
 8010058:	0801c627 	.word	0x0801c627
 801005c:	0801ac12 	.word	0x0801ac12

08010060 <_ZN8touchgfx8ceil28_4El>:
 8010060:	f110 030f 	adds.w	r3, r0, #15
 8010064:	d401      	bmi.n	801006a <_ZN8touchgfx8ceil28_4El+0xa>
 8010066:	1118      	asrs	r0, r3, #4
 8010068:	4770      	bx	lr
 801006a:	2210      	movs	r2, #16
 801006c:	f1c0 0001 	rsb	r0, r0, #1
 8010070:	fb93 f3f2 	sdiv	r3, r3, r2
 8010074:	f010 000f 	ands.w	r0, r0, #15
 8010078:	bf18      	it	ne
 801007a:	2001      	movne	r0, #1
 801007c:	1a18      	subs	r0, r3, r0
 801007e:	4770      	bx	lr

08010080 <_ZN8touchgfx11floorDivModEllRlS0_>:
 8010080:	2900      	cmp	r1, #0
 8010082:	b538      	push	{r3, r4, r5, lr}
 8010084:	dc05      	bgt.n	8010092 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 8010086:	4b0f      	ldr	r3, [pc, #60]	; (80100c4 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 8010088:	21f7      	movs	r1, #247	; 0xf7
 801008a:	4a0f      	ldr	r2, [pc, #60]	; (80100c8 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801008c:	480f      	ldr	r0, [pc, #60]	; (80100cc <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801008e:	f008 fef5 	bl	8018e7c <__assert_func>
 8010092:	2800      	cmp	r0, #0
 8010094:	db06      	blt.n	80100a4 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 8010096:	fb90 f4f1 	sdiv	r4, r0, r1
 801009a:	fb01 0114 	mls	r1, r1, r4, r0
 801009e:	6014      	str	r4, [r2, #0]
 80100a0:	6019      	str	r1, [r3, #0]
 80100a2:	bd38      	pop	{r3, r4, r5, pc}
 80100a4:	4240      	negs	r0, r0
 80100a6:	fb90 f4f1 	sdiv	r4, r0, r1
 80100aa:	4265      	negs	r5, r4
 80100ac:	fb01 0014 	mls	r0, r1, r4, r0
 80100b0:	6015      	str	r5, [r2, #0]
 80100b2:	6018      	str	r0, [r3, #0]
 80100b4:	2800      	cmp	r0, #0
 80100b6:	d0f4      	beq.n	80100a2 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 80100b8:	6810      	ldr	r0, [r2, #0]
 80100ba:	3801      	subs	r0, #1
 80100bc:	6010      	str	r0, [r2, #0]
 80100be:	6818      	ldr	r0, [r3, #0]
 80100c0:	1a09      	subs	r1, r1, r0
 80100c2:	e7ed      	b.n	80100a0 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 80100c4:	0801c981 	.word	0x0801c981
 80100c8:	0801c9c0 	.word	0x0801c9c0
 80100cc:	0801c991 	.word	0x0801c991

080100d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 80100d0:	b570      	push	{r4, r5, r6, lr}
 80100d2:	694a      	ldr	r2, [r1, #20]
 80100d4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80100d6:	684b      	ldr	r3, [r1, #4]
 80100d8:	1b54      	subs	r4, r2, r5
 80100da:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80100dc:	f000 8106 	beq.w	80102ec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 80100e0:	1b9b      	subs	r3, r3, r6
 80100e2:	d003      	beq.n	80100ec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80100e4:	4363      	muls	r3, r4
 80100e6:	2210      	movs	r2, #16
 80100e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80100ec:	680c      	ldr	r4, [r1, #0]
 80100ee:	698a      	ldr	r2, [r1, #24]
 80100f0:	1b65      	subs	r5, r4, r5
 80100f2:	f000 80fd 	beq.w	80102f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 80100f6:	1b92      	subs	r2, r2, r6
 80100f8:	d003      	beq.n	8010102 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80100fa:	436a      	muls	r2, r5
 80100fc:	2410      	movs	r4, #16
 80100fe:	fb92 f2f4 	sdiv	r2, r2, r4
 8010102:	1a9b      	subs	r3, r3, r2
 8010104:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801032c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8010108:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801010c:	460a      	mov	r2, r1
 801010e:	ee07 3a90 	vmov	s15, r3
 8010112:	f100 040c 	add.w	r4, r0, #12
 8010116:	4603      	mov	r3, r0
 8010118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801011c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8010120:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8010124:	eeb1 6a43 	vneg.f32	s12, s6
 8010128:	edd2 7a02 	vldr	s15, [r2, #8]
 801012c:	3214      	adds	r2, #20
 801012e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8010132:	ece3 6a01 	vstmia	r3!, {s13}
 8010136:	429c      	cmp	r4, r3
 8010138:	ed52 7a02 	vldr	s15, [r2, #-8]
 801013c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010140:	edc3 7a02 	vstr	s15, [r3, #8]
 8010144:	ed52 7a01 	vldr	s15, [r2, #-4]
 8010148:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801014c:	edc3 7a05 	vstr	s15, [r3, #20]
 8010150:	d1ea      	bne.n	8010128 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8010152:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8010154:	698b      	ldr	r3, [r1, #24]
 8010156:	edd0 4a02 	vldr	s9, [r0, #8]
 801015a:	1a9b      	subs	r3, r3, r2
 801015c:	edd0 3a00 	vldr	s7, [r0]
 8010160:	edd0 6a01 	vldr	s13, [r0, #4]
 8010164:	ee07 3a90 	vmov	s15, r3
 8010168:	684b      	ldr	r3, [r1, #4]
 801016a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801016e:	ed90 5a05 	vldr	s10, [r0, #20]
 8010172:	1a9b      	subs	r3, r3, r2
 8010174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010178:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801017c:	ed90 2a03 	vldr	s4, [r0, #12]
 8010180:	ee07 3a10 	vmov	s14, r3
 8010184:	edd0 5a04 	vldr	s11, [r0, #16]
 8010188:	ee67 7a84 	vmul.f32	s15, s15, s8
 801018c:	ed90 1a07 	vldr	s2, [r0, #28]
 8010190:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010194:	edd0 2a06 	vldr	s5, [r0, #24]
 8010198:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801019c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 80101a0:	ee27 7a04 	vmul.f32	s14, s14, s8
 80101a4:	ee32 5a45 	vsub.f32	s10, s4, s10
 80101a8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80101ac:	ee67 7a83 	vmul.f32	s15, s15, s6
 80101b0:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 80101b4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80101b6:	694a      	ldr	r2, [r1, #20]
 80101b8:	1b13      	subs	r3, r2, r4
 80101ba:	ee07 3a10 	vmov	s14, r3
 80101be:	680b      	ldr	r3, [r1, #0]
 80101c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80101c4:	1b1b      	subs	r3, r3, r4
 80101c6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80101ca:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 80101ce:	ee07 3a10 	vmov	s14, r3
 80101d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80101d6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80101da:	eee6 4a87 	vfma.f32	s9, s13, s14
 80101de:	ee64 4a86 	vmul.f32	s9, s9, s12
 80101e2:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 80101e6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80101e8:	698b      	ldr	r3, [r1, #24]
 80101ea:	1a9b      	subs	r3, r3, r2
 80101ec:	ee06 3a90 	vmov	s13, r3
 80101f0:	684b      	ldr	r3, [r1, #4]
 80101f2:	1a9b      	subs	r3, r3, r2
 80101f4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80101f8:	ee07 3a10 	vmov	s14, r3
 80101fc:	ee66 6a84 	vmul.f32	s13, s13, s8
 8010200:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010204:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8010208:	ee27 7a04 	vmul.f32	s14, s14, s8
 801020c:	eee5 6a87 	vfma.f32	s13, s11, s14
 8010210:	ee66 6a83 	vmul.f32	s13, s13, s6
 8010214:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8010218:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801021a:	694a      	ldr	r2, [r1, #20]
 801021c:	1b13      	subs	r3, r2, r4
 801021e:	ee07 3a10 	vmov	s14, r3
 8010222:	680b      	ldr	r3, [r1, #0]
 8010224:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010228:	1b1b      	subs	r3, r3, r4
 801022a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801022e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8010232:	ee07 3a10 	vmov	s14, r3
 8010236:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801023a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801023e:	eea5 5a87 	vfma.f32	s10, s11, s14
 8010242:	edd0 5a08 	vldr	s11, [r0, #32]
 8010246:	ee31 1a65 	vsub.f32	s2, s2, s11
 801024a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801024e:	ee25 5a06 	vmul.f32	s10, s10, s12
 8010252:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8010256:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8010258:	698b      	ldr	r3, [r1, #24]
 801025a:	1a9b      	subs	r3, r3, r2
 801025c:	ee07 3a10 	vmov	s14, r3
 8010260:	684b      	ldr	r3, [r1, #4]
 8010262:	1a9b      	subs	r3, r3, r2
 8010264:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010268:	ee01 3a90 	vmov	s3, r3
 801026c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8010270:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8010274:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8010278:	ee61 1a84 	vmul.f32	s3, s3, s8
 801027c:	eea1 7a21 	vfma.f32	s14, s2, s3
 8010280:	ee27 7a03 	vmul.f32	s14, s14, s6
 8010284:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8010288:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801028a:	694a      	ldr	r2, [r1, #20]
 801028c:	1b13      	subs	r3, r2, r4
 801028e:	ee03 3a10 	vmov	s6, r3
 8010292:	680b      	ldr	r3, [r1, #0]
 8010294:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8010298:	1b1b      	subs	r3, r3, r4
 801029a:	ee23 3a04 	vmul.f32	s6, s6, s8
 801029e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80102a2:	ee03 3a10 	vmov	s6, r3
 80102a6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80102aa:	ee23 4a04 	vmul.f32	s8, s6, s8
 80102ae:	eee1 5a04 	vfma.f32	s11, s2, s8
 80102b2:	ee25 6a86 	vmul.f32	s12, s11, s12
 80102b6:	ee62 5a67 	vnmul.f32	s11, s4, s15
 80102ba:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 80102be:	eee3 5aa6 	vfma.f32	s11, s7, s13
 80102c2:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80102c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102ca:	dd13      	ble.n	80102f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 80102cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80102d0:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 80102d4:	63c3      	str	r3, [r0, #60]	; 0x3c
 80102d6:	eee3 7a87 	vfma.f32	s15, s7, s14
 80102da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80102de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102e2:	dd15      	ble.n	8010310 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 80102e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80102e8:	6403      	str	r3, [r0, #64]	; 0x40
 80102ea:	bd70      	pop	{r4, r5, r6, pc}
 80102ec:	4623      	mov	r3, r4
 80102ee:	e6fd      	b.n	80100ec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80102f0:	462a      	mov	r2, r5
 80102f2:	e706      	b.n	8010102 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80102f4:	d502      	bpl.n	80102fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 80102f6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80102fa:	e7e9      	b.n	80102d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 80102fc:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8010300:	eea3 2a85 	vfma.f32	s4, s7, s10
 8010304:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8010308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801030c:	dade      	bge.n	80102cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801030e:	e7f2      	b.n	80102f6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8010310:	d502      	bpl.n	8010318 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8010312:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8010316:	e7e7      	b.n	80102e8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8010318:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801031c:	eee3 4a86 	vfma.f32	s9, s7, s12
 8010320:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8010324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010328:	dadc      	bge.n	80102e4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801032a:	e7f2      	b.n	8010312 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801032c:	3d800000 	.word	0x3d800000

08010330 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8010330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010334:	f04f 0814 	mov.w	r8, #20
 8010338:	4604      	mov	r4, r0
 801033a:	4617      	mov	r7, r2
 801033c:	460d      	mov	r5, r1
 801033e:	fb08 f903 	mul.w	r9, r8, r3
 8010342:	461e      	mov	r6, r3
 8010344:	eb02 0a09 	add.w	sl, r2, r9
 8010348:	f8da 0004 	ldr.w	r0, [sl, #4]
 801034c:	f7ff fe88 	bl	8010060 <_ZN8touchgfx8ceil28_4El>
 8010350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010352:	6160      	str	r0, [r4, #20]
 8010354:	fb08 f803 	mul.w	r8, r8, r3
 8010358:	9001      	str	r0, [sp, #4]
 801035a:	eb07 0b08 	add.w	fp, r7, r8
 801035e:	f8db 0004 	ldr.w	r0, [fp, #4]
 8010362:	f7ff fe7d 	bl	8010060 <_ZN8touchgfx8ceil28_4El>
 8010366:	9a01      	ldr	r2, [sp, #4]
 8010368:	1a80      	subs	r0, r0, r2
 801036a:	61a0      	str	r0, [r4, #24]
 801036c:	2800      	cmp	r0, #0
 801036e:	f000 8088 	beq.w	8010482 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 8010372:	f857 3009 	ldr.w	r3, [r7, r9]
 8010376:	f857 c008 	ldr.w	ip, [r7, r8]
 801037a:	f8db 0004 	ldr.w	r0, [fp, #4]
 801037e:	ebac 0c03 	sub.w	ip, ip, r3
 8010382:	f8da 1004 	ldr.w	r1, [sl, #4]
 8010386:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801038a:	1a40      	subs	r0, r0, r1
 801038c:	fb0b f202 	mul.w	r2, fp, r2
 8010390:	ea4f 1800 	mov.w	r8, r0, lsl #4
 8010394:	fb0c 2211 	mls	r2, ip, r1, r2
 8010398:	4641      	mov	r1, r8
 801039a:	fb00 2003 	mla	r0, r0, r3, r2
 801039e:	f104 0310 	add.w	r3, r4, #16
 80103a2:	4622      	mov	r2, r4
 80103a4:	3801      	subs	r0, #1
 80103a6:	4440      	add	r0, r8
 80103a8:	f7ff fe6a 	bl	8010080 <_ZN8touchgfx11floorDivModEllRlS0_>
 80103ac:	f104 0308 	add.w	r3, r4, #8
 80103b0:	1d22      	adds	r2, r4, #4
 80103b2:	4641      	mov	r1, r8
 80103b4:	4658      	mov	r0, fp
 80103b6:	f7ff fe63 	bl	8010080 <_ZN8touchgfx11floorDivModEllRlS0_>
 80103ba:	f8c4 800c 	str.w	r8, [r4, #12]
 80103be:	6962      	ldr	r2, [r4, #20]
 80103c0:	f8da 3004 	ldr.w	r3, [sl, #4]
 80103c4:	eddf 6a31 	vldr	s13, [pc, #196]	; 801048c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 80103c8:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 80103cc:	6822      	ldr	r2, [r4, #0]
 80103ce:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 80103d2:	ee07 3a10 	vmov	s14, r3
 80103d6:	f857 3009 	ldr.w	r3, [r7, r9]
 80103da:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 80103de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80103e2:	ee07 3a90 	vmov	s15, r3
 80103e6:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 80103ea:	ee27 7a26 	vmul.f32	s14, s14, s13
 80103ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80103f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80103f6:	edd3 6a00 	vldr	s13, [r3]
 80103fa:	eee6 6a07 	vfma.f32	s13, s12, s14
 80103fe:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8010402:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010406:	edc4 6a07 	vstr	s13, [r4, #28]
 801040a:	edd4 6a01 	vldr	s13, [r4, #4]
 801040e:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 8010412:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010416:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801041a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801041e:	ed84 6a08 	vstr	s12, [r4, #32]
 8010422:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8010424:	6262      	str	r2, [r4, #36]	; 0x24
 8010426:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801042a:	ed93 6a03 	vldr	s12, [r3, #12]
 801042e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8010432:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8010436:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801043a:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801043e:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8010442:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 8010446:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801044a:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801044e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8010450:	6322      	str	r2, [r4, #48]	; 0x30
 8010452:	ed93 6a06 	vldr	s12, [r3, #24]
 8010456:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801045a:	eea5 6a87 	vfma.f32	s12, s11, s14
 801045e:	eeb0 7a46 	vmov.f32	s14, s12
 8010462:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 8010466:	eea6 7a27 	vfma.f32	s14, s12, s15
 801046a:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801046e:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 8010472:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 8010476:	eee6 7a87 	vfma.f32	s15, s13, s14
 801047a:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801047e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010480:	63e3      	str	r3, [r4, #60]	; 0x3c
 8010482:	4620      	mov	r0, r4
 8010484:	b003      	add	sp, #12
 8010486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801048a:	bf00      	nop
 801048c:	3d800000 	.word	0x3d800000

08010490 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8010490:	4602      	mov	r2, r0
 8010492:	b148      	cbz	r0, 80104a8 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8010494:	2300      	movs	r3, #0
 8010496:	b298      	uxth	r0, r3
 8010498:	3301      	adds	r3, #1
 801049a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801049e:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 80104a2:	2900      	cmp	r1, #0
 80104a4:	d1f7      	bne.n	8010496 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 80104a6:	4770      	bx	lr
 80104a8:	4770      	bx	lr
	...

080104ac <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80104ac:	4b01      	ldr	r3, [pc, #4]	; (80104b4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80104ae:	6018      	str	r0, [r3, #0]
 80104b0:	4770      	bx	lr
 80104b2:	bf00      	nop
 80104b4:	240068f4 	.word	0x240068f4

080104b8 <_ZN8touchgfx11FontManager7getFontEt>:
 80104b8:	4b03      	ldr	r3, [pc, #12]	; (80104c8 <_ZN8touchgfx11FontManager7getFontEt+0x10>)
 80104ba:	4601      	mov	r1, r0
 80104bc:	6818      	ldr	r0, [r3, #0]
 80104be:	b110      	cbz	r0, 80104c6 <_ZN8touchgfx11FontManager7getFontEt+0xe>
 80104c0:	6803      	ldr	r3, [r0, #0]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	4718      	bx	r3
 80104c6:	4770      	bx	lr
 80104c8:	240068f4 	.word	0x240068f4

080104cc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 80104cc:	4b06      	ldr	r3, [pc, #24]	; (80104e8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 80104ce:	881a      	ldrh	r2, [r3, #0]
 80104d0:	4282      	cmp	r2, r0
 80104d2:	d807      	bhi.n	80104e4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80104d4:	4b05      	ldr	r3, [pc, #20]	; (80104ec <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 80104d6:	881b      	ldrh	r3, [r3, #0]
 80104d8:	4413      	add	r3, r2
 80104da:	4298      	cmp	r0, r3
 80104dc:	bfac      	ite	ge
 80104de:	2000      	movge	r0, #0
 80104e0:	2001      	movlt	r0, #1
 80104e2:	4770      	bx	lr
 80104e4:	2000      	movs	r0, #0
 80104e6:	4770      	bx	lr
 80104e8:	24006914 	.word	0x24006914
 80104ec:	24006918 	.word	0x24006918

080104f0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80104f0:	b508      	push	{r3, lr}
 80104f2:	4601      	mov	r1, r0
 80104f4:	f7ff ffea 	bl	80104cc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80104f8:	b118      	cbz	r0, 8010502 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 80104fa:	4b02      	ldr	r3, [pc, #8]	; (8010504 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8010502:	bd08      	pop	{r3, pc}
 8010504:	240068f8 	.word	0x240068f8

08010508 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8010508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801050c:	4d28      	ldr	r5, [pc, #160]	; (80105b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801050e:	682b      	ldr	r3, [r5, #0]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d04a      	beq.n	80105aa <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 8010514:	4a27      	ldr	r2, [pc, #156]	; (80105b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8010516:	4e28      	ldr	r6, [pc, #160]	; (80105b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8010518:	8810      	ldrh	r0, [r2, #0]
 801051a:	f8b6 8000 	ldrh.w	r8, [r6]
 801051e:	4c27      	ldr	r4, [pc, #156]	; (80105bc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8010520:	4440      	add	r0, r8
 8010522:	4f27      	ldr	r7, [pc, #156]	; (80105c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8010524:	1c41      	adds	r1, r0, #1
 8010526:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801052a:	f021 0101 	bic.w	r1, r1, #1
 801052e:	eb03 020e 	add.w	r2, r3, lr
 8010532:	0409      	lsls	r1, r1, #16
 8010534:	6022      	str	r2, [r4, #0]
 8010536:	0c09      	lsrs	r1, r1, #16
 8010538:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801053c:	eb0e 010c 	add.w	r1, lr, ip
 8010540:	185a      	adds	r2, r3, r1
 8010542:	603a      	str	r2, [r7, #0]
 8010544:	220e      	movs	r2, #14
 8010546:	fb02 f208 	mul.w	r2, r2, r8
 801054a:	3203      	adds	r2, #3
 801054c:	f022 0203 	bic.w	r2, r2, #3
 8010550:	4411      	add	r1, r2
 8010552:	440b      	add	r3, r1
 8010554:	491b      	ldr	r1, [pc, #108]	; (80105c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 8010556:	600b      	str	r3, [r1, #0]
 8010558:	2300      	movs	r3, #0
 801055a:	491b      	ldr	r1, [pc, #108]	; (80105c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801055c:	800b      	strh	r3, [r1, #0]
 801055e:	491b      	ldr	r1, [pc, #108]	; (80105cc <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 8010560:	6809      	ldr	r1, [r1, #0]
 8010562:	eba1 010e 	sub.w	r1, r1, lr
 8010566:	eba1 010c 	sub.w	r1, r1, ip
 801056a:	469c      	mov	ip, r3
 801056c:	1a8a      	subs	r2, r1, r2
 801056e:	4918      	ldr	r1, [pc, #96]	; (80105d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 8010570:	600a      	str	r2, [r1, #0]
 8010572:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010576:	4a17      	ldr	r2, [pc, #92]	; (80105d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 8010578:	8013      	strh	r3, [r2, #0]
 801057a:	4283      	cmp	r3, r0
 801057c:	d10d      	bne.n	801059a <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801057e:	8835      	ldrh	r5, [r6, #0]
 8010580:	2300      	movs	r3, #0
 8010582:	6838      	ldr	r0, [r7, #0]
 8010584:	240e      	movs	r4, #14
 8010586:	429d      	cmp	r5, r3
 8010588:	d90f      	bls.n	80105aa <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801058a:	fb04 0203 	mla	r2, r4, r3, r0
 801058e:	3301      	adds	r3, #1
 8010590:	7b11      	ldrb	r1, [r2, #12]
 8010592:	f36f 1145 	bfc	r1, #5, #1
 8010596:	7311      	strb	r1, [r2, #12]
 8010598:	e7f5      	b.n	8010586 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801059a:	682a      	ldr	r2, [r5, #0]
 801059c:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80105a0:	6822      	ldr	r2, [r4, #0]
 80105a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80105a6:	3301      	adds	r3, #1
 80105a8:	e7e7      	b.n	801057a <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 80105aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105ae:	bf00      	nop
 80105b0:	240068f8 	.word	0x240068f8
 80105b4:	24006914 	.word	0x24006914
 80105b8:	24006918 	.word	0x24006918
 80105bc:	2400690c 	.word	0x2400690c
 80105c0:	240068fc 	.word	0x240068fc
 80105c4:	24006904 	.word	0x24006904
 80105c8:	24006916 	.word	0x24006916
 80105cc:	24006900 	.word	0x24006900
 80105d0:	24006910 	.word	0x24006910
 80105d4:	24006908 	.word	0x24006908

080105d8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80105d8:	4b10      	ldr	r3, [pc, #64]	; (801061c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 80105da:	b510      	push	{r4, lr}
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	b9db      	cbnz	r3, 8010618 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 80105e0:	b1d1      	cbz	r1, 8010618 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 80105e2:	4b0f      	ldr	r3, [pc, #60]	; (8010620 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 80105e4:	240e      	movs	r4, #14
 80105e6:	801a      	strh	r2, [r3, #0]
 80105e8:	b292      	uxth	r2, r2
 80105ea:	4b0e      	ldr	r3, [pc, #56]	; (8010624 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 80105ec:	881b      	ldrh	r3, [r3, #0]
 80105ee:	4413      	add	r3, r2
 80105f0:	4362      	muls	r2, r4
 80105f2:	2406      	movs	r4, #6
 80105f4:	fb04 2203 	mla	r2, r4, r3, r2
 80105f8:	428a      	cmp	r2, r1
 80105fa:	d305      	bcc.n	8010608 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 80105fc:	4b0a      	ldr	r3, [pc, #40]	; (8010628 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 80105fe:	2135      	movs	r1, #53	; 0x35
 8010600:	4a0a      	ldr	r2, [pc, #40]	; (801062c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8010602:	480b      	ldr	r0, [pc, #44]	; (8010630 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8010604:	f008 fc3a 	bl	8018e7c <__assert_func>
 8010608:	4b0a      	ldr	r3, [pc, #40]	; (8010634 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801060a:	6019      	str	r1, [r3, #0]
 801060c:	4b0a      	ldr	r3, [pc, #40]	; (8010638 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801060e:	6018      	str	r0, [r3, #0]
 8010610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010614:	f7ff bf78 	b.w	8010508 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8010618:	bd10      	pop	{r4, pc}
 801061a:	bf00      	nop
 801061c:	24006904 	.word	0x24006904
 8010620:	24006918 	.word	0x24006918
 8010624:	24006914 	.word	0x24006914
 8010628:	0801ca5e 	.word	0x0801ca5e
 801062c:	0801caf3 	.word	0x0801caf3
 8010630:	0801ca39 	.word	0x0801ca39
 8010634:	24006900 	.word	0x24006900
 8010638:	240068f8 	.word	0x240068f8

0801063c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801063c:	b470      	push	{r4, r5, r6}
 801063e:	4c07      	ldr	r4, [pc, #28]	; (801065c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8010640:	4605      	mov	r5, r0
 8010642:	4610      	mov	r0, r2
 8010644:	9a03      	ldr	r2, [sp, #12]
 8010646:	6826      	ldr	r6, [r4, #0]
 8010648:	b936      	cbnz	r6, 8010658 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801064a:	6025      	str	r5, [r4, #0]
 801064c:	4c04      	ldr	r4, [pc, #16]	; (8010660 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801064e:	8021      	strh	r1, [r4, #0]
 8010650:	4619      	mov	r1, r3
 8010652:	bc70      	pop	{r4, r5, r6}
 8010654:	f7ff bfc0 	b.w	80105d8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8010658:	bc70      	pop	{r4, r5, r6}
 801065a:	4770      	bx	lr
 801065c:	2400691c 	.word	0x2400691c
 8010660:	24006914 	.word	0x24006914

08010664 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8010664:	b508      	push	{r3, lr}
 8010666:	4b14      	ldr	r3, [pc, #80]	; (80106b8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8010668:	6819      	ldr	r1, [r3, #0]
 801066a:	b931      	cbnz	r1, 801067a <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801066c:	4b13      	ldr	r3, [pc, #76]	; (80106bc <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801066e:	f240 4185 	movw	r1, #1157	; 0x485
 8010672:	4a13      	ldr	r2, [pc, #76]	; (80106c0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8010674:	4813      	ldr	r0, [pc, #76]	; (80106c4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8010676:	f008 fc01 	bl	8018e7c <__assert_func>
 801067a:	4a13      	ldr	r2, [pc, #76]	; (80106c8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801067c:	8803      	ldrh	r3, [r0, #0]
 801067e:	8812      	ldrh	r2, [r2, #0]
 8010680:	4293      	cmp	r3, r2
 8010682:	d204      	bcs.n	801068e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8010684:	2214      	movs	r2, #20
 8010686:	fb02 1303 	mla	r3, r2, r3, r1
 801068a:	8918      	ldrh	r0, [r3, #8]
 801068c:	bd08      	pop	{r3, pc}
 801068e:	490f      	ldr	r1, [pc, #60]	; (80106cc <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8010690:	8809      	ldrh	r1, [r1, #0]
 8010692:	4411      	add	r1, r2
 8010694:	428b      	cmp	r3, r1
 8010696:	da06      	bge.n	80106a6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8010698:	1a9b      	subs	r3, r3, r2
 801069a:	4a0d      	ldr	r2, [pc, #52]	; (80106d0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801069c:	210e      	movs	r1, #14
 801069e:	6812      	ldr	r2, [r2, #0]
 80106a0:	fb01 2303 	mla	r3, r1, r3, r2
 80106a4:	e7f1      	b.n	801068a <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 80106a6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80106aa:	4293      	cmp	r3, r2
 80106ac:	bf0a      	itet	eq
 80106ae:	4b09      	ldreq	r3, [pc, #36]	; (80106d4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 80106b0:	2000      	movne	r0, #0
 80106b2:	8818      	ldrheq	r0, [r3, #0]
 80106b4:	e7ea      	b.n	801068c <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 80106b6:	bf00      	nop
 80106b8:	2400691c 	.word	0x2400691c
 80106bc:	0801cab7 	.word	0x0801cab7
 80106c0:	0801cba0 	.word	0x0801cba0
 80106c4:	0801ca39 	.word	0x0801ca39
 80106c8:	24006914 	.word	0x24006914
 80106cc:	24006918 	.word	0x24006918
 80106d0:	240068fc 	.word	0x240068fc
 80106d4:	24006888 	.word	0x24006888

080106d8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80106d8:	b508      	push	{r3, lr}
 80106da:	4b14      	ldr	r3, [pc, #80]	; (801072c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80106dc:	6819      	ldr	r1, [r3, #0]
 80106de:	b931      	cbnz	r1, 80106ee <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 80106e0:	4b13      	ldr	r3, [pc, #76]	; (8010730 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 80106e2:	f240 4199 	movw	r1, #1177	; 0x499
 80106e6:	4a13      	ldr	r2, [pc, #76]	; (8010734 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80106e8:	4813      	ldr	r0, [pc, #76]	; (8010738 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80106ea:	f008 fbc7 	bl	8018e7c <__assert_func>
 80106ee:	4a13      	ldr	r2, [pc, #76]	; (801073c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80106f0:	8803      	ldrh	r3, [r0, #0]
 80106f2:	8812      	ldrh	r2, [r2, #0]
 80106f4:	4293      	cmp	r3, r2
 80106f6:	d204      	bcs.n	8010702 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 80106f8:	2214      	movs	r2, #20
 80106fa:	fb02 1303 	mla	r3, r2, r3, r1
 80106fe:	8958      	ldrh	r0, [r3, #10]
 8010700:	bd08      	pop	{r3, pc}
 8010702:	490f      	ldr	r1, [pc, #60]	; (8010740 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8010704:	8809      	ldrh	r1, [r1, #0]
 8010706:	4411      	add	r1, r2
 8010708:	428b      	cmp	r3, r1
 801070a:	da06      	bge.n	801071a <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801070c:	1a9b      	subs	r3, r3, r2
 801070e:	4a0d      	ldr	r2, [pc, #52]	; (8010744 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8010710:	210e      	movs	r1, #14
 8010712:	6812      	ldr	r2, [r2, #0]
 8010714:	fb01 2303 	mla	r3, r1, r3, r2
 8010718:	e7f1      	b.n	80106fe <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801071a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801071e:	4293      	cmp	r3, r2
 8010720:	bf0a      	itet	eq
 8010722:	4b09      	ldreq	r3, [pc, #36]	; (8010748 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8010724:	2000      	movne	r0, #0
 8010726:	8818      	ldrheq	r0, [r3, #0]
 8010728:	e7ea      	b.n	8010700 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801072a:	bf00      	nop
 801072c:	2400691c 	.word	0x2400691c
 8010730:	0801cab7 	.word	0x0801cab7
 8010734:	0801cbcc 	.word	0x0801cbcc
 8010738:	0801ca39 	.word	0x0801ca39
 801073c:	24006914 	.word	0x24006914
 8010740:	24006918 	.word	0x24006918
 8010744:	240068fc 	.word	0x240068fc
 8010748:	2400688a 	.word	0x2400688a

0801074c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801074c:	4b23      	ldr	r3, [pc, #140]	; (80107dc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801074e:	b510      	push	{r4, lr}
 8010750:	681c      	ldr	r4, [r3, #0]
 8010752:	b934      	cbnz	r4, 8010762 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8010754:	4b22      	ldr	r3, [pc, #136]	; (80107e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8010756:	f240 41ad 	movw	r1, #1197	; 0x4ad
 801075a:	4a22      	ldr	r2, [pc, #136]	; (80107e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801075c:	4822      	ldr	r0, [pc, #136]	; (80107e8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801075e:	f008 fb8d 	bl	8018e7c <__assert_func>
 8010762:	4a22      	ldr	r2, [pc, #136]	; (80107ec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8010764:	880b      	ldrh	r3, [r1, #0]
 8010766:	8812      	ldrh	r2, [r2, #0]
 8010768:	4293      	cmp	r3, r2
 801076a:	d211      	bcs.n	8010790 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801076c:	2214      	movs	r2, #20
 801076e:	fb02 4303 	mla	r3, r2, r3, r4
 8010772:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8010776:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801077a:	8a1a      	ldrh	r2, [r3, #16]
 801077c:	8a5b      	ldrh	r3, [r3, #18]
 801077e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8010782:	8004      	strh	r4, [r0, #0]
 8010784:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010788:	8041      	strh	r1, [r0, #2]
 801078a:	8082      	strh	r2, [r0, #4]
 801078c:	80c3      	strh	r3, [r0, #6]
 801078e:	e00e      	b.n	80107ae <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8010790:	4917      	ldr	r1, [pc, #92]	; (80107f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8010792:	8809      	ldrh	r1, [r1, #0]
 8010794:	4411      	add	r1, r2
 8010796:	428b      	cmp	r3, r1
 8010798:	da0a      	bge.n	80107b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801079a:	1a9b      	subs	r3, r3, r2
 801079c:	4a15      	ldr	r2, [pc, #84]	; (80107f4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801079e:	210e      	movs	r1, #14
 80107a0:	6812      	ldr	r2, [r2, #0]
 80107a2:	fb01 2303 	mla	r3, r1, r3, r2
 80107a6:	681a      	ldr	r2, [r3, #0]
 80107a8:	6002      	str	r2, [r0, #0]
 80107aa:	685a      	ldr	r2, [r3, #4]
 80107ac:	6042      	str	r2, [r0, #4]
 80107ae:	bd10      	pop	{r4, pc}
 80107b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80107b4:	4293      	cmp	r3, r2
 80107b6:	d10b      	bne.n	80107d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 80107b8:	4b0f      	ldr	r3, [pc, #60]	; (80107f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 80107ba:	f9b3 1000 	ldrsh.w	r1, [r3]
 80107be:	4b0f      	ldr	r3, [pc, #60]	; (80107fc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 80107c0:	8081      	strh	r1, [r0, #4]
 80107c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80107c6:	2300      	movs	r3, #0
 80107c8:	80c2      	strh	r2, [r0, #6]
 80107ca:	8003      	strh	r3, [r0, #0]
 80107cc:	8043      	strh	r3, [r0, #2]
 80107ce:	e7ee      	b.n	80107ae <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 80107d0:	2300      	movs	r3, #0
 80107d2:	8003      	strh	r3, [r0, #0]
 80107d4:	8043      	strh	r3, [r0, #2]
 80107d6:	8083      	strh	r3, [r0, #4]
 80107d8:	e7d8      	b.n	801078c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 80107da:	bf00      	nop
 80107dc:	2400691c 	.word	0x2400691c
 80107e0:	0801cab7 	.word	0x0801cab7
 80107e4:	0801cb39 	.word	0x0801cb39
 80107e8:	0801ca39 	.word	0x0801ca39
 80107ec:	24006914 	.word	0x24006914
 80107f0:	24006918 	.word	0x24006918
 80107f4:	240068fc 	.word	0x240068fc
 80107f8:	24006888 	.word	0x24006888
 80107fc:	2400688a 	.word	0x2400688a

08010800 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8010800:	4b18      	ldr	r3, [pc, #96]	; (8010864 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	b34b      	cbz	r3, 801085a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8010806:	4a18      	ldr	r2, [pc, #96]	; (8010868 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8010808:	8800      	ldrh	r0, [r0, #0]
 801080a:	8812      	ldrh	r2, [r2, #0]
 801080c:	4290      	cmp	r0, r2
 801080e:	d211      	bcs.n	8010834 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 8010810:	2214      	movs	r2, #20
 8010812:	fb02 3300 	mla	r3, r2, r0, r3
 8010816:	8a1a      	ldrh	r2, [r3, #16]
 8010818:	8919      	ldrh	r1, [r3, #8]
 801081a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801081e:	428a      	cmp	r2, r1
 8010820:	db1d      	blt.n	801085e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8010822:	8a58      	ldrh	r0, [r3, #18]
 8010824:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8010828:	895b      	ldrh	r3, [r3, #10]
 801082a:	4298      	cmp	r0, r3
 801082c:	bfac      	ite	ge
 801082e:	2000      	movge	r0, #0
 8010830:	2001      	movlt	r0, #1
 8010832:	4770      	bx	lr
 8010834:	4b0d      	ldr	r3, [pc, #52]	; (801086c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8010836:	881b      	ldrh	r3, [r3, #0]
 8010838:	4413      	add	r3, r2
 801083a:	4298      	cmp	r0, r3
 801083c:	da0d      	bge.n	801085a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801083e:	4b0c      	ldr	r3, [pc, #48]	; (8010870 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 8010840:	1a80      	subs	r0, r0, r2
 8010842:	220e      	movs	r2, #14
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	fb02 3300 	mla	r3, r2, r0, r3
 801084a:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801084e:	891a      	ldrh	r2, [r3, #8]
 8010850:	4291      	cmp	r1, r2
 8010852:	db04      	blt.n	801085e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8010854:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8010858:	e7e6      	b.n	8010828 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801085a:	2000      	movs	r0, #0
 801085c:	4770      	bx	lr
 801085e:	2001      	movs	r0, #1
 8010860:	4770      	bx	lr
 8010862:	bf00      	nop
 8010864:	2400691c 	.word	0x2400691c
 8010868:	24006914 	.word	0x24006914
 801086c:	24006918 	.word	0x24006918
 8010870:	240068fc 	.word	0x240068fc

08010874 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8010874:	b508      	push	{r3, lr}
 8010876:	4b12      	ldr	r3, [pc, #72]	; (80108c0 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8010878:	6819      	ldr	r1, [r3, #0]
 801087a:	b931      	cbnz	r1, 801088a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801087c:	4b11      	ldr	r3, [pc, #68]	; (80108c4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801087e:	f240 41d1 	movw	r1, #1233	; 0x4d1
 8010882:	4a11      	ldr	r2, [pc, #68]	; (80108c8 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8010884:	4811      	ldr	r0, [pc, #68]	; (80108cc <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8010886:	f008 faf9 	bl	8018e7c <__assert_func>
 801088a:	8803      	ldrh	r3, [r0, #0]
 801088c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010890:	4293      	cmp	r3, r2
 8010892:	d012      	beq.n	80108ba <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8010894:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010898:	4293      	cmp	r3, r2
 801089a:	d103      	bne.n	80108a4 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801089c:	4b0c      	ldr	r3, [pc, #48]	; (80108d0 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80108a2:	bd08      	pop	{r3, pc}
 80108a4:	4a0b      	ldr	r2, [pc, #44]	; (80108d4 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 80108a6:	6812      	ldr	r2, [r2, #0]
 80108a8:	b11a      	cbz	r2, 80108b2 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 80108aa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80108ae:	2800      	cmp	r0, #0
 80108b0:	d1f7      	bne.n	80108a2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 80108b2:	2214      	movs	r2, #20
 80108b4:	4353      	muls	r3, r2
 80108b6:	58c8      	ldr	r0, [r1, r3]
 80108b8:	e7f3      	b.n	80108a2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 80108ba:	2000      	movs	r0, #0
 80108bc:	e7f1      	b.n	80108a2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 80108be:	bf00      	nop
 80108c0:	2400691c 	.word	0x2400691c
 80108c4:	0801cab7 	.word	0x0801cab7
 80108c8:	0801cb6f 	.word	0x0801cb6f
 80108cc:	0801ca39 	.word	0x0801ca39
 80108d0:	24006894 	.word	0x24006894
 80108d4:	240068f8 	.word	0x240068f8

080108d8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 80108d8:	8802      	ldrh	r2, [r0, #0]
 80108da:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80108de:	429a      	cmp	r2, r3
 80108e0:	d845      	bhi.n	801096e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 80108e2:	4b24      	ldr	r3, [pc, #144]	; (8010974 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80108e4:	8818      	ldrh	r0, [r3, #0]
 80108e6:	4282      	cmp	r2, r0
 80108e8:	d221      	bcs.n	801092e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 80108ea:	4b23      	ldr	r3, [pc, #140]	; (8010978 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 80108ec:	6819      	ldr	r1, [r3, #0]
 80108ee:	2314      	movs	r3, #20
 80108f0:	fb03 1302 	mla	r3, r3, r2, r1
 80108f4:	6858      	ldr	r0, [r3, #4]
 80108f6:	2800      	cmp	r0, #0
 80108f8:	d03a      	beq.n	8010970 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 80108fa:	4920      	ldr	r1, [pc, #128]	; (801097c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80108fc:	6809      	ldr	r1, [r1, #0]
 80108fe:	2900      	cmp	r1, #0
 8010900:	d036      	beq.n	8010970 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8010902:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8010906:	2900      	cmp	r1, #0
 8010908:	d032      	beq.n	8010970 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801090a:	891a      	ldrh	r2, [r3, #8]
 801090c:	8958      	ldrh	r0, [r3, #10]
 801090e:	4350      	muls	r0, r2
 8010910:	7c5a      	ldrb	r2, [r3, #17]
 8010912:	7cdb      	ldrb	r3, [r3, #19]
 8010914:	0952      	lsrs	r2, r2, #5
 8010916:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801091a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801091e:	2b0b      	cmp	r3, #11
 8010920:	bf18      	it	ne
 8010922:	0040      	lslne	r0, r0, #1
 8010924:	3003      	adds	r0, #3
 8010926:	f020 0003 	bic.w	r0, r0, #3
 801092a:	4408      	add	r0, r1
 801092c:	4770      	bx	lr
 801092e:	4b14      	ldr	r3, [pc, #80]	; (8010980 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 8010930:	881b      	ldrh	r3, [r3, #0]
 8010932:	4403      	add	r3, r0
 8010934:	429a      	cmp	r2, r3
 8010936:	da1a      	bge.n	801096e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8010938:	4b12      	ldr	r3, [pc, #72]	; (8010984 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801093a:	1a10      	subs	r0, r2, r0
 801093c:	210e      	movs	r1, #14
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	fb01 3000 	mla	r0, r1, r0, r3
 8010944:	7b03      	ldrb	r3, [r0, #12]
 8010946:	f003 031f 	and.w	r3, r3, #31
 801094a:	2b0b      	cmp	r3, #11
 801094c:	d10b      	bne.n	8010966 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801094e:	8903      	ldrh	r3, [r0, #8]
 8010950:	8940      	ldrh	r0, [r0, #10]
 8010952:	4358      	muls	r0, r3
 8010954:	4b09      	ldr	r3, [pc, #36]	; (801097c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8010956:	3003      	adds	r0, #3
 8010958:	6819      	ldr	r1, [r3, #0]
 801095a:	f020 0303 	bic.w	r3, r0, #3
 801095e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8010962:	4418      	add	r0, r3
 8010964:	4770      	bx	lr
 8010966:	2b0d      	cmp	r3, #13
 8010968:	d101      	bne.n	801096e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801096a:	300d      	adds	r0, #13
 801096c:	4770      	bx	lr
 801096e:	2000      	movs	r0, #0
 8010970:	4770      	bx	lr
 8010972:	bf00      	nop
 8010974:	24006914 	.word	0x24006914
 8010978:	2400691c 	.word	0x2400691c
 801097c:	240068f8 	.word	0x240068f8
 8010980:	24006918 	.word	0x24006918
 8010984:	240068fc 	.word	0x240068fc

08010988 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8010988:	4b17      	ldr	r3, [pc, #92]	; (80109e8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801098a:	b510      	push	{r4, lr}
 801098c:	6819      	ldr	r1, [r3, #0]
 801098e:	8803      	ldrh	r3, [r0, #0]
 8010990:	b1e9      	cbz	r1, 80109ce <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 8010992:	4a16      	ldr	r2, [pc, #88]	; (80109ec <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8010994:	8812      	ldrh	r2, [r2, #0]
 8010996:	429a      	cmp	r2, r3
 8010998:	d90a      	bls.n	80109b0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 801099a:	2214      	movs	r2, #20
 801099c:	fb02 1303 	mla	r3, r2, r3, r1
 80109a0:	7c58      	ldrb	r0, [r3, #17]
 80109a2:	0942      	lsrs	r2, r0, #5
 80109a4:	7cd8      	ldrb	r0, [r3, #19]
 80109a6:	f3c0 1042 	ubfx	r0, r0, #5, #3
 80109aa:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80109ae:	bd10      	pop	{r4, pc}
 80109b0:	490f      	ldr	r1, [pc, #60]	; (80109f0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 80109b2:	8809      	ldrh	r1, [r1, #0]
 80109b4:	4411      	add	r1, r2
 80109b6:	428b      	cmp	r3, r1
 80109b8:	da09      	bge.n	80109ce <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 80109ba:	1a9b      	subs	r3, r3, r2
 80109bc:	4a0d      	ldr	r2, [pc, #52]	; (80109f4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 80109be:	210e      	movs	r1, #14
 80109c0:	6812      	ldr	r2, [r2, #0]
 80109c2:	fb01 2303 	mla	r3, r1, r3, r2
 80109c6:	7b18      	ldrb	r0, [r3, #12]
 80109c8:	f000 001f 	and.w	r0, r0, #31
 80109cc:	e7ef      	b.n	80109ae <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 80109ce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80109d2:	4293      	cmp	r3, r2
 80109d4:	d106      	bne.n	80109e4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 80109d6:	f7f9 fe93 	bl	800a700 <_ZN8touchgfx3HAL3lcdEv>
 80109da:	6803      	ldr	r3, [r0, #0]
 80109dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109e2:	4718      	bx	r3
 80109e4:	2000      	movs	r0, #0
 80109e6:	e7e2      	b.n	80109ae <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 80109e8:	2400691c 	.word	0x2400691c
 80109ec:	24006914 	.word	0x24006914
 80109f0:	24006918 	.word	0x24006918
 80109f4:	240068fc 	.word	0x240068fc

080109f8 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 80109f8:	2018      	movs	r0, #24
 80109fa:	4770      	bx	lr

080109fc <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 80109fc:	2001      	movs	r0, #1
 80109fe:	4770      	bx	lr

08010a00 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8010a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a04:	b085      	sub	sp, #20
 8010a06:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8010a08:	9203      	str	r2, [sp, #12]
 8010a0a:	6870      	ldr	r0, [r6, #4]
 8010a0c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8010a10:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8010a14:	9101      	str	r1, [sp, #4]
 8010a16:	fa1f f885 	uxth.w	r8, r5
 8010a1a:	43ed      	mvns	r5, r5
 8010a1c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8010a20:	b2ed      	uxtb	r5, r5
 8010a22:	fb00 2404 	mla	r4, r0, r4, r2
 8010a26:	6832      	ldr	r2, [r6, #0]
 8010a28:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8010a2c:	4414      	add	r4, r2
 8010a2e:	f8dc 2000 	ldr.w	r2, [ip]
 8010a32:	9202      	str	r2, [sp, #8]
 8010a34:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8010a38:	f102 0e04 	add.w	lr, r2, #4
 8010a3c:	9a01      	ldr	r2, [sp, #4]
 8010a3e:	2a00      	cmp	r2, #0
 8010a40:	dc03      	bgt.n	8010a4a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8010a42:	9a03      	ldr	r2, [sp, #12]
 8010a44:	2a00      	cmp	r2, #0
 8010a46:	f340 8116 	ble.w	8010c76 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8010a4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010a4c:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8010a50:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8010a54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010a56:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8010a5a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	dd0e      	ble.n	8010a80 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8010a62:	1406      	asrs	r6, r0, #16
 8010a64:	d405      	bmi.n	8010a72 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8010a66:	4556      	cmp	r6, sl
 8010a68:	da03      	bge.n	8010a72 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8010a6a:	1416      	asrs	r6, r2, #16
 8010a6c:	d401      	bmi.n	8010a72 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8010a6e:	454e      	cmp	r6, r9
 8010a70:	db07      	blt.n	8010a82 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8010a72:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8010a74:	3b01      	subs	r3, #1
 8010a76:	3403      	adds	r4, #3
 8010a78:	4430      	add	r0, r6
 8010a7a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8010a7c:	4432      	add	r2, r6
 8010a7e:	e7ee      	b.n	8010a5e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8010a80:	d063      	beq.n	8010b4a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8010a82:	1e5e      	subs	r6, r3, #1
 8010a84:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8010a86:	fb07 0706 	mla	r7, r7, r6, r0
 8010a8a:	143f      	asrs	r7, r7, #16
 8010a8c:	d454      	bmi.n	8010b38 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8010a8e:	4557      	cmp	r7, sl
 8010a90:	da52      	bge.n	8010b38 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8010a92:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8010a94:	fb07 2606 	mla	r6, r7, r6, r2
 8010a98:	1436      	asrs	r6, r6, #16
 8010a9a:	d44d      	bmi.n	8010b38 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8010a9c:	454e      	cmp	r6, r9
 8010a9e:	da4b      	bge.n	8010b38 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8010aa0:	1ce6      	adds	r6, r4, #3
 8010aa2:	4699      	mov	r9, r3
 8010aa4:	f1b9 0f00 	cmp.w	r9, #0
 8010aa8:	f106 0603 	add.w	r6, r6, #3
 8010aac:	dd48      	ble.n	8010b40 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8010aae:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8010ab2:	1417      	asrs	r7, r2, #16
 8010ab4:	9902      	ldr	r1, [sp, #8]
 8010ab6:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8010aba:	f109 39ff 	add.w	r9, r9, #4294967295
 8010abe:	fb0b 1707 	mla	r7, fp, r7, r1
 8010ac2:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8010ac6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010ac8:	f817 700a 	ldrb.w	r7, [r7, sl]
 8010acc:	fb1b fb05 	smulbb	fp, fp, r5
 8010ad0:	4408      	add	r0, r1
 8010ad2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010ad4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8010ad8:	440a      	add	r2, r1
 8010ada:	eb0e 0a07 	add.w	sl, lr, r7
 8010ade:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8010ae2:	fb07 b708 	mla	r7, r7, r8, fp
 8010ae6:	b2bf      	uxth	r7, r7
 8010ae8:	f107 0b01 	add.w	fp, r7, #1
 8010aec:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8010af0:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8010af4:	fb1b fb05 	smulbb	fp, fp, r5
 8010af8:	123f      	asrs	r7, r7, #8
 8010afa:	f806 7c06 	strb.w	r7, [r6, #-6]
 8010afe:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8010b02:	fb07 b708 	mla	r7, r7, r8, fp
 8010b06:	b2bf      	uxth	r7, r7
 8010b08:	f107 0b01 	add.w	fp, r7, #1
 8010b0c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8010b10:	123f      	asrs	r7, r7, #8
 8010b12:	f806 7c05 	strb.w	r7, [r6, #-5]
 8010b16:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8010b1a:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8010b1e:	fb1a fa05 	smulbb	sl, sl, r5
 8010b22:	fb07 a708 	mla	r7, r7, r8, sl
 8010b26:	b2bf      	uxth	r7, r7
 8010b28:	f107 0a01 	add.w	sl, r7, #1
 8010b2c:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8010b30:	123f      	asrs	r7, r7, #8
 8010b32:	f806 7c04 	strb.w	r7, [r6, #-4]
 8010b36:	e7b5      	b.n	8010aa4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8010b38:	2700      	movs	r7, #0
 8010b3a:	1bde      	subs	r6, r3, r7
 8010b3c:	2e00      	cmp	r6, #0
 8010b3e:	dc42      	bgt.n	8010bc6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8010b40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010b44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010b48:	441c      	add	r4, r3
 8010b4a:	9b01      	ldr	r3, [sp, #4]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	f340 8092 	ble.w	8010c76 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8010b52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010b56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010b58:	ee30 0a04 	vadd.f32	s0, s0, s8
 8010b5c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8010b60:	eef0 6a62 	vmov.f32	s13, s5
 8010b64:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010b68:	ee31 1a05 	vadd.f32	s2, s2, s10
 8010b6c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8010b70:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8010b74:	eef0 6a43 	vmov.f32	s13, s6
 8010b78:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8010b7c:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8010b80:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8010b84:	ee61 7a27 	vmul.f32	s15, s2, s15
 8010b88:	ee77 2a62 	vsub.f32	s5, s14, s5
 8010b8c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8010b90:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8010b94:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8010b98:	ee12 2a90 	vmov	r2, s5
 8010b9c:	eef0 2a47 	vmov.f32	s5, s14
 8010ba0:	fb92 f3f3 	sdiv	r3, r2, r3
 8010ba4:	ee13 2a10 	vmov	r2, s6
 8010ba8:	9311      	str	r3, [sp, #68]	; 0x44
 8010baa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010bac:	eeb0 3a67 	vmov.f32	s6, s15
 8010bb0:	fb92 f3f3 	sdiv	r3, r2, r3
 8010bb4:	9312      	str	r3, [sp, #72]	; 0x48
 8010bb6:	9b01      	ldr	r3, [sp, #4]
 8010bb8:	9a03      	ldr	r2, [sp, #12]
 8010bba:	3b01      	subs	r3, #1
 8010bbc:	9301      	str	r3, [sp, #4]
 8010bbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010bc0:	bf08      	it	eq
 8010bc2:	4613      	moveq	r3, r2
 8010bc4:	e73a      	b.n	8010a3c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8010bc6:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8010bca:	d44e      	bmi.n	8010c6a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8010bcc:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8010bd0:	4556      	cmp	r6, sl
 8010bd2:	dd4a      	ble.n	8010c6a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8010bd4:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8010bd8:	d447      	bmi.n	8010c6a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8010bda:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8010bde:	4559      	cmp	r1, fp
 8010be0:	dd43      	ble.n	8010c6a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8010be2:	fa0f f986 	sxth.w	r9, r6
 8010be6:	9902      	ldr	r1, [sp, #8]
 8010be8:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8010bec:	fb0b 1909 	mla	r9, fp, r9, r1
 8010bf0:	f814 b006 	ldrb.w	fp, [r4, r6]
 8010bf4:	f819 900a 	ldrb.w	r9, [r9, sl]
 8010bf8:	fb1b fb05 	smulbb	fp, fp, r5
 8010bfc:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8010c00:	eb0e 0a09 	add.w	sl, lr, r9
 8010c04:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8010c08:	fb09 b908 	mla	r9, r9, r8, fp
 8010c0c:	fa1f f989 	uxth.w	r9, r9
 8010c10:	f109 0b01 	add.w	fp, r9, #1
 8010c14:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8010c18:	ea4f 2929 	mov.w	r9, r9, asr #8
 8010c1c:	f804 9006 	strb.w	r9, [r4, r6]
 8010c20:	4426      	add	r6, r4
 8010c22:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8010c26:	f896 b001 	ldrb.w	fp, [r6, #1]
 8010c2a:	fb1b fb05 	smulbb	fp, fp, r5
 8010c2e:	fb09 b908 	mla	r9, r9, r8, fp
 8010c32:	fa1f f989 	uxth.w	r9, r9
 8010c36:	f109 0b01 	add.w	fp, r9, #1
 8010c3a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8010c3e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8010c42:	f886 9001 	strb.w	r9, [r6, #1]
 8010c46:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8010c4a:	f896 a002 	ldrb.w	sl, [r6, #2]
 8010c4e:	fb1a fa05 	smulbb	sl, sl, r5
 8010c52:	fb09 a908 	mla	r9, r9, r8, sl
 8010c56:	fa1f f989 	uxth.w	r9, r9
 8010c5a:	f109 0a01 	add.w	sl, r9, #1
 8010c5e:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8010c62:	ea4f 2929 	mov.w	r9, r9, asr #8
 8010c66:	f886 9002 	strb.w	r9, [r6, #2]
 8010c6a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010c6c:	3701      	adds	r7, #1
 8010c6e:	4408      	add	r0, r1
 8010c70:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010c72:	440a      	add	r2, r1
 8010c74:	e761      	b.n	8010b3a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8010c76:	b005      	add	sp, #20
 8010c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010c7c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8010c7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c80:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8010c82:	4693      	mov	fp, r2
 8010c84:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8010c86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c8a:	6868      	ldr	r0, [r5, #4]
 8010c8c:	6877      	ldr	r7, [r6, #4]
 8010c8e:	9100      	str	r1, [sp, #0]
 8010c90:	3704      	adds	r7, #4
 8010c92:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8010c96:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 8010c9a:	fb00 2404 	mla	r4, r0, r4, r2
 8010c9e:	682a      	ldr	r2, [r5, #0]
 8010ca0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8010ca4:	4414      	add	r4, r2
 8010ca6:	6832      	ldr	r2, [r6, #0]
 8010ca8:	9201      	str	r2, [sp, #4]
 8010caa:	9a00      	ldr	r2, [sp, #0]
 8010cac:	2a00      	cmp	r2, #0
 8010cae:	dc03      	bgt.n	8010cb8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8010cb0:	f1bb 0f00 	cmp.w	fp, #0
 8010cb4:	f340 80bc 	ble.w	8010e30 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8010cb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010cba:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8010cbe:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8010cc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010cc4:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8010cc8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	dd0c      	ble.n	8010cea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8010cd0:	1405      	asrs	r5, r0, #16
 8010cd2:	d405      	bmi.n	8010ce0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8010cd4:	4555      	cmp	r5, sl
 8010cd6:	da03      	bge.n	8010ce0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8010cd8:	1415      	asrs	r5, r2, #16
 8010cda:	d401      	bmi.n	8010ce0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8010cdc:	454d      	cmp	r5, r9
 8010cde:	db05      	blt.n	8010cec <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8010ce0:	4440      	add	r0, r8
 8010ce2:	4472      	add	r2, lr
 8010ce4:	3b01      	subs	r3, #1
 8010ce6:	3403      	adds	r4, #3
 8010ce8:	e7f0      	b.n	8010ccc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8010cea:	d03f      	beq.n	8010d6c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8010cec:	1e5d      	subs	r5, r3, #1
 8010cee:	fb08 0c05 	mla	ip, r8, r5, r0
 8010cf2:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8010cf6:	d42e      	bmi.n	8010d56 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8010cf8:	45d4      	cmp	ip, sl
 8010cfa:	da2c      	bge.n	8010d56 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8010cfc:	fb0e 2505 	mla	r5, lr, r5, r2
 8010d00:	142d      	asrs	r5, r5, #16
 8010d02:	d428      	bmi.n	8010d56 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8010d04:	454d      	cmp	r5, r9
 8010d06:	da26      	bge.n	8010d56 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8010d08:	1ce5      	adds	r5, r4, #3
 8010d0a:	469c      	mov	ip, r3
 8010d0c:	f1bc 0f00 	cmp.w	ip, #0
 8010d10:	f105 0503 	add.w	r5, r5, #3
 8010d14:	dd25      	ble.n	8010d62 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8010d16:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8010d1a:	ea4f 4922 	mov.w	r9, r2, asr #16
 8010d1e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010d22:	4472      	add	r2, lr
 8010d24:	468a      	mov	sl, r1
 8010d26:	9901      	ldr	r1, [sp, #4]
 8010d28:	fb0a 1909 	mla	r9, sl, r9, r1
 8010d2c:	1401      	asrs	r1, r0, #16
 8010d2e:	4440      	add	r0, r8
 8010d30:	f819 9001 	ldrb.w	r9, [r9, r1]
 8010d34:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8010d38:	eb07 0a09 	add.w	sl, r7, r9
 8010d3c:	f817 9009 	ldrb.w	r9, [r7, r9]
 8010d40:	f805 9c06 	strb.w	r9, [r5, #-6]
 8010d44:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8010d48:	f805 9c05 	strb.w	r9, [r5, #-5]
 8010d4c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8010d50:	f805 9c04 	strb.w	r9, [r5, #-4]
 8010d54:	e7da      	b.n	8010d0c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8010d56:	2500      	movs	r5, #0
 8010d58:	eba3 0c05 	sub.w	ip, r3, r5
 8010d5c:	f1bc 0f00 	cmp.w	ip, #0
 8010d60:	dc3b      	bgt.n	8010dda <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8010d62:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010d66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010d6a:	441c      	add	r4, r3
 8010d6c:	9b00      	ldr	r3, [sp, #0]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	dd5e      	ble.n	8010e30 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8010d72:	ee30 0a04 	vadd.f32	s0, s0, s8
 8010d76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d78:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8010d7c:	eeb0 6a62 	vmov.f32	s12, s5
 8010d80:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8010d84:	ee31 1a05 	vadd.f32	s2, s2, s10
 8010d88:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010d8c:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8010d90:	eeb0 6a43 	vmov.f32	s12, s6
 8010d94:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010d98:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8010d9c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8010da0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8010da4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8010da8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8010dac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8010db0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8010db4:	ee12 2a90 	vmov	r2, s5
 8010db8:	eef0 2a47 	vmov.f32	s5, s14
 8010dbc:	fb92 f8f3 	sdiv	r8, r2, r3
 8010dc0:	ee13 2a10 	vmov	r2, s6
 8010dc4:	eeb0 3a67 	vmov.f32	s6, s15
 8010dc8:	fb92 fef3 	sdiv	lr, r2, r3
 8010dcc:	9b00      	ldr	r3, [sp, #0]
 8010dce:	3b01      	subs	r3, #1
 8010dd0:	9300      	str	r3, [sp, #0]
 8010dd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010dd4:	bf08      	it	eq
 8010dd6:	465b      	moveq	r3, fp
 8010dd8:	e767      	b.n	8010caa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8010dda:	ea5f 4920 	movs.w	r9, r0, asr #16
 8010dde:	d423      	bmi.n	8010e28 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8010de0:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8010de4:	45cc      	cmp	ip, r9
 8010de6:	dd1f      	ble.n	8010e28 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8010de8:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8010dec:	d41c      	bmi.n	8010e28 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8010dee:	68f1      	ldr	r1, [r6, #12]
 8010df0:	4551      	cmp	r1, sl
 8010df2:	dd19      	ble.n	8010e28 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8010df4:	fa0f fc8c 	sxth.w	ip, ip
 8010df8:	9901      	ldr	r1, [sp, #4]
 8010dfa:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8010dfe:	f81c c009 	ldrb.w	ip, [ip, r9]
 8010e02:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8010e06:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8010e0a:	eb07 090c 	add.w	r9, r7, ip
 8010e0e:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8010e12:	f804 a00c 	strb.w	sl, [r4, ip]
 8010e16:	44a4      	add	ip, r4
 8010e18:	f899 a001 	ldrb.w	sl, [r9, #1]
 8010e1c:	f88c a001 	strb.w	sl, [ip, #1]
 8010e20:	f899 9002 	ldrb.w	r9, [r9, #2]
 8010e24:	f88c 9002 	strb.w	r9, [ip, #2]
 8010e28:	4440      	add	r0, r8
 8010e2a:	4472      	add	r2, lr
 8010e2c:	3501      	adds	r5, #1
 8010e2e:	e793      	b.n	8010d58 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8010e30:	b003      	add	sp, #12
 8010e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010e36 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8010e36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e3a:	b085      	sub	sp, #20
 8010e3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010e40:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8010e42:	9202      	str	r2, [sp, #8]
 8010e44:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8010e48:	6860      	ldr	r0, [r4, #4]
 8010e4a:	9203      	str	r2, [sp, #12]
 8010e4c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8010e50:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8010e54:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8010e58:	fb00 2505 	mla	r5, r0, r5, r2
 8010e5c:	6822      	ldr	r2, [r4, #0]
 8010e5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010e62:	4415      	add	r5, r2
 8010e64:	f8dc 2000 	ldr.w	r2, [ip]
 8010e68:	9200      	str	r2, [sp, #0]
 8010e6a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8010e6e:	3204      	adds	r2, #4
 8010e70:	9201      	str	r2, [sp, #4]
 8010e72:	2900      	cmp	r1, #0
 8010e74:	dc03      	bgt.n	8010e7e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8010e76:	9a02      	ldr	r2, [sp, #8]
 8010e78:	2a00      	cmp	r2, #0
 8010e7a:	f340 8127 	ble.w	80110cc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8010e7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010e80:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8010e84:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8010e88:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010e8a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8010e8e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	dd0d      	ble.n	8010eb2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8010e96:	1422      	asrs	r2, r4, #16
 8010e98:	d405      	bmi.n	8010ea6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8010e9a:	4542      	cmp	r2, r8
 8010e9c:	da03      	bge.n	8010ea6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8010e9e:	1402      	asrs	r2, r0, #16
 8010ea0:	d401      	bmi.n	8010ea6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8010ea2:	42ba      	cmp	r2, r7
 8010ea4:	db06      	blt.n	8010eb4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8010ea6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010ea8:	4474      	add	r4, lr
 8010eaa:	3b01      	subs	r3, #1
 8010eac:	3503      	adds	r5, #3
 8010eae:	4410      	add	r0, r2
 8010eb0:	e7ef      	b.n	8010e92 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8010eb2:	d075      	beq.n	8010fa0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8010eb4:	1e5a      	subs	r2, r3, #1
 8010eb6:	fb0e 4602 	mla	r6, lr, r2, r4
 8010eba:	1436      	asrs	r6, r6, #16
 8010ebc:	d465      	bmi.n	8010f8a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8010ebe:	4546      	cmp	r6, r8
 8010ec0:	da63      	bge.n	8010f8a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8010ec2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8010ec4:	fb06 0202 	mla	r2, r6, r2, r0
 8010ec8:	1412      	asrs	r2, r2, #16
 8010eca:	d45e      	bmi.n	8010f8a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8010ecc:	42ba      	cmp	r2, r7
 8010ece:	da5c      	bge.n	8010f8a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8010ed0:	1cef      	adds	r7, r5, #3
 8010ed2:	4699      	mov	r9, r3
 8010ed4:	f1b9 0f00 	cmp.w	r9, #0
 8010ed8:	dd5d      	ble.n	8010f96 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8010eda:	1402      	asrs	r2, r0, #16
 8010edc:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8010ee0:	1426      	asrs	r6, r4, #16
 8010ee2:	4692      	mov	sl, r2
 8010ee4:	9a00      	ldr	r2, [sp, #0]
 8010ee6:	fb08 220a 	mla	r2, r8, sl, r2
 8010eea:	5d92      	ldrb	r2, [r2, r6]
 8010eec:	9e01      	ldr	r6, [sp, #4]
 8010eee:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8010ef2:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8010ef6:	d041      	beq.n	8010f7c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8010ef8:	9a03      	ldr	r2, [sp, #12]
 8010efa:	fa5f fb86 	uxtb.w	fp, r6
 8010efe:	fb02 f808 	mul.w	r8, r2, r8
 8010f02:	f108 0201 	add.w	r2, r8, #1
 8010f06:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8010f0a:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8010f0e:	1212      	asrs	r2, r2, #8
 8010f10:	fa1f fa82 	uxth.w	sl, r2
 8010f14:	43d2      	mvns	r2, r2
 8010f16:	fb1b fb0a 	smulbb	fp, fp, sl
 8010f1a:	b2d2      	uxtb	r2, r2
 8010f1c:	fb08 b802 	mla	r8, r8, r2, fp
 8010f20:	fa1f f888 	uxth.w	r8, r8
 8010f24:	f108 0b01 	add.w	fp, r8, #1
 8010f28:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8010f2c:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8010f30:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8010f34:	fb1b fb0a 	smulbb	fp, fp, sl
 8010f38:	ea4f 2828 	mov.w	r8, r8, asr #8
 8010f3c:	fb16 fa0a 	smulbb	sl, r6, sl
 8010f40:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8010f44:	f807 8c03 	strb.w	r8, [r7, #-3]
 8010f48:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8010f4c:	fb06 aa02 	mla	sl, r6, r2, sl
 8010f50:	fb08 b802 	mla	r8, r8, r2, fp
 8010f54:	fa1f fa8a 	uxth.w	sl, sl
 8010f58:	fa1f f888 	uxth.w	r8, r8
 8010f5c:	f10a 0601 	add.w	r6, sl, #1
 8010f60:	f108 0b01 	add.w	fp, r8, #1
 8010f64:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8010f68:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8010f6c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8010f70:	ea4f 2828 	mov.w	r8, r8, asr #8
 8010f74:	f807 ac01 	strb.w	sl, [r7, #-1]
 8010f78:	f807 8c02 	strb.w	r8, [r7, #-2]
 8010f7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010f7e:	4474      	add	r4, lr
 8010f80:	3703      	adds	r7, #3
 8010f82:	f109 39ff 	add.w	r9, r9, #4294967295
 8010f86:	4410      	add	r0, r2
 8010f88:	e7a4      	b.n	8010ed4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8010f8a:	f04f 0800 	mov.w	r8, #0
 8010f8e:	eba3 0208 	sub.w	r2, r3, r8
 8010f92:	2a00      	cmp	r2, #0
 8010f94:	dc3b      	bgt.n	801100e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8010f96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010f9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010f9e:	441d      	add	r5, r3
 8010fa0:	2900      	cmp	r1, #0
 8010fa2:	f340 8093 	ble.w	80110cc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8010fa6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8010faa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010fac:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8010fb0:	3901      	subs	r1, #1
 8010fb2:	eeb0 6a62 	vmov.f32	s12, s5
 8010fb6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8010fba:	ee31 1a05 	vadd.f32	s2, s2, s10
 8010fbe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010fc2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8010fc6:	eeb0 6a43 	vmov.f32	s12, s6
 8010fca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8010fce:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8010fd2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8010fd6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8010fda:	ee77 2a62 	vsub.f32	s5, s14, s5
 8010fde:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8010fe2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8010fe6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8010fea:	ee12 2a90 	vmov	r2, s5
 8010fee:	eef0 2a47 	vmov.f32	s5, s14
 8010ff2:	fb92 fef3 	sdiv	lr, r2, r3
 8010ff6:	ee13 2a10 	vmov	r2, s6
 8010ffa:	eeb0 3a67 	vmov.f32	s6, s15
 8010ffe:	fb92 f3f3 	sdiv	r3, r2, r3
 8011002:	9a02      	ldr	r2, [sp, #8]
 8011004:	9312      	str	r3, [sp, #72]	; 0x48
 8011006:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011008:	bf08      	it	eq
 801100a:	4613      	moveq	r3, r2
 801100c:	e731      	b.n	8010e72 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801100e:	1427      	asrs	r7, r4, #16
 8011010:	d456      	bmi.n	80110c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8011012:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8011016:	42be      	cmp	r6, r7
 8011018:	dd52      	ble.n	80110c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801101a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801101e:	d44f      	bmi.n	80110c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8011020:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8011024:	454a      	cmp	r2, r9
 8011026:	dd4b      	ble.n	80110c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8011028:	9a00      	ldr	r2, [sp, #0]
 801102a:	b236      	sxth	r6, r6
 801102c:	fb09 2606 	mla	r6, r9, r6, r2
 8011030:	5df2      	ldrb	r2, [r6, r7]
 8011032:	9e01      	ldr	r6, [sp, #4]
 8011034:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8011038:	0e3a      	lsrs	r2, r7, #24
 801103a:	d041      	beq.n	80110c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801103c:	9e03      	ldr	r6, [sp, #12]
 801103e:	fa5f fb87 	uxtb.w	fp, r7
 8011042:	4372      	muls	r2, r6
 8011044:	1c56      	adds	r6, r2, #1
 8011046:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801104a:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801104e:	1212      	asrs	r2, r2, #8
 8011050:	f815 9006 	ldrb.w	r9, [r5, r6]
 8011054:	fa1f fa82 	uxth.w	sl, r2
 8011058:	43d2      	mvns	r2, r2
 801105a:	fb1b fb0a 	smulbb	fp, fp, sl
 801105e:	b2d2      	uxtb	r2, r2
 8011060:	fb09 b902 	mla	r9, r9, r2, fp
 8011064:	fa1f f989 	uxth.w	r9, r9
 8011068:	f109 0b01 	add.w	fp, r9, #1
 801106c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8011070:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8011074:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8011078:	fb1b fb0a 	smulbb	fp, fp, sl
 801107c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011080:	fb17 fa0a 	smulbb	sl, r7, sl
 8011084:	f805 9006 	strb.w	r9, [r5, r6]
 8011088:	442e      	add	r6, r5
 801108a:	78b7      	ldrb	r7, [r6, #2]
 801108c:	f896 9001 	ldrb.w	r9, [r6, #1]
 8011090:	fb07 aa02 	mla	sl, r7, r2, sl
 8011094:	fb09 b902 	mla	r9, r9, r2, fp
 8011098:	fa1f fa8a 	uxth.w	sl, sl
 801109c:	fa1f f989 	uxth.w	r9, r9
 80110a0:	f10a 0701 	add.w	r7, sl, #1
 80110a4:	f109 0b01 	add.w	fp, r9, #1
 80110a8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80110ac:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80110b0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80110b4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80110b8:	f886 a002 	strb.w	sl, [r6, #2]
 80110bc:	f886 9001 	strb.w	r9, [r6, #1]
 80110c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80110c2:	4474      	add	r4, lr
 80110c4:	f108 0801 	add.w	r8, r8, #1
 80110c8:	4410      	add	r0, r2
 80110ca:	e760      	b.n	8010f8e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 80110cc:	b005      	add	sp, #20
 80110ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080110d2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80110d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110d6:	b085      	sub	sp, #20
 80110d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80110dc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80110de:	9203      	str	r2, [sp, #12]
 80110e0:	6868      	ldr	r0, [r5, #4]
 80110e2:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80110e6:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80110ea:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80110ee:	fb00 2404 	mla	r4, r0, r4, r2
 80110f2:	682a      	ldr	r2, [r5, #0]
 80110f4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80110f8:	4414      	add	r4, r2
 80110fa:	f8dc 2000 	ldr.w	r2, [ip]
 80110fe:	9201      	str	r2, [sp, #4]
 8011100:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8011104:	3204      	adds	r2, #4
 8011106:	9202      	str	r2, [sp, #8]
 8011108:	2900      	cmp	r1, #0
 801110a:	dc03      	bgt.n	8011114 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801110c:	9a03      	ldr	r2, [sp, #12]
 801110e:	2a00      	cmp	r2, #0
 8011110:	f340 8137 	ble.w	8011382 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8011114:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011116:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801111a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801111e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011120:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8011124:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8011128:	2b00      	cmp	r3, #0
 801112a:	dd0d      	ble.n	8011148 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801112c:	1405      	asrs	r5, r0, #16
 801112e:	d405      	bmi.n	801113c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8011130:	4545      	cmp	r5, r8
 8011132:	da03      	bge.n	801113c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8011134:	1415      	asrs	r5, r2, #16
 8011136:	d401      	bmi.n	801113c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8011138:	42bd      	cmp	r5, r7
 801113a:	db06      	blt.n	801114a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801113c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801113e:	4470      	add	r0, lr
 8011140:	3b01      	subs	r3, #1
 8011142:	3403      	adds	r4, #3
 8011144:	442a      	add	r2, r5
 8011146:	e7ef      	b.n	8011128 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8011148:	d070      	beq.n	801122c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801114a:	1e5d      	subs	r5, r3, #1
 801114c:	fb0e 0605 	mla	r6, lr, r5, r0
 8011150:	1436      	asrs	r6, r6, #16
 8011152:	d462      	bmi.n	801121a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8011154:	4546      	cmp	r6, r8
 8011156:	da60      	bge.n	801121a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8011158:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801115a:	fb06 2505 	mla	r5, r6, r5, r2
 801115e:	142d      	asrs	r5, r5, #16
 8011160:	d45b      	bmi.n	801121a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8011162:	42bd      	cmp	r5, r7
 8011164:	da59      	bge.n	801121a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8011166:	1ce5      	adds	r5, r4, #3
 8011168:	469a      	mov	sl, r3
 801116a:	f1ba 0f00 	cmp.w	sl, #0
 801116e:	dd58      	ble.n	8011222 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8011170:	1416      	asrs	r6, r2, #16
 8011172:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8011176:	1407      	asrs	r7, r0, #16
 8011178:	46b1      	mov	r9, r6
 801117a:	9e01      	ldr	r6, [sp, #4]
 801117c:	fb08 6609 	mla	r6, r8, r9, r6
 8011180:	5df6      	ldrb	r6, [r6, r7]
 8011182:	9f02      	ldr	r7, [sp, #8]
 8011184:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8011188:	0e37      	lsrs	r7, r6, #24
 801118a:	2fff      	cmp	r7, #255	; 0xff
 801118c:	f000 80f0 	beq.w	8011370 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8011190:	fa5f f887 	uxtb.w	r8, r7
 8011194:	b3d7      	cbz	r7, 801120c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8011196:	fa1f f788 	uxth.w	r7, r8
 801119a:	ea6f 0808 	mvn.w	r8, r8
 801119e:	fa5f fb86 	uxtb.w	fp, r6
 80111a2:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 80111a6:	fa5f f888 	uxtb.w	r8, r8
 80111aa:	fb1b fb07 	smulbb	fp, fp, r7
 80111ae:	fb09 b908 	mla	r9, r9, r8, fp
 80111b2:	fa1f f989 	uxth.w	r9, r9
 80111b6:	f109 0b01 	add.w	fp, r9, #1
 80111ba:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80111be:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 80111c2:	fb1b fb08 	smulbb	fp, fp, r8
 80111c6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80111ca:	f805 9c03 	strb.w	r9, [r5, #-3]
 80111ce:	f3c6 2907 	ubfx	r9, r6, #8, #8
 80111d2:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80111d6:	fb09 b907 	mla	r9, r9, r7, fp
 80111da:	fa1f f989 	uxth.w	r9, r9
 80111de:	f109 0b01 	add.w	fp, r9, #1
 80111e2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80111e6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80111ea:	f805 9c02 	strb.w	r9, [r5, #-2]
 80111ee:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 80111f2:	fb19 f808 	smulbb	r8, r9, r8
 80111f6:	fb06 8607 	mla	r6, r6, r7, r8
 80111fa:	b2b6      	uxth	r6, r6
 80111fc:	f106 0801 	add.w	r8, r6, #1
 8011200:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8011204:	ea4f 2828 	mov.w	r8, r8, asr #8
 8011208:	f805 8c01 	strb.w	r8, [r5, #-1]
 801120c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801120e:	4470      	add	r0, lr
 8011210:	3503      	adds	r5, #3
 8011212:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011216:	4432      	add	r2, r6
 8011218:	e7a7      	b.n	801116a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801121a:	2600      	movs	r6, #0
 801121c:	1b9d      	subs	r5, r3, r6
 801121e:	2d00      	cmp	r5, #0
 8011220:	dc3b      	bgt.n	801129a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8011222:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011226:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801122a:	441c      	add	r4, r3
 801122c:	2900      	cmp	r1, #0
 801122e:	f340 80a8 	ble.w	8011382 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8011232:	ee30 0a04 	vadd.f32	s0, s0, s8
 8011236:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011238:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801123c:	3901      	subs	r1, #1
 801123e:	eeb0 6a62 	vmov.f32	s12, s5
 8011242:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8011246:	ee31 1a05 	vadd.f32	s2, s2, s10
 801124a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801124e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8011252:	eeb0 6a43 	vmov.f32	s12, s6
 8011256:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801125a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801125e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8011262:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011266:	ee77 2a62 	vsub.f32	s5, s14, s5
 801126a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801126e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011272:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011276:	ee12 2a90 	vmov	r2, s5
 801127a:	eef0 2a47 	vmov.f32	s5, s14
 801127e:	fb92 fef3 	sdiv	lr, r2, r3
 8011282:	ee13 2a10 	vmov	r2, s6
 8011286:	eeb0 3a67 	vmov.f32	s6, s15
 801128a:	fb92 f3f3 	sdiv	r3, r2, r3
 801128e:	9a03      	ldr	r2, [sp, #12]
 8011290:	9312      	str	r3, [sp, #72]	; 0x48
 8011292:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011294:	bf08      	it	eq
 8011296:	4613      	moveq	r3, r2
 8011298:	e736      	b.n	8011108 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801129a:	ea5f 4820 	movs.w	r8, r0, asr #16
 801129e:	d457      	bmi.n	8011350 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80112a0:	f8dc 7008 	ldr.w	r7, [ip, #8]
 80112a4:	4547      	cmp	r7, r8
 80112a6:	dd53      	ble.n	8011350 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80112a8:	ea5f 4922 	movs.w	r9, r2, asr #16
 80112ac:	d450      	bmi.n	8011350 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80112ae:	f8dc 500c 	ldr.w	r5, [ip, #12]
 80112b2:	454d      	cmp	r5, r9
 80112b4:	dd4c      	ble.n	8011350 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80112b6:	9d01      	ldr	r5, [sp, #4]
 80112b8:	b23f      	sxth	r7, r7
 80112ba:	fb09 5707 	mla	r7, r9, r7, r5
 80112be:	f817 5008 	ldrb.w	r5, [r7, r8]
 80112c2:	9f02      	ldr	r7, [sp, #8]
 80112c4:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80112c8:	0e2f      	lsrs	r7, r5, #24
 80112ca:	2fff      	cmp	r7, #255	; 0xff
 80112cc:	d045      	beq.n	801135a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80112ce:	fa5f f987 	uxtb.w	r9, r7
 80112d2:	b3ef      	cbz	r7, 8011350 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80112d4:	fa1f f889 	uxth.w	r8, r9
 80112d8:	ea6f 0909 	mvn.w	r9, r9
 80112dc:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80112e0:	fa5f fb85 	uxtb.w	fp, r5
 80112e4:	f814 a007 	ldrb.w	sl, [r4, r7]
 80112e8:	fa5f f989 	uxtb.w	r9, r9
 80112ec:	fb1b fb08 	smulbb	fp, fp, r8
 80112f0:	fb0a ba09 	mla	sl, sl, r9, fp
 80112f4:	fa1f fa8a 	uxth.w	sl, sl
 80112f8:	f10a 0b01 	add.w	fp, sl, #1
 80112fc:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8011300:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8011304:	f804 a007 	strb.w	sl, [r4, r7]
 8011308:	4427      	add	r7, r4
 801130a:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801130e:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8011312:	f897 b001 	ldrb.w	fp, [r7, #1]
 8011316:	fb1b fb09 	smulbb	fp, fp, r9
 801131a:	fb0a ba08 	mla	sl, sl, r8, fp
 801131e:	fa1f fa8a 	uxth.w	sl, sl
 8011322:	f10a 0b01 	add.w	fp, sl, #1
 8011326:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801132a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801132e:	f887 a001 	strb.w	sl, [r7, #1]
 8011332:	f897 a002 	ldrb.w	sl, [r7, #2]
 8011336:	fb1a f909 	smulbb	r9, sl, r9
 801133a:	fb05 9508 	mla	r5, r5, r8, r9
 801133e:	b2ad      	uxth	r5, r5
 8011340:	f105 0901 	add.w	r9, r5, #1
 8011344:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8011348:	ea4f 2929 	mov.w	r9, r9, asr #8
 801134c:	f887 9002 	strb.w	r9, [r7, #2]
 8011350:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8011352:	4470      	add	r0, lr
 8011354:	3601      	adds	r6, #1
 8011356:	442a      	add	r2, r5
 8011358:	e760      	b.n	801121c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801135a:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801135e:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8011362:	55e5      	strb	r5, [r4, r7]
 8011364:	4427      	add	r7, r4
 8011366:	0c2d      	lsrs	r5, r5, #16
 8011368:	f887 8001 	strb.w	r8, [r7, #1]
 801136c:	70bd      	strb	r5, [r7, #2]
 801136e:	e7ef      	b.n	8011350 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8011370:	0a37      	lsrs	r7, r6, #8
 8011372:	f805 6c03 	strb.w	r6, [r5, #-3]
 8011376:	0c36      	lsrs	r6, r6, #16
 8011378:	f805 7c02 	strb.w	r7, [r5, #-2]
 801137c:	f805 6c01 	strb.w	r6, [r5, #-1]
 8011380:	e744      	b.n	801120c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8011382:	b005      	add	sp, #20
 8011384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011388 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8011388:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801138c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801138e:	9201      	str	r2, [sp, #4]
 8011390:	6870      	ldr	r0, [r6, #4]
 8011392:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8011396:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801139a:	fa1f fe85 	uxth.w	lr, r5
 801139e:	43ed      	mvns	r5, r5
 80113a0:	f8dc 8000 	ldr.w	r8, [ip]
 80113a4:	b2ed      	uxtb	r5, r5
 80113a6:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80113aa:	fb00 2404 	mla	r4, r0, r4, r2
 80113ae:	6832      	ldr	r2, [r6, #0]
 80113b0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80113b4:	4414      	add	r4, r2
 80113b6:	2900      	cmp	r1, #0
 80113b8:	dc03      	bgt.n	80113c2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80113ba:	9a01      	ldr	r2, [sp, #4]
 80113bc:	2a00      	cmp	r2, #0
 80113be:	f340 810d 	ble.w	80115dc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80113c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80113c4:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 80113c8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80113cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80113ce:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 80113d2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	dd0e      	ble.n	80113f8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80113da:	1406      	asrs	r6, r0, #16
 80113dc:	d405      	bmi.n	80113ea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80113de:	4556      	cmp	r6, sl
 80113e0:	da03      	bge.n	80113ea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80113e2:	1416      	asrs	r6, r2, #16
 80113e4:	d401      	bmi.n	80113ea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80113e6:	454e      	cmp	r6, r9
 80113e8:	db07      	blt.n	80113fa <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80113ea:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80113ec:	3b01      	subs	r3, #1
 80113ee:	3403      	adds	r4, #3
 80113f0:	4430      	add	r0, r6
 80113f2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80113f4:	4432      	add	r2, r6
 80113f6:	e7ee      	b.n	80113d6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80113f8:	d060      	beq.n	80114bc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80113fa:	1e5e      	subs	r6, r3, #1
 80113fc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80113fe:	fb07 0706 	mla	r7, r7, r6, r0
 8011402:	143f      	asrs	r7, r7, #16
 8011404:	d451      	bmi.n	80114aa <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8011406:	4557      	cmp	r7, sl
 8011408:	da4f      	bge.n	80114aa <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801140a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801140c:	fb07 2606 	mla	r6, r7, r6, r2
 8011410:	1436      	asrs	r6, r6, #16
 8011412:	d44a      	bmi.n	80114aa <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8011414:	454e      	cmp	r6, r9
 8011416:	da48      	bge.n	80114aa <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8011418:	1ce6      	adds	r6, r4, #3
 801141a:	4699      	mov	r9, r3
 801141c:	f1b9 0f00 	cmp.w	r9, #0
 8011420:	f106 0603 	add.w	r6, r6, #3
 8011424:	dd45      	ble.n	80114b2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8011426:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801142a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801142e:	1417      	asrs	r7, r2, #16
 8011430:	f109 39ff 	add.w	r9, r9, #4294967295
 8011434:	fb0b a707 	mla	r7, fp, r7, sl
 8011438:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801143c:	fb1b fb05 	smulbb	fp, fp, r5
 8011440:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8011444:	eb08 0a07 	add.w	sl, r8, r7
 8011448:	f818 7007 	ldrb.w	r7, [r8, r7]
 801144c:	fb07 b70e 	mla	r7, r7, lr, fp
 8011450:	b2bf      	uxth	r7, r7
 8011452:	f107 0b01 	add.w	fp, r7, #1
 8011456:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801145a:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801145e:	fb1b fb05 	smulbb	fp, fp, r5
 8011462:	123f      	asrs	r7, r7, #8
 8011464:	f806 7c06 	strb.w	r7, [r6, #-6]
 8011468:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801146c:	fb07 b70e 	mla	r7, r7, lr, fp
 8011470:	b2bf      	uxth	r7, r7
 8011472:	f107 0b01 	add.w	fp, r7, #1
 8011476:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801147a:	123f      	asrs	r7, r7, #8
 801147c:	f806 7c05 	strb.w	r7, [r6, #-5]
 8011480:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8011484:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8011488:	fb1a fa05 	smulbb	sl, sl, r5
 801148c:	fb07 a70e 	mla	r7, r7, lr, sl
 8011490:	b2bf      	uxth	r7, r7
 8011492:	f107 0a01 	add.w	sl, r7, #1
 8011496:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801149a:	123f      	asrs	r7, r7, #8
 801149c:	f806 7c04 	strb.w	r7, [r6, #-4]
 80114a0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80114a2:	4438      	add	r0, r7
 80114a4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80114a6:	443a      	add	r2, r7
 80114a8:	e7b8      	b.n	801141c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80114aa:	2700      	movs	r7, #0
 80114ac:	1bde      	subs	r6, r3, r7
 80114ae:	2e00      	cmp	r6, #0
 80114b0:	dc3f      	bgt.n	8011532 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80114b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80114b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80114ba:	441c      	add	r4, r3
 80114bc:	2900      	cmp	r1, #0
 80114be:	f340 808d 	ble.w	80115dc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80114c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80114c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80114c8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80114cc:	3901      	subs	r1, #1
 80114ce:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80114d2:	eef0 6a62 	vmov.f32	s13, s5
 80114d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80114da:	ee31 1a05 	vadd.f32	s2, s2, s10
 80114de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80114e2:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 80114e6:	eef0 6a43 	vmov.f32	s13, s6
 80114ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80114ee:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 80114f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80114f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80114fa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80114fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011502:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011506:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801150a:	ee12 2a90 	vmov	r2, s5
 801150e:	eef0 2a47 	vmov.f32	s5, s14
 8011512:	fb92 f3f3 	sdiv	r3, r2, r3
 8011516:	ee13 2a10 	vmov	r2, s6
 801151a:	930f      	str	r3, [sp, #60]	; 0x3c
 801151c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801151e:	eeb0 3a67 	vmov.f32	s6, s15
 8011522:	fb92 f3f3 	sdiv	r3, r2, r3
 8011526:	9a01      	ldr	r2, [sp, #4]
 8011528:	9310      	str	r3, [sp, #64]	; 0x40
 801152a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801152c:	bf08      	it	eq
 801152e:	4613      	moveq	r3, r2
 8011530:	e741      	b.n	80113b6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8011532:	ea5f 4920 	movs.w	r9, r0, asr #16
 8011536:	d44b      	bmi.n	80115d0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8011538:	f8dc b008 	ldr.w	fp, [ip, #8]
 801153c:	45cb      	cmp	fp, r9
 801153e:	dd47      	ble.n	80115d0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8011540:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8011544:	d444      	bmi.n	80115d0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8011546:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801154a:	4556      	cmp	r6, sl
 801154c:	dd40      	ble.n	80115d0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801154e:	fa0f f68b 	sxth.w	r6, fp
 8011552:	fb0a 9906 	mla	r9, sl, r6, r9
 8011556:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801155a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801155e:	f814 b006 	ldrb.w	fp, [r4, r6]
 8011562:	fb1b fb05 	smulbb	fp, fp, r5
 8011566:	eb08 0a09 	add.w	sl, r8, r9
 801156a:	f818 9009 	ldrb.w	r9, [r8, r9]
 801156e:	fb09 b90e 	mla	r9, r9, lr, fp
 8011572:	fa1f f989 	uxth.w	r9, r9
 8011576:	f109 0b01 	add.w	fp, r9, #1
 801157a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801157e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011582:	f804 9006 	strb.w	r9, [r4, r6]
 8011586:	4426      	add	r6, r4
 8011588:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801158c:	f896 b001 	ldrb.w	fp, [r6, #1]
 8011590:	fb1b fb05 	smulbb	fp, fp, r5
 8011594:	fb09 b90e 	mla	r9, r9, lr, fp
 8011598:	fa1f f989 	uxth.w	r9, r9
 801159c:	f109 0b01 	add.w	fp, r9, #1
 80115a0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80115a4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80115a8:	f886 9001 	strb.w	r9, [r6, #1]
 80115ac:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80115b0:	f896 a002 	ldrb.w	sl, [r6, #2]
 80115b4:	fb1a fa05 	smulbb	sl, sl, r5
 80115b8:	fb09 a90e 	mla	r9, r9, lr, sl
 80115bc:	fa1f f989 	uxth.w	r9, r9
 80115c0:	f109 0a01 	add.w	sl, r9, #1
 80115c4:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80115c8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80115cc:	f886 9002 	strb.w	r9, [r6, #2]
 80115d0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80115d2:	3701      	adds	r7, #1
 80115d4:	4430      	add	r0, r6
 80115d6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80115d8:	4432      	add	r2, r6
 80115da:	e767      	b.n	80114ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80115dc:	b003      	add	sp, #12
 80115de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080115e2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80115e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115e6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80115e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80115ec:	9201      	str	r2, [sp, #4]
 80115ee:	6868      	ldr	r0, [r5, #4]
 80115f0:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80115f2:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80115f6:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 80115fa:	fb00 2404 	mla	r4, r0, r4, r2
 80115fe:	682a      	ldr	r2, [r5, #0]
 8011600:	f8d7 8000 	ldr.w	r8, [r7]
 8011604:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8011608:	4414      	add	r4, r2
 801160a:	2900      	cmp	r1, #0
 801160c:	dc03      	bgt.n	8011616 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801160e:	9a01      	ldr	r2, [sp, #4]
 8011610:	2a00      	cmp	r2, #0
 8011612:	f340 80af 	ble.w	8011774 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8011616:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011618:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801161c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8011620:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011622:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 8011626:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801162a:	2b00      	cmp	r3, #0
 801162c:	dd0c      	ble.n	8011648 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801162e:	1405      	asrs	r5, r0, #16
 8011630:	d405      	bmi.n	801163e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8011632:	4555      	cmp	r5, sl
 8011634:	da03      	bge.n	801163e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8011636:	1415      	asrs	r5, r2, #16
 8011638:	d401      	bmi.n	801163e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801163a:	454d      	cmp	r5, r9
 801163c:	db05      	blt.n	801164a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801163e:	4470      	add	r0, lr
 8011640:	4462      	add	r2, ip
 8011642:	3b01      	subs	r3, #1
 8011644:	3403      	adds	r4, #3
 8011646:	e7f0      	b.n	801162a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8011648:	d038      	beq.n	80116bc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801164a:	1e5d      	subs	r5, r3, #1
 801164c:	fb0e 0605 	mla	r6, lr, r5, r0
 8011650:	1436      	asrs	r6, r6, #16
 8011652:	d42a      	bmi.n	80116aa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8011654:	4556      	cmp	r6, sl
 8011656:	da28      	bge.n	80116aa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8011658:	fb0c 2505 	mla	r5, ip, r5, r2
 801165c:	142d      	asrs	r5, r5, #16
 801165e:	d424      	bmi.n	80116aa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8011660:	454d      	cmp	r5, r9
 8011662:	da22      	bge.n	80116aa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8011664:	1ce6      	adds	r6, r4, #3
 8011666:	4699      	mov	r9, r3
 8011668:	f1b9 0f00 	cmp.w	r9, #0
 801166c:	f106 0603 	add.w	r6, r6, #3
 8011670:	dd1f      	ble.n	80116b2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8011672:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 8011676:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801167a:	1415      	asrs	r5, r2, #16
 801167c:	4470      	add	r0, lr
 801167e:	4462      	add	r2, ip
 8011680:	f109 39ff 	add.w	r9, r9, #4294967295
 8011684:	fb0b a505 	mla	r5, fp, r5, sl
 8011688:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801168c:	eb08 0a05 	add.w	sl, r8, r5
 8011690:	f818 5005 	ldrb.w	r5, [r8, r5]
 8011694:	f806 5c06 	strb.w	r5, [r6, #-6]
 8011698:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801169c:	f806 5c05 	strb.w	r5, [r6, #-5]
 80116a0:	f89a 5002 	ldrb.w	r5, [sl, #2]
 80116a4:	f806 5c04 	strb.w	r5, [r6, #-4]
 80116a8:	e7de      	b.n	8011668 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80116aa:	2600      	movs	r6, #0
 80116ac:	1b9d      	subs	r5, r3, r6
 80116ae:	2d00      	cmp	r5, #0
 80116b0:	dc38      	bgt.n	8011724 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80116b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80116b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80116ba:	441c      	add	r4, r3
 80116bc:	2900      	cmp	r1, #0
 80116be:	dd59      	ble.n	8011774 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80116c0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80116c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80116c6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80116ca:	3901      	subs	r1, #1
 80116cc:	eeb0 6a62 	vmov.f32	s12, s5
 80116d0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80116d4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80116d8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80116dc:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 80116e0:	eeb0 6a43 	vmov.f32	s12, s6
 80116e4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80116e8:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 80116ec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80116f0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80116f4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80116f8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80116fc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011700:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011704:	ee12 2a90 	vmov	r2, s5
 8011708:	eef0 2a47 	vmov.f32	s5, s14
 801170c:	fb92 fef3 	sdiv	lr, r2, r3
 8011710:	ee13 2a10 	vmov	r2, s6
 8011714:	eeb0 3a67 	vmov.f32	s6, s15
 8011718:	fb92 fcf3 	sdiv	ip, r2, r3
 801171c:	9a01      	ldr	r2, [sp, #4]
 801171e:	bf08      	it	eq
 8011720:	4613      	moveq	r3, r2
 8011722:	e772      	b.n	801160a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8011724:	ea5f 4920 	movs.w	r9, r0, asr #16
 8011728:	d420      	bmi.n	801176c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801172a:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801172e:	45cb      	cmp	fp, r9
 8011730:	dd1c      	ble.n	801176c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8011732:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8011736:	d419      	bmi.n	801176c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8011738:	68fd      	ldr	r5, [r7, #12]
 801173a:	4555      	cmp	r5, sl
 801173c:	dd16      	ble.n	801176c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801173e:	fa0f f58b 	sxth.w	r5, fp
 8011742:	fb0a 9505 	mla	r5, sl, r5, r9
 8011746:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801174a:	f818 9005 	ldrb.w	r9, [r8, r5]
 801174e:	eb08 0b05 	add.w	fp, r8, r5
 8011752:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8011756:	f804 9005 	strb.w	r9, [r4, r5]
 801175a:	4425      	add	r5, r4
 801175c:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8011760:	f885 9001 	strb.w	r9, [r5, #1]
 8011764:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8011768:	f885 9002 	strb.w	r9, [r5, #2]
 801176c:	4470      	add	r0, lr
 801176e:	4462      	add	r2, ip
 8011770:	3601      	adds	r6, #1
 8011772:	e79b      	b.n	80116ac <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8011774:	b003      	add	sp, #12
 8011776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801177a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801177a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801177e:	b085      	sub	sp, #20
 8011780:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011784:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8011786:	9202      	str	r2, [sp, #8]
 8011788:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801178c:	6860      	ldr	r0, [r4, #4]
 801178e:	9203      	str	r2, [sp, #12]
 8011790:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8011794:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8011798:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801179c:	fb00 2505 	mla	r5, r0, r5, r2
 80117a0:	6822      	ldr	r2, [r4, #0]
 80117a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80117a6:	4415      	add	r5, r2
 80117a8:	f8dc 2000 	ldr.w	r2, [ip]
 80117ac:	9201      	str	r2, [sp, #4]
 80117ae:	2900      	cmp	r1, #0
 80117b0:	dc03      	bgt.n	80117ba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80117b2:	9a02      	ldr	r2, [sp, #8]
 80117b4:	2a00      	cmp	r2, #0
 80117b6:	f340 8122 	ble.w	80119fe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80117ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80117bc:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80117c0:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80117c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80117c6:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80117ca:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	dd0d      	ble.n	80117ee <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80117d2:	1422      	asrs	r2, r4, #16
 80117d4:	d405      	bmi.n	80117e2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80117d6:	4542      	cmp	r2, r8
 80117d8:	da03      	bge.n	80117e2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80117da:	1402      	asrs	r2, r0, #16
 80117dc:	d401      	bmi.n	80117e2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80117de:	42ba      	cmp	r2, r7
 80117e0:	db06      	blt.n	80117f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80117e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80117e4:	4474      	add	r4, lr
 80117e6:	3b01      	subs	r3, #1
 80117e8:	3503      	adds	r5, #3
 80117ea:	4410      	add	r0, r2
 80117ec:	e7ef      	b.n	80117ce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80117ee:	d072      	beq.n	80118d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80117f0:	1e5a      	subs	r2, r3, #1
 80117f2:	fb0e 4602 	mla	r6, lr, r2, r4
 80117f6:	1436      	asrs	r6, r6, #16
 80117f8:	d462      	bmi.n	80118c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80117fa:	4546      	cmp	r6, r8
 80117fc:	da60      	bge.n	80118c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80117fe:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8011800:	fb06 0202 	mla	r2, r6, r2, r0
 8011804:	1412      	asrs	r2, r2, #16
 8011806:	d45b      	bmi.n	80118c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8011808:	42ba      	cmp	r2, r7
 801180a:	da59      	bge.n	80118c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801180c:	1cef      	adds	r7, r5, #3
 801180e:	4699      	mov	r9, r3
 8011810:	f1b9 0f00 	cmp.w	r9, #0
 8011814:	dd5a      	ble.n	80118cc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8011816:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801181a:	1426      	asrs	r6, r4, #16
 801181c:	1402      	asrs	r2, r0, #16
 801181e:	fb08 6202 	mla	r2, r8, r2, r6
 8011822:	9e01      	ldr	r6, [sp, #4]
 8011824:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8011828:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801182c:	d041      	beq.n	80118b2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801182e:	9a03      	ldr	r2, [sp, #12]
 8011830:	fa5f fb86 	uxtb.w	fp, r6
 8011834:	fb02 f808 	mul.w	r8, r2, r8
 8011838:	f108 0201 	add.w	r2, r8, #1
 801183c:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8011840:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8011844:	1212      	asrs	r2, r2, #8
 8011846:	fa1f fa82 	uxth.w	sl, r2
 801184a:	43d2      	mvns	r2, r2
 801184c:	fb1b fb0a 	smulbb	fp, fp, sl
 8011850:	b2d2      	uxtb	r2, r2
 8011852:	fb08 b802 	mla	r8, r8, r2, fp
 8011856:	fa1f f888 	uxth.w	r8, r8
 801185a:	f108 0b01 	add.w	fp, r8, #1
 801185e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8011862:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8011866:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801186a:	fb1b fb0a 	smulbb	fp, fp, sl
 801186e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8011872:	fb16 fa0a 	smulbb	sl, r6, sl
 8011876:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801187a:	f807 8c03 	strb.w	r8, [r7, #-3]
 801187e:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8011882:	fb06 aa02 	mla	sl, r6, r2, sl
 8011886:	fb08 b802 	mla	r8, r8, r2, fp
 801188a:	fa1f fa8a 	uxth.w	sl, sl
 801188e:	fa1f f888 	uxth.w	r8, r8
 8011892:	f10a 0601 	add.w	r6, sl, #1
 8011896:	f108 0b01 	add.w	fp, r8, #1
 801189a:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801189e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80118a2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80118a6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80118aa:	f807 ac01 	strb.w	sl, [r7, #-1]
 80118ae:	f807 8c02 	strb.w	r8, [r7, #-2]
 80118b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80118b4:	4474      	add	r4, lr
 80118b6:	3703      	adds	r7, #3
 80118b8:	f109 39ff 	add.w	r9, r9, #4294967295
 80118bc:	4410      	add	r0, r2
 80118be:	e7a7      	b.n	8011810 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80118c0:	f04f 0800 	mov.w	r8, #0
 80118c4:	eba3 0208 	sub.w	r2, r3, r8
 80118c8:	2a00      	cmp	r2, #0
 80118ca:	dc3b      	bgt.n	8011944 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80118cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80118d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80118d4:	441d      	add	r5, r3
 80118d6:	2900      	cmp	r1, #0
 80118d8:	f340 8091 	ble.w	80119fe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80118dc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80118e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80118e2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80118e6:	3901      	subs	r1, #1
 80118e8:	eeb0 6a62 	vmov.f32	s12, s5
 80118ec:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80118f0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80118f4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80118f8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80118fc:	eeb0 6a43 	vmov.f32	s12, s6
 8011900:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011904:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8011908:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801190c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011910:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011914:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011918:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801191c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011920:	ee12 2a90 	vmov	r2, s5
 8011924:	eef0 2a47 	vmov.f32	s5, s14
 8011928:	fb92 fef3 	sdiv	lr, r2, r3
 801192c:	ee13 2a10 	vmov	r2, s6
 8011930:	eeb0 3a67 	vmov.f32	s6, s15
 8011934:	fb92 f3f3 	sdiv	r3, r2, r3
 8011938:	9a02      	ldr	r2, [sp, #8]
 801193a:	9312      	str	r3, [sp, #72]	; 0x48
 801193c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801193e:	bf08      	it	eq
 8011940:	4613      	moveq	r3, r2
 8011942:	e734      	b.n	80117ae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8011944:	1427      	asrs	r7, r4, #16
 8011946:	d454      	bmi.n	80119f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8011948:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801194c:	42be      	cmp	r6, r7
 801194e:	dd50      	ble.n	80119f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8011950:	ea5f 4920 	movs.w	r9, r0, asr #16
 8011954:	d44d      	bmi.n	80119f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8011956:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801195a:	454a      	cmp	r2, r9
 801195c:	dd49      	ble.n	80119f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801195e:	b236      	sxth	r6, r6
 8011960:	9a01      	ldr	r2, [sp, #4]
 8011962:	fb09 7606 	mla	r6, r9, r6, r7
 8011966:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801196a:	0e3a      	lsrs	r2, r7, #24
 801196c:	d041      	beq.n	80119f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801196e:	9e03      	ldr	r6, [sp, #12]
 8011970:	fa5f fb87 	uxtb.w	fp, r7
 8011974:	4372      	muls	r2, r6
 8011976:	1c56      	adds	r6, r2, #1
 8011978:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801197c:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8011980:	1212      	asrs	r2, r2, #8
 8011982:	f815 9006 	ldrb.w	r9, [r5, r6]
 8011986:	fa1f fa82 	uxth.w	sl, r2
 801198a:	43d2      	mvns	r2, r2
 801198c:	fb1b fb0a 	smulbb	fp, fp, sl
 8011990:	b2d2      	uxtb	r2, r2
 8011992:	fb09 b902 	mla	r9, r9, r2, fp
 8011996:	fa1f f989 	uxth.w	r9, r9
 801199a:	f109 0b01 	add.w	fp, r9, #1
 801199e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80119a2:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80119a6:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80119aa:	fb1b fb0a 	smulbb	fp, fp, sl
 80119ae:	ea4f 2929 	mov.w	r9, r9, asr #8
 80119b2:	fb17 fa0a 	smulbb	sl, r7, sl
 80119b6:	f805 9006 	strb.w	r9, [r5, r6]
 80119ba:	442e      	add	r6, r5
 80119bc:	78b7      	ldrb	r7, [r6, #2]
 80119be:	f896 9001 	ldrb.w	r9, [r6, #1]
 80119c2:	fb07 aa02 	mla	sl, r7, r2, sl
 80119c6:	fb09 b902 	mla	r9, r9, r2, fp
 80119ca:	fa1f fa8a 	uxth.w	sl, sl
 80119ce:	fa1f f989 	uxth.w	r9, r9
 80119d2:	f10a 0701 	add.w	r7, sl, #1
 80119d6:	f109 0b01 	add.w	fp, r9, #1
 80119da:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80119de:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80119e2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80119e6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80119ea:	f886 a002 	strb.w	sl, [r6, #2]
 80119ee:	f886 9001 	strb.w	r9, [r6, #1]
 80119f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80119f4:	4474      	add	r4, lr
 80119f6:	f108 0801 	add.w	r8, r8, #1
 80119fa:	4410      	add	r0, r2
 80119fc:	e762      	b.n	80118c4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80119fe:	b005      	add	sp, #20
 8011a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011a04 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8011a04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a08:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8011a0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011a0e:	9201      	str	r2, [sp, #4]
 8011a10:	6860      	ldr	r0, [r4, #4]
 8011a12:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8011a16:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 8011a1a:	fb00 2505 	mla	r5, r0, r5, r2
 8011a1e:	6822      	ldr	r2, [r4, #0]
 8011a20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011a24:	4415      	add	r5, r2
 8011a26:	f8dc 2000 	ldr.w	r2, [ip]
 8011a2a:	9200      	str	r2, [sp, #0]
 8011a2c:	2900      	cmp	r1, #0
 8011a2e:	dc03      	bgt.n	8011a38 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8011a30:	9a01      	ldr	r2, [sp, #4]
 8011a32:	2a00      	cmp	r2, #0
 8011a34:	f340 812b 	ble.w	8011c8e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8011a38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011a3a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8011a3e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8011a42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011a44:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8011a48:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	dd0e      	ble.n	8011a6e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8011a50:	1422      	asrs	r2, r4, #16
 8011a52:	d405      	bmi.n	8011a60 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8011a54:	4572      	cmp	r2, lr
 8011a56:	da03      	bge.n	8011a60 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8011a58:	1402      	asrs	r2, r0, #16
 8011a5a:	d401      	bmi.n	8011a60 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8011a5c:	42ba      	cmp	r2, r7
 8011a5e:	db07      	blt.n	8011a70 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8011a60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011a62:	3b01      	subs	r3, #1
 8011a64:	3503      	adds	r5, #3
 8011a66:	4414      	add	r4, r2
 8011a68:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011a6a:	4410      	add	r0, r2
 8011a6c:	e7ee      	b.n	8011a4c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8011a6e:	d06f      	beq.n	8011b50 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8011a70:	1e5a      	subs	r2, r3, #1
 8011a72:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8011a74:	fb06 4602 	mla	r6, r6, r2, r4
 8011a78:	1436      	asrs	r6, r6, #16
 8011a7a:	d45e      	bmi.n	8011b3a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8011a7c:	4576      	cmp	r6, lr
 8011a7e:	da5c      	bge.n	8011b3a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8011a80:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8011a82:	fb06 0202 	mla	r2, r6, r2, r0
 8011a86:	1412      	asrs	r2, r2, #16
 8011a88:	d457      	bmi.n	8011b3a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8011a8a:	42ba      	cmp	r2, r7
 8011a8c:	da55      	bge.n	8011b3a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8011a8e:	1cee      	adds	r6, r5, #3
 8011a90:	469a      	mov	sl, r3
 8011a92:	f1ba 0f00 	cmp.w	sl, #0
 8011a96:	dd56      	ble.n	8011b46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8011a98:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8011a9c:	1427      	asrs	r7, r4, #16
 8011a9e:	1402      	asrs	r2, r0, #16
 8011aa0:	fb0e 7202 	mla	r2, lr, r2, r7
 8011aa4:	9f00      	ldr	r7, [sp, #0]
 8011aa6:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8011aaa:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8011aae:	d03c      	beq.n	8011b2a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8011ab0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8011ab4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8011ab8:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8011abc:	fa5f f28e 	uxtb.w	r2, lr
 8011ac0:	b2ff      	uxtb	r7, r7
 8011ac2:	f000 80dd 	beq.w	8011c80 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8011ac6:	fa1f f882 	uxth.w	r8, r2
 8011aca:	43d2      	mvns	r2, r2
 8011acc:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8011ad0:	fb17 f708 	smulbb	r7, r7, r8
 8011ad4:	b2d2      	uxtb	r2, r2
 8011ad6:	fb19 f908 	smulbb	r9, r9, r8
 8011ada:	fb0e 7702 	mla	r7, lr, r2, r7
 8011ade:	fb1b f808 	smulbb	r8, fp, r8
 8011ae2:	b2bf      	uxth	r7, r7
 8011ae4:	f107 0e01 	add.w	lr, r7, #1
 8011ae8:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8011aec:	123f      	asrs	r7, r7, #8
 8011aee:	f806 7c03 	strb.w	r7, [r6, #-3]
 8011af2:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8011af6:	fb07 9902 	mla	r9, r7, r2, r9
 8011afa:	fa1f f989 	uxth.w	r9, r9
 8011afe:	f109 0701 	add.w	r7, r9, #1
 8011b02:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8011b06:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8011b0a:	fb07 8802 	mla	r8, r7, r2, r8
 8011b0e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011b12:	fa1f f888 	uxth.w	r8, r8
 8011b16:	f806 9c02 	strb.w	r9, [r6, #-2]
 8011b1a:	f108 0201 	add.w	r2, r8, #1
 8011b1e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8011b22:	ea4f 2828 	mov.w	r8, r8, asr #8
 8011b26:	f806 8c01 	strb.w	r8, [r6, #-1]
 8011b2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011b2c:	3603      	adds	r6, #3
 8011b2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011b32:	4414      	add	r4, r2
 8011b34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011b36:	4410      	add	r0, r2
 8011b38:	e7ab      	b.n	8011a92 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8011b3a:	f04f 0e00 	mov.w	lr, #0
 8011b3e:	eba3 020e 	sub.w	r2, r3, lr
 8011b42:	2a00      	cmp	r2, #0
 8011b44:	dc3d      	bgt.n	8011bc2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8011b46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011b4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011b4e:	441d      	add	r5, r3
 8011b50:	2900      	cmp	r1, #0
 8011b52:	f340 809c 	ble.w	8011c8e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8011b56:	ee30 0a04 	vadd.f32	s0, s0, s8
 8011b5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b5c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8011b60:	3901      	subs	r1, #1
 8011b62:	eeb0 6a62 	vmov.f32	s12, s5
 8011b66:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8011b6a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011b6e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011b72:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8011b76:	eeb0 6a43 	vmov.f32	s12, s6
 8011b7a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011b7e:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8011b82:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8011b86:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011b8a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011b8e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011b92:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011b96:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011b9a:	ee12 2a90 	vmov	r2, s5
 8011b9e:	eef0 2a47 	vmov.f32	s5, s14
 8011ba2:	fb92 f3f3 	sdiv	r3, r2, r3
 8011ba6:	ee13 2a10 	vmov	r2, s6
 8011baa:	930f      	str	r3, [sp, #60]	; 0x3c
 8011bac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011bae:	eeb0 3a67 	vmov.f32	s6, s15
 8011bb2:	fb92 f3f3 	sdiv	r3, r2, r3
 8011bb6:	9a01      	ldr	r2, [sp, #4]
 8011bb8:	9310      	str	r3, [sp, #64]	; 0x40
 8011bba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011bbc:	bf08      	it	eq
 8011bbe:	4613      	moveq	r3, r2
 8011bc0:	e734      	b.n	8011a2c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8011bc2:	1427      	asrs	r7, r4, #16
 8011bc4:	d44d      	bmi.n	8011c62 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8011bc6:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8011bca:	42be      	cmp	r6, r7
 8011bcc:	dd49      	ble.n	8011c62 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8011bce:	ea5f 4820 	movs.w	r8, r0, asr #16
 8011bd2:	d446      	bmi.n	8011c62 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8011bd4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8011bd8:	4542      	cmp	r2, r8
 8011bda:	dd42      	ble.n	8011c62 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8011bdc:	b236      	sxth	r6, r6
 8011bde:	9a00      	ldr	r2, [sp, #0]
 8011be0:	fb08 7606 	mla	r6, r8, r6, r7
 8011be4:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8011be8:	0e3a      	lsrs	r2, r7, #24
 8011bea:	d03a      	beq.n	8011c62 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8011bec:	2aff      	cmp	r2, #255	; 0xff
 8011bee:	b2d6      	uxtb	r6, r2
 8011bf0:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8011bf4:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8011bf8:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8011bfc:	b2ff      	uxtb	r7, r7
 8011bfe:	d037      	beq.n	8011c70 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8011c00:	fa1f f986 	uxth.w	r9, r6
 8011c04:	4472      	add	r2, lr
 8011c06:	43f6      	mvns	r6, r6
 8011c08:	f815 8002 	ldrb.w	r8, [r5, r2]
 8011c0c:	fb17 f709 	smulbb	r7, r7, r9
 8011c10:	fb1a fa09 	smulbb	sl, sl, r9
 8011c14:	b2f6      	uxtb	r6, r6
 8011c16:	fb1b f909 	smulbb	r9, fp, r9
 8011c1a:	fb08 7706 	mla	r7, r8, r6, r7
 8011c1e:	b2bf      	uxth	r7, r7
 8011c20:	f107 0801 	add.w	r8, r7, #1
 8011c24:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8011c28:	123f      	asrs	r7, r7, #8
 8011c2a:	54af      	strb	r7, [r5, r2]
 8011c2c:	442a      	add	r2, r5
 8011c2e:	7857      	ldrb	r7, [r2, #1]
 8011c30:	fb07 aa06 	mla	sl, r7, r6, sl
 8011c34:	fa1f fa8a 	uxth.w	sl, sl
 8011c38:	f10a 0701 	add.w	r7, sl, #1
 8011c3c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8011c40:	7897      	ldrb	r7, [r2, #2]
 8011c42:	fb07 9906 	mla	r9, r7, r6, r9
 8011c46:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8011c4a:	fa1f f989 	uxth.w	r9, r9
 8011c4e:	f882 a001 	strb.w	sl, [r2, #1]
 8011c52:	f109 0601 	add.w	r6, r9, #1
 8011c56:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8011c5a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011c5e:	f882 9002 	strb.w	r9, [r2, #2]
 8011c62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011c64:	f10e 0e01 	add.w	lr, lr, #1
 8011c68:	4414      	add	r4, r2
 8011c6a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011c6c:	4410      	add	r0, r2
 8011c6e:	e766      	b.n	8011b3e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8011c70:	4472      	add	r2, lr
 8011c72:	54af      	strb	r7, [r5, r2]
 8011c74:	442a      	add	r2, r5
 8011c76:	f882 a001 	strb.w	sl, [r2, #1]
 8011c7a:	f882 b002 	strb.w	fp, [r2, #2]
 8011c7e:	e7f0      	b.n	8011c62 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8011c80:	f806 7c03 	strb.w	r7, [r6, #-3]
 8011c84:	f806 9c02 	strb.w	r9, [r6, #-2]
 8011c88:	f806 bc01 	strb.w	fp, [r6, #-1]
 8011c8c:	e74d      	b.n	8011b2a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8011c8e:	b003      	add	sp, #12
 8011c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011c94 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8011c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c98:	b087      	sub	sp, #28
 8011c9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011c9e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8011ca0:	9204      	str	r2, [sp, #16]
 8011ca2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8011ca6:	6860      	ldr	r0, [r4, #4]
 8011ca8:	9205      	str	r2, [sp, #20]
 8011caa:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8011cae:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8011cb2:	9101      	str	r1, [sp, #4]
 8011cb4:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8011cb8:	fb00 2505 	mla	r5, r0, r5, r2
 8011cbc:	6822      	ldr	r2, [r4, #0]
 8011cbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011cc2:	4415      	add	r5, r2
 8011cc4:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8011cc8:	3201      	adds	r2, #1
 8011cca:	f022 0201 	bic.w	r2, r2, #1
 8011cce:	9202      	str	r2, [sp, #8]
 8011cd0:	f8dc 2000 	ldr.w	r2, [ip]
 8011cd4:	9203      	str	r2, [sp, #12]
 8011cd6:	9a01      	ldr	r2, [sp, #4]
 8011cd8:	2a00      	cmp	r2, #0
 8011cda:	dc03      	bgt.n	8011ce4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8011cdc:	9a04      	ldr	r2, [sp, #16]
 8011cde:	2a00      	cmp	r2, #0
 8011ce0:	f340 8135 	ble.w	8011f4e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8011ce4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011ce6:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8011cea:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8011cee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011cf0:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8011cf4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	dd0d      	ble.n	8011d18 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8011cfc:	1422      	asrs	r2, r4, #16
 8011cfe:	d405      	bmi.n	8011d0c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8011d00:	4542      	cmp	r2, r8
 8011d02:	da03      	bge.n	8011d0c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8011d04:	1402      	asrs	r2, r0, #16
 8011d06:	d401      	bmi.n	8011d0c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8011d08:	42ba      	cmp	r2, r7
 8011d0a:	db06      	blt.n	8011d1a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8011d0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011d0e:	4474      	add	r4, lr
 8011d10:	3b01      	subs	r3, #1
 8011d12:	3503      	adds	r5, #3
 8011d14:	4410      	add	r0, r2
 8011d16:	e7ef      	b.n	8011cf8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8011d18:	d077      	beq.n	8011e0a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8011d1a:	1e5a      	subs	r2, r3, #1
 8011d1c:	fb0e 4602 	mla	r6, lr, r2, r4
 8011d20:	1436      	asrs	r6, r6, #16
 8011d22:	d469      	bmi.n	8011df8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8011d24:	4546      	cmp	r6, r8
 8011d26:	da67      	bge.n	8011df8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8011d28:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8011d2a:	fb06 0202 	mla	r2, r6, r2, r0
 8011d2e:	1412      	asrs	r2, r2, #16
 8011d30:	d462      	bmi.n	8011df8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8011d32:	42ba      	cmp	r2, r7
 8011d34:	da60      	bge.n	8011df8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8011d36:	1cee      	adds	r6, r5, #3
 8011d38:	4699      	mov	r9, r3
 8011d3a:	f1b9 0f00 	cmp.w	r9, #0
 8011d3e:	dd5f      	ble.n	8011e00 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8011d40:	1422      	asrs	r2, r4, #16
 8011d42:	9902      	ldr	r1, [sp, #8]
 8011d44:	1407      	asrs	r7, r0, #16
 8011d46:	fb01 2707 	mla	r7, r1, r7, r2
 8011d4a:	9903      	ldr	r1, [sp, #12]
 8011d4c:	087a      	lsrs	r2, r7, #1
 8011d4e:	5c8a      	ldrb	r2, [r1, r2]
 8011d50:	07f9      	lsls	r1, r7, #31
 8011d52:	bf54      	ite	pl
 8011d54:	f002 020f 	andpl.w	r2, r2, #15
 8011d58:	1112      	asrmi	r2, r2, #4
 8011d5a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8011d5e:	b2d2      	uxtb	r2, r2
 8011d60:	2a00      	cmp	r2, #0
 8011d62:	d042      	beq.n	8011dea <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8011d64:	497b      	ldr	r1, [pc, #492]	; (8011f54 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8011d66:	680f      	ldr	r7, [r1, #0]
 8011d68:	9905      	ldr	r1, [sp, #20]
 8011d6a:	fa5f fb87 	uxtb.w	fp, r7
 8011d6e:	434a      	muls	r2, r1
 8011d70:	f102 0801 	add.w	r8, r2, #1
 8011d74:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8011d78:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8011d7c:	1212      	asrs	r2, r2, #8
 8011d7e:	fa1f fa82 	uxth.w	sl, r2
 8011d82:	43d2      	mvns	r2, r2
 8011d84:	fb1b fb0a 	smulbb	fp, fp, sl
 8011d88:	b2d2      	uxtb	r2, r2
 8011d8a:	fb08 b802 	mla	r8, r8, r2, fp
 8011d8e:	fa1f f888 	uxth.w	r8, r8
 8011d92:	f108 0b01 	add.w	fp, r8, #1
 8011d96:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8011d9a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8011d9e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8011da2:	fb1b fb0a 	smulbb	fp, fp, sl
 8011da6:	ea4f 2828 	mov.w	r8, r8, asr #8
 8011daa:	fb17 fa0a 	smulbb	sl, r7, sl
 8011dae:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8011db2:	f806 8c03 	strb.w	r8, [r6, #-3]
 8011db6:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8011dba:	fb07 aa02 	mla	sl, r7, r2, sl
 8011dbe:	fb08 b802 	mla	r8, r8, r2, fp
 8011dc2:	fa1f fa8a 	uxth.w	sl, sl
 8011dc6:	fa1f f888 	uxth.w	r8, r8
 8011dca:	f10a 0701 	add.w	r7, sl, #1
 8011dce:	f108 0b01 	add.w	fp, r8, #1
 8011dd2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8011dd6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8011dda:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8011dde:	ea4f 2828 	mov.w	r8, r8, asr #8
 8011de2:	f806 ac01 	strb.w	sl, [r6, #-1]
 8011de6:	f806 8c02 	strb.w	r8, [r6, #-2]
 8011dea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011dec:	4474      	add	r4, lr
 8011dee:	3603      	adds	r6, #3
 8011df0:	f109 39ff 	add.w	r9, r9, #4294967295
 8011df4:	4410      	add	r0, r2
 8011df6:	e7a0      	b.n	8011d3a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8011df8:	2700      	movs	r7, #0
 8011dfa:	1bda      	subs	r2, r3, r7
 8011dfc:	2a00      	cmp	r2, #0
 8011dfe:	dc3e      	bgt.n	8011e7e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8011e00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011e04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011e08:	441d      	add	r5, r3
 8011e0a:	9b01      	ldr	r3, [sp, #4]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	f340 809e 	ble.w	8011f4e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8011e12:	ee30 0a04 	vadd.f32	s0, s0, s8
 8011e16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011e18:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8011e1c:	eeb0 6a62 	vmov.f32	s12, s5
 8011e20:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8011e24:	ee31 1a05 	vadd.f32	s2, s2, s10
 8011e28:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011e2c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8011e30:	eeb0 6a43 	vmov.f32	s12, s6
 8011e34:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8011e38:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8011e3c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8011e40:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011e44:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011e48:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8011e4c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8011e50:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8011e54:	ee12 2a90 	vmov	r2, s5
 8011e58:	eef0 2a47 	vmov.f32	s5, s14
 8011e5c:	fb92 fef3 	sdiv	lr, r2, r3
 8011e60:	ee13 2a10 	vmov	r2, s6
 8011e64:	eeb0 3a67 	vmov.f32	s6, s15
 8011e68:	fb92 f3f3 	sdiv	r3, r2, r3
 8011e6c:	9314      	str	r3, [sp, #80]	; 0x50
 8011e6e:	9b01      	ldr	r3, [sp, #4]
 8011e70:	9a04      	ldr	r2, [sp, #16]
 8011e72:	3b01      	subs	r3, #1
 8011e74:	9301      	str	r3, [sp, #4]
 8011e76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011e78:	bf08      	it	eq
 8011e7a:	4613      	moveq	r3, r2
 8011e7c:	e72b      	b.n	8011cd6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8011e7e:	1426      	asrs	r6, r4, #16
 8011e80:	d460      	bmi.n	8011f44 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8011e82:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8011e86:	42b2      	cmp	r2, r6
 8011e88:	dd5c      	ble.n	8011f44 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8011e8a:	ea5f 4820 	movs.w	r8, r0, asr #16
 8011e8e:	d459      	bmi.n	8011f44 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8011e90:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8011e94:	4542      	cmp	r2, r8
 8011e96:	dd55      	ble.n	8011f44 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8011e98:	9a02      	ldr	r2, [sp, #8]
 8011e9a:	9903      	ldr	r1, [sp, #12]
 8011e9c:	fb08 6602 	mla	r6, r8, r2, r6
 8011ea0:	0872      	lsrs	r2, r6, #1
 8011ea2:	07f6      	lsls	r6, r6, #31
 8011ea4:	5c8a      	ldrb	r2, [r1, r2]
 8011ea6:	bf54      	ite	pl
 8011ea8:	f002 020f 	andpl.w	r2, r2, #15
 8011eac:	1112      	asrmi	r2, r2, #4
 8011eae:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8011eb2:	b2d2      	uxtb	r2, r2
 8011eb4:	2a00      	cmp	r2, #0
 8011eb6:	d045      	beq.n	8011f44 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8011eb8:	4926      	ldr	r1, [pc, #152]	; (8011f54 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8011eba:	f8d1 8000 	ldr.w	r8, [r1]
 8011ebe:	9905      	ldr	r1, [sp, #20]
 8011ec0:	fa5f fb88 	uxtb.w	fp, r8
 8011ec4:	434a      	muls	r2, r1
 8011ec6:	1c56      	adds	r6, r2, #1
 8011ec8:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8011ecc:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8011ed0:	1212      	asrs	r2, r2, #8
 8011ed2:	f815 9006 	ldrb.w	r9, [r5, r6]
 8011ed6:	fa1f fa82 	uxth.w	sl, r2
 8011eda:	43d2      	mvns	r2, r2
 8011edc:	fb1b fb0a 	smulbb	fp, fp, sl
 8011ee0:	b2d2      	uxtb	r2, r2
 8011ee2:	fb09 b902 	mla	r9, r9, r2, fp
 8011ee6:	fa1f f989 	uxth.w	r9, r9
 8011eea:	f109 0b01 	add.w	fp, r9, #1
 8011eee:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8011ef2:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8011ef6:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8011efa:	fb1b fb0a 	smulbb	fp, fp, sl
 8011efe:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011f02:	fb18 fa0a 	smulbb	sl, r8, sl
 8011f06:	f805 9006 	strb.w	r9, [r5, r6]
 8011f0a:	442e      	add	r6, r5
 8011f0c:	f896 8002 	ldrb.w	r8, [r6, #2]
 8011f10:	f896 9001 	ldrb.w	r9, [r6, #1]
 8011f14:	fb08 aa02 	mla	sl, r8, r2, sl
 8011f18:	fb09 b902 	mla	r9, r9, r2, fp
 8011f1c:	fa1f fa8a 	uxth.w	sl, sl
 8011f20:	fa1f f989 	uxth.w	r9, r9
 8011f24:	f10a 0801 	add.w	r8, sl, #1
 8011f28:	f109 0b01 	add.w	fp, r9, #1
 8011f2c:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8011f30:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8011f34:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8011f38:	ea4f 2929 	mov.w	r9, r9, asr #8
 8011f3c:	f886 a002 	strb.w	sl, [r6, #2]
 8011f40:	f886 9001 	strb.w	r9, [r6, #1]
 8011f44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011f46:	4474      	add	r4, lr
 8011f48:	3701      	adds	r7, #1
 8011f4a:	4410      	add	r0, r2
 8011f4c:	e755      	b.n	8011dfa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8011f4e:	b007      	add	sp, #28
 8011f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f54:	2400689c 	.word	0x2400689c

08011f58 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8011f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f5c:	b085      	sub	sp, #20
 8011f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011f62:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8011f64:	9203      	str	r2, [sp, #12]
 8011f66:	6860      	ldr	r0, [r4, #4]
 8011f68:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8011f6c:	9100      	str	r1, [sp, #0]
 8011f6e:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 8011f72:	fb00 2606 	mla	r6, r0, r6, r2
 8011f76:	6822      	ldr	r2, [r4, #0]
 8011f78:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8011f7c:	4416      	add	r6, r2
 8011f7e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8011f82:	3201      	adds	r2, #1
 8011f84:	f022 0201 	bic.w	r2, r2, #1
 8011f88:	9201      	str	r2, [sp, #4]
 8011f8a:	f8dc 2000 	ldr.w	r2, [ip]
 8011f8e:	9202      	str	r2, [sp, #8]
 8011f90:	9a00      	ldr	r2, [sp, #0]
 8011f92:	2a00      	cmp	r2, #0
 8011f94:	dc03      	bgt.n	8011f9e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8011f96:	9a03      	ldr	r2, [sp, #12]
 8011f98:	2a00      	cmp	r2, #0
 8011f9a:	f340 8140 	ble.w	801221e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8011f9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011fa0:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8011fa4:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8011fa8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011faa:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8011fae:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	dd0e      	ble.n	8011fd4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8011fb6:	142a      	asrs	r2, r5, #16
 8011fb8:	d405      	bmi.n	8011fc6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8011fba:	4572      	cmp	r2, lr
 8011fbc:	da03      	bge.n	8011fc6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8011fbe:	1422      	asrs	r2, r4, #16
 8011fc0:	d401      	bmi.n	8011fc6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8011fc2:	42ba      	cmp	r2, r7
 8011fc4:	db07      	blt.n	8011fd6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8011fc6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011fc8:	3b01      	subs	r3, #1
 8011fca:	3603      	adds	r6, #3
 8011fcc:	4415      	add	r5, r2
 8011fce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011fd0:	4414      	add	r4, r2
 8011fd2:	e7ee      	b.n	8011fb2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8011fd4:	d072      	beq.n	80120bc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8011fd6:	1e5a      	subs	r2, r3, #1
 8011fd8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011fda:	fb00 5002 	mla	r0, r0, r2, r5
 8011fde:	1400      	asrs	r0, r0, #16
 8011fe0:	d463      	bmi.n	80120aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8011fe2:	4570      	cmp	r0, lr
 8011fe4:	da61      	bge.n	80120aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8011fe6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011fe8:	fb00 4202 	mla	r2, r0, r2, r4
 8011fec:	1412      	asrs	r2, r2, #16
 8011fee:	d45c      	bmi.n	80120aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8011ff0:	42ba      	cmp	r2, r7
 8011ff2:	da5a      	bge.n	80120aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8011ff4:	1cf0      	adds	r0, r6, #3
 8011ff6:	469a      	mov	sl, r3
 8011ff8:	f1ba 0f00 	cmp.w	sl, #0
 8011ffc:	dd59      	ble.n	80120b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8011ffe:	142a      	asrs	r2, r5, #16
 8012000:	9901      	ldr	r1, [sp, #4]
 8012002:	1427      	asrs	r7, r4, #16
 8012004:	fb01 2707 	mla	r7, r1, r7, r2
 8012008:	9902      	ldr	r1, [sp, #8]
 801200a:	087a      	lsrs	r2, r7, #1
 801200c:	5c8a      	ldrb	r2, [r1, r2]
 801200e:	07f9      	lsls	r1, r7, #31
 8012010:	bf54      	ite	pl
 8012012:	f002 020f 	andpl.w	r2, r2, #15
 8012016:	1112      	asrmi	r2, r2, #4
 8012018:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801201c:	b2d2      	uxtb	r2, r2
 801201e:	2a00      	cmp	r2, #0
 8012020:	d03b      	beq.n	801209a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8012022:	4980      	ldr	r1, [pc, #512]	; (8012224 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8012024:	2aff      	cmp	r2, #255	; 0xff
 8012026:	680f      	ldr	r7, [r1, #0]
 8012028:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801202c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8012030:	b2ff      	uxtb	r7, r7
 8012032:	f000 80ed 	beq.w	8012210 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8012036:	fa1f f882 	uxth.w	r8, r2
 801203a:	43d2      	mvns	r2, r2
 801203c:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8012040:	fb17 f708 	smulbb	r7, r7, r8
 8012044:	b2d2      	uxtb	r2, r2
 8012046:	fb19 f908 	smulbb	r9, r9, r8
 801204a:	fb0e 7702 	mla	r7, lr, r2, r7
 801204e:	fb1b f808 	smulbb	r8, fp, r8
 8012052:	b2bf      	uxth	r7, r7
 8012054:	f107 0e01 	add.w	lr, r7, #1
 8012058:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801205c:	123f      	asrs	r7, r7, #8
 801205e:	f800 7c03 	strb.w	r7, [r0, #-3]
 8012062:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8012066:	fb07 9902 	mla	r9, r7, r2, r9
 801206a:	fa1f f989 	uxth.w	r9, r9
 801206e:	f109 0701 	add.w	r7, r9, #1
 8012072:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8012076:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801207a:	fb07 8802 	mla	r8, r7, r2, r8
 801207e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012082:	fa1f f888 	uxth.w	r8, r8
 8012086:	f800 9c02 	strb.w	r9, [r0, #-2]
 801208a:	f108 0201 	add.w	r2, r8, #1
 801208e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8012092:	ea4f 2828 	mov.w	r8, r8, asr #8
 8012096:	f800 8c01 	strb.w	r8, [r0, #-1]
 801209a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801209c:	3003      	adds	r0, #3
 801209e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80120a2:	4415      	add	r5, r2
 80120a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80120a6:	4414      	add	r4, r2
 80120a8:	e7a6      	b.n	8011ff8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80120aa:	2700      	movs	r7, #0
 80120ac:	1bda      	subs	r2, r3, r7
 80120ae:	2a00      	cmp	r2, #0
 80120b0:	dc40      	bgt.n	8012134 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 80120b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80120b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80120ba:	441e      	add	r6, r3
 80120bc:	9b00      	ldr	r3, [sp, #0]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	f340 80ad 	ble.w	801221e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 80120c4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80120c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80120ca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80120ce:	eeb0 6a62 	vmov.f32	s12, s5
 80120d2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80120d6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80120da:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80120de:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80120e2:	eeb0 6a43 	vmov.f32	s12, s6
 80120e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80120ea:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80120ee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80120f2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80120f6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80120fa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80120fe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8012102:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8012106:	ee12 2a90 	vmov	r2, s5
 801210a:	eef0 2a47 	vmov.f32	s5, s14
 801210e:	fb92 f3f3 	sdiv	r3, r2, r3
 8012112:	ee13 2a10 	vmov	r2, s6
 8012116:	9311      	str	r3, [sp, #68]	; 0x44
 8012118:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801211a:	eeb0 3a67 	vmov.f32	s6, s15
 801211e:	fb92 f3f3 	sdiv	r3, r2, r3
 8012122:	9312      	str	r3, [sp, #72]	; 0x48
 8012124:	9b00      	ldr	r3, [sp, #0]
 8012126:	9a03      	ldr	r2, [sp, #12]
 8012128:	3b01      	subs	r3, #1
 801212a:	9300      	str	r3, [sp, #0]
 801212c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801212e:	bf08      	it	eq
 8012130:	4613      	moveq	r3, r2
 8012132:	e72d      	b.n	8011f90 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8012134:	1428      	asrs	r0, r5, #16
 8012136:	d45c      	bmi.n	80121f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8012138:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801213c:	4282      	cmp	r2, r0
 801213e:	dd58      	ble.n	80121f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8012140:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8012144:	d455      	bmi.n	80121f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8012146:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801214a:	4572      	cmp	r2, lr
 801214c:	dd51      	ble.n	80121f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801214e:	9a01      	ldr	r2, [sp, #4]
 8012150:	9902      	ldr	r1, [sp, #8]
 8012152:	fb0e 0002 	mla	r0, lr, r2, r0
 8012156:	0842      	lsrs	r2, r0, #1
 8012158:	07c0      	lsls	r0, r0, #31
 801215a:	5c8a      	ldrb	r2, [r1, r2]
 801215c:	bf54      	ite	pl
 801215e:	f002 020f 	andpl.w	r2, r2, #15
 8012162:	1112      	asrmi	r2, r2, #4
 8012164:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8012168:	b2d2      	uxtb	r2, r2
 801216a:	2a00      	cmp	r2, #0
 801216c:	d041      	beq.n	80121f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801216e:	492d      	ldr	r1, [pc, #180]	; (8012224 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8012170:	2aff      	cmp	r2, #255	; 0xff
 8012172:	6808      	ldr	r0, [r1, #0]
 8012174:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8012178:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801217c:	fa5f fe80 	uxtb.w	lr, r0
 8012180:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8012184:	d03b      	beq.n	80121fe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8012186:	fa1f f982 	uxth.w	r9, r2
 801218a:	4438      	add	r0, r7
 801218c:	43d2      	mvns	r2, r2
 801218e:	f816 8000 	ldrb.w	r8, [r6, r0]
 8012192:	fb1e fe09 	smulbb	lr, lr, r9
 8012196:	fb1a fa09 	smulbb	sl, sl, r9
 801219a:	b2d2      	uxtb	r2, r2
 801219c:	fb1b f909 	smulbb	r9, fp, r9
 80121a0:	fb08 ee02 	mla	lr, r8, r2, lr
 80121a4:	fa1f fe8e 	uxth.w	lr, lr
 80121a8:	f10e 0801 	add.w	r8, lr, #1
 80121ac:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 80121b0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80121b4:	f806 e000 	strb.w	lr, [r6, r0]
 80121b8:	4430      	add	r0, r6
 80121ba:	f890 e001 	ldrb.w	lr, [r0, #1]
 80121be:	fb0e aa02 	mla	sl, lr, r2, sl
 80121c2:	fa1f fa8a 	uxth.w	sl, sl
 80121c6:	f10a 0e01 	add.w	lr, sl, #1
 80121ca:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 80121ce:	f890 e002 	ldrb.w	lr, [r0, #2]
 80121d2:	fb0e 9902 	mla	r9, lr, r2, r9
 80121d6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80121da:	fa1f f989 	uxth.w	r9, r9
 80121de:	f880 a001 	strb.w	sl, [r0, #1]
 80121e2:	f109 0201 	add.w	r2, r9, #1
 80121e6:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80121ea:	ea4f 2929 	mov.w	r9, r9, asr #8
 80121ee:	f880 9002 	strb.w	r9, [r0, #2]
 80121f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80121f4:	3701      	adds	r7, #1
 80121f6:	4415      	add	r5, r2
 80121f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80121fa:	4414      	add	r4, r2
 80121fc:	e756      	b.n	80120ac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80121fe:	4438      	add	r0, r7
 8012200:	f806 e000 	strb.w	lr, [r6, r0]
 8012204:	4430      	add	r0, r6
 8012206:	f880 a001 	strb.w	sl, [r0, #1]
 801220a:	f880 b002 	strb.w	fp, [r0, #2]
 801220e:	e7f0      	b.n	80121f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8012210:	f800 7c03 	strb.w	r7, [r0, #-3]
 8012214:	f800 9c02 	strb.w	r9, [r0, #-2]
 8012218:	f800 bc01 	strb.w	fp, [r0, #-1]
 801221c:	e73d      	b.n	801209a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801221e:	b005      	add	sp, #20
 8012220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012224:	2400689c 	.word	0x2400689c

08012228 <_ZN8touchgfx8LCD24bppD1Ev>:
 8012228:	4770      	bx	lr

0801222a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801222a:	4770      	bx	lr

0801222c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801222c:	4770      	bx	lr

0801222e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801222e:	4770      	bx	lr

08012230 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8012230:	4770      	bx	lr

08012232 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8012232:	4770      	bx	lr

08012234 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8012234:	4770      	bx	lr

08012236 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8012236:	4770      	bx	lr

08012238 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8012238:	4770      	bx	lr

0801223a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801223a:	4770      	bx	lr

0801223c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801223c:	4770      	bx	lr

0801223e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801223e:	4770      	bx	lr

08012240 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8012240:	4770      	bx	lr

08012242 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8012242:	4770      	bx	lr

08012244 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8012244:	4770      	bx	lr

08012246 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8012246:	4770      	bx	lr

08012248 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8012248:	4770      	bx	lr

0801224a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801224a:	4770      	bx	lr

0801224c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801224c:	4770      	bx	lr

0801224e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801224e:	4770      	bx	lr

08012250 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8012250:	4770      	bx	lr
	...

08012254 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8012254:	2bff      	cmp	r3, #255	; 0xff
 8012256:	b508      	push	{r3, lr}
 8012258:	d04f      	beq.n	80122fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801225a:	2a2c      	cmp	r2, #44	; 0x2c
 801225c:	d032      	beq.n	80122c4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801225e:	d80f      	bhi.n	8012280 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 8012260:	2a08      	cmp	r2, #8
 8012262:	d046      	beq.n	80122f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8012264:	d805      	bhi.n	8012272 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 8012266:	2a04      	cmp	r2, #4
 8012268:	d041      	beq.n	80122ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801226a:	2a05      	cmp	r2, #5
 801226c:	d03d      	beq.n	80122ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801226e:	2000      	movs	r0, #0
 8012270:	e027      	b.n	80122c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8012272:	2a0a      	cmp	r2, #10
 8012274:	d03d      	beq.n	80122f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8012276:	d301      	bcc.n	801227c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8012278:	2a0b      	cmp	r2, #11
 801227a:	d1f8      	bne.n	801226e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801227c:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801227e:	e020      	b.n	80122c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8012280:	2a30      	cmp	r2, #48	; 0x30
 8012282:	d038      	beq.n	80122f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8012284:	d808      	bhi.n	8012298 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 8012286:	2a2e      	cmp	r2, #46	; 0x2e
 8012288:	684b      	ldr	r3, [r1, #4]
 801228a:	d029      	beq.n	80122e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801228c:	d90b      	bls.n	80122a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801228e:	781b      	ldrb	r3, [r3, #0]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d1ec      	bne.n	801226e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8012294:	6a00      	ldr	r0, [r0, #32]
 8012296:	e014      	b.n	80122c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8012298:	2a32      	cmp	r2, #50	; 0x32
 801229a:	d02c      	beq.n	80122f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801229c:	d301      	bcc.n	80122a2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801229e:	2a33      	cmp	r2, #51	; 0x33
 80122a0:	d1e5      	bne.n	801226e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80122a2:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80122a4:	e00d      	b.n	80122c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80122a6:	781b      	ldrb	r3, [r3, #0]
 80122a8:	2b01      	cmp	r3, #1
 80122aa:	d009      	beq.n	80122c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 80122ac:	d3f2      	bcc.n	8012294 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 80122ae:	2b02      	cmp	r3, #2
 80122b0:	d1dd      	bne.n	801226e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80122b2:	4b39      	ldr	r3, [pc, #228]	; (8012398 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 80122b4:	f240 4109 	movw	r1, #1033	; 0x409
 80122b8:	4a38      	ldr	r2, [pc, #224]	; (801239c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 80122ba:	4839      	ldr	r0, [pc, #228]	; (80123a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 80122bc:	f006 fdde 	bl	8018e7c <__assert_func>
 80122c0:	6900      	ldr	r0, [r0, #16]
 80122c2:	bd08      	pop	{r3, pc}
 80122c4:	684b      	ldr	r3, [r1, #4]
 80122c6:	781b      	ldrb	r3, [r3, #0]
 80122c8:	2b01      	cmp	r3, #1
 80122ca:	d007      	beq.n	80122dc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 80122cc:	d30b      	bcc.n	80122e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 80122ce:	2b02      	cmp	r3, #2
 80122d0:	d1cd      	bne.n	801226e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80122d2:	4b31      	ldr	r3, [pc, #196]	; (8012398 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 80122d4:	f240 4115 	movw	r1, #1045	; 0x415
 80122d8:	4a30      	ldr	r2, [pc, #192]	; (801239c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 80122da:	e7ee      	b.n	80122ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80122dc:	6880      	ldr	r0, [r0, #8]
 80122de:	e7f0      	b.n	80122c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80122e0:	781b      	ldrb	r3, [r3, #0]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d1c3      	bne.n	801226e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80122e6:	6980      	ldr	r0, [r0, #24]
 80122e8:	e7eb      	b.n	80122c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80122ea:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80122ec:	e7e9      	b.n	80122c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80122ee:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80122f0:	e7e7      	b.n	80122c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80122f2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80122f4:	e7e5      	b.n	80122c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80122f6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80122f8:	e7e3      	b.n	80122c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80122fa:	2a2c      	cmp	r2, #44	; 0x2c
 80122fc:	d030      	beq.n	8012360 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 80122fe:	d80f      	bhi.n	8012320 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 8012300:	2a08      	cmp	r2, #8
 8012302:	d044      	beq.n	801238e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8012304:	d805      	bhi.n	8012312 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 8012306:	2a04      	cmp	r2, #4
 8012308:	d03f      	beq.n	801238a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801230a:	2a05      	cmp	r2, #5
 801230c:	d1af      	bne.n	801226e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801230e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8012310:	e7d7      	b.n	80122c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8012312:	2a0a      	cmp	r2, #10
 8012314:	d03b      	beq.n	801238e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8012316:	d301      	bcc.n	801231c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 8012318:	2a0b      	cmp	r2, #11
 801231a:	d1a8      	bne.n	801226e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801231c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801231e:	e7d0      	b.n	80122c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8012320:	2a30      	cmp	r2, #48	; 0x30
 8012322:	d036      	beq.n	8012392 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8012324:	d808      	bhi.n	8012338 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 8012326:	2a2e      	cmp	r2, #46	; 0x2e
 8012328:	684b      	ldr	r3, [r1, #4]
 801232a:	d028      	beq.n	801237e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801232c:	d90b      	bls.n	8012346 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801232e:	781b      	ldrb	r3, [r3, #0]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d19c      	bne.n	801226e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8012334:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8012336:	e7c4      	b.n	80122c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8012338:	2a32      	cmp	r2, #50	; 0x32
 801233a:	d02a      	beq.n	8012392 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801233c:	d301      	bcc.n	8012342 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801233e:	2a33      	cmp	r2, #51	; 0x33
 8012340:	d195      	bne.n	801226e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8012342:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8012344:	e7bd      	b.n	80122c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8012346:	781b      	ldrb	r3, [r3, #0]
 8012348:	2b01      	cmp	r3, #1
 801234a:	d007      	beq.n	801235c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801234c:	d3f2      	bcc.n	8012334 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801234e:	2b02      	cmp	r3, #2
 8012350:	d18d      	bne.n	801226e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8012352:	4b11      	ldr	r3, [pc, #68]	; (8012398 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8012354:	f240 4146 	movw	r1, #1094	; 0x446
 8012358:	4a10      	ldr	r2, [pc, #64]	; (801239c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801235a:	e7ae      	b.n	80122ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801235c:	6940      	ldr	r0, [r0, #20]
 801235e:	e7b0      	b.n	80122c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8012360:	684b      	ldr	r3, [r1, #4]
 8012362:	781b      	ldrb	r3, [r3, #0]
 8012364:	2b01      	cmp	r3, #1
 8012366:	d008      	beq.n	801237a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 8012368:	d30d      	bcc.n	8012386 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801236a:	2b02      	cmp	r3, #2
 801236c:	f47f af7f 	bne.w	801226e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8012370:	4b09      	ldr	r3, [pc, #36]	; (8012398 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8012372:	f240 4152 	movw	r1, #1106	; 0x452
 8012376:	4a09      	ldr	r2, [pc, #36]	; (801239c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8012378:	e79f      	b.n	80122ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801237a:	68c0      	ldr	r0, [r0, #12]
 801237c:	e7a1      	b.n	80122c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801237e:	781b      	ldrb	r3, [r3, #0]
 8012380:	2b00      	cmp	r3, #0
 8012382:	f47f af74 	bne.w	801226e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8012386:	69c0      	ldr	r0, [r0, #28]
 8012388:	e79b      	b.n	80122c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801238a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801238c:	e799      	b.n	80122c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801238e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8012390:	e797      	b.n	80122c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8012392:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8012394:	e795      	b.n	80122c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8012396:	bf00      	nop
 8012398:	0801cd15 	.word	0x0801cd15
 801239c:	0801d487 	.word	0x0801d487
 80123a0:	0801cd61 	.word	0x0801cd61

080123a4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 80123a4:	b508      	push	{r3, lr}
 80123a6:	4b06      	ldr	r3, [pc, #24]	; (80123c0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 80123a8:	8818      	ldrh	r0, [r3, #0]
 80123aa:	b928      	cbnz	r0, 80123b8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 80123ac:	4b05      	ldr	r3, [pc, #20]	; (80123c4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 80123ae:	214d      	movs	r1, #77	; 0x4d
 80123b0:	4a05      	ldr	r2, [pc, #20]	; (80123c8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 80123b2:	4806      	ldr	r0, [pc, #24]	; (80123cc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 80123b4:	f006 fd62 	bl	8018e7c <__assert_func>
 80123b8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80123bc:	b280      	uxth	r0, r0
 80123be:	bd08      	pop	{r3, pc}
 80123c0:	2400688e 	.word	0x2400688e
 80123c4:	0801cf6d 	.word	0x0801cf6d
 80123c8:	0801d44c 	.word	0x0801d44c
 80123cc:	0801cfaf 	.word	0x0801cfaf

080123d0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80123d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80123d4:	b08b      	sub	sp, #44	; 0x2c
 80123d6:	460d      	mov	r5, r1
 80123d8:	4616      	mov	r6, r2
 80123da:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 80123de:	f1b8 0f00 	cmp.w	r8, #0
 80123e2:	d047      	beq.n	8012474 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 80123e4:	6810      	ldr	r0, [r2, #0]
 80123e6:	ac06      	add	r4, sp, #24
 80123e8:	6851      	ldr	r1, [r2, #4]
 80123ea:	4f51      	ldr	r7, [pc, #324]	; (8012530 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 80123ec:	c403      	stmia	r4!, {r0, r1}
 80123ee:	6818      	ldr	r0, [r3, #0]
 80123f0:	ac08      	add	r4, sp, #32
 80123f2:	6859      	ldr	r1, [r3, #4]
 80123f4:	c403      	stmia	r4!, {r0, r1}
 80123f6:	a806      	add	r0, sp, #24
 80123f8:	f7fb faec 	bl	800d9d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80123fc:	4631      	mov	r1, r6
 80123fe:	a808      	add	r0, sp, #32
 8012400:	f7fb fb2c 	bl	800da5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012404:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8012408:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801240c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8012410:	6838      	ldr	r0, [r7, #0]
 8012412:	fb11 2103 	smlabb	r1, r1, r3, r2
 8012416:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801241a:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 801241e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012422:	440d      	add	r5, r1
 8012424:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8012428:	440a      	add	r2, r1
 801242a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801242e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8012432:	4413      	add	r3, r2
 8012434:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8012438:	6803      	ldr	r3, [r0, #0]
 801243a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801243c:	4798      	blx	r3
 801243e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8012442:	d01a      	beq.n	801247a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8012444:	f010 0f04 	tst.w	r0, #4
 8012448:	6838      	ldr	r0, [r7, #0]
 801244a:	d019      	beq.n	8012480 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 801244c:	2100      	movs	r1, #0
 801244e:	6807      	ldr	r7, [r0, #0]
 8012450:	b2a4      	uxth	r4, r4
 8012452:	f8cd 800c 	str.w	r8, [sp, #12]
 8012456:	b2b6      	uxth	r6, r6
 8012458:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801245c:	9401      	str	r4, [sp, #4]
 801245e:	9600      	str	r6, [sp, #0]
 8012460:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8012464:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8012468:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801246c:	9102      	str	r1, [sp, #8]
 801246e:	4629      	mov	r1, r5
 8012470:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8012472:	47a0      	blx	r4
 8012474:	b00b      	add	sp, #44	; 0x2c
 8012476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801247a:	f010 0f01 	tst.w	r0, #1
 801247e:	e7e3      	b.n	8012448 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8012480:	6803      	ldr	r3, [r0, #0]
 8012482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012484:	4798      	blx	r3
 8012486:	4a2b      	ldr	r2, [pc, #172]	; (8012534 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8012488:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801248c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8012490:	8813      	ldrh	r3, [r2, #0]
 8012492:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 8012496:	fb03 f404 	mul.w	r4, r3, r4
 801249a:	fb03 c101 	mla	r1, r3, r1, ip
 801249e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80124a2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80124a6:	4408      	add	r0, r1
 80124a8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80124ac:	4404      	add	r4, r0
 80124ae:	d02e      	beq.n	801250e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 80124b0:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80124b4:	1b9b      	subs	r3, r3, r6
 80124b6:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 80124ba:	1b96      	subs	r6, r2, r6
 80124bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80124c0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80124c4:	42a0      	cmp	r0, r4
 80124c6:	d22d      	bcs.n	8012524 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 80124c8:	eb00 0e01 	add.w	lr, r0, r1
 80124cc:	4570      	cmp	r0, lr
 80124ce:	d210      	bcs.n	80124f2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 80124d0:	f890 9000 	ldrb.w	r9, [r0]
 80124d4:	f815 2b01 	ldrb.w	r2, [r5], #1
 80124d8:	fb19 f90c 	smulbb	r9, r9, ip
 80124dc:	fb02 9208 	mla	r2, r2, r8, r9
 80124e0:	b292      	uxth	r2, r2
 80124e2:	f102 0901 	add.w	r9, r2, #1
 80124e6:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 80124ea:	1212      	asrs	r2, r2, #8
 80124ec:	f800 2b01 	strb.w	r2, [r0], #1
 80124f0:	e7ec      	b.n	80124cc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 80124f2:	4418      	add	r0, r3
 80124f4:	4435      	add	r5, r6
 80124f6:	e7e5      	b.n	80124c4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 80124f8:	8813      	ldrh	r3, [r2, #0]
 80124fa:	1b9b      	subs	r3, r3, r6
 80124fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012500:	4418      	add	r0, r3
 8012502:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8012506:	1b9b      	subs	r3, r3, r6
 8012508:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801250c:	441d      	add	r5, r3
 801250e:	42a0      	cmp	r0, r4
 8012510:	d208      	bcs.n	8012524 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8012512:	eb00 0c01 	add.w	ip, r0, r1
 8012516:	4560      	cmp	r0, ip
 8012518:	d2ee      	bcs.n	80124f8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801251a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801251e:	f800 3b01 	strb.w	r3, [r0], #1
 8012522:	e7f8      	b.n	8012516 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8012524:	6838      	ldr	r0, [r7, #0]
 8012526:	6803      	ldr	r3, [r0, #0]
 8012528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801252a:	4798      	blx	r3
 801252c:	e7a2      	b.n	8012474 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801252e:	bf00      	nop
 8012530:	24006894 	.word	0x24006894
 8012534:	2400688e 	.word	0x2400688e

08012538 <_ZN8touchgfx8LCD24bppD0Ev>:
 8012538:	b510      	push	{r4, lr}
 801253a:	4604      	mov	r4, r0
 801253c:	2158      	movs	r1, #88	; 0x58
 801253e:	f006 fc6e 	bl	8018e1e <_ZdlPvj>
 8012542:	4620      	mov	r0, r4
 8012544:	bd10      	pop	{r4, pc}

08012546 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8012546:	b510      	push	{r4, lr}
 8012548:	4604      	mov	r4, r0
 801254a:	2104      	movs	r1, #4
 801254c:	f006 fc67 	bl	8018e1e <_ZdlPvj>
 8012550:	4620      	mov	r0, r4
 8012552:	bd10      	pop	{r4, pc}

08012554 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8012554:	b510      	push	{r4, lr}
 8012556:	4604      	mov	r4, r0
 8012558:	2104      	movs	r1, #4
 801255a:	f006 fc60 	bl	8018e1e <_ZdlPvj>
 801255e:	4620      	mov	r0, r4
 8012560:	bd10      	pop	{r4, pc}

08012562 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8012562:	b510      	push	{r4, lr}
 8012564:	4604      	mov	r4, r0
 8012566:	2104      	movs	r1, #4
 8012568:	f006 fc59 	bl	8018e1e <_ZdlPvj>
 801256c:	4620      	mov	r0, r4
 801256e:	bd10      	pop	{r4, pc}

08012570 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8012570:	b510      	push	{r4, lr}
 8012572:	4604      	mov	r4, r0
 8012574:	2104      	movs	r1, #4
 8012576:	f006 fc52 	bl	8018e1e <_ZdlPvj>
 801257a:	4620      	mov	r0, r4
 801257c:	bd10      	pop	{r4, pc}

0801257e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801257e:	b510      	push	{r4, lr}
 8012580:	4604      	mov	r4, r0
 8012582:	2104      	movs	r1, #4
 8012584:	f006 fc4b 	bl	8018e1e <_ZdlPvj>
 8012588:	4620      	mov	r0, r4
 801258a:	bd10      	pop	{r4, pc}

0801258c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801258c:	b510      	push	{r4, lr}
 801258e:	4604      	mov	r4, r0
 8012590:	2104      	movs	r1, #4
 8012592:	f006 fc44 	bl	8018e1e <_ZdlPvj>
 8012596:	4620      	mov	r0, r4
 8012598:	bd10      	pop	{r4, pc}

0801259a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801259a:	b510      	push	{r4, lr}
 801259c:	4604      	mov	r4, r0
 801259e:	2104      	movs	r1, #4
 80125a0:	f006 fc3d 	bl	8018e1e <_ZdlPvj>
 80125a4:	4620      	mov	r0, r4
 80125a6:	bd10      	pop	{r4, pc}

080125a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80125a8:	b510      	push	{r4, lr}
 80125aa:	4604      	mov	r4, r0
 80125ac:	2104      	movs	r1, #4
 80125ae:	f006 fc36 	bl	8018e1e <_ZdlPvj>
 80125b2:	4620      	mov	r0, r4
 80125b4:	bd10      	pop	{r4, pc}

080125b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80125b6:	b510      	push	{r4, lr}
 80125b8:	4604      	mov	r4, r0
 80125ba:	2104      	movs	r1, #4
 80125bc:	f006 fc2f 	bl	8018e1e <_ZdlPvj>
 80125c0:	4620      	mov	r0, r4
 80125c2:	bd10      	pop	{r4, pc}

080125c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80125c4:	b510      	push	{r4, lr}
 80125c6:	4604      	mov	r4, r0
 80125c8:	2104      	movs	r1, #4
 80125ca:	f006 fc28 	bl	8018e1e <_ZdlPvj>
 80125ce:	4620      	mov	r0, r4
 80125d0:	bd10      	pop	{r4, pc}

080125d2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80125d2:	b510      	push	{r4, lr}
 80125d4:	4604      	mov	r4, r0
 80125d6:	2104      	movs	r1, #4
 80125d8:	f006 fc21 	bl	8018e1e <_ZdlPvj>
 80125dc:	4620      	mov	r0, r4
 80125de:	bd10      	pop	{r4, pc}

080125e0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80125e0:	b510      	push	{r4, lr}
 80125e2:	4604      	mov	r4, r0
 80125e4:	2104      	movs	r1, #4
 80125e6:	f006 fc1a 	bl	8018e1e <_ZdlPvj>
 80125ea:	4620      	mov	r0, r4
 80125ec:	bd10      	pop	{r4, pc}

080125ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80125ee:	b510      	push	{r4, lr}
 80125f0:	4604      	mov	r4, r0
 80125f2:	2104      	movs	r1, #4
 80125f4:	f006 fc13 	bl	8018e1e <_ZdlPvj>
 80125f8:	4620      	mov	r0, r4
 80125fa:	bd10      	pop	{r4, pc}

080125fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80125fc:	b510      	push	{r4, lr}
 80125fe:	4604      	mov	r4, r0
 8012600:	2104      	movs	r1, #4
 8012602:	f006 fc0c 	bl	8018e1e <_ZdlPvj>
 8012606:	4620      	mov	r0, r4
 8012608:	bd10      	pop	{r4, pc}

0801260a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801260a:	b510      	push	{r4, lr}
 801260c:	4604      	mov	r4, r0
 801260e:	2104      	movs	r1, #4
 8012610:	f006 fc05 	bl	8018e1e <_ZdlPvj>
 8012614:	4620      	mov	r0, r4
 8012616:	bd10      	pop	{r4, pc}

08012618 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8012618:	b510      	push	{r4, lr}
 801261a:	4604      	mov	r4, r0
 801261c:	2104      	movs	r1, #4
 801261e:	f006 fbfe 	bl	8018e1e <_ZdlPvj>
 8012622:	4620      	mov	r0, r4
 8012624:	bd10      	pop	{r4, pc}

08012626 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8012626:	b510      	push	{r4, lr}
 8012628:	4604      	mov	r4, r0
 801262a:	2104      	movs	r1, #4
 801262c:	f006 fbf7 	bl	8018e1e <_ZdlPvj>
 8012630:	4620      	mov	r0, r4
 8012632:	bd10      	pop	{r4, pc}

08012634 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8012634:	b510      	push	{r4, lr}
 8012636:	4604      	mov	r4, r0
 8012638:	2104      	movs	r1, #4
 801263a:	f006 fbf0 	bl	8018e1e <_ZdlPvj>
 801263e:	4620      	mov	r0, r4
 8012640:	bd10      	pop	{r4, pc}

08012642 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8012642:	b510      	push	{r4, lr}
 8012644:	4604      	mov	r4, r0
 8012646:	2104      	movs	r1, #4
 8012648:	f006 fbe9 	bl	8018e1e <_ZdlPvj>
 801264c:	4620      	mov	r0, r4
 801264e:	bd10      	pop	{r4, pc}

08012650 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8012650:	b510      	push	{r4, lr}
 8012652:	4604      	mov	r4, r0
 8012654:	2104      	movs	r1, #4
 8012656:	f006 fbe2 	bl	8018e1e <_ZdlPvj>
 801265a:	4620      	mov	r0, r4
 801265c:	bd10      	pop	{r4, pc}
	...

08012660 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8012660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012664:	4db4      	ldr	r5, [pc, #720]	; (8012938 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2d8>)
 8012666:	4690      	mov	r8, r2
 8012668:	b08d      	sub	sp, #52	; 0x34
 801266a:	4604      	mov	r4, r0
 801266c:	682a      	ldr	r2, [r5, #0]
 801266e:	4689      	mov	r9, r1
 8012670:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8012674:	2a02      	cmp	r2, #2
 8012676:	d106      	bne.n	8012686 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8012678:	4bb0      	ldr	r3, [pc, #704]	; (801293c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2dc>)
 801267a:	f240 11ed 	movw	r1, #493	; 0x1ed
 801267e:	4ab0      	ldr	r2, [pc, #704]	; (8012940 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 8012680:	48b0      	ldr	r0, [pc, #704]	; (8012944 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e4>)
 8012682:	f006 fbfb 	bl	8018e7c <__assert_func>
 8012686:	ae0c      	add	r6, sp, #48	; 0x30
 8012688:	f826 3d1c 	strh.w	r3, [r6, #-28]!
 801268c:	4630      	mov	r0, r6
 801268e:	f7fe f97b 	bl	8010988 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012692:	6823      	ldr	r3, [r4, #0]
 8012694:	4607      	mov	r7, r0
 8012696:	4620      	mov	r0, r4
 8012698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801269a:	4798      	blx	r3
 801269c:	4287      	cmp	r7, r0
 801269e:	d004      	beq.n	80126aa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 80126a0:	4ba9      	ldr	r3, [pc, #676]	; (8012948 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e8>)
 80126a2:	f240 11ef 	movw	r1, #495	; 0x1ef
 80126a6:	4aa6      	ldr	r2, [pc, #664]	; (8012940 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 80126a8:	e7ea      	b.n	8012680 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80126aa:	4630      	mov	r0, r6
 80126ac:	f7fe f8e2 	bl	8010874 <_ZNK8touchgfx6Bitmap7getDataEv>
 80126b0:	4607      	mov	r7, r0
 80126b2:	b920      	cbnz	r0, 80126be <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 80126b4:	4ba5      	ldr	r3, [pc, #660]	; (801294c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ec>)
 80126b6:	f240 11f1 	movw	r1, #497	; 0x1f1
 80126ba:	4aa1      	ldr	r2, [pc, #644]	; (8012940 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 80126bc:	e7e0      	b.n	8012680 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80126be:	f8d8 0000 	ldr.w	r0, [r8]
 80126c2:	ab06      	add	r3, sp, #24
 80126c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80126c8:	f9b8 a000 	ldrsh.w	sl, [r8]
 80126cc:	c303      	stmia	r3!, {r0, r1}
 80126ce:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80126d2:	ab08      	add	r3, sp, #32
 80126d4:	f8d9 0000 	ldr.w	r0, [r9]
 80126d8:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 80126dc:	c303      	stmia	r3!, {r0, r1}
 80126de:	4630      	mov	r0, r6
 80126e0:	f7fd ffc0 	bl	8010664 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80126e4:	4680      	mov	r8, r0
 80126e6:	4630      	mov	r0, r6
 80126e8:	f7fd fff6 	bl	80106d8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80126ec:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 80126f0:	f10d 0920 	add.w	r9, sp, #32
 80126f4:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 80126f8:	a806      	add	r0, sp, #24
 80126fa:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80126fe:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 8012702:	f7fb f967 	bl	800d9d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012706:	4648      	mov	r0, r9
 8012708:	f7fb f964 	bl	800d9d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801270c:	a80a      	add	r0, sp, #40	; 0x28
 801270e:	f7fb f961 	bl	800d9d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012712:	4b8f      	ldr	r3, [pc, #572]	; (8012950 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 8012714:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8012718:	881e      	ldrh	r6, [r3, #0]
 801271a:	4b8e      	ldr	r3, [pc, #568]	; (8012954 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 801271c:	fa0f fb86 	sxth.w	fp, r6
 8012720:	8819      	ldrh	r1, [r3, #0]
 8012722:	4593      	cmp	fp, r2
 8012724:	dd75      	ble.n	8012812 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 8012726:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 801272a:	4494      	add	ip, r2
 801272c:	fa1f fc8c 	uxth.w	ip, ip
 8012730:	fa0f fa8c 	sxth.w	sl, ip
 8012734:	f1ba 0f00 	cmp.w	sl, #0
 8012738:	dd6b      	ble.n	8012812 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801273a:	fa0f f881 	sxth.w	r8, r1
 801273e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8012742:	4598      	cmp	r8, r3
 8012744:	dd65      	ble.n	8012812 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 8012746:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 801274a:	4418      	add	r0, r3
 801274c:	b280      	uxth	r0, r0
 801274e:	fa0f fe80 	sxth.w	lr, r0
 8012752:	f1be 0f00 	cmp.w	lr, #0
 8012756:	dd5c      	ble.n	8012812 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 8012758:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801275c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012760:	45d3      	cmp	fp, sl
 8012762:	bfc8      	it	gt
 8012764:	4666      	movgt	r6, ip
 8012766:	45f0      	cmp	r8, lr
 8012768:	bfc8      	it	gt
 801276a:	4601      	movgt	r1, r0
 801276c:	f8ad 2020 	strh.w	r2, [sp, #32]
 8012770:	1ab6      	subs	r6, r6, r2
 8012772:	1ac9      	subs	r1, r1, r3
 8012774:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8012778:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801277c:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8012780:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 8012784:	f1bc 0f00 	cmp.w	ip, #0
 8012788:	f340 80aa 	ble.w	80128e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801278c:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 8012790:	2e00      	cmp	r6, #0
 8012792:	f340 80a5 	ble.w	80128e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8012796:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801279a:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801279e:	4288      	cmp	r0, r1
 80127a0:	db3b      	blt.n	801281a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 80127a2:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 80127a6:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80127aa:	429a      	cmp	r2, r3
 80127ac:	db35      	blt.n	801281a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 80127ae:	4460      	add	r0, ip
 80127b0:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 80127b4:	4461      	add	r1, ip
 80127b6:	b200      	sxth	r0, r0
 80127b8:	b209      	sxth	r1, r1
 80127ba:	4288      	cmp	r0, r1
 80127bc:	dc2d      	bgt.n	801281a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 80127be:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80127c2:	4432      	add	r2, r6
 80127c4:	440b      	add	r3, r1
 80127c6:	b212      	sxth	r2, r2
 80127c8:	b21b      	sxth	r3, r3
 80127ca:	429a      	cmp	r2, r3
 80127cc:	dc25      	bgt.n	801281a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 80127ce:	6823      	ldr	r3, [r4, #0]
 80127d0:	4620      	mov	r0, r4
 80127d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127d4:	4798      	blx	r3
 80127d6:	4682      	mov	sl, r0
 80127d8:	6828      	ldr	r0, [r5, #0]
 80127da:	6803      	ldr	r3, [r0, #0]
 80127dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127de:	4798      	blx	r3
 80127e0:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 80127e4:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 80127e8:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 80127ec:	9303      	str	r3, [sp, #12]
 80127ee:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80127f2:	1a9b      	subs	r3, r3, r2
 80127f4:	b29b      	uxth	r3, r3
 80127f6:	b21c      	sxth	r4, r3
 80127f8:	2c00      	cmp	r4, #0
 80127fa:	dc13      	bgt.n	8012824 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1c4>
 80127fc:	bf18      	it	ne
 80127fe:	f8ad 2020 	strhne.w	r2, [sp, #32]
 8012802:	463c      	mov	r4, r7
 8012804:	bf1e      	ittt	ne
 8012806:	f8bd 2024 	ldrhne.w	r2, [sp, #36]	; 0x24
 801280a:	189b      	addne	r3, r3, r2
 801280c:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 8012810:	e00f      	b.n	8012832 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d2>
 8012812:	2300      	movs	r3, #0
 8012814:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8012818:	e7b2      	b.n	8012780 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x120>
 801281a:	4b4f      	ldr	r3, [pc, #316]	; (8012958 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f8>)
 801281c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8012820:	4a47      	ldr	r2, [pc, #284]	; (8012940 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 8012822:	e72d      	b.n	8012680 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8012824:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8012828:	ebab 0303 	sub.w	r3, fp, r3
 801282c:	443c      	add	r4, r7
 801282e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8012832:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8012836:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801283a:	1a9b      	subs	r3, r3, r2
 801283c:	b29b      	uxth	r3, r3
 801283e:	b219      	sxth	r1, r3
 8012840:	2900      	cmp	r1, #0
 8012842:	dd51      	ble.n	80128e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>
 8012844:	9a03      	ldr	r2, [sp, #12]
 8012846:	fb02 4401 	mla	r4, r2, r1, r4
 801284a:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801284e:	1ad3      	subs	r3, r2, r3
 8012850:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8012854:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8012858:	2b00      	cmp	r3, #0
 801285a:	dd41      	ble.n	80128e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801285c:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8012860:	2e00      	cmp	r6, #0
 8012862:	dd3d      	ble.n	80128e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8012864:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8012868:	f04f 0803 	mov.w	r8, #3
 801286c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8012870:	fb0a f10c 	mul.w	r1, sl, ip
 8012874:	fb12 1808 	smlabb	r8, r2, r8, r1
 8012878:	4935      	ldr	r1, [pc, #212]	; (8012950 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 801287a:	4480      	add	r8, r0
 801287c:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 8012880:	8809      	ldrh	r1, [r1, #0]
 8012882:	4283      	cmp	r3, r0
 8012884:	eba1 0202 	sub.w	r2, r1, r2
 8012888:	bfa8      	it	ge
 801288a:	4603      	movge	r3, r0
 801288c:	4293      	cmp	r3, r2
 801288e:	bfa8      	it	ge
 8012890:	4613      	movge	r3, r2
 8012892:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 8012896:	4296      	cmp	r6, r2
 8012898:	bfa8      	it	ge
 801289a:	4616      	movge	r6, r2
 801289c:	4a2d      	ldr	r2, [pc, #180]	; (8012954 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 801289e:	8812      	ldrh	r2, [r2, #0]
 80128a0:	eba2 0c0c 	sub.w	ip, r2, ip
 80128a4:	4632      	mov	r2, r6
 80128a6:	4566      	cmp	r6, ip
 80128a8:	bfa8      	it	ge
 80128aa:	4662      	movge	r2, ip
 80128ac:	4299      	cmp	r1, r3
 80128ae:	9202      	str	r2, [sp, #8]
 80128b0:	d12d      	bne.n	801290e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 80128b2:	4559      	cmp	r1, fp
 80128b4:	d12b      	bne.n	801290e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 80128b6:	6828      	ldr	r0, [r5, #0]
 80128b8:	6803      	ldr	r3, [r0, #0]
 80128ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128bc:	4798      	blx	r3
 80128be:	07c3      	lsls	r3, r0, #31
 80128c0:	d51b      	bpl.n	80128fa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29a>
 80128c2:	6828      	ldr	r0, [r5, #0]
 80128c4:	9b02      	ldr	r3, [sp, #8]
 80128c6:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 80128ca:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80128ce:	6803      	ldr	r3, [r0, #0]
 80128d0:	f8cd b000 	str.w	fp, [sp]
 80128d4:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 80128d6:	4623      	mov	r3, r4
 80128d8:	e899 0006 	ldmia.w	r9, {r1, r2}
 80128dc:	47a8      	blx	r5
 80128de:	4607      	mov	r7, r0
 80128e0:	4638      	mov	r0, r7
 80128e2:	b00d      	add	sp, #52	; 0x34
 80128e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128e8:	bf1f      	itttt	ne
 80128ea:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 80128ee:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 80128f2:	189b      	addne	r3, r3, r2
 80128f4:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 80128f8:	e7ac      	b.n	8012854 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f4>
 80128fa:	6828      	ldr	r0, [r5, #0]
 80128fc:	4642      	mov	r2, r8
 80128fe:	4621      	mov	r1, r4
 8012900:	6803      	ldr	r3, [r0, #0]
 8012902:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8012904:	9b02      	ldr	r3, [sp, #8]
 8012906:	fb03 f30a 	mul.w	r3, r3, sl
 801290a:	47a8      	blx	r5
 801290c:	e7e8      	b.n	80128e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801290e:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8012912:	f04f 0900 	mov.w	r9, #0
 8012916:	9b02      	ldr	r3, [sp, #8]
 8012918:	454b      	cmp	r3, r9
 801291a:	dde1      	ble.n	80128e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801291c:	6828      	ldr	r0, [r5, #0]
 801291e:	4642      	mov	r2, r8
 8012920:	4621      	mov	r1, r4
 8012922:	44d0      	add	r8, sl
 8012924:	6803      	ldr	r3, [r0, #0]
 8012926:	f109 0901 	add.w	r9, r9, #1
 801292a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801292c:	461e      	mov	r6, r3
 801292e:	465b      	mov	r3, fp
 8012930:	47b0      	blx	r6
 8012932:	9b03      	ldr	r3, [sp, #12]
 8012934:	441c      	add	r4, r3
 8012936:	e7ee      	b.n	8012916 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2b6>
 8012938:	24006894 	.word	0x24006894
 801293c:	0801cd93 	.word	0x0801cd93
 8012940:	0801d531 	.word	0x0801d531
 8012944:	0801cd61 	.word	0x0801cd61
 8012948:	0801ce45 	.word	0x0801ce45
 801294c:	0801ce9a 	.word	0x0801ce9a
 8012950:	2400688e 	.word	0x2400688e
 8012954:	24006890 	.word	0x24006890
 8012958:	0801ced8 	.word	0x0801ced8

0801295c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801295c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012960:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8012964:	9c06      	ldr	r4, [sp, #24]
 8012966:	2800      	cmp	r0, #0
 8012968:	d06e      	beq.n	8012a48 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801296a:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801296e:	2d00      	cmp	r5, #0
 8012970:	dd6a      	ble.n	8012a48 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8012972:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 8012976:	f1bc 0f00 	cmp.w	ip, #0
 801297a:	dd65      	ble.n	8012a48 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801297c:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8012980:	28ff      	cmp	r0, #255	; 0xff
 8012982:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012986:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801298a:	fb02 3306 	mla	r3, r2, r6, r3
 801298e:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8012992:	b2e4      	uxtb	r4, r4
 8012994:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012998:	4419      	add	r1, r3
 801299a:	fb02 f30c 	mul.w	r3, r2, ip
 801299e:	eba2 0205 	sub.w	r2, r2, r5
 80129a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80129a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80129aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80129ae:	440b      	add	r3, r1
 80129b0:	d03e      	beq.n	8012a30 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 80129b2:	fa1f fc80 	uxth.w	ip, r0
 80129b6:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80129ba:	fb06 f60c 	mul.w	r6, r6, ip
 80129be:	b280      	uxth	r0, r0
 80129c0:	fb07 f70c 	mul.w	r7, r7, ip
 80129c4:	fb04 f40c 	mul.w	r4, r4, ip
 80129c8:	4299      	cmp	r1, r3
 80129ca:	d23d      	bcs.n	8012a48 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80129cc:	eb01 0c05 	add.w	ip, r1, r5
 80129d0:	458c      	cmp	ip, r1
 80129d2:	f101 0e03 	add.w	lr, r1, #3
 80129d6:	d928      	bls.n	8012a2a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 80129d8:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 80129dc:	fb11 f100 	smulbb	r1, r1, r0
 80129e0:	4421      	add	r1, r4
 80129e2:	b289      	uxth	r1, r1
 80129e4:	f101 0801 	add.w	r8, r1, #1
 80129e8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80129ec:	1209      	asrs	r1, r1, #8
 80129ee:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80129f2:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 80129f6:	fb11 f100 	smulbb	r1, r1, r0
 80129fa:	4439      	add	r1, r7
 80129fc:	b289      	uxth	r1, r1
 80129fe:	f101 0801 	add.w	r8, r1, #1
 8012a02:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8012a06:	1209      	asrs	r1, r1, #8
 8012a08:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8012a0c:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8012a10:	fb11 f100 	smulbb	r1, r1, r0
 8012a14:	4431      	add	r1, r6
 8012a16:	b289      	uxth	r1, r1
 8012a18:	f101 0801 	add.w	r8, r1, #1
 8012a1c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8012a20:	1209      	asrs	r1, r1, #8
 8012a22:	f80e 1c01 	strb.w	r1, [lr, #-1]
 8012a26:	4671      	mov	r1, lr
 8012a28:	e7d2      	b.n	80129d0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 8012a2a:	4411      	add	r1, r2
 8012a2c:	e7cc      	b.n	80129c8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8012a2e:	4411      	add	r1, r2
 8012a30:	4299      	cmp	r1, r3
 8012a32:	d209      	bcs.n	8012a48 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8012a34:	1948      	adds	r0, r1, r5
 8012a36:	4281      	cmp	r1, r0
 8012a38:	d2f9      	bcs.n	8012a2e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8012a3a:	700c      	strb	r4, [r1, #0]
 8012a3c:	3103      	adds	r1, #3
 8012a3e:	f801 7c02 	strb.w	r7, [r1, #-2]
 8012a42:	f801 6c01 	strb.w	r6, [r1, #-1]
 8012a46:	e7f6      	b.n	8012a36 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8012a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012a4c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8012a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a4e:	4606      	mov	r6, r0
 8012a50:	b087      	sub	sp, #28
 8012a52:	4615      	mov	r5, r2
 8012a54:	461f      	mov	r7, r3
 8012a56:	b353      	cbz	r3, 8012aae <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8012a58:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	dd26      	ble.n	8012aae <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8012a60:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	dd22      	ble.n	8012aae <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8012a68:	6808      	ldr	r0, [r1, #0]
 8012a6a:	aa04      	add	r2, sp, #16
 8012a6c:	6849      	ldr	r1, [r1, #4]
 8012a6e:	4c1b      	ldr	r4, [pc, #108]	; (8012adc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8012a70:	c203      	stmia	r2!, {r0, r1}
 8012a72:	a804      	add	r0, sp, #16
 8012a74:	f7fa ffae 	bl	800d9d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012a78:	6820      	ldr	r0, [r4, #0]
 8012a7a:	6803      	ldr	r3, [r0, #0]
 8012a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a7e:	4798      	blx	r3
 8012a80:	2fff      	cmp	r7, #255	; 0xff
 8012a82:	d016      	beq.n	8012ab2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8012a84:	f010 0f08 	tst.w	r0, #8
 8012a88:	6820      	ldr	r0, [r4, #0]
 8012a8a:	d015      	beq.n	8012ab8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8012a8c:	2400      	movs	r4, #0
 8012a8e:	6801      	ldr	r1, [r0, #0]
 8012a90:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8012a94:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8012a98:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8012a9c:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8012aa0:	9401      	str	r4, [sp, #4]
 8012aa2:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8012aa6:	9400      	str	r4, [sp, #0]
 8012aa8:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 8012aaa:	4629      	mov	r1, r5
 8012aac:	47a0      	blx	r4
 8012aae:	b007      	add	sp, #28
 8012ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ab2:	f010 0f02 	tst.w	r0, #2
 8012ab6:	e7e7      	b.n	8012a88 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8012ab8:	6803      	ldr	r3, [r0, #0]
 8012aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012abc:	4798      	blx	r3
 8012abe:	4b08      	ldr	r3, [pc, #32]	; (8012ae0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8012ac0:	4601      	mov	r1, r0
 8012ac2:	4630      	mov	r0, r6
 8012ac4:	881a      	ldrh	r2, [r3, #0]
 8012ac6:	6833      	ldr	r3, [r6, #0]
 8012ac8:	e9cd 5700 	strd	r5, r7, [sp]
 8012acc:	69dd      	ldr	r5, [r3, #28]
 8012ace:	ab04      	add	r3, sp, #16
 8012ad0:	47a8      	blx	r5
 8012ad2:	6820      	ldr	r0, [r4, #0]
 8012ad4:	6803      	ldr	r3, [r0, #0]
 8012ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ad8:	4798      	blx	r3
 8012ada:	e7e8      	b.n	8012aae <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8012adc:	24006894 	.word	0x24006894
 8012ae0:	2400688e 	.word	0x2400688e

08012ae4 <_ZN8touchgfx8LCD24bppC1Ev>:
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	490c      	ldr	r1, [pc, #48]	; (8012b18 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 8012ae8:	6042      	str	r2, [r0, #4]
 8012aea:	6001      	str	r1, [r0, #0]
 8012aec:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8012af0:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8012af4:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8012af8:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8012afc:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8012b00:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8012b04:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8012b08:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8012b0c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8012b10:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8012b14:	4770      	bx	lr
 8012b16:	bf00      	nop
 8012b18:	0801d17c 	.word	0x0801d17c

08012b1c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8012b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b20:	b091      	sub	sp, #68	; 0x44
 8012b22:	880d      	ldrh	r5, [r1, #0]
 8012b24:	4607      	mov	r7, r0
 8012b26:	4688      	mov	r8, r1
 8012b28:	4616      	mov	r6, r2
 8012b2a:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8012b2e:	b12d      	cbz	r5, 8012b3c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 8012b30:	4b69      	ldr	r3, [pc, #420]	; (8012cd8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 8012b32:	2160      	movs	r1, #96	; 0x60
 8012b34:	4a69      	ldr	r2, [pc, #420]	; (8012cdc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8012b36:	486a      	ldr	r0, [pc, #424]	; (8012ce0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8012b38:	f006 f9a0 	bl	8018e7c <__assert_func>
 8012b3c:	6810      	ldr	r0, [r2, #0]
 8012b3e:	ac0c      	add	r4, sp, #48	; 0x30
 8012b40:	6851      	ldr	r1, [r2, #4]
 8012b42:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 8012ce4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>
 8012b46:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 8012ce8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 8012b4a:	c403      	stmia	r4!, {r0, r1}
 8012b4c:	6818      	ldr	r0, [r3, #0]
 8012b4e:	ac0e      	add	r4, sp, #56	; 0x38
 8012b50:	6859      	ldr	r1, [r3, #4]
 8012b52:	c403      	stmia	r4!, {r0, r1}
 8012b54:	a80c      	add	r0, sp, #48	; 0x30
 8012b56:	f7fa ff3d 	bl	800d9d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012b5a:	4631      	mov	r1, r6
 8012b5c:	a80e      	add	r0, sp, #56	; 0x38
 8012b5e:	f7fa ff7d 	bl	800da5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012b62:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8012b66:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8012b6a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8012b6e:	f8da 0000 	ldr.w	r0, [sl]
 8012b72:	fb11 2103 	smlabb	r1, r1, r3, r2
 8012b76:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8012b7a:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8012b7e:	440f      	add	r7, r1
 8012b80:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8012b84:	440a      	add	r2, r1
 8012b86:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8012b8a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8012b8e:	4413      	add	r3, r2
 8012b90:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8012b94:	6803      	ldr	r3, [r0, #0]
 8012b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b98:	4798      	blx	r3
 8012b9a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8012b9e:	f8da 0000 	ldr.w	r0, [sl]
 8012ba2:	d01e      	beq.n	8012be2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc6>
 8012ba4:	6801      	ldr	r1, [r0, #0]
 8012ba6:	2201      	movs	r2, #1
 8012ba8:	9509      	str	r5, [sp, #36]	; 0x24
 8012baa:	250b      	movs	r5, #11
 8012bac:	b2a4      	uxth	r4, r4
 8012bae:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8012bb2:	b2b6      	uxth	r6, r6
 8012bb4:	e9cd 5207 	strd	r5, r2, [sp, #28]
 8012bb8:	f8bb 5000 	ldrh.w	r5, [fp]
 8012bbc:	f8cd 9010 	str.w	r9, [sp, #16]
 8012bc0:	9602      	str	r6, [sp, #8]
 8012bc2:	9401      	str	r4, [sp, #4]
 8012bc4:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8012bc8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8012bcc:	9203      	str	r2, [sp, #12]
 8012bce:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8012bd2:	9200      	str	r2, [sp, #0]
 8012bd4:	4642      	mov	r2, r8
 8012bd6:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8012bd8:	4639      	mov	r1, r7
 8012bda:	47a0      	blx	r4
 8012bdc:	b011      	add	sp, #68	; 0x44
 8012bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012be2:	6803      	ldr	r3, [r0, #0]
 8012be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012be6:	4798      	blx	r3
 8012be8:	f8bb 5000 	ldrh.w	r5, [fp]
 8012bec:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8012bf0:	f04f 0e04 	mov.w	lr, #4
 8012bf4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8012bf8:	436e      	muls	r6, r5
 8012bfa:	fb05 2303 	mla	r3, r5, r3, r2
 8012bfe:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8012c02:	1b2d      	subs	r5, r5, r4
 8012c04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012c08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012c0c:	4418      	add	r0, r3
 8012c0e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8012c12:	1982      	adds	r2, r0, r6
 8012c14:	1b1b      	subs	r3, r3, r4
 8012c16:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8012c1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8012c1c:	4290      	cmp	r0, r2
 8012c1e:	d254      	bcs.n	8012cca <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ae>
 8012c20:	eb00 0a04 	add.w	sl, r0, r4
 8012c24:	4550      	cmp	r0, sl
 8012c26:	d24c      	bcs.n	8012cc2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a6>
 8012c28:	f817 1b01 	ldrb.w	r1, [r7], #1
 8012c2c:	fb1e e101 	smlabb	r1, lr, r1, lr
 8012c30:	eb08 0c01 	add.w	ip, r8, r1
 8012c34:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8012c38:	b173      	cbz	r3, 8012c58 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8012c3a:	2bff      	cmp	r3, #255	; 0xff
 8012c3c:	f818 b001 	ldrb.w	fp, [r8, r1]
 8012c40:	d10c      	bne.n	8012c5c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8012c42:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8012c46:	d109      	bne.n	8012c5c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8012c48:	f880 b000 	strb.w	fp, [r0]
 8012c4c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8012c50:	7043      	strb	r3, [r0, #1]
 8012c52:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8012c56:	7083      	strb	r3, [r0, #2]
 8012c58:	3003      	adds	r0, #3
 8012c5a:	e7e3      	b.n	8012c24 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x108>
 8012c5c:	fb09 f103 	mul.w	r1, r9, r3
 8012c60:	1c4b      	adds	r3, r1, #1
 8012c62:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8012c66:	7801      	ldrb	r1, [r0, #0]
 8012c68:	121b      	asrs	r3, r3, #8
 8012c6a:	b29e      	uxth	r6, r3
 8012c6c:	43db      	mvns	r3, r3
 8012c6e:	fb1b fb06 	smulbb	fp, fp, r6
 8012c72:	b2db      	uxtb	r3, r3
 8012c74:	fb01 b103 	mla	r1, r1, r3, fp
 8012c78:	b289      	uxth	r1, r1
 8012c7a:	f101 0b01 	add.w	fp, r1, #1
 8012c7e:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8012c82:	f890 b001 	ldrb.w	fp, [r0, #1]
 8012c86:	fb1b fb03 	smulbb	fp, fp, r3
 8012c8a:	1209      	asrs	r1, r1, #8
 8012c8c:	7001      	strb	r1, [r0, #0]
 8012c8e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8012c92:	fb01 b106 	mla	r1, r1, r6, fp
 8012c96:	b289      	uxth	r1, r1
 8012c98:	f101 0b01 	add.w	fp, r1, #1
 8012c9c:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8012ca0:	1209      	asrs	r1, r1, #8
 8012ca2:	7041      	strb	r1, [r0, #1]
 8012ca4:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8012ca8:	f890 c002 	ldrb.w	ip, [r0, #2]
 8012cac:	fb1c f303 	smulbb	r3, ip, r3
 8012cb0:	fb01 3606 	mla	r6, r1, r6, r3
 8012cb4:	b2b6      	uxth	r6, r6
 8012cb6:	1c73      	adds	r3, r6, #1
 8012cb8:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8012cbc:	1236      	asrs	r6, r6, #8
 8012cbe:	7086      	strb	r6, [r0, #2]
 8012cc0:	e7ca      	b.n	8012c58 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8012cc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012cc4:	4428      	add	r0, r5
 8012cc6:	441f      	add	r7, r3
 8012cc8:	e7a8      	b.n	8012c1c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x100>
 8012cca:	4b06      	ldr	r3, [pc, #24]	; (8012ce4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8012ccc:	6818      	ldr	r0, [r3, #0]
 8012cce:	6803      	ldr	r3, [r0, #0]
 8012cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cd2:	4798      	blx	r3
 8012cd4:	e782      	b.n	8012bdc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 8012cd6:	bf00      	nop
 8012cd8:	0801ccc5 	.word	0x0801ccc5
 8012cdc:	0801d353 	.word	0x0801d353
 8012ce0:	0801cd61 	.word	0x0801cd61
 8012ce4:	24006894 	.word	0x24006894
 8012ce8:	2400688e 	.word	0x2400688e

08012cec <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8012cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cf0:	f8b1 9000 	ldrh.w	r9, [r1]
 8012cf4:	b091      	sub	sp, #68	; 0x44
 8012cf6:	4604      	mov	r4, r0
 8012cf8:	460e      	mov	r6, r1
 8012cfa:	f1b9 0f01 	cmp.w	r9, #1
 8012cfe:	4690      	mov	r8, r2
 8012d00:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8012d04:	d005      	beq.n	8012d12 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x26>
 8012d06:	4b69      	ldr	r3, [pc, #420]	; (8012eac <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8012d08:	21ae      	movs	r1, #174	; 0xae
 8012d0a:	4a69      	ldr	r2, [pc, #420]	; (8012eb0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8012d0c:	4869      	ldr	r0, [pc, #420]	; (8012eb4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8012d0e:	f006 f8b5 	bl	8018e7c <__assert_func>
 8012d12:	6810      	ldr	r0, [r2, #0]
 8012d14:	ad0c      	add	r5, sp, #48	; 0x30
 8012d16:	6851      	ldr	r1, [r2, #4]
 8012d18:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8012eb8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>
 8012d1c:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8012ebc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 8012d20:	c503      	stmia	r5!, {r0, r1}
 8012d22:	6818      	ldr	r0, [r3, #0]
 8012d24:	ad0e      	add	r5, sp, #56	; 0x38
 8012d26:	6859      	ldr	r1, [r3, #4]
 8012d28:	c503      	stmia	r5!, {r0, r1}
 8012d2a:	a80c      	add	r0, sp, #48	; 0x30
 8012d2c:	f7fa fe52 	bl	800d9d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012d30:	4641      	mov	r1, r8
 8012d32:	a80e      	add	r0, sp, #56	; 0x38
 8012d34:	f7fa fe92 	bl	800da5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012d38:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8012d3c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8012d40:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8012d44:	f8da 0000 	ldr.w	r0, [sl]
 8012d48:	fb11 2103 	smlabb	r1, r1, r3, r2
 8012d4c:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8012d50:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8012d54:	440c      	add	r4, r1
 8012d56:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8012d5a:	440a      	add	r2, r1
 8012d5c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8012d60:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8012d64:	4413      	add	r3, r2
 8012d66:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8012d6a:	6803      	ldr	r3, [r0, #0]
 8012d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d6e:	4798      	blx	r3
 8012d70:	f010 0f80 	tst.w	r0, #128	; 0x80
 8012d74:	f8da 0000 	ldr.w	r0, [sl]
 8012d78:	d020      	beq.n	8012dbc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd0>
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	f04f 0c0b 	mov.w	ip, #11
 8012d80:	6801      	ldr	r1, [r0, #0]
 8012d82:	b2ad      	uxth	r5, r5
 8012d84:	f8cd c01c 	str.w	ip, [sp, #28]
 8012d88:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8012d8c:	e9cd 9208 	strd	r9, r2, [sp, #32]
 8012d90:	f8bb c000 	ldrh.w	ip, [fp]
 8012d94:	9704      	str	r7, [sp, #16]
 8012d96:	9502      	str	r5, [sp, #8]
 8012d98:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8012d9c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8012da0:	9203      	str	r2, [sp, #12]
 8012da2:	fa1f f288 	uxth.w	r2, r8
 8012da6:	9201      	str	r2, [sp, #4]
 8012da8:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8012dac:	9200      	str	r2, [sp, #0]
 8012dae:	4632      	mov	r2, r6
 8012db0:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8012db2:	4621      	mov	r1, r4
 8012db4:	47a8      	blx	r5
 8012db6:	b011      	add	sp, #68	; 0x44
 8012db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dbc:	6803      	ldr	r3, [r0, #0]
 8012dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012dc0:	4798      	blx	r3
 8012dc2:	f8bb 2000 	ldrh.w	r2, [fp]
 8012dc6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8012dca:	f04f 0e03 	mov.w	lr, #3
 8012dce:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8012dd2:	4355      	muls	r5, r2
 8012dd4:	fa1f fc87 	uxth.w	ip, r7
 8012dd8:	fb02 1303 	mla	r3, r2, r3, r1
 8012ddc:	eba2 0208 	sub.w	r2, r2, r8
 8012de0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012de4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012de8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012dec:	4418      	add	r0, r3
 8012dee:	920b      	str	r2, [sp, #44]	; 0x2c
 8012df0:	1943      	adds	r3, r0, r5
 8012df2:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8012df6:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 8012dfa:	eba2 0208 	sub.w	r2, r2, r8
 8012dfe:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8012e02:	b2ad      	uxth	r5, r5
 8012e04:	4298      	cmp	r0, r3
 8012e06:	d24a      	bcs.n	8012e9e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b2>
 8012e08:	eb00 0908 	add.w	r9, r0, r8
 8012e0c:	4621      	mov	r1, r4
 8012e0e:	4548      	cmp	r0, r9
 8012e10:	460c      	mov	r4, r1
 8012e12:	d240      	bcs.n	8012e96 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8012e14:	f04f 0a04 	mov.w	sl, #4
 8012e18:	7824      	ldrb	r4, [r4, #0]
 8012e1a:	2fff      	cmp	r7, #255	; 0xff
 8012e1c:	f101 0101 	add.w	r1, r1, #1
 8012e20:	fb1e a404 	smlabb	r4, lr, r4, sl
 8012e24:	eb06 0a04 	add.w	sl, r6, r4
 8012e28:	f816 b004 	ldrb.w	fp, [r6, r4]
 8012e2c:	d02b      	beq.n	8012e86 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 8012e2e:	7804      	ldrb	r4, [r0, #0]
 8012e30:	fb14 f405 	smulbb	r4, r4, r5
 8012e34:	fb0b 440c 	mla	r4, fp, ip, r4
 8012e38:	b2a4      	uxth	r4, r4
 8012e3a:	f104 0b01 	add.w	fp, r4, #1
 8012e3e:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8012e42:	f890 b001 	ldrb.w	fp, [r0, #1]
 8012e46:	fb1b fb05 	smulbb	fp, fp, r5
 8012e4a:	1224      	asrs	r4, r4, #8
 8012e4c:	7004      	strb	r4, [r0, #0]
 8012e4e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8012e52:	fb04 b40c 	mla	r4, r4, ip, fp
 8012e56:	b2a4      	uxth	r4, r4
 8012e58:	f104 0b01 	add.w	fp, r4, #1
 8012e5c:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8012e60:	1224      	asrs	r4, r4, #8
 8012e62:	7044      	strb	r4, [r0, #1]
 8012e64:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8012e68:	f890 a002 	ldrb.w	sl, [r0, #2]
 8012e6c:	fb1a fa05 	smulbb	sl, sl, r5
 8012e70:	fb04 a40c 	mla	r4, r4, ip, sl
 8012e74:	b2a4      	uxth	r4, r4
 8012e76:	f104 0a01 	add.w	sl, r4, #1
 8012e7a:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8012e7e:	1224      	asrs	r4, r4, #8
 8012e80:	7084      	strb	r4, [r0, #2]
 8012e82:	3003      	adds	r0, #3
 8012e84:	e7c3      	b.n	8012e0e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x122>
 8012e86:	f880 b000 	strb.w	fp, [r0]
 8012e8a:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8012e8e:	7044      	strb	r4, [r0, #1]
 8012e90:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8012e94:	e7f4      	b.n	8012e80 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x194>
 8012e96:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8012e98:	4420      	add	r0, r4
 8012e9a:	188c      	adds	r4, r1, r2
 8012e9c:	e7b2      	b.n	8012e04 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 8012e9e:	4b06      	ldr	r3, [pc, #24]	; (8012eb8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 8012ea0:	6818      	ldr	r0, [r3, #0]
 8012ea2:	6803      	ldr	r3, [r0, #0]
 8012ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ea6:	4798      	blx	r3
 8012ea8:	e785      	b.n	8012db6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xca>
 8012eaa:	bf00      	nop
 8012eac:	0801cc44 	.word	0x0801cc44
 8012eb0:	0801d246 	.word	0x0801d246
 8012eb4:	0801cd61 	.word	0x0801cd61
 8012eb8:	24006894 	.word	0x24006894
 8012ebc:	2400688e 	.word	0x2400688e

08012ec0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8012ec0:	b570      	push	{r4, r5, r6, lr}
 8012ec2:	780d      	ldrb	r5, [r1, #0]
 8012ec4:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8012ec8:	2d01      	cmp	r5, #1
 8012eca:	d00d      	beq.n	8012ee8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 8012ecc:	d307      	bcc.n	8012ede <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 8012ece:	2d02      	cmp	r5, #2
 8012ed0:	d10f      	bne.n	8012ef2 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 8012ed2:	4b08      	ldr	r3, [pc, #32]	; (8012ef4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 8012ed4:	2153      	movs	r1, #83	; 0x53
 8012ed6:	4a08      	ldr	r2, [pc, #32]	; (8012ef8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 8012ed8:	4808      	ldr	r0, [pc, #32]	; (8012efc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 8012eda:	f005 ffcf 	bl	8018e7c <__assert_func>
 8012ede:	9404      	str	r4, [sp, #16]
 8012ee0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012ee4:	f7ff be1a 	b.w	8012b1c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8012ee8:	9404      	str	r4, [sp, #16]
 8012eea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012eee:	f7ff befd 	b.w	8012cec <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8012ef2:	bd70      	pop	{r4, r5, r6, pc}
 8012ef4:	0801cbf9 	.word	0x0801cbf9
 8012ef8:	0801d1c4 	.word	0x0801d1c4
 8012efc:	0801cd61 	.word	0x0801cd61

08012f00 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8012f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f04:	4605      	mov	r5, r0
 8012f06:	b08f      	sub	sp, #60	; 0x3c
 8012f08:	460c      	mov	r4, r1
 8012f0a:	461f      	mov	r7, r3
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d052      	beq.n	8012fb6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8012f10:	6808      	ldr	r0, [r1, #0]
 8012f12:	ab0a      	add	r3, sp, #40	; 0x28
 8012f14:	6849      	ldr	r1, [r1, #4]
 8012f16:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80130e0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 8012f1a:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 80130e4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8012f1e:	c303      	stmia	r3!, {r0, r1}
 8012f20:	6810      	ldr	r0, [r2, #0]
 8012f22:	ab0c      	add	r3, sp, #48	; 0x30
 8012f24:	6851      	ldr	r1, [r2, #4]
 8012f26:	c303      	stmia	r3!, {r0, r1}
 8012f28:	a80a      	add	r0, sp, #40	; 0x28
 8012f2a:	f7fa fd53 	bl	800d9d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012f2e:	4621      	mov	r1, r4
 8012f30:	a80c      	add	r0, sp, #48	; 0x30
 8012f32:	f7fa fd93 	bl	800da5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012f36:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8012f3a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8012f3e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8012f42:	f8d8 0000 	ldr.w	r0, [r8]
 8012f46:	fb11 2103 	smlabb	r1, r1, r3, r2
 8012f4a:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 8012f4e:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 8012f52:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8012f56:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8012f5a:	440a      	add	r2, r1
 8012f5c:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8012f60:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8012f64:	4413      	add	r3, r2
 8012f66:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8012f6a:	6803      	ldr	r3, [r0, #0]
 8012f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f6e:	4798      	blx	r3
 8012f70:	2fff      	cmp	r7, #255	; 0xff
 8012f72:	d023      	beq.n	8012fbc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8012f74:	f010 0f04 	tst.w	r0, #4
 8012f78:	f8d8 0000 	ldr.w	r0, [r8]
 8012f7c:	d021      	beq.n	8012fc2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 8012f7e:	2100      	movs	r1, #0
 8012f80:	f04f 0e01 	mov.w	lr, #1
 8012f84:	f8d0 c000 	ldr.w	ip, [r0]
 8012f88:	b2a4      	uxth	r4, r4
 8012f8a:	9106      	str	r1, [sp, #24]
 8012f8c:	b2b6      	uxth	r6, r6
 8012f8e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8012f92:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8012f96:	e9cd e107 	strd	lr, r1, [sp, #28]
 8012f9a:	f8b9 e000 	ldrh.w	lr, [r9]
 8012f9e:	9703      	str	r7, [sp, #12]
 8012fa0:	9401      	str	r4, [sp, #4]
 8012fa2:	9600      	str	r6, [sp, #0]
 8012fa4:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8012fa8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8012fac:	9102      	str	r1, [sp, #8]
 8012fae:	4629      	mov	r1, r5
 8012fb0:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 8012fb4:	47a0      	blx	r4
 8012fb6:	b00f      	add	sp, #60	; 0x3c
 8012fb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012fbc:	f010 0f01 	tst.w	r0, #1
 8012fc0:	e7da      	b.n	8012f78 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 8012fc2:	6803      	ldr	r3, [r0, #0]
 8012fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fc6:	4798      	blx	r3
 8012fc8:	f8b9 1000 	ldrh.w	r1, [r9]
 8012fcc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8012fd0:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8012fd4:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8012fd8:	434c      	muls	r4, r1
 8012fda:	2fff      	cmp	r7, #255	; 0xff
 8012fdc:	fb01 2303 	mla	r3, r1, r3, r2
 8012fe0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8012fe4:	eba1 0106 	sub.w	r1, r1, r6
 8012fe8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012fec:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012ff0:	4418      	add	r0, r3
 8012ff2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8012ff6:	eba3 0606 	sub.w	r6, r3, r6
 8012ffa:	4404      	add	r4, r0
 8012ffc:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8013000:	d04a      	beq.n	8013098 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 8013002:	43fa      	mvns	r2, r7
 8013004:	b2bb      	uxth	r3, r7
 8013006:	b2d7      	uxtb	r7, r2
 8013008:	42a0      	cmp	r0, r4
 801300a:	d263      	bcs.n	80130d4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801300c:	eb00 0e0c 	add.w	lr, r0, ip
 8013010:	4586      	cmp	lr, r0
 8013012:	f100 0803 	add.w	r8, r0, #3
 8013016:	d93a      	bls.n	801308e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 8013018:	f835 2b02 	ldrh.w	r2, [r5], #2
 801301c:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8013020:	00d0      	lsls	r0, r2, #3
 8013022:	fb19 f907 	smulbb	r9, r9, r7
 8013026:	b2c0      	uxtb	r0, r0
 8013028:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801302c:	fb00 9003 	mla	r0, r0, r3, r9
 8013030:	b280      	uxth	r0, r0
 8013032:	f100 0901 	add.w	r9, r0, #1
 8013036:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801303a:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801303e:	fb19 f907 	smulbb	r9, r9, r7
 8013042:	1200      	asrs	r0, r0, #8
 8013044:	f808 0c03 	strb.w	r0, [r8, #-3]
 8013048:	10d0      	asrs	r0, r2, #3
 801304a:	1212      	asrs	r2, r2, #8
 801304c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8013050:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8013054:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8013058:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801305c:	fb00 9003 	mla	r0, r0, r3, r9
 8013060:	b280      	uxth	r0, r0
 8013062:	f100 0901 	add.w	r9, r0, #1
 8013066:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801306a:	1200      	asrs	r0, r0, #8
 801306c:	f808 0c02 	strb.w	r0, [r8, #-2]
 8013070:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8013074:	fb10 f007 	smulbb	r0, r0, r7
 8013078:	fb02 0203 	mla	r2, r2, r3, r0
 801307c:	b292      	uxth	r2, r2
 801307e:	1c50      	adds	r0, r2, #1
 8013080:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8013084:	4640      	mov	r0, r8
 8013086:	1212      	asrs	r2, r2, #8
 8013088:	f808 2c01 	strb.w	r2, [r8, #-1]
 801308c:	e7c0      	b.n	8013010 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801308e:	4408      	add	r0, r1
 8013090:	4435      	add	r5, r6
 8013092:	e7b9      	b.n	8013008 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 8013094:	4408      	add	r0, r1
 8013096:	4435      	add	r5, r6
 8013098:	42a0      	cmp	r0, r4
 801309a:	d21b      	bcs.n	80130d4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801309c:	eb00 070c 	add.w	r7, r0, ip
 80130a0:	42b8      	cmp	r0, r7
 80130a2:	d2f7      	bcs.n	8013094 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 80130a4:	f835 3b02 	ldrh.w	r3, [r5], #2
 80130a8:	3003      	adds	r0, #3
 80130aa:	00da      	lsls	r2, r3, #3
 80130ac:	b2d2      	uxtb	r2, r2
 80130ae:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80130b2:	f800 2c03 	strb.w	r2, [r0, #-3]
 80130b6:	10da      	asrs	r2, r3, #3
 80130b8:	121b      	asrs	r3, r3, #8
 80130ba:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80130be:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80130c2:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80130c6:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80130ca:	f800 2c02 	strb.w	r2, [r0, #-2]
 80130ce:	f800 3c01 	strb.w	r3, [r0, #-1]
 80130d2:	e7e5      	b.n	80130a0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 80130d4:	4b02      	ldr	r3, [pc, #8]	; (80130e0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 80130d6:	6818      	ldr	r0, [r3, #0]
 80130d8:	6803      	ldr	r3, [r0, #0]
 80130da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130dc:	4798      	blx	r3
 80130de:	e76a      	b.n	8012fb6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 80130e0:	24006894 	.word	0x24006894
 80130e4:	2400688e 	.word	0x2400688e

080130e8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 80130e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130ec:	b08a      	sub	sp, #40	; 0x28
 80130ee:	460d      	mov	r5, r1
 80130f0:	4604      	mov	r4, r0
 80130f2:	461e      	mov	r6, r3
 80130f4:	6808      	ldr	r0, [r1, #0]
 80130f6:	ab06      	add	r3, sp, #24
 80130f8:	6849      	ldr	r1, [r1, #4]
 80130fa:	4f5d      	ldr	r7, [pc, #372]	; (8013270 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 80130fc:	c303      	stmia	r3!, {r0, r1}
 80130fe:	6810      	ldr	r0, [r2, #0]
 8013100:	ab08      	add	r3, sp, #32
 8013102:	6851      	ldr	r1, [r2, #4]
 8013104:	c303      	stmia	r3!, {r0, r1}
 8013106:	a806      	add	r0, sp, #24
 8013108:	f7fa fc64 	bl	800d9d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801310c:	4629      	mov	r1, r5
 801310e:	a808      	add	r0, sp, #32
 8013110:	f7fa fca4 	bl	800da5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8013114:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8013118:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801311c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8013120:	6838      	ldr	r0, [r7, #0]
 8013122:	fb11 2103 	smlabb	r1, r1, r3, r2
 8013126:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801312a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801312e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8013132:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8013136:	440a      	add	r2, r1
 8013138:	f8ad 2020 	strh.w	r2, [sp, #32]
 801313c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8013140:	4413      	add	r3, r2
 8013142:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8013146:	6803      	ldr	r3, [r0, #0]
 8013148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801314a:	4798      	blx	r3
 801314c:	2eff      	cmp	r6, #255	; 0xff
 801314e:	d119      	bne.n	8013184 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8013150:	f010 0f20 	tst.w	r0, #32
 8013154:	6838      	ldr	r0, [r7, #0]
 8013156:	d018      	beq.n	801318a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8013158:	b2ad      	uxth	r5, r5
 801315a:	2700      	movs	r7, #0
 801315c:	6801      	ldr	r1, [r0, #0]
 801315e:	9501      	str	r5, [sp, #4]
 8013160:	fa1f f588 	uxth.w	r5, r8
 8013164:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8013168:	9500      	str	r5, [sp, #0]
 801316a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801316e:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8013172:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8013176:	9602      	str	r6, [sp, #8]
 8013178:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801317a:	4621      	mov	r1, r4
 801317c:	47a8      	blx	r5
 801317e:	b00a      	add	sp, #40	; 0x28
 8013180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013184:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013188:	e7e4      	b.n	8013154 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801318a:	6803      	ldr	r3, [r0, #0]
 801318c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801318e:	4798      	blx	r3
 8013190:	4b38      	ldr	r3, [pc, #224]	; (8013274 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8013192:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8013196:	f8b3 c000 	ldrh.w	ip, [r3]
 801319a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801319e:	fb0c f505 	mul.w	r5, ip, r5
 80131a2:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 80131a6:	fb0c 2303 	mla	r3, ip, r3, r2
 80131aa:	ebac 0c08 	sub.w	ip, ip, r8
 80131ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80131b2:	ebae 0e08 	sub.w	lr, lr, r8
 80131b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80131ba:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80131be:	4418      	add	r0, r3
 80131c0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80131c4:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 80131c8:	4405      	add	r5, r0
 80131ca:	42a8      	cmp	r0, r5
 80131cc:	d24a      	bcs.n	8013264 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 80131ce:	eb00 0803 	add.w	r8, r0, r3
 80131d2:	4540      	cmp	r0, r8
 80131d4:	d243      	bcs.n	801325e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 80131d6:	78e2      	ldrb	r2, [r4, #3]
 80131d8:	b15a      	cbz	r2, 80131f2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 80131da:	2aff      	cmp	r2, #255	; 0xff
 80131dc:	f894 9000 	ldrb.w	r9, [r4]
 80131e0:	d10a      	bne.n	80131f8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80131e2:	2eff      	cmp	r6, #255	; 0xff
 80131e4:	d108      	bne.n	80131f8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80131e6:	f880 9000 	strb.w	r9, [r0]
 80131ea:	7862      	ldrb	r2, [r4, #1]
 80131ec:	7042      	strb	r2, [r0, #1]
 80131ee:	78a2      	ldrb	r2, [r4, #2]
 80131f0:	7082      	strb	r2, [r0, #2]
 80131f2:	3003      	adds	r0, #3
 80131f4:	3404      	adds	r4, #4
 80131f6:	e7ec      	b.n	80131d2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 80131f8:	4372      	muls	r2, r6
 80131fa:	1c51      	adds	r1, r2, #1
 80131fc:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8013200:	1209      	asrs	r1, r1, #8
 8013202:	fa1f fa81 	uxth.w	sl, r1
 8013206:	43c9      	mvns	r1, r1
 8013208:	fb19 f90a 	smulbb	r9, r9, sl
 801320c:	b2ca      	uxtb	r2, r1
 801320e:	7801      	ldrb	r1, [r0, #0]
 8013210:	fb01 9902 	mla	r9, r1, r2, r9
 8013214:	fa1f f989 	uxth.w	r9, r9
 8013218:	f109 0101 	add.w	r1, r9, #1
 801321c:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8013220:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013224:	f880 9000 	strb.w	r9, [r0]
 8013228:	f890 9001 	ldrb.w	r9, [r0, #1]
 801322c:	7861      	ldrb	r1, [r4, #1]
 801322e:	fb19 f902 	smulbb	r9, r9, r2
 8013232:	fb01 910a 	mla	r1, r1, sl, r9
 8013236:	b289      	uxth	r1, r1
 8013238:	f101 0901 	add.w	r9, r1, #1
 801323c:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8013240:	1209      	asrs	r1, r1, #8
 8013242:	7041      	strb	r1, [r0, #1]
 8013244:	7881      	ldrb	r1, [r0, #2]
 8013246:	f894 9002 	ldrb.w	r9, [r4, #2]
 801324a:	fb11 f202 	smulbb	r2, r1, r2
 801324e:	fb09 220a 	mla	r2, r9, sl, r2
 8013252:	b292      	uxth	r2, r2
 8013254:	1c51      	adds	r1, r2, #1
 8013256:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801325a:	1212      	asrs	r2, r2, #8
 801325c:	e7c8      	b.n	80131f0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801325e:	4460      	add	r0, ip
 8013260:	4474      	add	r4, lr
 8013262:	e7b2      	b.n	80131ca <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8013264:	6838      	ldr	r0, [r7, #0]
 8013266:	6803      	ldr	r3, [r0, #0]
 8013268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801326a:	4798      	blx	r3
 801326c:	e787      	b.n	801317e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801326e:	bf00      	nop
 8013270:	24006894 	.word	0x24006894
 8013274:	2400688e 	.word	0x2400688e

08013278 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8013278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801327c:	b085      	sub	sp, #20
 801327e:	4606      	mov	r6, r0
 8013280:	460c      	mov	r4, r1
 8013282:	4691      	mov	r9, r2
 8013284:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8013288:	4698      	mov	r8, r3
 801328a:	b31d      	cbz	r5, 80132d4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801328c:	4608      	mov	r0, r1
 801328e:	f7fd f9e9 	bl	8010664 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013292:	4607      	mov	r7, r0
 8013294:	4620      	mov	r0, r4
 8013296:	f7fd fa1f 	bl	80106d8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801329a:	f8ad 000e 	strh.w	r0, [sp, #14]
 801329e:	4620      	mov	r0, r4
 80132a0:	f8ad 9008 	strh.w	r9, [sp, #8]
 80132a4:	f8ad 800a 	strh.w	r8, [sp, #10]
 80132a8:	f8ad 700c 	strh.w	r7, [sp, #12]
 80132ac:	f7fd fb6c 	bl	8010988 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80132b0:	280b      	cmp	r0, #11
 80132b2:	d838      	bhi.n	8013326 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xae>
 80132b4:	e8df f000 	tbb	[pc, r0]
 80132b8:	37062920 	.word	0x37062920
 80132bc:	37373737 	.word	0x37373737
 80132c0:	11373737 	.word	0x11373737
 80132c4:	4620      	mov	r0, r4
 80132c6:	f7fd fad5 	bl	8010874 <_ZNK8touchgfx6Bitmap7getDataEv>
 80132ca:	462b      	mov	r3, r5
 80132cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80132ce:	a902      	add	r1, sp, #8
 80132d0:	f7ff ff0a 	bl	80130e8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80132d4:	b005      	add	sp, #20
 80132d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80132da:	4620      	mov	r0, r4
 80132dc:	f7fd faca 	bl	8010874 <_ZNK8touchgfx6Bitmap7getDataEv>
 80132e0:	4606      	mov	r6, r0
 80132e2:	4620      	mov	r0, r4
 80132e4:	f7fd faf8 	bl	80108d8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80132e8:	9500      	str	r5, [sp, #0]
 80132ea:	4601      	mov	r1, r0
 80132ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80132ee:	aa02      	add	r2, sp, #8
 80132f0:	4630      	mov	r0, r6
 80132f2:	f7ff fde5 	bl	8012ec0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80132f6:	e7ed      	b.n	80132d4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80132f8:	4620      	mov	r0, r4
 80132fa:	f7fd fabb 	bl	8010874 <_ZNK8touchgfx6Bitmap7getDataEv>
 80132fe:	462b      	mov	r3, r5
 8013300:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013302:	a902      	add	r1, sp, #8
 8013304:	f7ff fdfc 	bl	8012f00 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8013308:	e7e4      	b.n	80132d4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801330a:	6833      	ldr	r3, [r6, #0]
 801330c:	4620      	mov	r0, r4
 801330e:	68df      	ldr	r7, [r3, #12]
 8013310:	f7fd fab0 	bl	8010874 <_ZNK8touchgfx6Bitmap7getDataEv>
 8013314:	2300      	movs	r3, #0
 8013316:	4601      	mov	r1, r0
 8013318:	aa02      	add	r2, sp, #8
 801331a:	4630      	mov	r0, r6
 801331c:	e9cd 5300 	strd	r5, r3, [sp]
 8013320:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013322:	47b8      	blx	r7
 8013324:	e7d6      	b.n	80132d4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8013326:	4b03      	ldr	r3, [pc, #12]	; (8013334 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbc>)
 8013328:	2147      	movs	r1, #71	; 0x47
 801332a:	4a03      	ldr	r2, [pc, #12]	; (8013338 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801332c:	4803      	ldr	r0, [pc, #12]	; (801333c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801332e:	f005 fda5 	bl	8018e7c <__assert_func>
 8013332:	bf00      	nop
 8013334:	0801cc92 	.word	0x0801cc92
 8013338:	0801d2cf 	.word	0x0801d2cf
 801333c:	0801cd61 	.word	0x0801cd61

08013340 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8013340:	b570      	push	{r4, r5, r6, lr}
 8013342:	9c04      	ldr	r4, [sp, #16]
 8013344:	4605      	mov	r5, r0
 8013346:	4608      	mov	r0, r1
 8013348:	4619      	mov	r1, r3
 801334a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801334e:	2a0d      	cmp	r2, #13
 8013350:	d826      	bhi.n	80133a0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>
 8013352:	e8df f002 	tbb	[pc, r2]
 8013356:	1107      	.short	0x1107
 8013358:	1e1e1e0c 	.word	0x1e1e1e0c
 801335c:	1e1e1e1e 	.word	0x1e1e1e1e
 8013360:	1e1e1e1e 	.word	0x1e1e1e1e
 8013364:	4622      	mov	r2, r4
 8013366:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801336a:	f7ff bdc9 	b.w	8012f00 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801336e:	4622      	mov	r2, r4
 8013370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013374:	f7ff beb8 	b.w	80130e8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8013378:	682a      	ldr	r2, [r5, #0]
 801337a:	2600      	movs	r6, #0
 801337c:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8013380:	68d6      	ldr	r6, [r2, #12]
 8013382:	4623      	mov	r3, r4
 8013384:	460a      	mov	r2, r1
 8013386:	4601      	mov	r1, r0
 8013388:	46b4      	mov	ip, r6
 801338a:	4628      	mov	r0, r5
 801338c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013390:	4760      	bx	ip
 8013392:	4b04      	ldr	r3, [pc, #16]	; (80133a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8013394:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 8013398:	4a03      	ldr	r2, [pc, #12]	; (80133a8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801339a:	4804      	ldr	r0, [pc, #16]	; (80133ac <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801339c:	f005 fd6e 	bl	8018e7c <__assert_func>
 80133a0:	bd70      	pop	{r4, r5, r6, pc}
 80133a2:	bf00      	nop
 80133a4:	0801cf38 	.word	0x0801cf38
 80133a8:	0801d5b7 	.word	0x0801d5b7
 80133ac:	0801cd61 	.word	0x0801cd61

080133b0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 80133b0:	b158      	cbz	r0, 80133ca <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 80133b2:	2902      	cmp	r1, #2
 80133b4:	d00f      	beq.n	80133d6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 80133b6:	2903      	cmp	r1, #3
 80133b8:	d010      	beq.n	80133dc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 80133ba:	2901      	cmp	r1, #1
 80133bc:	d101      	bne.n	80133c2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 80133be:	2001      	movs	r0, #1
 80133c0:	4770      	bx	lr
 80133c2:	4b08      	ldr	r3, [pc, #32]	; (80133e4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 80133c4:	8819      	ldrh	r1, [r3, #0]
 80133c6:	4248      	negs	r0, r1
 80133c8:	4770      	bx	lr
 80133ca:	2902      	cmp	r1, #2
 80133cc:	d006      	beq.n	80133dc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 80133ce:	2903      	cmp	r1, #3
 80133d0:	d0f7      	beq.n	80133c2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 80133d2:	2901      	cmp	r1, #1
 80133d4:	d1f3      	bne.n	80133be <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 80133d6:	4b03      	ldr	r3, [pc, #12]	; (80133e4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 80133d8:	8818      	ldrh	r0, [r3, #0]
 80133da:	4770      	bx	lr
 80133dc:	f04f 30ff 	mov.w	r0, #4294967295
 80133e0:	4770      	bx	lr
 80133e2:	bf00      	nop
 80133e4:	2400688e 	.word	0x2400688e

080133e8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 80133e8:	b170      	cbz	r0, 8013408 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 80133ea:	2902      	cmp	r1, #2
 80133ec:	d012      	beq.n	8013414 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 80133ee:	2903      	cmp	r1, #3
 80133f0:	d006      	beq.n	8013400 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 80133f2:	2901      	cmp	r1, #1
 80133f4:	d001      	beq.n	80133fa <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 80133f6:	2001      	movs	r0, #1
 80133f8:	4770      	bx	lr
 80133fa:	4b08      	ldr	r3, [pc, #32]	; (801341c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 80133fc:	8818      	ldrh	r0, [r3, #0]
 80133fe:	4770      	bx	lr
 8013400:	4b06      	ldr	r3, [pc, #24]	; (801341c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8013402:	8818      	ldrh	r0, [r3, #0]
 8013404:	4240      	negs	r0, r0
 8013406:	4770      	bx	lr
 8013408:	2902      	cmp	r1, #2
 801340a:	d0f9      	beq.n	8013400 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801340c:	2903      	cmp	r1, #3
 801340e:	d0f2      	beq.n	80133f6 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 8013410:	2901      	cmp	r1, #1
 8013412:	d1f2      	bne.n	80133fa <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 8013414:	f04f 30ff 	mov.w	r0, #4294967295
 8013418:	4770      	bx	lr
 801341a:	bf00      	nop
 801341c:	2400688e 	.word	0x2400688e

08013420 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8013420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013424:	b097      	sub	sp, #92	; 0x5c
 8013426:	910b      	str	r1, [sp, #44]	; 0x2c
 8013428:	a912      	add	r1, sp, #72	; 0x48
 801342a:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 801342e:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 8013432:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 8013436:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801343a:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 801343e:	e881 000c 	stmia.w	r1, {r2, r3}
 8013442:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 8013446:	930a      	str	r3, [sp, #40]	; 0x28
 8013448:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801344c:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 8013450:	9311      	str	r3, [sp, #68]	; 0x44
 8013452:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8013456:	798d      	ldrb	r5, [r1, #6]
 8013458:	930c      	str	r3, [sp, #48]	; 0x30
 801345a:	7b4b      	ldrb	r3, [r1, #13]
 801345c:	0158      	lsls	r0, r3, #5
 801345e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8013462:	4328      	orrs	r0, r5
 8013464:	9009      	str	r0, [sp, #36]	; 0x24
 8013466:	f000 817d 	beq.w	8013764 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801346a:	011b      	lsls	r3, r3, #4
 801346c:	79c8      	ldrb	r0, [r1, #7]
 801346e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013472:	4303      	orrs	r3, r0
 8013474:	930e      	str	r3, [sp, #56]	; 0x38
 8013476:	f000 8175 	beq.w	8013764 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801347a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801347e:	b29b      	uxth	r3, r3
 8013480:	2f00      	cmp	r7, #0
 8013482:	f000 8117 	beq.w	80136b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x294>
 8013486:	1aff      	subs	r7, r7, r3
 8013488:	b2bf      	uxth	r7, r7
 801348a:	043b      	lsls	r3, r7, #16
 801348c:	d502      	bpl.n	8013494 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801348e:	1bf6      	subs	r6, r6, r7
 8013490:	2700      	movs	r7, #0
 8013492:	b236      	sxth	r6, r6
 8013494:	f9b2 1000 	ldrsh.w	r1, [r2]
 8013498:	a812      	add	r0, sp, #72	; 0x48
 801349a:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801349e:	428e      	cmp	r6, r1
 80134a0:	b28b      	uxth	r3, r1
 80134a2:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 80134a6:	bfbf      	itttt	lt
 80134a8:	18ff      	addlt	r7, r7, r3
 80134aa:	1bbe      	sublt	r6, r7, r6
 80134ac:	b2b7      	uxthlt	r7, r6
 80134ae:	460e      	movlt	r6, r1
 80134b0:	8891      	ldrh	r1, [r2, #4]
 80134b2:	440b      	add	r3, r1
 80134b4:	4631      	mov	r1, r6
 80134b6:	b21b      	sxth	r3, r3
 80134b8:	9310      	str	r3, [sp, #64]	; 0x40
 80134ba:	88d3      	ldrh	r3, [r2, #6]
 80134bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80134be:	449a      	add	sl, r3
 80134c0:	fa0f f38a 	sxth.w	r3, sl
 80134c4:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 80134c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80134ca:	4bb6      	ldr	r3, [pc, #728]	; (80137a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 80134cc:	f893 b000 	ldrb.w	fp, [r3]
 80134d0:	f10b 3cff 	add.w	ip, fp, #4294967295
 80134d4:	f1dc 0300 	rsbs	r3, ip, #0
 80134d8:	eb43 030c 	adc.w	r3, r3, ip
 80134dc:	930d      	str	r3, [sp, #52]	; 0x34
 80134de:	464b      	mov	r3, r9
 80134e0:	f7fa f8fc 	bl	800d6dc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80134e4:	4631      	mov	r1, r6
 80134e6:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 80134ea:	464b      	mov	r3, r9
 80134ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80134ee:	a812      	add	r0, sp, #72	; 0x48
 80134f0:	f7fa f90c 	bl	800d70c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80134f4:	a916      	add	r1, sp, #88	; 0x58
 80134f6:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80134fa:	a815      	add	r0, sp, #84	; 0x54
 80134fc:	f7fa fa28 	bl	800d950 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8013500:	f1b9 0f00 	cmp.w	r9, #0
 8013504:	f040 80d9 	bne.w	80136ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29a>
 8013508:	f1bb 0f01 	cmp.w	fp, #1
 801350c:	f040 80dd 	bne.w	80136ca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 8013510:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013512:	b153      	cbz	r3, 801352a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8013514:	2508      	movs	r5, #8
 8013516:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013518:	fb95 f3f8 	sdiv	r3, r5, r8
 801351c:	1e5d      	subs	r5, r3, #1
 801351e:	4415      	add	r5, r2
 8013520:	fb95 f5f3 	sdiv	r5, r5, r3
 8013524:	fb15 f503 	smulbb	r5, r5, r3
 8013528:	b2ad      	uxth	r5, r5
 801352a:	b907      	cbnz	r7, 801352e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801352c:	b16c      	cbz	r4, 801354a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801352e:	fb04 7305 	mla	r3, r4, r5, r7
 8013532:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8013534:	ebaa 0a04 	sub.w	sl, sl, r4
 8013538:	fb08 f303 	mul.w	r3, r8, r3
 801353c:	fa1f fa8a 	uxth.w	sl, sl
 8013540:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8013544:	f003 0407 	and.w	r4, r3, #7
 8013548:	9226      	str	r2, [sp, #152]	; 0x98
 801354a:	4649      	mov	r1, r9
 801354c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801354e:	f7ff ff2f 	bl	80133b0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8013552:	4649      	mov	r1, r9
 8013554:	4683      	mov	fp, r0
 8013556:	980d      	ldr	r0, [sp, #52]	; 0x34
 8013558:	f7ff ff46 	bl	80133e8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801355c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801355e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013560:	4681      	mov	r9, r0
 8013562:	1a9b      	subs	r3, r3, r2
 8013564:	459a      	cmp	sl, r3
 8013566:	bfa8      	it	ge
 8013568:	469a      	movge	sl, r3
 801356a:	f1ba 0f00 	cmp.w	sl, #0
 801356e:	f340 80f9 	ble.w	8013764 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8013572:	1bf6      	subs	r6, r6, r7
 8013574:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013576:	1b9e      	subs	r6, r3, r6
 8013578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801357a:	429e      	cmp	r6, r3
 801357c:	bfd4      	ite	le
 801357e:	ebc7 0706 	rsble	r7, r7, r6
 8013582:	ebc7 0703 	rsbgt	r7, r7, r3
 8013586:	2f00      	cmp	r7, #0
 8013588:	f340 80ec 	ble.w	8013764 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801358c:	1bed      	subs	r5, r5, r7
 801358e:	fb08 f305 	mul.w	r3, r8, r5
 8013592:	930d      	str	r3, [sp, #52]	; 0x34
 8013594:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8013596:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801359a:	930e      	str	r3, [sp, #56]	; 0x38
 801359c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801359e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80135a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80135a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80135a6:	b2db      	uxtb	r3, r3
 80135a8:	9310      	str	r3, [sp, #64]	; 0x40
 80135aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	f040 80de 	bne.w	801376e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34e>
 80135b2:	4b7d      	ldr	r3, [pc, #500]	; (80137a8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 80135b4:	6818      	ldr	r0, [r3, #0]
 80135b6:	6803      	ldr	r3, [r0, #0]
 80135b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80135ba:	4798      	blx	r3
 80135bc:	2301      	movs	r3, #1
 80135be:	4a7b      	ldr	r2, [pc, #492]	; (80137ac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 80135c0:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 80135c4:	fb07 9b1b 	mls	fp, r7, fp, r9
 80135c8:	fa03 f308 	lsl.w	r3, r3, r8
 80135cc:	8811      	ldrh	r1, [r2, #0]
 80135ce:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 80135d2:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 80135d6:	3b01      	subs	r3, #1
 80135d8:	fb06 bb07 	mla	fp, r6, r7, fp
 80135dc:	b2db      	uxtb	r3, r3
 80135de:	930a      	str	r3, [sp, #40]	; 0x28
 80135e0:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 80135e4:	fb01 2303 	mla	r3, r1, r3, r2
 80135e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80135ec:	18c3      	adds	r3, r0, r3
 80135ee:	9309      	str	r3, [sp, #36]	; 0x24
 80135f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80135f2:	781a      	ldrb	r2, [r3, #0]
 80135f4:	4122      	asrs	r2, r4
 80135f6:	b2d2      	uxtb	r2, r2
 80135f8:	f11a 3aff 	adds.w	sl, sl, #4294967295
 80135fc:	f0c0 80d8 	bcc.w	80137b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8013600:	46be      	mov	lr, r7
 8013602:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013604:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8013608:	f0c0 80ba 	bcc.w	8013780 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x360>
 801360c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801360e:	4013      	ands	r3, r2
 8013610:	d041      	beq.n	8013696 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 8013612:	20ff      	movs	r0, #255	; 0xff
 8013614:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8013616:	fb90 f5f5 	sdiv	r5, r0, r5
 801361a:	436b      	muls	r3, r5
 801361c:	2bfe      	cmp	r3, #254	; 0xfe
 801361e:	dd03      	ble.n	8013628 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 8013620:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013622:	4285      	cmp	r5, r0
 8013624:	f000 80a5 	beq.w	8013772 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 8013628:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801362a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801362c:	fb15 f303 	smulbb	r3, r5, r3
 8013630:	b29b      	uxth	r3, r3
 8013632:	1c5d      	adds	r5, r3, #1
 8013634:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8013638:	780d      	ldrb	r5, [r1, #0]
 801363a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801363e:	fa1f fc83 	uxth.w	ip, r3
 8013642:	43db      	mvns	r3, r3
 8013644:	fb10 f90c 	smulbb	r9, r0, ip
 8013648:	b2db      	uxtb	r3, r3
 801364a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801364c:	fb05 9503 	mla	r5, r5, r3, r9
 8013650:	b2ad      	uxth	r5, r5
 8013652:	f105 0901 	add.w	r9, r5, #1
 8013656:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801365a:	fb10 f90c 	smulbb	r9, r0, ip
 801365e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013660:	122d      	asrs	r5, r5, #8
 8013662:	fb10 fc0c 	smulbb	ip, r0, ip
 8013666:	700d      	strb	r5, [r1, #0]
 8013668:	784d      	ldrb	r5, [r1, #1]
 801366a:	fb05 9503 	mla	r5, r5, r3, r9
 801366e:	b2ad      	uxth	r5, r5
 8013670:	f105 0901 	add.w	r9, r5, #1
 8013674:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8013678:	122d      	asrs	r5, r5, #8
 801367a:	704d      	strb	r5, [r1, #1]
 801367c:	788d      	ldrb	r5, [r1, #2]
 801367e:	fb05 cc03 	mla	ip, r5, r3, ip
 8013682:	fa1f fc8c 	uxth.w	ip, ip
 8013686:	f10c 0301 	add.w	r3, ip, #1
 801368a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801368e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8013692:	f881 c002 	strb.w	ip, [r1, #2]
 8013696:	4444      	add	r4, r8
 8013698:	4431      	add	r1, r6
 801369a:	b2a4      	uxth	r4, r4
 801369c:	2c07      	cmp	r4, #7
 801369e:	bf89      	itett	hi
 80136a0:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 80136a2:	fa42 f208 	asrls.w	r2, r2, r8
 80136a6:	2400      	movhi	r4, #0
 80136a8:	785a      	ldrbhi	r2, [r3, #1]
 80136aa:	bf8a      	itet	hi
 80136ac:	3301      	addhi	r3, #1
 80136ae:	b2d2      	uxtbls	r2, r2
 80136b0:	9326      	strhi	r3, [sp, #152]	; 0x98
 80136b2:	e7a7      	b.n	8013604 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e4>
 80136b4:	441e      	add	r6, r3
 80136b6:	b236      	sxth	r6, r6
 80136b8:	e6ec      	b.n	8013494 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80136ba:	f1b9 0f01 	cmp.w	r9, #1
 80136be:	f47f af27 	bne.w	8013510 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80136c2:	f1bb 0f01 	cmp.w	fp, #1
 80136c6:	f47f af23 	bne.w	8013510 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80136ca:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 80137a8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 80136ce:	f8db 0000 	ldr.w	r0, [fp]
 80136d2:	6803      	ldr	r3, [r0, #0]
 80136d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136d6:	4798      	blx	r3
 80136d8:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 80136dc:	465a      	mov	r2, fp
 80136de:	d006      	beq.n	80136ee <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 80136e0:	f1b8 0f04 	cmp.w	r8, #4
 80136e4:	d141      	bne.n	801376a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34a>
 80136e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80136e8:	3300      	adds	r3, #0
 80136ea:	bf18      	it	ne
 80136ec:	2301      	movne	r3, #1
 80136ee:	0580      	lsls	r0, r0, #22
 80136f0:	d567      	bpl.n	80137c2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 80136f2:	f1b8 0f08 	cmp.w	r8, #8
 80136f6:	d164      	bne.n	80137c2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	bf0c      	ite	eq
 80136fc:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8013700:	f44f 7180 	movne.w	r1, #256	; 0x100
 8013704:	2f00      	cmp	r7, #0
 8013706:	f47f af03 	bne.w	8013510 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801370a:	2c00      	cmp	r4, #0
 801370c:	f47f af00 	bne.w	8013510 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8013710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013712:	9810      	ldr	r0, [sp, #64]	; 0x40
 8013714:	18f3      	adds	r3, r6, r3
 8013716:	4283      	cmp	r3, r0
 8013718:	f73f aefa 	bgt.w	8013510 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801371c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801371e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013720:	4403      	add	r3, r0
 8013722:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8013724:	4283      	cmp	r3, r0
 8013726:	f73f aef3 	bgt.w	8013510 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801372a:	f1b8 0f08 	cmp.w	r8, #8
 801372e:	6810      	ldr	r0, [r2, #0]
 8013730:	f04f 0600 	mov.w	r6, #0
 8013734:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8013738:	bf18      	it	ne
 801373a:	3501      	addne	r5, #1
 801373c:	6804      	ldr	r4, [r0, #0]
 801373e:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8013742:	bf18      	it	ne
 8013744:	f025 0501 	bicne.w	r5, r5, #1
 8013748:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801374c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801374e:	bf18      	it	ne
 8013750:	b2ad      	uxthne	r5, r5
 8013752:	9104      	str	r1, [sp, #16]
 8013754:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8013756:	e9cd 5a00 	strd	r5, sl, [sp]
 801375a:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801375e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8013760:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8013762:	47a0      	blx	r4
 8013764:	b017      	add	sp, #92	; 0x5c
 8013766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801376a:	2300      	movs	r3, #0
 801376c:	e7bf      	b.n	80136ee <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801376e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013770:	e724      	b.n	80135bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19c>
 8013772:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013774:	700b      	strb	r3, [r1, #0]
 8013776:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013778:	704b      	strb	r3, [r1, #1]
 801377a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801377c:	708b      	strb	r3, [r1, #2]
 801377e:	e78a      	b.n	8013696 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 8013780:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013782:	b153      	cbz	r3, 801379a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 8013784:	441c      	add	r4, r3
 8013786:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013788:	b2a4      	uxth	r4, r4
 801378a:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801378e:	f004 0407 	and.w	r4, r4, #7
 8013792:	781a      	ldrb	r2, [r3, #0]
 8013794:	9326      	str	r3, [sp, #152]	; 0x98
 8013796:	4122      	asrs	r2, r4
 8013798:	b2d2      	uxtb	r2, r2
 801379a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801379c:	445b      	add	r3, fp
 801379e:	9309      	str	r3, [sp, #36]	; 0x24
 80137a0:	e72a      	b.n	80135f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d8>
 80137a2:	bf00      	nop
 80137a4:	2400688c 	.word	0x2400688c
 80137a8:	24006894 	.word	0x24006894
 80137ac:	2400688e 	.word	0x2400688e
 80137b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d1d6      	bne.n	8013764 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 80137b6:	4b06      	ldr	r3, [pc, #24]	; (80137d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 80137b8:	6818      	ldr	r0, [r3, #0]
 80137ba:	6803      	ldr	r3, [r0, #0]
 80137bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137be:	4798      	blx	r3
 80137c0:	e7d0      	b.n	8013764 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	f43f aea4 	beq.w	8013510 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80137c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80137cc:	e79a      	b.n	8013704 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 80137ce:	bf00      	nop
 80137d0:	24006894 	.word	0x24006894

080137d4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80137d4:	b538      	push	{r3, r4, r5, lr}
 80137d6:	4c15      	ldr	r4, [pc, #84]	; (801382c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80137d8:	4605      	mov	r5, r0
 80137da:	7823      	ldrb	r3, [r4, #0]
 80137dc:	f3bf 8f5b 	dmb	ish
 80137e0:	07da      	lsls	r2, r3, #31
 80137e2:	d40b      	bmi.n	80137fc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80137e4:	4620      	mov	r0, r4
 80137e6:	f005 fb1c 	bl	8018e22 <__cxa_guard_acquire>
 80137ea:	b138      	cbz	r0, 80137fc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80137ec:	4620      	mov	r0, r4
 80137ee:	f005 fb24 	bl	8018e3a <__cxa_guard_release>
 80137f2:	4a0f      	ldr	r2, [pc, #60]	; (8013830 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80137f4:	490f      	ldr	r1, [pc, #60]	; (8013834 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80137f6:	4810      	ldr	r0, [pc, #64]	; (8013838 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80137f8:	f005 fb0c 	bl	8018e14 <__aeabi_atexit>
 80137fc:	4c0f      	ldr	r4, [pc, #60]	; (801383c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80137fe:	7823      	ldrb	r3, [r4, #0]
 8013800:	f3bf 8f5b 	dmb	ish
 8013804:	07db      	lsls	r3, r3, #31
 8013806:	d40b      	bmi.n	8013820 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8013808:	4620      	mov	r0, r4
 801380a:	f005 fb0a 	bl	8018e22 <__cxa_guard_acquire>
 801380e:	b138      	cbz	r0, 8013820 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8013810:	4620      	mov	r0, r4
 8013812:	f005 fb12 	bl	8018e3a <__cxa_guard_release>
 8013816:	4a06      	ldr	r2, [pc, #24]	; (8013830 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8013818:	4909      	ldr	r1, [pc, #36]	; (8013840 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801381a:	480a      	ldr	r0, [pc, #40]	; (8013844 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801381c:	f005 fafa 	bl	8018e14 <__aeabi_atexit>
 8013820:	4b05      	ldr	r3, [pc, #20]	; (8013838 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8013822:	612b      	str	r3, [r5, #16]
 8013824:	4b07      	ldr	r3, [pc, #28]	; (8013844 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8013826:	616b      	str	r3, [r5, #20]
 8013828:	bd38      	pop	{r3, r4, r5, pc}
 801382a:	bf00      	nop
 801382c:	24006960 	.word	0x24006960
 8013830:	24000000 	.word	0x24000000
 8013834:	0801224d 	.word	0x0801224d
 8013838:	240000c4 	.word	0x240000c4
 801383c:	24006964 	.word	0x24006964
 8013840:	0801224b 	.word	0x0801224b
 8013844:	240000c8 	.word	0x240000c8

08013848 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8013848:	b538      	push	{r3, r4, r5, lr}
 801384a:	4c15      	ldr	r4, [pc, #84]	; (80138a0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801384c:	4605      	mov	r5, r0
 801384e:	7823      	ldrb	r3, [r4, #0]
 8013850:	f3bf 8f5b 	dmb	ish
 8013854:	07da      	lsls	r2, r3, #31
 8013856:	d40b      	bmi.n	8013870 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8013858:	4620      	mov	r0, r4
 801385a:	f005 fae2 	bl	8018e22 <__cxa_guard_acquire>
 801385e:	b138      	cbz	r0, 8013870 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8013860:	4620      	mov	r0, r4
 8013862:	f005 faea 	bl	8018e3a <__cxa_guard_release>
 8013866:	4a0f      	ldr	r2, [pc, #60]	; (80138a4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8013868:	490f      	ldr	r1, [pc, #60]	; (80138a8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801386a:	4810      	ldr	r0, [pc, #64]	; (80138ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801386c:	f005 fad2 	bl	8018e14 <__aeabi_atexit>
 8013870:	4c0f      	ldr	r4, [pc, #60]	; (80138b0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8013872:	7823      	ldrb	r3, [r4, #0]
 8013874:	f3bf 8f5b 	dmb	ish
 8013878:	07db      	lsls	r3, r3, #31
 801387a:	d40b      	bmi.n	8013894 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801387c:	4620      	mov	r0, r4
 801387e:	f005 fad0 	bl	8018e22 <__cxa_guard_acquire>
 8013882:	b138      	cbz	r0, 8013894 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8013884:	4620      	mov	r0, r4
 8013886:	f005 fad8 	bl	8018e3a <__cxa_guard_release>
 801388a:	4a06      	ldr	r2, [pc, #24]	; (80138a4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801388c:	4909      	ldr	r1, [pc, #36]	; (80138b4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801388e:	480a      	ldr	r0, [pc, #40]	; (80138b8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8013890:	f005 fac0 	bl	8018e14 <__aeabi_atexit>
 8013894:	4b05      	ldr	r3, [pc, #20]	; (80138ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8013896:	60ab      	str	r3, [r5, #8]
 8013898:	4b07      	ldr	r3, [pc, #28]	; (80138b8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801389a:	60eb      	str	r3, [r5, #12]
 801389c:	bd38      	pop	{r3, r4, r5, pc}
 801389e:	bf00      	nop
 80138a0:	24006940 	.word	0x24006940
 80138a4:	24000000 	.word	0x24000000
 80138a8:	08012251 	.word	0x08012251
 80138ac:	240000a4 	.word	0x240000a4
 80138b0:	24006944 	.word	0x24006944
 80138b4:	0801224f 	.word	0x0801224f
 80138b8:	240000a8 	.word	0x240000a8

080138bc <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 80138bc:	b510      	push	{r4, lr}
 80138be:	4604      	mov	r4, r0
 80138c0:	f7ff ff88 	bl	80137d4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80138c4:	4620      	mov	r0, r4
 80138c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80138ca:	f7ff bfbd 	b.w	8013848 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080138d0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80138d0:	b538      	push	{r3, r4, r5, lr}
 80138d2:	4c15      	ldr	r4, [pc, #84]	; (8013928 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80138d4:	4605      	mov	r5, r0
 80138d6:	7823      	ldrb	r3, [r4, #0]
 80138d8:	f3bf 8f5b 	dmb	ish
 80138dc:	07da      	lsls	r2, r3, #31
 80138de:	d40b      	bmi.n	80138f8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80138e0:	4620      	mov	r0, r4
 80138e2:	f005 fa9e 	bl	8018e22 <__cxa_guard_acquire>
 80138e6:	b138      	cbz	r0, 80138f8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80138e8:	4620      	mov	r0, r4
 80138ea:	f005 faa6 	bl	8018e3a <__cxa_guard_release>
 80138ee:	4a0f      	ldr	r2, [pc, #60]	; (801392c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80138f0:	490f      	ldr	r1, [pc, #60]	; (8013930 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80138f2:	4810      	ldr	r0, [pc, #64]	; (8013934 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80138f4:	f005 fa8e 	bl	8018e14 <__aeabi_atexit>
 80138f8:	4c0f      	ldr	r4, [pc, #60]	; (8013938 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80138fa:	7823      	ldrb	r3, [r4, #0]
 80138fc:	f3bf 8f5b 	dmb	ish
 8013900:	07db      	lsls	r3, r3, #31
 8013902:	d40b      	bmi.n	801391c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8013904:	4620      	mov	r0, r4
 8013906:	f005 fa8c 	bl	8018e22 <__cxa_guard_acquire>
 801390a:	b138      	cbz	r0, 801391c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801390c:	4620      	mov	r0, r4
 801390e:	f005 fa94 	bl	8018e3a <__cxa_guard_release>
 8013912:	4a06      	ldr	r2, [pc, #24]	; (801392c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8013914:	4909      	ldr	r1, [pc, #36]	; (801393c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8013916:	480a      	ldr	r0, [pc, #40]	; (8013940 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8013918:	f005 fa7c 	bl	8018e14 <__aeabi_atexit>
 801391c:	4b05      	ldr	r3, [pc, #20]	; (8013934 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801391e:	622b      	str	r3, [r5, #32]
 8013920:	4b07      	ldr	r3, [pc, #28]	; (8013940 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8013922:	626b      	str	r3, [r5, #36]	; 0x24
 8013924:	bd38      	pop	{r3, r4, r5, pc}
 8013926:	bf00      	nop
 8013928:	24006968 	.word	0x24006968
 801392c:	24000000 	.word	0x24000000
 8013930:	08012245 	.word	0x08012245
 8013934:	240000cc 	.word	0x240000cc
 8013938:	2400696c 	.word	0x2400696c
 801393c:	08012243 	.word	0x08012243
 8013940:	240000d0 	.word	0x240000d0

08013944 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8013944:	b538      	push	{r3, r4, r5, lr}
 8013946:	4c15      	ldr	r4, [pc, #84]	; (801399c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8013948:	4605      	mov	r5, r0
 801394a:	7823      	ldrb	r3, [r4, #0]
 801394c:	f3bf 8f5b 	dmb	ish
 8013950:	07da      	lsls	r2, r3, #31
 8013952:	d40b      	bmi.n	801396c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8013954:	4620      	mov	r0, r4
 8013956:	f005 fa64 	bl	8018e22 <__cxa_guard_acquire>
 801395a:	b138      	cbz	r0, 801396c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801395c:	4620      	mov	r0, r4
 801395e:	f005 fa6c 	bl	8018e3a <__cxa_guard_release>
 8013962:	4a0f      	ldr	r2, [pc, #60]	; (80139a0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8013964:	490f      	ldr	r1, [pc, #60]	; (80139a4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8013966:	4810      	ldr	r0, [pc, #64]	; (80139a8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8013968:	f005 fa54 	bl	8018e14 <__aeabi_atexit>
 801396c:	4c0f      	ldr	r4, [pc, #60]	; (80139ac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801396e:	7823      	ldrb	r3, [r4, #0]
 8013970:	f3bf 8f5b 	dmb	ish
 8013974:	07db      	lsls	r3, r3, #31
 8013976:	d40b      	bmi.n	8013990 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8013978:	4620      	mov	r0, r4
 801397a:	f005 fa52 	bl	8018e22 <__cxa_guard_acquire>
 801397e:	b138      	cbz	r0, 8013990 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8013980:	4620      	mov	r0, r4
 8013982:	f005 fa5a 	bl	8018e3a <__cxa_guard_release>
 8013986:	4a06      	ldr	r2, [pc, #24]	; (80139a0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8013988:	4909      	ldr	r1, [pc, #36]	; (80139b0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801398a:	480a      	ldr	r0, [pc, #40]	; (80139b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801398c:	f005 fa42 	bl	8018e14 <__aeabi_atexit>
 8013990:	4b05      	ldr	r3, [pc, #20]	; (80139a8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8013992:	61ab      	str	r3, [r5, #24]
 8013994:	4b07      	ldr	r3, [pc, #28]	; (80139b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8013996:	61eb      	str	r3, [r5, #28]
 8013998:	bd38      	pop	{r3, r4, r5, pc}
 801399a:	bf00      	nop
 801399c:	24006948 	.word	0x24006948
 80139a0:	24000000 	.word	0x24000000
 80139a4:	08012249 	.word	0x08012249
 80139a8:	240000ac 	.word	0x240000ac
 80139ac:	2400694c 	.word	0x2400694c
 80139b0:	08012247 	.word	0x08012247
 80139b4:	240000b0 	.word	0x240000b0

080139b8 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 80139b8:	b510      	push	{r4, lr}
 80139ba:	4604      	mov	r4, r0
 80139bc:	f7ff ff88 	bl	80138d0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80139c0:	4620      	mov	r0, r4
 80139c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80139c6:	f7ff bfbd 	b.w	8013944 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080139cc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 80139cc:	b538      	push	{r3, r4, r5, lr}
 80139ce:	4c15      	ldr	r4, [pc, #84]	; (8013a24 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 80139d0:	4605      	mov	r5, r0
 80139d2:	7823      	ldrb	r3, [r4, #0]
 80139d4:	f3bf 8f5b 	dmb	ish
 80139d8:	07da      	lsls	r2, r3, #31
 80139da:	d40b      	bmi.n	80139f4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80139dc:	4620      	mov	r0, r4
 80139de:	f005 fa20 	bl	8018e22 <__cxa_guard_acquire>
 80139e2:	b138      	cbz	r0, 80139f4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80139e4:	4620      	mov	r0, r4
 80139e6:	f005 fa28 	bl	8018e3a <__cxa_guard_release>
 80139ea:	4a0f      	ldr	r2, [pc, #60]	; (8013a28 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 80139ec:	490f      	ldr	r1, [pc, #60]	; (8013a2c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 80139ee:	4810      	ldr	r0, [pc, #64]	; (8013a30 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 80139f0:	f005 fa10 	bl	8018e14 <__aeabi_atexit>
 80139f4:	4c0f      	ldr	r4, [pc, #60]	; (8013a34 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 80139f6:	7823      	ldrb	r3, [r4, #0]
 80139f8:	f3bf 8f5b 	dmb	ish
 80139fc:	07db      	lsls	r3, r3, #31
 80139fe:	d40b      	bmi.n	8013a18 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8013a00:	4620      	mov	r0, r4
 8013a02:	f005 fa0e 	bl	8018e22 <__cxa_guard_acquire>
 8013a06:	b138      	cbz	r0, 8013a18 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8013a08:	4620      	mov	r0, r4
 8013a0a:	f005 fa16 	bl	8018e3a <__cxa_guard_release>
 8013a0e:	4a06      	ldr	r2, [pc, #24]	; (8013a28 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8013a10:	4909      	ldr	r1, [pc, #36]	; (8013a38 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8013a12:	480a      	ldr	r0, [pc, #40]	; (8013a3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8013a14:	f005 f9fe 	bl	8018e14 <__aeabi_atexit>
 8013a18:	4b05      	ldr	r3, [pc, #20]	; (8013a30 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8013a1a:	632b      	str	r3, [r5, #48]	; 0x30
 8013a1c:	4b07      	ldr	r3, [pc, #28]	; (8013a3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8013a1e:	636b      	str	r3, [r5, #52]	; 0x34
 8013a20:	bd38      	pop	{r3, r4, r5, pc}
 8013a22:	bf00      	nop
 8013a24:	24006950 	.word	0x24006950
 8013a28:	24000000 	.word	0x24000000
 8013a2c:	0801223d 	.word	0x0801223d
 8013a30:	240000b4 	.word	0x240000b4
 8013a34:	24006954 	.word	0x24006954
 8013a38:	0801223b 	.word	0x0801223b
 8013a3c:	240000b8 	.word	0x240000b8

08013a40 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8013a40:	b538      	push	{r3, r4, r5, lr}
 8013a42:	4c15      	ldr	r4, [pc, #84]	; (8013a98 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8013a44:	4605      	mov	r5, r0
 8013a46:	7823      	ldrb	r3, [r4, #0]
 8013a48:	f3bf 8f5b 	dmb	ish
 8013a4c:	07da      	lsls	r2, r3, #31
 8013a4e:	d40b      	bmi.n	8013a68 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8013a50:	4620      	mov	r0, r4
 8013a52:	f005 f9e6 	bl	8018e22 <__cxa_guard_acquire>
 8013a56:	b138      	cbz	r0, 8013a68 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8013a58:	4620      	mov	r0, r4
 8013a5a:	f005 f9ee 	bl	8018e3a <__cxa_guard_release>
 8013a5e:	4a0f      	ldr	r2, [pc, #60]	; (8013a9c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8013a60:	490f      	ldr	r1, [pc, #60]	; (8013aa0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8013a62:	4810      	ldr	r0, [pc, #64]	; (8013aa4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8013a64:	f005 f9d6 	bl	8018e14 <__aeabi_atexit>
 8013a68:	4c0f      	ldr	r4, [pc, #60]	; (8013aa8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8013a6a:	7823      	ldrb	r3, [r4, #0]
 8013a6c:	f3bf 8f5b 	dmb	ish
 8013a70:	07db      	lsls	r3, r3, #31
 8013a72:	d40b      	bmi.n	8013a8c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8013a74:	4620      	mov	r0, r4
 8013a76:	f005 f9d4 	bl	8018e22 <__cxa_guard_acquire>
 8013a7a:	b138      	cbz	r0, 8013a8c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8013a7c:	4620      	mov	r0, r4
 8013a7e:	f005 f9dc 	bl	8018e3a <__cxa_guard_release>
 8013a82:	4a06      	ldr	r2, [pc, #24]	; (8013a9c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8013a84:	4909      	ldr	r1, [pc, #36]	; (8013aac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8013a86:	480a      	ldr	r0, [pc, #40]	; (8013ab0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8013a88:	f005 f9c4 	bl	8018e14 <__aeabi_atexit>
 8013a8c:	4b05      	ldr	r3, [pc, #20]	; (8013aa4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8013a8e:	62ab      	str	r3, [r5, #40]	; 0x28
 8013a90:	4b07      	ldr	r3, [pc, #28]	; (8013ab0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8013a92:	62eb      	str	r3, [r5, #44]	; 0x2c
 8013a94:	bd38      	pop	{r3, r4, r5, pc}
 8013a96:	bf00      	nop
 8013a98:	24006928 	.word	0x24006928
 8013a9c:	24000000 	.word	0x24000000
 8013aa0:	08012241 	.word	0x08012241
 8013aa4:	2400008c 	.word	0x2400008c
 8013aa8:	2400692c 	.word	0x2400692c
 8013aac:	0801223f 	.word	0x0801223f
 8013ab0:	24000090 	.word	0x24000090

08013ab4 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8013ab4:	b510      	push	{r4, lr}
 8013ab6:	4604      	mov	r4, r0
 8013ab8:	f7ff ff88 	bl	80139cc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8013abc:	4620      	mov	r0, r4
 8013abe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ac2:	f7ff bfbd 	b.w	8013a40 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08013ac8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8013ac8:	b538      	push	{r3, r4, r5, lr}
 8013aca:	4c15      	ldr	r4, [pc, #84]	; (8013b20 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8013acc:	4605      	mov	r5, r0
 8013ace:	7823      	ldrb	r3, [r4, #0]
 8013ad0:	f3bf 8f5b 	dmb	ish
 8013ad4:	07da      	lsls	r2, r3, #31
 8013ad6:	d40b      	bmi.n	8013af0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8013ad8:	4620      	mov	r0, r4
 8013ada:	f005 f9a2 	bl	8018e22 <__cxa_guard_acquire>
 8013ade:	b138      	cbz	r0, 8013af0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8013ae0:	4620      	mov	r0, r4
 8013ae2:	f005 f9aa 	bl	8018e3a <__cxa_guard_release>
 8013ae6:	4a0f      	ldr	r2, [pc, #60]	; (8013b24 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8013ae8:	490f      	ldr	r1, [pc, #60]	; (8013b28 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8013aea:	4810      	ldr	r0, [pc, #64]	; (8013b2c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8013aec:	f005 f992 	bl	8018e14 <__aeabi_atexit>
 8013af0:	4c0f      	ldr	r4, [pc, #60]	; (8013b30 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8013af2:	7823      	ldrb	r3, [r4, #0]
 8013af4:	f3bf 8f5b 	dmb	ish
 8013af8:	07db      	lsls	r3, r3, #31
 8013afa:	d40b      	bmi.n	8013b14 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8013afc:	4620      	mov	r0, r4
 8013afe:	f005 f990 	bl	8018e22 <__cxa_guard_acquire>
 8013b02:	b138      	cbz	r0, 8013b14 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8013b04:	4620      	mov	r0, r4
 8013b06:	f005 f998 	bl	8018e3a <__cxa_guard_release>
 8013b0a:	4a06      	ldr	r2, [pc, #24]	; (8013b24 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8013b0c:	4909      	ldr	r1, [pc, #36]	; (8013b34 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8013b0e:	480a      	ldr	r0, [pc, #40]	; (8013b38 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8013b10:	f005 f980 	bl	8018e14 <__aeabi_atexit>
 8013b14:	4b05      	ldr	r3, [pc, #20]	; (8013b2c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8013b16:	642b      	str	r3, [r5, #64]	; 0x40
 8013b18:	4b07      	ldr	r3, [pc, #28]	; (8013b38 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8013b1a:	646b      	str	r3, [r5, #68]	; 0x44
 8013b1c:	bd38      	pop	{r3, r4, r5, pc}
 8013b1e:	bf00      	nop
 8013b20:	24006958 	.word	0x24006958
 8013b24:	24000000 	.word	0x24000000
 8013b28:	08012235 	.word	0x08012235
 8013b2c:	240000bc 	.word	0x240000bc
 8013b30:	2400695c 	.word	0x2400695c
 8013b34:	08012233 	.word	0x08012233
 8013b38:	240000c0 	.word	0x240000c0

08013b3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8013b3c:	b538      	push	{r3, r4, r5, lr}
 8013b3e:	4c15      	ldr	r4, [pc, #84]	; (8013b94 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8013b40:	4605      	mov	r5, r0
 8013b42:	7823      	ldrb	r3, [r4, #0]
 8013b44:	f3bf 8f5b 	dmb	ish
 8013b48:	07da      	lsls	r2, r3, #31
 8013b4a:	d40b      	bmi.n	8013b64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8013b4c:	4620      	mov	r0, r4
 8013b4e:	f005 f968 	bl	8018e22 <__cxa_guard_acquire>
 8013b52:	b138      	cbz	r0, 8013b64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8013b54:	4620      	mov	r0, r4
 8013b56:	f005 f970 	bl	8018e3a <__cxa_guard_release>
 8013b5a:	4a0f      	ldr	r2, [pc, #60]	; (8013b98 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8013b5c:	490f      	ldr	r1, [pc, #60]	; (8013b9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8013b5e:	4810      	ldr	r0, [pc, #64]	; (8013ba0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8013b60:	f005 f958 	bl	8018e14 <__aeabi_atexit>
 8013b64:	4c0f      	ldr	r4, [pc, #60]	; (8013ba4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8013b66:	7823      	ldrb	r3, [r4, #0]
 8013b68:	f3bf 8f5b 	dmb	ish
 8013b6c:	07db      	lsls	r3, r3, #31
 8013b6e:	d40b      	bmi.n	8013b88 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8013b70:	4620      	mov	r0, r4
 8013b72:	f005 f956 	bl	8018e22 <__cxa_guard_acquire>
 8013b76:	b138      	cbz	r0, 8013b88 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8013b78:	4620      	mov	r0, r4
 8013b7a:	f005 f95e 	bl	8018e3a <__cxa_guard_release>
 8013b7e:	4a06      	ldr	r2, [pc, #24]	; (8013b98 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8013b80:	4909      	ldr	r1, [pc, #36]	; (8013ba8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8013b82:	480a      	ldr	r0, [pc, #40]	; (8013bac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8013b84:	f005 f946 	bl	8018e14 <__aeabi_atexit>
 8013b88:	4b05      	ldr	r3, [pc, #20]	; (8013ba0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8013b8a:	63ab      	str	r3, [r5, #56]	; 0x38
 8013b8c:	4b07      	ldr	r3, [pc, #28]	; (8013bac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8013b8e:	63eb      	str	r3, [r5, #60]	; 0x3c
 8013b90:	bd38      	pop	{r3, r4, r5, pc}
 8013b92:	bf00      	nop
 8013b94:	24006938 	.word	0x24006938
 8013b98:	24000000 	.word	0x24000000
 8013b9c:	08012239 	.word	0x08012239
 8013ba0:	2400009c 	.word	0x2400009c
 8013ba4:	2400693c 	.word	0x2400693c
 8013ba8:	08012237 	.word	0x08012237
 8013bac:	240000a0 	.word	0x240000a0

08013bb0 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8013bb0:	b510      	push	{r4, lr}
 8013bb2:	4604      	mov	r4, r0
 8013bb4:	f7ff ff88 	bl	8013ac8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8013bb8:	4620      	mov	r0, r4
 8013bba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013bbe:	f7ff bfbd 	b.w	8013b3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08013bc4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8013bc4:	b538      	push	{r3, r4, r5, lr}
 8013bc6:	4c15      	ldr	r4, [pc, #84]	; (8013c1c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8013bc8:	4605      	mov	r5, r0
 8013bca:	7823      	ldrb	r3, [r4, #0]
 8013bcc:	f3bf 8f5b 	dmb	ish
 8013bd0:	07da      	lsls	r2, r3, #31
 8013bd2:	d40b      	bmi.n	8013bec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8013bd4:	4620      	mov	r0, r4
 8013bd6:	f005 f924 	bl	8018e22 <__cxa_guard_acquire>
 8013bda:	b138      	cbz	r0, 8013bec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8013bdc:	4620      	mov	r0, r4
 8013bde:	f005 f92c 	bl	8018e3a <__cxa_guard_release>
 8013be2:	4a0f      	ldr	r2, [pc, #60]	; (8013c20 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8013be4:	490f      	ldr	r1, [pc, #60]	; (8013c24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8013be6:	4810      	ldr	r0, [pc, #64]	; (8013c28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8013be8:	f005 f914 	bl	8018e14 <__aeabi_atexit>
 8013bec:	4c0f      	ldr	r4, [pc, #60]	; (8013c2c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8013bee:	7823      	ldrb	r3, [r4, #0]
 8013bf0:	f3bf 8f5b 	dmb	ish
 8013bf4:	07db      	lsls	r3, r3, #31
 8013bf6:	d40b      	bmi.n	8013c10 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8013bf8:	4620      	mov	r0, r4
 8013bfa:	f005 f912 	bl	8018e22 <__cxa_guard_acquire>
 8013bfe:	b138      	cbz	r0, 8013c10 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8013c00:	4620      	mov	r0, r4
 8013c02:	f005 f91a 	bl	8018e3a <__cxa_guard_release>
 8013c06:	4a06      	ldr	r2, [pc, #24]	; (8013c20 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8013c08:	4909      	ldr	r1, [pc, #36]	; (8013c30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8013c0a:	480a      	ldr	r0, [pc, #40]	; (8013c34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8013c0c:	f005 f902 	bl	8018e14 <__aeabi_atexit>
 8013c10:	4b05      	ldr	r3, [pc, #20]	; (8013c28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8013c12:	652b      	str	r3, [r5, #80]	; 0x50
 8013c14:	4b07      	ldr	r3, [pc, #28]	; (8013c34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8013c16:	656b      	str	r3, [r5, #84]	; 0x54
 8013c18:	bd38      	pop	{r3, r4, r5, pc}
 8013c1a:	bf00      	nop
 8013c1c:	24006930 	.word	0x24006930
 8013c20:	24000000 	.word	0x24000000
 8013c24:	0801222d 	.word	0x0801222d
 8013c28:	24000094 	.word	0x24000094
 8013c2c:	24006934 	.word	0x24006934
 8013c30:	0801222b 	.word	0x0801222b
 8013c34:	24000098 	.word	0x24000098

08013c38 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8013c38:	b538      	push	{r3, r4, r5, lr}
 8013c3a:	4c15      	ldr	r4, [pc, #84]	; (8013c90 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8013c3c:	4605      	mov	r5, r0
 8013c3e:	7823      	ldrb	r3, [r4, #0]
 8013c40:	f3bf 8f5b 	dmb	ish
 8013c44:	07da      	lsls	r2, r3, #31
 8013c46:	d40b      	bmi.n	8013c60 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8013c48:	4620      	mov	r0, r4
 8013c4a:	f005 f8ea 	bl	8018e22 <__cxa_guard_acquire>
 8013c4e:	b138      	cbz	r0, 8013c60 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8013c50:	4620      	mov	r0, r4
 8013c52:	f005 f8f2 	bl	8018e3a <__cxa_guard_release>
 8013c56:	4a0f      	ldr	r2, [pc, #60]	; (8013c94 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8013c58:	490f      	ldr	r1, [pc, #60]	; (8013c98 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8013c5a:	4810      	ldr	r0, [pc, #64]	; (8013c9c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8013c5c:	f005 f8da 	bl	8018e14 <__aeabi_atexit>
 8013c60:	4c0f      	ldr	r4, [pc, #60]	; (8013ca0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8013c62:	7823      	ldrb	r3, [r4, #0]
 8013c64:	f3bf 8f5b 	dmb	ish
 8013c68:	07db      	lsls	r3, r3, #31
 8013c6a:	d40b      	bmi.n	8013c84 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8013c6c:	4620      	mov	r0, r4
 8013c6e:	f005 f8d8 	bl	8018e22 <__cxa_guard_acquire>
 8013c72:	b138      	cbz	r0, 8013c84 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8013c74:	4620      	mov	r0, r4
 8013c76:	f005 f8e0 	bl	8018e3a <__cxa_guard_release>
 8013c7a:	4a06      	ldr	r2, [pc, #24]	; (8013c94 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8013c7c:	4909      	ldr	r1, [pc, #36]	; (8013ca4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8013c7e:	480a      	ldr	r0, [pc, #40]	; (8013ca8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8013c80:	f005 f8c8 	bl	8018e14 <__aeabi_atexit>
 8013c84:	4b05      	ldr	r3, [pc, #20]	; (8013c9c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8013c86:	64ab      	str	r3, [r5, #72]	; 0x48
 8013c88:	4b07      	ldr	r3, [pc, #28]	; (8013ca8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8013c8a:	64eb      	str	r3, [r5, #76]	; 0x4c
 8013c8c:	bd38      	pop	{r3, r4, r5, pc}
 8013c8e:	bf00      	nop
 8013c90:	24006920 	.word	0x24006920
 8013c94:	24000000 	.word	0x24000000
 8013c98:	08012231 	.word	0x08012231
 8013c9c:	24000084 	.word	0x24000084
 8013ca0:	24006924 	.word	0x24006924
 8013ca4:	0801222f 	.word	0x0801222f
 8013ca8:	24000088 	.word	0x24000088

08013cac <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8013cac:	b510      	push	{r4, lr}
 8013cae:	4604      	mov	r4, r0
 8013cb0:	f7ff ff88 	bl	8013bc4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8013cb4:	4620      	mov	r0, r4
 8013cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013cba:	f7ff bfbd 	b.w	8013c38 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08013cbe <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8013cbe:	b510      	push	{r4, lr}
 8013cc0:	4604      	mov	r4, r0
 8013cc2:	f7ff fff3 	bl	8013cac <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8013cc6:	4620      	mov	r0, r4
 8013cc8:	f7ff ff72 	bl	8013bb0 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8013ccc:	4620      	mov	r0, r4
 8013cce:	f7ff fe73 	bl	80139b8 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8013cd2:	4620      	mov	r0, r4
 8013cd4:	f7ff fdf2 	bl	80138bc <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8013cd8:	4620      	mov	r0, r4
 8013cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013cde:	f7ff bee9 	b.w	8013ab4 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08013ce4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8013ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ce8:	b087      	sub	sp, #28
 8013cea:	7888      	ldrb	r0, [r1, #2]
 8013cec:	4616      	mov	r6, r2
 8013cee:	9001      	str	r0, [sp, #4]
 8013cf0:	7848      	ldrb	r0, [r1, #1]
 8013cf2:	9100      	str	r1, [sp, #0]
 8013cf4:	9002      	str	r0, [sp, #8]
 8013cf6:	7808      	ldrb	r0, [r1, #0]
 8013cf8:	9901      	ldr	r1, [sp, #4]
 8013cfa:	9003      	str	r0, [sp, #12]
 8013cfc:	9802      	ldr	r0, [sp, #8]
 8013cfe:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 8013d02:	0200      	lsls	r0, r0, #8
 8013d04:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8013d08:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8013d0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8013d10:	9903      	ldr	r1, [sp, #12]
 8013d12:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8013d16:	4308      	orrs	r0, r1
 8013d18:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8013d1c:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 8013d20:	9005      	str	r0, [sp, #20]
 8013d22:	fb05 ca0e 	mla	sl, r5, lr, ip
 8013d26:	2d00      	cmp	r5, #0
 8013d28:	eb06 080a 	add.w	r8, r6, sl
 8013d2c:	db4a      	blt.n	8013dc4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 8013d2e:	45a9      	cmp	r9, r5
 8013d30:	dd48      	ble.n	8013dc4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 8013d32:	f1bc 0f00 	cmp.w	ip, #0
 8013d36:	db43      	blt.n	8013dc0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 8013d38:	45e6      	cmp	lr, ip
 8013d3a:	dd41      	ble.n	8013dc0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 8013d3c:	f816 600a 	ldrb.w	r6, [r6, sl]
 8013d40:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8013d44:	441e      	add	r6, r3
 8013d46:	f11c 0001 	adds.w	r0, ip, #1
 8013d4a:	d43e      	bmi.n	8013dca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8013d4c:	4586      	cmp	lr, r0
 8013d4e:	dd3c      	ble.n	8013dca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8013d50:	2a00      	cmp	r2, #0
 8013d52:	d03a      	beq.n	8013dca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8013d54:	f898 0001 	ldrb.w	r0, [r8, #1]
 8013d58:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8013d5c:	4418      	add	r0, r3
 8013d5e:	3501      	adds	r5, #1
 8013d60:	d437      	bmi.n	8013dd2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8013d62:	45a9      	cmp	r9, r5
 8013d64:	dd35      	ble.n	8013dd2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8013d66:	b3a4      	cbz	r4, 8013dd2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8013d68:	f1bc 0f00 	cmp.w	ip, #0
 8013d6c:	db2f      	blt.n	8013dce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 8013d6e:	45e6      	cmp	lr, ip
 8013d70:	dd2d      	ble.n	8013dce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 8013d72:	f818 500e 	ldrb.w	r5, [r8, lr]
 8013d76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013d7a:	441d      	add	r5, r3
 8013d7c:	f11c 0c01 	adds.w	ip, ip, #1
 8013d80:	d42a      	bmi.n	8013dd8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 8013d82:	45e6      	cmp	lr, ip
 8013d84:	dd28      	ble.n	8013dd8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 8013d86:	b33a      	cbz	r2, 8013dd8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 8013d88:	44c6      	add	lr, r8
 8013d8a:	f89e c001 	ldrb.w	ip, [lr, #1]
 8013d8e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8013d92:	4463      	add	r3, ip
 8013d94:	ea6f 0c07 	mvn.w	ip, r7
 8013d98:	2a0f      	cmp	r2, #15
 8013d9a:	f896 a000 	ldrb.w	sl, [r6]
 8013d9e:	fa5f fc8c 	uxtb.w	ip, ip
 8013da2:	f890 b000 	ldrb.w	fp, [r0]
 8013da6:	f895 9000 	ldrb.w	r9, [r5]
 8013daa:	7819      	ldrb	r1, [r3, #0]
 8013dac:	d801      	bhi.n	8013db2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xce>
 8013dae:	2c0f      	cmp	r4, #15
 8013db0:	d914      	bls.n	8013ddc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf8>
 8013db2:	4b40      	ldr	r3, [pc, #256]	; (8013eb4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d0>)
 8013db4:	f240 1157 	movw	r1, #343	; 0x157
 8013db8:	4a3f      	ldr	r2, [pc, #252]	; (8013eb8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 8013dba:	4840      	ldr	r0, [pc, #256]	; (8013ebc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 8013dbc:	f005 f85e 	bl	8018e7c <__assert_func>
 8013dc0:	ae05      	add	r6, sp, #20
 8013dc2:	e7c0      	b.n	8013d46 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x62>
 8013dc4:	a805      	add	r0, sp, #20
 8013dc6:	4606      	mov	r6, r0
 8013dc8:	e7c9      	b.n	8013d5e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 8013dca:	a805      	add	r0, sp, #20
 8013dcc:	e7c7      	b.n	8013d5e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 8013dce:	ad05      	add	r5, sp, #20
 8013dd0:	e7d4      	b.n	8013d7c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x98>
 8013dd2:	ab05      	add	r3, sp, #20
 8013dd4:	461d      	mov	r5, r3
 8013dd6:	e7dd      	b.n	8013d94 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 8013dd8:	ab05      	add	r3, sp, #20
 8013dda:	e7db      	b.n	8013d94 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 8013ddc:	b292      	uxth	r2, r2
 8013dde:	b2a4      	uxth	r4, r4
 8013de0:	fa1f fc8c 	uxth.w	ip, ip
 8013de4:	fb02 f804 	mul.w	r8, r2, r4
 8013de8:	0112      	lsls	r2, r2, #4
 8013dea:	b2bf      	uxth	r7, r7
 8013dec:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 8013df0:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8013df4:	eba2 0208 	sub.w	r2, r2, r8
 8013df8:	b2a4      	uxth	r4, r4
 8013dfa:	b292      	uxth	r2, r2
 8013dfc:	ebae 0e04 	sub.w	lr, lr, r4
 8013e00:	fb02 fb0b 	mul.w	fp, r2, fp
 8013e04:	fa1f fe8e 	uxth.w	lr, lr
 8013e08:	fb0e ba0a 	mla	sl, lr, sl, fp
 8013e0c:	fb04 aa09 	mla	sl, r4, r9, sl
 8013e10:	fb08 aa01 	mla	sl, r8, r1, sl
 8013e14:	9903      	ldr	r1, [sp, #12]
 8013e16:	fb11 f90c 	smulbb	r9, r1, ip
 8013e1a:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8013e1e:	9900      	ldr	r1, [sp, #0]
 8013e20:	fb0a 9a07 	mla	sl, sl, r7, r9
 8013e24:	fa1f fa8a 	uxth.w	sl, sl
 8013e28:	f10a 0901 	add.w	r9, sl, #1
 8013e2c:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 8013e30:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013e34:	f881 a000 	strb.w	sl, [r1]
 8013e38:	f890 a001 	ldrb.w	sl, [r0, #1]
 8013e3c:	f896 9001 	ldrb.w	r9, [r6, #1]
 8013e40:	fb02 fa0a 	mul.w	sl, r2, sl
 8013e44:	9902      	ldr	r1, [sp, #8]
 8013e46:	fb0e aa09 	mla	sl, lr, r9, sl
 8013e4a:	f895 9001 	ldrb.w	r9, [r5, #1]
 8013e4e:	fb04 aa09 	mla	sl, r4, r9, sl
 8013e52:	f893 9001 	ldrb.w	r9, [r3, #1]
 8013e56:	fb08 a909 	mla	r9, r8, r9, sl
 8013e5a:	fb11 fa0c 	smulbb	sl, r1, ip
 8013e5e:	9900      	ldr	r1, [sp, #0]
 8013e60:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8013e64:	fb09 a907 	mla	r9, r9, r7, sl
 8013e68:	fa1f f989 	uxth.w	r9, r9
 8013e6c:	f109 0a01 	add.w	sl, r9, #1
 8013e70:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8013e74:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013e78:	f881 9001 	strb.w	r9, [r1, #1]
 8013e7c:	7880      	ldrb	r0, [r0, #2]
 8013e7e:	78b6      	ldrb	r6, [r6, #2]
 8013e80:	4342      	muls	r2, r0
 8013e82:	78a8      	ldrb	r0, [r5, #2]
 8013e84:	789b      	ldrb	r3, [r3, #2]
 8013e86:	fb0e 2206 	mla	r2, lr, r6, r2
 8013e8a:	fb04 2400 	mla	r4, r4, r0, r2
 8013e8e:	fb08 4803 	mla	r8, r8, r3, r4
 8013e92:	9b01      	ldr	r3, [sp, #4]
 8013e94:	fb13 fc0c 	smulbb	ip, r3, ip
 8013e98:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8013e9c:	fb08 c707 	mla	r7, r8, r7, ip
 8013ea0:	b2bf      	uxth	r7, r7
 8013ea2:	f107 0c01 	add.w	ip, r7, #1
 8013ea6:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8013eaa:	123f      	asrs	r7, r7, #8
 8013eac:	708f      	strb	r7, [r1, #2]
 8013eae:	b007      	add	sp, #28
 8013eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013eb4:	0801cf27 	.word	0x0801cf27
 8013eb8:	0801d3de 	.word	0x0801d3de
 8013ebc:	0801cfaf 	.word	0x0801cfaf

08013ec0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ec4:	ed2d 8b08 	vpush	{d8-d11}
 8013ec8:	b093      	sub	sp, #76	; 0x4c
 8013eca:	eeb0 aa40 	vmov.f32	s20, s0
 8013ece:	eef0 9a60 	vmov.f32	s19, s1
 8013ed2:	9210      	str	r2, [sp, #64]	; 0x40
 8013ed4:	eeb0 9a41 	vmov.f32	s18, s2
 8013ed8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8013eda:	eeb0 8a62 	vmov.f32	s16, s5
 8013ede:	9309      	str	r3, [sp, #36]	; 0x24
 8013ee0:	eef0 8a43 	vmov.f32	s17, s6
 8013ee4:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
 8013ee8:	eef0 ba44 	vmov.f32	s23, s8
 8013eec:	9011      	str	r0, [sp, #68]	; 0x44
 8013eee:	eeb0 ba64 	vmov.f32	s22, s9
 8013ef2:	930e      	str	r3, [sp, #56]	; 0x38
 8013ef4:	eef0 aa45 	vmov.f32	s21, s10
 8013ef8:	6850      	ldr	r0, [r2, #4]
 8013efa:	910d      	str	r1, [sp, #52]	; 0x34
 8013efc:	6812      	ldr	r2, [r2, #0]
 8013efe:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8013f02:	fb00 1303 	mla	r3, r0, r3, r1
 8013f06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013f0a:	18d3      	adds	r3, r2, r3
 8013f0c:	930a      	str	r3, [sp, #40]	; 0x28
 8013f0e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	930c      	str	r3, [sp, #48]	; 0x30
 8013f14:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8013f16:	685c      	ldr	r4, [r3, #4]
 8013f18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013f1a:	3404      	adds	r4, #4
 8013f1c:	43db      	mvns	r3, r3
 8013f1e:	b2db      	uxtb	r3, r3
 8013f20:	930b      	str	r3, [sp, #44]	; 0x2c
 8013f22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	dc03      	bgt.n	8013f30 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8013f28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	f340 8250 	ble.w	80143d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8013f30:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8013f32:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8013f36:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8013f3a:	1e48      	subs	r0, r1, #1
 8013f3c:	1e55      	subs	r5, r2, #1
 8013f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	f340 80ee 	ble.w	8014122 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 8013f46:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8013f48:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013f4a:	1436      	asrs	r6, r6, #16
 8013f4c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8013f50:	d406      	bmi.n	8013f60 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8013f52:	4286      	cmp	r6, r0
 8013f54:	da04      	bge.n	8013f60 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	db02      	blt.n	8013f60 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8013f5a:	42ab      	cmp	r3, r5
 8013f5c:	f2c0 80e2 	blt.w	8014124 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8013f60:	3601      	adds	r6, #1
 8013f62:	f100 80cf 	bmi.w	8014104 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8013f66:	42b1      	cmp	r1, r6
 8013f68:	f2c0 80cc 	blt.w	8014104 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8013f6c:	3301      	adds	r3, #1
 8013f6e:	f100 80c9 	bmi.w	8014104 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8013f72:	429a      	cmp	r2, r3
 8013f74:	f2c0 80c6 	blt.w	8014104 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8013f78:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 8013f7c:	f1bb 0f00 	cmp.w	fp, #0
 8013f80:	f340 80f1 	ble.w	8014166 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8013f84:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013f86:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8013f88:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8013f8a:	141d      	asrs	r5, r3, #16
 8013f8c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8013f8e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8013f92:	68c7      	ldr	r7, [r0, #12]
 8013f94:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8013f96:	1418      	asrs	r0, r3, #16
 8013f98:	f3c3 3803 	ubfx	r8, r3, #12, #4
 8013f9c:	6892      	ldr	r2, [r2, #8]
 8013f9e:	f100 8137 	bmi.w	8014210 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8013fa2:	f102 3cff 	add.w	ip, r2, #4294967295
 8013fa6:	4560      	cmp	r0, ip
 8013fa8:	f280 8132 	bge.w	8014210 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8013fac:	2d00      	cmp	r5, #0
 8013fae:	f2c0 812f 	blt.w	8014210 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8013fb2:	f107 3cff 	add.w	ip, r7, #4294967295
 8013fb6:	4565      	cmp	r5, ip
 8013fb8:	f280 812a 	bge.w	8014210 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8013fbc:	b212      	sxth	r2, r2
 8013fbe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8013fc0:	fb05 0002 	mla	r0, r5, r2, r0
 8013fc4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013fc6:	f817 c000 	ldrb.w	ip, [r7, r0]
 8013fca:	4405      	add	r5, r0
 8013fcc:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8013fd0:	eb04 0e0c 	add.w	lr, r4, ip
 8013fd4:	f1b8 0f00 	cmp.w	r8, #0
 8013fd8:	f000 810c 	beq.w	80141f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 8013fdc:	786f      	ldrb	r7, [r5, #1]
 8013fde:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8013fe2:	4427      	add	r7, r4
 8013fe4:	2900      	cmp	r1, #0
 8013fe6:	f000 810d 	beq.w	8014204 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8013fea:	18a8      	adds	r0, r5, r2
 8013fec:	5caa      	ldrb	r2, [r5, r2]
 8013fee:	7840      	ldrb	r0, [r0, #1]
 8013ff0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013ff4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8013ff8:	4422      	add	r2, r4
 8013ffa:	4420      	add	r0, r4
 8013ffc:	fa1f f388 	uxth.w	r3, r8
 8014000:	f814 a00c 	ldrb.w	sl, [r4, ip]
 8014004:	b289      	uxth	r1, r1
 8014006:	f897 c000 	ldrb.w	ip, [r7]
 801400a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801400e:	fb03 f901 	mul.w	r9, r3, r1
 8014012:	011b      	lsls	r3, r3, #4
 8014014:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8014018:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801401c:	eba3 0309 	sub.w	r3, r3, r9
 8014020:	b289      	uxth	r1, r1
 8014022:	b29b      	uxth	r3, r3
 8014024:	eba8 0801 	sub.w	r8, r8, r1
 8014028:	fb03 fc0c 	mul.w	ip, r3, ip
 801402c:	fa1f f888 	uxth.w	r8, r8
 8014030:	930f      	str	r3, [sp, #60]	; 0x3c
 8014032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014034:	fb08 cc0a 	mla	ip, r8, sl, ip
 8014038:	f892 a000 	ldrb.w	sl, [r2]
 801403c:	fb01 cc0a 	mla	ip, r1, sl, ip
 8014040:	f890 a000 	ldrb.w	sl, [r0]
 8014044:	fb09 cc0a 	mla	ip, r9, sl, ip
 8014048:	f896 a000 	ldrb.w	sl, [r6]
 801404c:	fb1a fa03 	smulbb	sl, sl, r3
 8014050:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8014054:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014056:	fb0c ac05 	mla	ip, ip, r5, sl
 801405a:	fa1f fc8c 	uxth.w	ip, ip
 801405e:	f10c 0a01 	add.w	sl, ip, #1
 8014062:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8014066:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801406a:	f886 a000 	strb.w	sl, [r6]
 801406e:	f897 c001 	ldrb.w	ip, [r7, #1]
 8014072:	f89e a001 	ldrb.w	sl, [lr, #1]
 8014076:	fb03 fc0c 	mul.w	ip, r3, ip
 801407a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801407c:	fb08 cc0a 	mla	ip, r8, sl, ip
 8014080:	f892 a001 	ldrb.w	sl, [r2, #1]
 8014084:	fb01 cc0a 	mla	ip, r1, sl, ip
 8014088:	f890 a001 	ldrb.w	sl, [r0, #1]
 801408c:	fb09 cc0a 	mla	ip, r9, sl, ip
 8014090:	f896 a001 	ldrb.w	sl, [r6, #1]
 8014094:	fb1a fa03 	smulbb	sl, sl, r3
 8014098:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801409c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801409e:	fb0c ac05 	mla	ip, ip, r5, sl
 80140a2:	fa1f fc8c 	uxth.w	ip, ip
 80140a6:	f10c 0a01 	add.w	sl, ip, #1
 80140aa:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 80140ae:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80140b2:	f886 c001 	strb.w	ip, [r6, #1]
 80140b6:	78bf      	ldrb	r7, [r7, #2]
 80140b8:	f89e c002 	ldrb.w	ip, [lr, #2]
 80140bc:	437b      	muls	r3, r7
 80140be:	fb08 330c 	mla	r3, r8, ip, r3
 80140c2:	f892 c002 	ldrb.w	ip, [r2, #2]
 80140c6:	7882      	ldrb	r2, [r0, #2]
 80140c8:	fb01 310c 	mla	r1, r1, ip, r3
 80140cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80140ce:	fb09 1902 	mla	r9, r9, r2, r1
 80140d2:	78b1      	ldrb	r1, [r6, #2]
 80140d4:	fb11 f103 	smulbb	r1, r1, r3
 80140d8:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80140dc:	fb09 1505 	mla	r5, r9, r5, r1
 80140e0:	b2ad      	uxth	r5, r5
 80140e2:	1c6b      	adds	r3, r5, #1
 80140e4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80140e8:	122d      	asrs	r5, r5, #8
 80140ea:	70b5      	strb	r5, [r6, #2]
 80140ec:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80140ee:	3603      	adds	r6, #3
 80140f0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80140f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80140f6:	4413      	add	r3, r2
 80140f8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80140fa:	9325      	str	r3, [sp, #148]	; 0x94
 80140fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80140fe:	4413      	add	r3, r2
 8014100:	9326      	str	r3, [sp, #152]	; 0x98
 8014102:	e73b      	b.n	8013f7c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8014104:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014106:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8014108:	4433      	add	r3, r6
 801410a:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 801410c:	9325      	str	r3, [sp, #148]	; 0x94
 801410e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014110:	4433      	add	r3, r6
 8014112:	9326      	str	r3, [sp, #152]	; 0x98
 8014114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014116:	3b01      	subs	r3, #1
 8014118:	9309      	str	r3, [sp, #36]	; 0x24
 801411a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801411c:	3303      	adds	r3, #3
 801411e:	930a      	str	r3, [sp, #40]	; 0x28
 8014120:	e70d      	b.n	8013f3e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8014122:	d028      	beq.n	8014176 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8014124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014126:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8014128:	3b01      	subs	r3, #1
 801412a:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801412c:	fb00 5003 	mla	r0, r0, r3, r5
 8014130:	1400      	asrs	r0, r0, #16
 8014132:	f53f af21 	bmi.w	8013f78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8014136:	3901      	subs	r1, #1
 8014138:	4288      	cmp	r0, r1
 801413a:	f6bf af1d 	bge.w	8013f78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801413e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8014140:	9826      	ldr	r0, [sp, #152]	; 0x98
 8014142:	fb01 0303 	mla	r3, r1, r3, r0
 8014146:	141b      	asrs	r3, r3, #16
 8014148:	f53f af16 	bmi.w	8013f78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801414c:	3a01      	subs	r2, #1
 801414e:	4293      	cmp	r3, r2
 8014150:	f6bf af12 	bge.w	8013f78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8014154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014156:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801415a:	1cdf      	adds	r7, r3, #3
 801415c:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8014160:	f1b9 0f00 	cmp.w	r9, #0
 8014164:	dc73      	bgt.n	801424e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8014166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014168:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801416a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801416e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014172:	441a      	add	r2, r3
 8014174:	920a      	str	r2, [sp, #40]	; 0x28
 8014176:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014178:	2b00      	cmp	r3, #0
 801417a:	f340 8129 	ble.w	80143d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 801417e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014182:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014184:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8014188:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801418c:	eef0 6a48 	vmov.f32	s13, s16
 8014190:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8014194:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8014198:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801419c:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 80141a0:	eef0 6a68 	vmov.f32	s13, s17
 80141a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80141a8:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 80141ac:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80141b0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80141b4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80141b8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80141bc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80141c0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80141c4:	ee18 2a10 	vmov	r2, s16
 80141c8:	eeb0 8a47 	vmov.f32	s16, s14
 80141cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80141d0:	ee18 2a90 	vmov	r2, s17
 80141d4:	9327      	str	r3, [sp, #156]	; 0x9c
 80141d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80141d8:	eef0 8a67 	vmov.f32	s17, s15
 80141dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80141e0:	9328      	str	r3, [sp, #160]	; 0xa0
 80141e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80141e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80141e6:	3b01      	subs	r3, #1
 80141e8:	930d      	str	r3, [sp, #52]	; 0x34
 80141ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80141ec:	bf08      	it	eq
 80141ee:	4613      	moveq	r3, r2
 80141f0:	9309      	str	r3, [sp, #36]	; 0x24
 80141f2:	e696      	b.n	8013f22 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80141f4:	b149      	cbz	r1, 801420a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80141f6:	5caa      	ldrb	r2, [r5, r2]
 80141f8:	4670      	mov	r0, lr
 80141fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80141fe:	4422      	add	r2, r4
 8014200:	4677      	mov	r7, lr
 8014202:	e6fb      	b.n	8013ffc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8014204:	4670      	mov	r0, lr
 8014206:	4672      	mov	r2, lr
 8014208:	e6f8      	b.n	8013ffc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 801420a:	4670      	mov	r0, lr
 801420c:	4672      	mov	r2, lr
 801420e:	e7f7      	b.n	8014200 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 8014210:	f110 0c01 	adds.w	ip, r0, #1
 8014214:	f53f af6a 	bmi.w	80140ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8014218:	4562      	cmp	r2, ip
 801421a:	f6ff af67 	blt.w	80140ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801421e:	f115 0c01 	adds.w	ip, r5, #1
 8014222:	f53f af63 	bmi.w	80140ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8014226:	4567      	cmp	r7, ip
 8014228:	f6ff af60 	blt.w	80140ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801422c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801422e:	b23f      	sxth	r7, r7
 8014230:	b212      	sxth	r2, r2
 8014232:	9002      	str	r0, [sp, #8]
 8014234:	9701      	str	r7, [sp, #4]
 8014236:	9200      	str	r2, [sp, #0]
 8014238:	9811      	ldr	r0, [sp, #68]	; 0x44
 801423a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801423c:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8014240:	e9cd 5803 	strd	r5, r8, [sp, #12]
 8014244:	4623      	mov	r3, r4
 8014246:	4631      	mov	r1, r6
 8014248:	f7ff fd4c 	bl	8013ce4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801424c:	e74e      	b.n	80140ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801424e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014250:	9826      	ldr	r0, [sp, #152]	; 0x98
 8014252:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8014256:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8014258:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801425a:	1400      	asrs	r0, r0, #16
 801425c:	142d      	asrs	r5, r5, #16
 801425e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014260:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8014264:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8014268:	fb02 5000 	mla	r0, r2, r0, r5
 801426c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801426e:	f815 e000 	ldrb.w	lr, [r5, r0]
 8014272:	eb05 0c00 	add.w	ip, r5, r0
 8014276:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801427a:	eb04 060e 	add.w	r6, r4, lr
 801427e:	2b00      	cmp	r3, #0
 8014280:	f000 8097 	beq.w	80143b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 8014284:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8014288:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801428c:	4425      	add	r5, r4
 801428e:	2900      	cmp	r1, #0
 8014290:	f000 8098 	beq.w	80143c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8014294:	eb0c 0002 	add.w	r0, ip, r2
 8014298:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801429c:	7840      	ldrb	r0, [r0, #1]
 801429e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80142a2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80142a6:	4422      	add	r2, r4
 80142a8:	4420      	add	r0, r4
 80142aa:	b29b      	uxth	r3, r3
 80142ac:	f814 b00e 	ldrb.w	fp, [r4, lr]
 80142b0:	b289      	uxth	r1, r1
 80142b2:	f895 e000 	ldrb.w	lr, [r5]
 80142b6:	3703      	adds	r7, #3
 80142b8:	f109 39ff 	add.w	r9, r9, #4294967295
 80142bc:	fb03 f801 	mul.w	r8, r3, r1
 80142c0:	011b      	lsls	r3, r3, #4
 80142c2:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80142c6:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80142ca:	eba3 0308 	sub.w	r3, r3, r8
 80142ce:	b289      	uxth	r1, r1
 80142d0:	b29b      	uxth	r3, r3
 80142d2:	ebac 0c01 	sub.w	ip, ip, r1
 80142d6:	fb03 fe0e 	mul.w	lr, r3, lr
 80142da:	fa1f fc8c 	uxth.w	ip, ip
 80142de:	930f      	str	r3, [sp, #60]	; 0x3c
 80142e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80142e2:	fb0c ee0b 	mla	lr, ip, fp, lr
 80142e6:	f892 b000 	ldrb.w	fp, [r2]
 80142ea:	fb01 ee0b 	mla	lr, r1, fp, lr
 80142ee:	f890 b000 	ldrb.w	fp, [r0]
 80142f2:	fb08 ee0b 	mla	lr, r8, fp, lr
 80142f6:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 80142fa:	fb1b fb03 	smulbb	fp, fp, r3
 80142fe:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8014302:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014304:	fb0e be0a 	mla	lr, lr, sl, fp
 8014308:	fa1f fe8e 	uxth.w	lr, lr
 801430c:	f10e 0b01 	add.w	fp, lr, #1
 8014310:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8014314:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8014318:	f807 ec06 	strb.w	lr, [r7, #-6]
 801431c:	f895 e001 	ldrb.w	lr, [r5, #1]
 8014320:	f896 b001 	ldrb.w	fp, [r6, #1]
 8014324:	fb03 fe0e 	mul.w	lr, r3, lr
 8014328:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801432a:	fb0c ee0b 	mla	lr, ip, fp, lr
 801432e:	f892 b001 	ldrb.w	fp, [r2, #1]
 8014332:	fb01 ee0b 	mla	lr, r1, fp, lr
 8014336:	f890 b001 	ldrb.w	fp, [r0, #1]
 801433a:	fb08 ee0b 	mla	lr, r8, fp, lr
 801433e:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 8014342:	fb1b fb03 	smulbb	fp, fp, r3
 8014346:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801434a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801434c:	fb0e be0a 	mla	lr, lr, sl, fp
 8014350:	fa1f fe8e 	uxth.w	lr, lr
 8014354:	f10e 0b01 	add.w	fp, lr, #1
 8014358:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801435c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8014360:	f807 ec05 	strb.w	lr, [r7, #-5]
 8014364:	78ad      	ldrb	r5, [r5, #2]
 8014366:	78b6      	ldrb	r6, [r6, #2]
 8014368:	436b      	muls	r3, r5
 801436a:	7895      	ldrb	r5, [r2, #2]
 801436c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801436e:	fb0c 3306 	mla	r3, ip, r6, r3
 8014372:	fb01 3305 	mla	r3, r1, r5, r3
 8014376:	7885      	ldrb	r5, [r0, #2]
 8014378:	fb08 3805 	mla	r8, r8, r5, r3
 801437c:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8014380:	fb13 f302 	smulbb	r3, r3, r2
 8014384:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8014388:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801438a:	fb08 380a 	mla	r8, r8, sl, r3
 801438e:	fa1f f888 	uxth.w	r8, r8
 8014392:	f108 0301 	add.w	r3, r8, #1
 8014396:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801439a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801439c:	4413      	add	r3, r2
 801439e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80143a0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80143a4:	9325      	str	r3, [sp, #148]	; 0x94
 80143a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80143a8:	f807 8c04 	strb.w	r8, [r7, #-4]
 80143ac:	4413      	add	r3, r2
 80143ae:	9326      	str	r3, [sp, #152]	; 0x98
 80143b0:	e6d6      	b.n	8014160 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80143b2:	b151      	cbz	r1, 80143ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 80143b4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80143b8:	4630      	mov	r0, r6
 80143ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80143be:	4422      	add	r2, r4
 80143c0:	4635      	mov	r5, r6
 80143c2:	e772      	b.n	80142aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80143c4:	4630      	mov	r0, r6
 80143c6:	4632      	mov	r2, r6
 80143c8:	e76f      	b.n	80142aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80143ca:	4630      	mov	r0, r6
 80143cc:	4632      	mov	r2, r6
 80143ce:	e7f7      	b.n	80143c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 80143d0:	b013      	add	sp, #76	; 0x4c
 80143d2:	ecbd 8b08 	vpop	{d8-d11}
 80143d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080143dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 80143dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143e0:	784d      	ldrb	r5, [r1, #1]
 80143e2:	f891 9002 	ldrb.w	r9, [r1, #2]
 80143e6:	022d      	lsls	r5, r5, #8
 80143e8:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80143ec:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 80143f0:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 80143f4:	f891 9000 	ldrb.w	r9, [r1]
 80143f8:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 80143fc:	ea45 0509 	orr.w	r5, r5, r9
 8014400:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8014404:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 8014408:	9501      	str	r5, [sp, #4]
 801440a:	fb06 470c 	mla	r7, r6, ip, r4
 801440e:	2e00      	cmp	r6, #0
 8014410:	eb02 0e07 	add.w	lr, r2, r7
 8014414:	db46      	blt.n	80144a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 8014416:	45b0      	cmp	r8, r6
 8014418:	dd44      	ble.n	80144a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 801441a:	2c00      	cmp	r4, #0
 801441c:	db40      	blt.n	80144a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 801441e:	45a4      	cmp	ip, r4
 8014420:	dd3e      	ble.n	80144a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 8014422:	5dd7      	ldrb	r7, [r2, r7]
 8014424:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8014428:	441f      	add	r7, r3
 801442a:	1c62      	adds	r2, r4, #1
 801442c:	d43d      	bmi.n	80144aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 801442e:	4594      	cmp	ip, r2
 8014430:	dd3b      	ble.n	80144aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8014432:	f1ba 0f00 	cmp.w	sl, #0
 8014436:	d038      	beq.n	80144aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8014438:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801443c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014440:	441d      	add	r5, r3
 8014442:	3601      	adds	r6, #1
 8014444:	d435      	bmi.n	80144b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 8014446:	45b0      	cmp	r8, r6
 8014448:	dd33      	ble.n	80144b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801444a:	b390      	cbz	r0, 80144b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801444c:	2c00      	cmp	r4, #0
 801444e:	db2e      	blt.n	80144ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 8014450:	45a4      	cmp	ip, r4
 8014452:	dd2c      	ble.n	80144ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 8014454:	f81e 600c 	ldrb.w	r6, [lr, ip]
 8014458:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801445c:	441e      	add	r6, r3
 801445e:	1c62      	adds	r2, r4, #1
 8014460:	d42a      	bmi.n	80144b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 8014462:	4594      	cmp	ip, r2
 8014464:	dd28      	ble.n	80144b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 8014466:	f1ba 0f00 	cmp.w	sl, #0
 801446a:	d025      	beq.n	80144b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 801446c:	44f4      	add	ip, lr
 801446e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8014472:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014476:	4413      	add	r3, r2
 8014478:	f1ba 0f0f 	cmp.w	sl, #15
 801447c:	f897 8000 	ldrb.w	r8, [r7]
 8014480:	f895 9000 	ldrb.w	r9, [r5]
 8014484:	f896 e000 	ldrb.w	lr, [r6]
 8014488:	f893 c000 	ldrb.w	ip, [r3]
 801448c:	d801      	bhi.n	8014492 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb6>
 801448e:	280f      	cmp	r0, #15
 8014490:	d914      	bls.n	80144bc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe0>
 8014492:	4b29      	ldr	r3, [pc, #164]	; (8014538 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x15c>)
 8014494:	f240 1157 	movw	r1, #343	; 0x157
 8014498:	4a28      	ldr	r2, [pc, #160]	; (801453c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801449a:	4829      	ldr	r0, [pc, #164]	; (8014540 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 801449c:	f004 fcee 	bl	8018e7c <__assert_func>
 80144a0:	af01      	add	r7, sp, #4
 80144a2:	e7c2      	b.n	801442a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 80144a4:	ad01      	add	r5, sp, #4
 80144a6:	462f      	mov	r7, r5
 80144a8:	e7cb      	b.n	8014442 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 80144aa:	ad01      	add	r5, sp, #4
 80144ac:	e7c9      	b.n	8014442 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 80144ae:	ae01      	add	r6, sp, #4
 80144b0:	e7d5      	b.n	801445e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x82>
 80144b2:	ab01      	add	r3, sp, #4
 80144b4:	461e      	mov	r6, r3
 80144b6:	e7df      	b.n	8014478 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 80144b8:	ab01      	add	r3, sp, #4
 80144ba:	e7dd      	b.n	8014478 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 80144bc:	fa1f f48a 	uxth.w	r4, sl
 80144c0:	b280      	uxth	r0, r0
 80144c2:	fb04 fa00 	mul.w	sl, r4, r0
 80144c6:	0124      	lsls	r4, r4, #4
 80144c8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80144cc:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 80144d0:	b282      	uxth	r2, r0
 80144d2:	eba4 000a 	sub.w	r0, r4, sl
 80144d6:	ebab 0b02 	sub.w	fp, fp, r2
 80144da:	b280      	uxth	r0, r0
 80144dc:	fa1f fb8b 	uxth.w	fp, fp
 80144e0:	fb00 f909 	mul.w	r9, r0, r9
 80144e4:	fb0b 9808 	mla	r8, fp, r8, r9
 80144e8:	fb02 8e0e 	mla	lr, r2, lr, r8
 80144ec:	fb0a ec0c 	mla	ip, sl, ip, lr
 80144f0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80144f4:	f881 c000 	strb.w	ip, [r1]
 80144f8:	786c      	ldrb	r4, [r5, #1]
 80144fa:	f897 c001 	ldrb.w	ip, [r7, #1]
 80144fe:	4344      	muls	r4, r0
 8014500:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8014504:	7874      	ldrb	r4, [r6, #1]
 8014506:	fb02 cc04 	mla	ip, r2, r4, ip
 801450a:	785c      	ldrb	r4, [r3, #1]
 801450c:	fb0a c404 	mla	r4, sl, r4, ip
 8014510:	1224      	asrs	r4, r4, #8
 8014512:	704c      	strb	r4, [r1, #1]
 8014514:	78ad      	ldrb	r5, [r5, #2]
 8014516:	78bc      	ldrb	r4, [r7, #2]
 8014518:	4368      	muls	r0, r5
 801451a:	fb0b 0b04 	mla	fp, fp, r4, r0
 801451e:	78b0      	ldrb	r0, [r6, #2]
 8014520:	fb02 b000 	mla	r0, r2, r0, fp
 8014524:	789a      	ldrb	r2, [r3, #2]
 8014526:	fb0a 0a02 	mla	sl, sl, r2, r0
 801452a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801452e:	f881 a002 	strb.w	sl, [r1, #2]
 8014532:	b003      	add	sp, #12
 8014534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014538:	0801cf27 	.word	0x0801cf27
 801453c:	0801d3de 	.word	0x0801d3de
 8014540:	0801cfaf 	.word	0x0801cfaf

08014544 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014548:	ed2d 8b0a 	vpush	{d8-d12}
 801454c:	b08d      	sub	sp, #52	; 0x34
 801454e:	eeb0 aa40 	vmov.f32	s20, s0
 8014552:	eef0 9a60 	vmov.f32	s19, s1
 8014556:	900b      	str	r0, [sp, #44]	; 0x2c
 8014558:	eeb0 9a41 	vmov.f32	s18, s2
 801455c:	9306      	str	r3, [sp, #24]
 801455e:	eeb0 8a62 	vmov.f32	s16, s5
 8014562:	eef0 8a43 	vmov.f32	s17, s6
 8014566:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8014568:	eeb0 ca44 	vmov.f32	s24, s8
 801456c:	eef0 ba64 	vmov.f32	s23, s9
 8014570:	eeb0 ba45 	vmov.f32	s22, s10
 8014574:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8014578:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 801457c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801457e:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8014582:	6850      	ldr	r0, [r2, #4]
 8014584:	6812      	ldr	r2, [r2, #0]
 8014586:	fb00 1303 	mla	r3, r0, r3, r1
 801458a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801458e:	18d3      	adds	r3, r2, r3
 8014590:	9307      	str	r3, [sp, #28]
 8014592:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	9308      	str	r3, [sp, #32]
 8014598:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801459a:	685d      	ldr	r5, [r3, #4]
 801459c:	3504      	adds	r5, #4
 801459e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	dc03      	bgt.n	80145ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80145a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	f340 81e6 	ble.w	8014978 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80145ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80145ae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80145b2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80145b6:	1e48      	subs	r0, r1, #1
 80145b8:	1e56      	subs	r6, r2, #1
 80145ba:	9b06      	ldr	r3, [sp, #24]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	f340 80bd 	ble.w	801473c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 80145c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80145c4:	1427      	asrs	r7, r4, #16
 80145c6:	ea4f 4323 	mov.w	r3, r3, asr #16
 80145ca:	d406      	bmi.n	80145da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80145cc:	4287      	cmp	r7, r0
 80145ce:	da04      	bge.n	80145da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	db02      	blt.n	80145da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80145d4:	42b3      	cmp	r3, r6
 80145d6:	f2c0 80b2 	blt.w	801473e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80145da:	3701      	adds	r7, #1
 80145dc:	f100 80a1 	bmi.w	8014722 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80145e0:	42b9      	cmp	r1, r7
 80145e2:	f2c0 809e 	blt.w	8014722 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80145e6:	3301      	adds	r3, #1
 80145e8:	f100 809b 	bmi.w	8014722 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80145ec:	429a      	cmp	r2, r3
 80145ee:	f2c0 8098 	blt.w	8014722 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80145f2:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 80145f6:	f1bb 0f00 	cmp.w	fp, #0
 80145fa:	f340 80bf 	ble.w	801477c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 80145fe:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014600:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8014602:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014604:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8014608:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801460c:	1420      	asrs	r0, r4, #16
 801460e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8014610:	ea4f 4723 	mov.w	r7, r3, asr #16
 8014614:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8014618:	6892      	ldr	r2, [r2, #8]
 801461a:	f100 8103 	bmi.w	8014824 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801461e:	f102 3eff 	add.w	lr, r2, #4294967295
 8014622:	4570      	cmp	r0, lr
 8014624:	f280 80fe 	bge.w	8014824 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8014628:	2f00      	cmp	r7, #0
 801462a:	f2c0 80fb 	blt.w	8014824 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801462e:	f10c 3eff 	add.w	lr, ip, #4294967295
 8014632:	4577      	cmp	r7, lr
 8014634:	f280 80f6 	bge.w	8014824 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8014638:	b212      	sxth	r2, r2
 801463a:	fb07 0002 	mla	r0, r7, r2, r0
 801463e:	9f08      	ldr	r7, [sp, #32]
 8014640:	f817 8000 	ldrb.w	r8, [r7, r0]
 8014644:	eb07 0e00 	add.w	lr, r7, r0
 8014648:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801464c:	eb05 0c08 	add.w	ip, r5, r8
 8014650:	2b00      	cmp	r3, #0
 8014652:	f000 80d8 	beq.w	8014806 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 8014656:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801465a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801465e:	442f      	add	r7, r5
 8014660:	2900      	cmp	r1, #0
 8014662:	f000 80d9 	beq.w	8014818 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8014666:	eb0e 0002 	add.w	r0, lr, r2
 801466a:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801466e:	7840      	ldrb	r0, [r0, #1]
 8014670:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014674:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8014678:	442a      	add	r2, r5
 801467a:	4428      	add	r0, r5
 801467c:	b29b      	uxth	r3, r3
 801467e:	f815 a008 	ldrb.w	sl, [r5, r8]
 8014682:	b289      	uxth	r1, r1
 8014684:	f897 8000 	ldrb.w	r8, [r7]
 8014688:	fb03 f901 	mul.w	r9, r3, r1
 801468c:	011b      	lsls	r3, r3, #4
 801468e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8014692:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8014696:	eba3 0309 	sub.w	r3, r3, r9
 801469a:	b289      	uxth	r1, r1
 801469c:	b29b      	uxth	r3, r3
 801469e:	ebae 0e01 	sub.w	lr, lr, r1
 80146a2:	fb03 f808 	mul.w	r8, r3, r8
 80146a6:	fa1f fe8e 	uxth.w	lr, lr
 80146aa:	fb0e 880a 	mla	r8, lr, sl, r8
 80146ae:	f892 a000 	ldrb.w	sl, [r2]
 80146b2:	fb01 880a 	mla	r8, r1, sl, r8
 80146b6:	f890 a000 	ldrb.w	sl, [r0]
 80146ba:	fb09 880a 	mla	r8, r9, sl, r8
 80146be:	ea4f 2828 	mov.w	r8, r8, asr #8
 80146c2:	f886 8000 	strb.w	r8, [r6]
 80146c6:	f897 8001 	ldrb.w	r8, [r7, #1]
 80146ca:	f89c a001 	ldrb.w	sl, [ip, #1]
 80146ce:	fb03 f808 	mul.w	r8, r3, r8
 80146d2:	fb0e 880a 	mla	r8, lr, sl, r8
 80146d6:	f892 a001 	ldrb.w	sl, [r2, #1]
 80146da:	fb01 880a 	mla	r8, r1, sl, r8
 80146de:	f890 a001 	ldrb.w	sl, [r0, #1]
 80146e2:	fb09 880a 	mla	r8, r9, sl, r8
 80146e6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80146ea:	f886 8001 	strb.w	r8, [r6, #1]
 80146ee:	78bf      	ldrb	r7, [r7, #2]
 80146f0:	f89c c002 	ldrb.w	ip, [ip, #2]
 80146f4:	437b      	muls	r3, r7
 80146f6:	7892      	ldrb	r2, [r2, #2]
 80146f8:	fb0e 330c 	mla	r3, lr, ip, r3
 80146fc:	fb01 3102 	mla	r1, r1, r2, r3
 8014700:	7882      	ldrb	r2, [r0, #2]
 8014702:	fb09 1902 	mla	r9, r9, r2, r1
 8014706:	ea4f 2929 	mov.w	r9, r9, asr #8
 801470a:	f886 9002 	strb.w	r9, [r6, #2]
 801470e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014710:	3603      	adds	r6, #3
 8014712:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014714:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014718:	441c      	add	r4, r3
 801471a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801471c:	4413      	add	r3, r2
 801471e:	9322      	str	r3, [sp, #136]	; 0x88
 8014720:	e769      	b.n	80145f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8014722:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014724:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8014726:	441c      	add	r4, r3
 8014728:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801472a:	443b      	add	r3, r7
 801472c:	9322      	str	r3, [sp, #136]	; 0x88
 801472e:	9b06      	ldr	r3, [sp, #24]
 8014730:	3b01      	subs	r3, #1
 8014732:	9306      	str	r3, [sp, #24]
 8014734:	9b07      	ldr	r3, [sp, #28]
 8014736:	3303      	adds	r3, #3
 8014738:	9307      	str	r3, [sp, #28]
 801473a:	e73e      	b.n	80145ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801473c:	d026      	beq.n	801478c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801473e:	9b06      	ldr	r3, [sp, #24]
 8014740:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8014742:	3b01      	subs	r3, #1
 8014744:	fb00 4003 	mla	r0, r0, r3, r4
 8014748:	1400      	asrs	r0, r0, #16
 801474a:	f53f af52 	bmi.w	80145f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801474e:	3901      	subs	r1, #1
 8014750:	4288      	cmp	r0, r1
 8014752:	f6bf af4e 	bge.w	80145f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8014756:	9924      	ldr	r1, [sp, #144]	; 0x90
 8014758:	9822      	ldr	r0, [sp, #136]	; 0x88
 801475a:	fb01 0303 	mla	r3, r1, r3, r0
 801475e:	141b      	asrs	r3, r3, #16
 8014760:	f53f af47 	bmi.w	80145f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8014764:	3a01      	subs	r2, #1
 8014766:	4293      	cmp	r3, r2
 8014768:	f6bf af43 	bge.w	80145f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801476c:	9b07      	ldr	r3, [sp, #28]
 801476e:	f8dd a018 	ldr.w	sl, [sp, #24]
 8014772:	f103 0803 	add.w	r8, r3, #3
 8014776:	f1ba 0f00 	cmp.w	sl, #0
 801477a:	dc71      	bgt.n	8014860 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801477c:	9b06      	ldr	r3, [sp, #24]
 801477e:	9a07      	ldr	r2, [sp, #28]
 8014780:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014784:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014788:	441a      	add	r2, r3
 801478a:	9207      	str	r2, [sp, #28]
 801478c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801478e:	2b00      	cmp	r3, #0
 8014790:	f340 80f2 	ble.w	8014978 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8014794:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8014798:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801479a:	ee79 9aab 	vadd.f32	s19, s19, s23
 801479e:	eef0 6a48 	vmov.f32	s13, s16
 80147a2:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80147a6:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80147aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80147ae:	ee16 4a90 	vmov	r4, s13
 80147b2:	eef0 6a68 	vmov.f32	s13, s17
 80147b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80147ba:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 80147be:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80147c2:	ee69 7a27 	vmul.f32	s15, s18, s15
 80147c6:	ee37 8a48 	vsub.f32	s16, s14, s16
 80147ca:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80147ce:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80147d2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80147d6:	ee18 2a10 	vmov	r2, s16
 80147da:	eeb0 8a47 	vmov.f32	s16, s14
 80147de:	fb92 f3f3 	sdiv	r3, r2, r3
 80147e2:	ee18 2a90 	vmov	r2, s17
 80147e6:	9323      	str	r3, [sp, #140]	; 0x8c
 80147e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80147ea:	eef0 8a67 	vmov.f32	s17, s15
 80147ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80147f2:	9324      	str	r3, [sp, #144]	; 0x90
 80147f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80147f8:	3b01      	subs	r3, #1
 80147fa:	9309      	str	r3, [sp, #36]	; 0x24
 80147fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80147fe:	bf08      	it	eq
 8014800:	4613      	moveq	r3, r2
 8014802:	9306      	str	r3, [sp, #24]
 8014804:	e6cb      	b.n	801459e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8014806:	b151      	cbz	r1, 801481e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8014808:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801480c:	4660      	mov	r0, ip
 801480e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014812:	442a      	add	r2, r5
 8014814:	4667      	mov	r7, ip
 8014816:	e731      	b.n	801467c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8014818:	4660      	mov	r0, ip
 801481a:	4662      	mov	r2, ip
 801481c:	e72e      	b.n	801467c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801481e:	4660      	mov	r0, ip
 8014820:	4662      	mov	r2, ip
 8014822:	e7f7      	b.n	8014814 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8014824:	f110 0e01 	adds.w	lr, r0, #1
 8014828:	f53f af71 	bmi.w	801470e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801482c:	4572      	cmp	r2, lr
 801482e:	f6ff af6e 	blt.w	801470e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8014832:	f117 0e01 	adds.w	lr, r7, #1
 8014836:	f53f af6a 	bmi.w	801470e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801483a:	45f4      	cmp	ip, lr
 801483c:	f6ff af67 	blt.w	801470e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8014840:	b212      	sxth	r2, r2
 8014842:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8014846:	fa0f f38c 	sxth.w	r3, ip
 801484a:	9200      	str	r2, [sp, #0]
 801484c:	4631      	mov	r1, r6
 801484e:	9a08      	ldr	r2, [sp, #32]
 8014850:	9301      	str	r3, [sp, #4]
 8014852:	462b      	mov	r3, r5
 8014854:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8014858:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801485a:	f7ff fdbf 	bl	80143dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801485e:	e756      	b.n	801470e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8014860:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014862:	1426      	asrs	r6, r4, #16
 8014864:	9822      	ldr	r0, [sp, #136]	; 0x88
 8014866:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801486a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801486e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8014870:	1400      	asrs	r0, r0, #16
 8014872:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8014876:	fb02 6000 	mla	r0, r2, r0, r6
 801487a:	9e08      	ldr	r6, [sp, #32]
 801487c:	f816 e000 	ldrb.w	lr, [r6, r0]
 8014880:	eb06 0c00 	add.w	ip, r6, r0
 8014884:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8014888:	eb05 070e 	add.w	r7, r5, lr
 801488c:	2b00      	cmp	r3, #0
 801488e:	d064      	beq.n	801495a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 8014890:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8014894:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8014898:	442e      	add	r6, r5
 801489a:	2900      	cmp	r1, #0
 801489c:	d066      	beq.n	801496c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 801489e:	eb0c 0002 	add.w	r0, ip, r2
 80148a2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80148a6:	7840      	ldrb	r0, [r0, #1]
 80148a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80148ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80148b0:	442a      	add	r2, r5
 80148b2:	4428      	add	r0, r5
 80148b4:	b29b      	uxth	r3, r3
 80148b6:	f815 b00e 	ldrb.w	fp, [r5, lr]
 80148ba:	b289      	uxth	r1, r1
 80148bc:	f896 e000 	ldrb.w	lr, [r6]
 80148c0:	f108 0803 	add.w	r8, r8, #3
 80148c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80148c8:	fb03 f901 	mul.w	r9, r3, r1
 80148cc:	011b      	lsls	r3, r3, #4
 80148ce:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80148d2:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80148d6:	eba3 0309 	sub.w	r3, r3, r9
 80148da:	b289      	uxth	r1, r1
 80148dc:	b29b      	uxth	r3, r3
 80148de:	ebac 0c01 	sub.w	ip, ip, r1
 80148e2:	fb03 fe0e 	mul.w	lr, r3, lr
 80148e6:	fa1f fc8c 	uxth.w	ip, ip
 80148ea:	fb0c ee0b 	mla	lr, ip, fp, lr
 80148ee:	f892 b000 	ldrb.w	fp, [r2]
 80148f2:	fb01 ee0b 	mla	lr, r1, fp, lr
 80148f6:	f890 b000 	ldrb.w	fp, [r0]
 80148fa:	fb09 ee0b 	mla	lr, r9, fp, lr
 80148fe:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8014902:	f808 ec06 	strb.w	lr, [r8, #-6]
 8014906:	f896 e001 	ldrb.w	lr, [r6, #1]
 801490a:	f897 b001 	ldrb.w	fp, [r7, #1]
 801490e:	fb03 fe0e 	mul.w	lr, r3, lr
 8014912:	fb0c ee0b 	mla	lr, ip, fp, lr
 8014916:	f892 b001 	ldrb.w	fp, [r2, #1]
 801491a:	fb01 ee0b 	mla	lr, r1, fp, lr
 801491e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8014922:	fb09 ee0b 	mla	lr, r9, fp, lr
 8014926:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801492a:	f808 ec05 	strb.w	lr, [r8, #-5]
 801492e:	78b6      	ldrb	r6, [r6, #2]
 8014930:	78bf      	ldrb	r7, [r7, #2]
 8014932:	4373      	muls	r3, r6
 8014934:	7896      	ldrb	r6, [r2, #2]
 8014936:	7882      	ldrb	r2, [r0, #2]
 8014938:	fb0c 3307 	mla	r3, ip, r7, r3
 801493c:	fb01 3306 	mla	r3, r1, r6, r3
 8014940:	fb09 3902 	mla	r9, r9, r2, r3
 8014944:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014946:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014948:	441c      	add	r4, r3
 801494a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801494c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014950:	4413      	add	r3, r2
 8014952:	f808 9c04 	strb.w	r9, [r8, #-4]
 8014956:	9322      	str	r3, [sp, #136]	; 0x88
 8014958:	e70d      	b.n	8014776 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801495a:	b151      	cbz	r1, 8014972 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 801495c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014960:	4638      	mov	r0, r7
 8014962:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014966:	442a      	add	r2, r5
 8014968:	463e      	mov	r6, r7
 801496a:	e7a3      	b.n	80148b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801496c:	4638      	mov	r0, r7
 801496e:	463a      	mov	r2, r7
 8014970:	e7a0      	b.n	80148b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8014972:	4638      	mov	r0, r7
 8014974:	463a      	mov	r2, r7
 8014976:	e7f7      	b.n	8014968 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8014978:	b00d      	add	sp, #52	; 0x34
 801497a:	ecbd 8b0a 	vpop	{d8-d12}
 801497e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08014984 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8014984:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014988:	e9dd 050e 	ldrd	r0, r5, [sp, #56]	; 0x38
 801498c:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8014990:	2d00      	cmp	r5, #0
 8014992:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8014996:	fb05 040e 	mla	r4, r5, lr, r0
 801499a:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 801499e:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 80149a2:	eb02 0804 	add.w	r8, r2, r4
 80149a6:	db40      	blt.n	8014a2a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 80149a8:	45a9      	cmp	r9, r5
 80149aa:	dd3e      	ble.n	8014a2a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 80149ac:	2800      	cmp	r0, #0
 80149ae:	db3a      	blt.n	8014a26 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 80149b0:	4586      	cmp	lr, r0
 80149b2:	dd38      	ble.n	8014a26 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 80149b4:	5d12      	ldrb	r2, [r2, r4]
 80149b6:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80149ba:	1c42      	adds	r2, r0, #1
 80149bc:	d438      	bmi.n	8014a30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 80149be:	4596      	cmp	lr, r2
 80149c0:	dd36      	ble.n	8014a30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 80149c2:	b3bf      	cbz	r7, 8014a34 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb0>
 80149c4:	f898 2001 	ldrb.w	r2, [r8, #1]
 80149c8:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80149cc:	3501      	adds	r5, #1
 80149ce:	d435      	bmi.n	8014a3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 80149d0:	45a9      	cmp	r9, r5
 80149d2:	dd33      	ble.n	8014a3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 80149d4:	f1bc 0f00 	cmp.w	ip, #0
 80149d8:	d033      	beq.n	8014a42 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbe>
 80149da:	2800      	cmp	r0, #0
 80149dc:	db2c      	blt.n	8014a38 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 80149de:	4586      	cmp	lr, r0
 80149e0:	dd2a      	ble.n	8014a38 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 80149e2:	f818 200e 	ldrb.w	r2, [r8, lr]
 80149e6:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80149ea:	3001      	adds	r0, #1
 80149ec:	d42c      	bmi.n	8014a48 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 80149ee:	4586      	cmp	lr, r0
 80149f0:	dd2a      	ble.n	8014a48 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 80149f2:	b35f      	cbz	r7, 8014a4c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc8>
 80149f4:	44c6      	add	lr, r8
 80149f6:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80149fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80149fe:	2f0f      	cmp	r7, #15
 8014a00:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8014a04:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8014a08:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8014a0c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8014a10:	d802      	bhi.n	8014a18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x94>
 8014a12:	f1bc 0f0f 	cmp.w	ip, #15
 8014a16:	d91b      	bls.n	8014a50 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xcc>
 8014a18:	4b77      	ldr	r3, [pc, #476]	; (8014bf8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>)
 8014a1a:	f240 1157 	movw	r1, #343	; 0x157
 8014a1e:	4a77      	ldr	r2, [pc, #476]	; (8014bfc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>)
 8014a20:	4877      	ldr	r0, [pc, #476]	; (8014c00 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x27c>)
 8014a22:	f004 fa2b 	bl	8018e7c <__assert_func>
 8014a26:	2600      	movs	r6, #0
 8014a28:	e7c7      	b.n	80149ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 8014a2a:	2400      	movs	r4, #0
 8014a2c:	4626      	mov	r6, r4
 8014a2e:	e7cd      	b.n	80149cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8014a30:	2400      	movs	r4, #0
 8014a32:	e7cb      	b.n	80149cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8014a34:	463c      	mov	r4, r7
 8014a36:	e7c9      	b.n	80149cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8014a38:	2500      	movs	r5, #0
 8014a3a:	e7d6      	b.n	80149ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x66>
 8014a3c:	2200      	movs	r2, #0
 8014a3e:	4615      	mov	r5, r2
 8014a40:	e7dd      	b.n	80149fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8014a42:	4662      	mov	r2, ip
 8014a44:	4665      	mov	r5, ip
 8014a46:	e7da      	b.n	80149fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8014a48:	2200      	movs	r2, #0
 8014a4a:	e7d8      	b.n	80149fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8014a4c:	463a      	mov	r2, r7
 8014a4e:	e7d6      	b.n	80149fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8014a50:	b2bf      	uxth	r7, r7
 8014a52:	fa1f f08c 	uxth.w	r0, ip
 8014a56:	ea4f 1c07 	mov.w	ip, r7, lsl #4
 8014a5a:	fb00 fe07 	mul.w	lr, r0, r7
 8014a5e:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8014a62:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8014a66:	ebac 070e 	sub.w	r7, ip, lr
 8014a6a:	b280      	uxth	r0, r0
 8014a6c:	b2bf      	uxth	r7, r7
 8014a6e:	1a1b      	subs	r3, r3, r0
 8014a70:	fb07 fc0a 	mul.w	ip, r7, sl
 8014a74:	b29b      	uxth	r3, r3
 8014a76:	fb03 cc0b 	mla	ip, r3, fp, ip
 8014a7a:	9300      	str	r3, [sp, #0]
 8014a7c:	fb00 cc09 	mla	ip, r0, r9, ip
 8014a80:	fb0e cc08 	mla	ip, lr, r8, ip
 8014a84:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8014a88:	9301      	str	r3, [sp, #4]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	f000 80b0 	beq.w	8014bf0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26c>
 8014a90:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8014a94:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8014a98:	fb0b fc0c 	mul.w	ip, fp, ip
 8014a9c:	fb0b f606 	mul.w	r6, fp, r6
 8014aa0:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8014aa4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8014aa8:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8014aac:	44dc      	add	ip, fp
 8014aae:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8014ab2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8014ab6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014aba:	fb0a fb0b 	mul.w	fp, sl, fp
 8014abe:	fb0a fa04 	mul.w	sl, sl, r4
 8014ac2:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8014ac6:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8014aca:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 8014ace:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8014ad2:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8014ad6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8014ada:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 8014ade:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014ae2:	0a36      	lsrs	r6, r6, #8
 8014ae4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014ae8:	44dc      	add	ip, fp
 8014aea:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8014aee:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8014af2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014af6:	fb09 fb0b 	mul.w	fp, r9, fp
 8014afa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014afe:	fb09 f905 	mul.w	r9, r9, r5
 8014b02:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8014b06:	ea4f 241b 	mov.w	r4, fp, lsr #8
 8014b0a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014b0e:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8014b12:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8014b16:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8014b1a:	fb0c fc07 	mul.w	ip, ip, r7
 8014b1e:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8014b22:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8014b26:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8014b2a:	445c      	add	r4, fp
 8014b2c:	fb08 f505 	mul.w	r5, r8, r5
 8014b30:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8014b34:	fb08 f802 	mul.w	r8, r8, r2
 8014b38:	0a24      	lsrs	r4, r4, #8
 8014b3a:	0a2a      	lsrs	r2, r5, #8
 8014b3c:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8014b40:	fb07 f70a 	mul.w	r7, r7, sl
 8014b44:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8014b48:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8014b4c:	4415      	add	r5, r2
 8014b4e:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8014b52:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8014b56:	9a00      	ldr	r2, [sp, #0]
 8014b58:	0a2d      	lsrs	r5, r5, #8
 8014b5a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8014b5e:	fb03 cc02 	mla	ip, r3, r2, ip
 8014b62:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8014b66:	fb02 7306 	mla	r3, r2, r6, r7
 8014b6a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8014b6e:	9a01      	ldr	r2, [sp, #4]
 8014b70:	fb05 c50e 	mla	r5, r5, lr, ip
 8014b74:	fb0e 3e08 	mla	lr, lr, r8, r3
 8014b78:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 8014b7c:	fb04 5400 	mla	r4, r4, r0, r5
 8014b80:	fb00 e303 	mla	r3, r0, r3, lr
 8014b84:	0a24      	lsrs	r4, r4, #8
 8014b86:	0a1b      	lsrs	r3, r3, #8
 8014b88:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8014b8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014b90:	431c      	orrs	r4, r3
 8014b92:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8014b96:	b29b      	uxth	r3, r3
 8014b98:	b2e0      	uxtb	r0, r4
 8014b9a:	435a      	muls	r2, r3
 8014b9c:	fb10 f003 	smulbb	r0, r0, r3
 8014ba0:	1c55      	adds	r5, r2, #1
 8014ba2:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 8014ba6:	780a      	ldrb	r2, [r1, #0]
 8014ba8:	ea6f 2515 	mvn.w	r5, r5, lsr #8
 8014bac:	b2ed      	uxtb	r5, r5
 8014bae:	fb02 0205 	mla	r2, r2, r5, r0
 8014bb2:	b292      	uxth	r2, r2
 8014bb4:	1c50      	adds	r0, r2, #1
 8014bb6:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8014bba:	7848      	ldrb	r0, [r1, #1]
 8014bbc:	fb10 f005 	smulbb	r0, r0, r5
 8014bc0:	1212      	asrs	r2, r2, #8
 8014bc2:	700a      	strb	r2, [r1, #0]
 8014bc4:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8014bc8:	0c24      	lsrs	r4, r4, #16
 8014bca:	fb02 0203 	mla	r2, r2, r3, r0
 8014bce:	b292      	uxth	r2, r2
 8014bd0:	1c50      	adds	r0, r2, #1
 8014bd2:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8014bd6:	1212      	asrs	r2, r2, #8
 8014bd8:	704a      	strb	r2, [r1, #1]
 8014bda:	788a      	ldrb	r2, [r1, #2]
 8014bdc:	fb12 f505 	smulbb	r5, r2, r5
 8014be0:	fb04 5303 	mla	r3, r4, r3, r5
 8014be4:	b29b      	uxth	r3, r3
 8014be6:	1c5a      	adds	r2, r3, #1
 8014be8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8014bec:	121b      	asrs	r3, r3, #8
 8014bee:	708b      	strb	r3, [r1, #2]
 8014bf0:	b003      	add	sp, #12
 8014bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bf6:	bf00      	nop
 8014bf8:	0801cf27 	.word	0x0801cf27
 8014bfc:	0801d3de 	.word	0x0801d3de
 8014c00:	0801cfaf 	.word	0x0801cfaf

08014c04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c08:	ed2d 8b08 	vpush	{d8-d11}
 8014c0c:	b09f      	sub	sp, #124	; 0x7c
 8014c0e:	eeb0 aa40 	vmov.f32	s20, s0
 8014c12:	eef0 9a60 	vmov.f32	s19, s1
 8014c16:	921b      	str	r2, [sp, #108]	; 0x6c
 8014c18:	eeb0 9a41 	vmov.f32	s18, s2
 8014c1c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8014c1e:	eeb0 8a62 	vmov.f32	s16, s5
 8014c22:	9309      	str	r3, [sp, #36]	; 0x24
 8014c24:	eef0 8a43 	vmov.f32	s17, s6
 8014c28:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8014c2c:	eef0 ba44 	vmov.f32	s23, s8
 8014c30:	901d      	str	r0, [sp, #116]	; 0x74
 8014c32:	eeb0 ba64 	vmov.f32	s22, s9
 8014c36:	931c      	str	r3, [sp, #112]	; 0x70
 8014c38:	eef0 aa45 	vmov.f32	s21, s10
 8014c3c:	6850      	ldr	r0, [r2, #4]
 8014c3e:	9119      	str	r1, [sp, #100]	; 0x64
 8014c40:	6812      	ldr	r2, [r2, #0]
 8014c42:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8014c44:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8014c48:	fb00 1303 	mla	r3, r0, r3, r1
 8014c4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014c50:	18d3      	adds	r3, r2, r3
 8014c52:	930c      	str	r3, [sp, #48]	; 0x30
 8014c54:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	9312      	str	r3, [sp, #72]	; 0x48
 8014c5a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8014c5c:	685e      	ldr	r6, [r3, #4]
 8014c5e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8014c62:	3604      	adds	r6, #4
 8014c64:	930d      	str	r3, [sp, #52]	; 0x34
 8014c66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	dc03      	bgt.n	8014c74 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8014c6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	f340 8378 	ble.w	8015364 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8014c74:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8014c76:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8014c7a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8014c7e:	1e48      	subs	r0, r1, #1
 8014c80:	1e57      	subs	r7, r2, #1
 8014c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	f340 818c 	ble.w	8014fa2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8014c8a:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8014c8c:	142b      	asrs	r3, r5, #16
 8014c8e:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8014c92:	d406      	bmi.n	8014ca2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8014c94:	4584      	cmp	ip, r0
 8014c96:	da04      	bge.n	8014ca2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	db02      	blt.n	8014ca2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8014c9c:	42bb      	cmp	r3, r7
 8014c9e:	f2c0 8181 	blt.w	8014fa4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 8014ca2:	f11c 0c01 	adds.w	ip, ip, #1
 8014ca6:	f100 816f 	bmi.w	8014f88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8014caa:	4561      	cmp	r1, ip
 8014cac:	f2c0 816c 	blt.w	8014f88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8014cb0:	3301      	adds	r3, #1
 8014cb2:	f100 8169 	bmi.w	8014f88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8014cb6:	429a      	cmp	r2, r3
 8014cb8:	f2c0 8166 	blt.w	8014f88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8014cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cbe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8014cc0:	931a      	str	r3, [sp, #104]	; 0x68
 8014cc2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	f340 818c 	ble.w	8014fe2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8014cca:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8014ccc:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8014cd0:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8014cd4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8014cd8:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8014cda:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8014cde:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8014ce0:	141b      	asrs	r3, r3, #16
 8014ce2:	f100 81d0 	bmi.w	8015086 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8014ce6:	f100 38ff 	add.w	r8, r0, #4294967295
 8014cea:	4543      	cmp	r3, r8
 8014cec:	f280 81cb 	bge.w	8015086 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8014cf0:	f1bc 0f00 	cmp.w	ip, #0
 8014cf4:	f2c0 81c7 	blt.w	8015086 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8014cf8:	f10e 38ff 	add.w	r8, lr, #4294967295
 8014cfc:	45c4      	cmp	ip, r8
 8014cfe:	f280 81c2 	bge.w	8015086 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8014d02:	b200      	sxth	r0, r0
 8014d04:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8014d06:	fb0c 3300 	mla	r3, ip, r0, r3
 8014d0a:	eb04 0803 	add.w	r8, r4, r3
 8014d0e:	5ce3      	ldrb	r3, [r4, r3]
 8014d10:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8014d14:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8014d18:	2a00      	cmp	r2, #0
 8014d1a:	f000 81a9 	beq.w	8015070 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46c>
 8014d1e:	f898 c001 	ldrb.w	ip, [r8, #1]
 8014d22:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8014d26:	940e      	str	r4, [sp, #56]	; 0x38
 8014d28:	0e24      	lsrs	r4, r4, #24
 8014d2a:	9415      	str	r4, [sp, #84]	; 0x54
 8014d2c:	b179      	cbz	r1, 8014d4e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8014d2e:	eb08 0c00 	add.w	ip, r8, r0
 8014d32:	f818 0000 	ldrb.w	r0, [r8, r0]
 8014d36:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8014d3a:	900a      	str	r0, [sp, #40]	; 0x28
 8014d3c:	0e00      	lsrs	r0, r0, #24
 8014d3e:	9013      	str	r0, [sp, #76]	; 0x4c
 8014d40:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8014d44:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8014d48:	900f      	str	r0, [sp, #60]	; 0x3c
 8014d4a:	0e00      	lsrs	r0, r0, #24
 8014d4c:	9016      	str	r0, [sp, #88]	; 0x58
 8014d4e:	b292      	uxth	r2, r2
 8014d50:	9815      	ldr	r0, [sp, #84]	; 0x54
 8014d52:	b289      	uxth	r1, r1
 8014d54:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014d56:	fb02 f901 	mul.w	r9, r2, r1
 8014d5a:	0112      	lsls	r2, r2, #4
 8014d5c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8014d60:	eba2 0809 	sub.w	r8, r2, r9
 8014d64:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8014d68:	b289      	uxth	r1, r1
 8014d6a:	fa1f f888 	uxth.w	r8, r8
 8014d6e:	1a52      	subs	r2, r2, r1
 8014d70:	fb08 f000 	mul.w	r0, r8, r0
 8014d74:	b292      	uxth	r2, r2
 8014d76:	fb02 000e 	mla	r0, r2, lr, r0
 8014d7a:	fb01 0004 	mla	r0, r1, r4, r0
 8014d7e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8014d80:	fb09 0004 	mla	r0, r9, r4, r0
 8014d84:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8014d88:	2800      	cmp	r0, #0
 8014d8a:	f000 80f2 	beq.w	8014f72 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8014d8e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8014d92:	d01b      	beq.n	8014dcc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8014d94:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8014d98:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014d9c:	fb0e fa0a 	mul.w	sl, lr, sl
 8014da0:	fb0e fe03 	mul.w	lr, lr, r3
 8014da4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8014da8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8014dac:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8014db0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8014db4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8014db8:	4453      	add	r3, sl
 8014dba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014dbe:	0a1b      	lsrs	r3, r3, #8
 8014dc0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8014dc4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8014dc8:	ea43 030c 	orr.w	r3, r3, ip
 8014dcc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8014dce:	2cff      	cmp	r4, #255	; 0xff
 8014dd0:	d021      	beq.n	8014e16 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8014dd2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8014dd4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8014dd8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8014dda:	fb04 fb0b 	mul.w	fp, r4, fp
 8014dde:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8014de0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8014de4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8014de6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8014dea:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8014dee:	fb04 fa0a 	mul.w	sl, r4, sl
 8014df2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014df6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8014dfa:	44de      	add	lr, fp
 8014dfc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8014e00:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8014e04:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014e08:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014e0c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014e10:	ea4e 040a 	orr.w	r4, lr, sl
 8014e14:	940e      	str	r4, [sp, #56]	; 0x38
 8014e16:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014e18:	2cff      	cmp	r4, #255	; 0xff
 8014e1a:	d021      	beq.n	8014e60 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 8014e1c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014e1e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8014e22:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014e24:	fb04 fb0b 	mul.w	fp, r4, fp
 8014e28:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014e2a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8014e2e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014e30:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8014e34:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8014e38:	fb04 fa0a 	mul.w	sl, r4, sl
 8014e3c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014e40:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8014e44:	44de      	add	lr, fp
 8014e46:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8014e4a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8014e4e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014e52:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014e56:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014e5a:	ea4e 040a 	orr.w	r4, lr, sl
 8014e5e:	940a      	str	r4, [sp, #40]	; 0x28
 8014e60:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8014e62:	2cff      	cmp	r4, #255	; 0xff
 8014e64:	d021      	beq.n	8014eaa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8014e66:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8014e68:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8014e6c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8014e6e:	fb04 fb0b 	mul.w	fp, r4, fp
 8014e72:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8014e74:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8014e78:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8014e7a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8014e7e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8014e82:	fb04 fa0a 	mul.w	sl, r4, sl
 8014e86:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014e8a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8014e8e:	44de      	add	lr, fp
 8014e90:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8014e94:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8014e98:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8014e9c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8014ea0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8014ea4:	ea4e 040a 	orr.w	r4, lr, sl
 8014ea8:	940f      	str	r4, [sp, #60]	; 0x3c
 8014eaa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8014eac:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8014eb0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014eb4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8014eb8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014eba:	fb08 fc0c 	mul.w	ip, r8, ip
 8014ebe:	fb02 cc0e 	mla	ip, r2, lr, ip
 8014ec2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8014ec6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8014ec8:	fb01 cc0e 	mla	ip, r1, lr, ip
 8014ecc:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8014ed0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8014ed2:	fb09 cc0e 	mla	ip, r9, lr, ip
 8014ed6:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8014eda:	fb08 f80e 	mul.w	r8, r8, lr
 8014ede:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8014ee2:	fb02 8303 	mla	r3, r2, r3, r8
 8014ee6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014ee8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8014eec:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8014ef0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014ef2:	fb01 330a 	mla	r3, r1, sl, r3
 8014ef6:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8014efa:	fb09 3901 	mla	r9, r9, r1, r3
 8014efe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014f00:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014f02:	4343      	muls	r3, r0
 8014f04:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8014f08:	1c58      	adds	r0, r3, #1
 8014f0a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8014f0e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8014f12:	ea4c 0c09 	orr.w	ip, ip, r9
 8014f16:	783b      	ldrb	r3, [r7, #0]
 8014f18:	fa5f f28c 	uxtb.w	r2, ip
 8014f1c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8014f20:	fb12 f201 	smulbb	r2, r2, r1
 8014f24:	b2c0      	uxtb	r0, r0
 8014f26:	fb03 2300 	mla	r3, r3, r0, r2
 8014f2a:	b29b      	uxth	r3, r3
 8014f2c:	1c5a      	adds	r2, r3, #1
 8014f2e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8014f32:	787a      	ldrb	r2, [r7, #1]
 8014f34:	fb12 f200 	smulbb	r2, r2, r0
 8014f38:	121b      	asrs	r3, r3, #8
 8014f3a:	703b      	strb	r3, [r7, #0]
 8014f3c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8014f40:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8014f44:	fb03 2301 	mla	r3, r3, r1, r2
 8014f48:	b29b      	uxth	r3, r3
 8014f4a:	1c5a      	adds	r2, r3, #1
 8014f4c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8014f50:	121b      	asrs	r3, r3, #8
 8014f52:	707b      	strb	r3, [r7, #1]
 8014f54:	78bb      	ldrb	r3, [r7, #2]
 8014f56:	fb13 f000 	smulbb	r0, r3, r0
 8014f5a:	fb0c 0c01 	mla	ip, ip, r1, r0
 8014f5e:	fa1f fc8c 	uxth.w	ip, ip
 8014f62:	f10c 0301 	add.w	r3, ip, #1
 8014f66:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8014f6a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8014f6e:	f887 c002 	strb.w	ip, [r7, #2]
 8014f72:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8014f74:	3703      	adds	r7, #3
 8014f76:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8014f78:	441a      	add	r2, r3
 8014f7a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8014f7c:	441d      	add	r5, r3
 8014f7e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014f80:	9231      	str	r2, [sp, #196]	; 0xc4
 8014f82:	3b01      	subs	r3, #1
 8014f84:	931a      	str	r3, [sp, #104]	; 0x68
 8014f86:	e69c      	b.n	8014cc2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8014f88:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8014f8a:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8014f8c:	441c      	add	r4, r3
 8014f8e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8014f90:	441d      	add	r5, r3
 8014f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f94:	9431      	str	r4, [sp, #196]	; 0xc4
 8014f96:	3b01      	subs	r3, #1
 8014f98:	9309      	str	r3, [sp, #36]	; 0x24
 8014f9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f9c:	3303      	adds	r3, #3
 8014f9e:	930c      	str	r3, [sp, #48]	; 0x30
 8014fa0:	e66f      	b.n	8014c82 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8014fa2:	d026      	beq.n	8014ff2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8014fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fa6:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8014fa8:	3b01      	subs	r3, #1
 8014faa:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8014fac:	fb00 4003 	mla	r0, r0, r3, r4
 8014fb0:	1400      	asrs	r0, r0, #16
 8014fb2:	f53f ae83 	bmi.w	8014cbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8014fb6:	3901      	subs	r1, #1
 8014fb8:	4288      	cmp	r0, r1
 8014fba:	f6bf ae7f 	bge.w	8014cbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8014fbe:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8014fc0:	fb01 5303 	mla	r3, r1, r3, r5
 8014fc4:	141b      	asrs	r3, r3, #16
 8014fc6:	f53f ae79 	bmi.w	8014cbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8014fca:	3a01      	subs	r2, #1
 8014fcc:	4293      	cmp	r3, r2
 8014fce:	f6bf ae75 	bge.w	8014cbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8014fd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014fd4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8014fd8:	f103 0e03 	add.w	lr, r3, #3
 8014fdc:	f1bb 0f00 	cmp.w	fp, #0
 8014fe0:	dc71      	bgt.n	80150c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8014fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fe4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8014fe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014fea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014fee:	4423      	add	r3, r4
 8014ff0:	930c      	str	r3, [sp, #48]	; 0x30
 8014ff2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	f340 81b5 	ble.w	8015364 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8014ffa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014ffe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8015000:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8015004:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8015008:	eef0 6a48 	vmov.f32	s13, s16
 801500c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8015010:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8015014:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015018:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 801501c:	eef0 6a68 	vmov.f32	s13, s17
 8015020:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015024:	ee16 5a90 	vmov	r5, s13
 8015028:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801502c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8015030:	ee37 8a48 	vsub.f32	s16, s14, s16
 8015034:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8015038:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801503c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8015040:	ee18 2a10 	vmov	r2, s16
 8015044:	eeb0 8a47 	vmov.f32	s16, s14
 8015048:	fb92 f3f3 	sdiv	r3, r2, r3
 801504c:	ee18 2a90 	vmov	r2, s17
 8015050:	9333      	str	r3, [sp, #204]	; 0xcc
 8015052:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8015054:	eef0 8a67 	vmov.f32	s17, s15
 8015058:	fb92 f3f3 	sdiv	r3, r2, r3
 801505c:	9334      	str	r3, [sp, #208]	; 0xd0
 801505e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015060:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015062:	3b01      	subs	r3, #1
 8015064:	9319      	str	r3, [sp, #100]	; 0x64
 8015066:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8015068:	bf08      	it	eq
 801506a:	4613      	moveq	r3, r2
 801506c:	9309      	str	r3, [sp, #36]	; 0x24
 801506e:	e5fa      	b.n	8014c66 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8015070:	2900      	cmp	r1, #0
 8015072:	f43f ae6c 	beq.w	8014d4e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8015076:	f818 0000 	ldrb.w	r0, [r8, r0]
 801507a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801507e:	900a      	str	r0, [sp, #40]	; 0x28
 8015080:	0e00      	lsrs	r0, r0, #24
 8015082:	9013      	str	r0, [sp, #76]	; 0x4c
 8015084:	e663      	b.n	8014d4e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8015086:	f113 0801 	adds.w	r8, r3, #1
 801508a:	f53f af72 	bmi.w	8014f72 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801508e:	4540      	cmp	r0, r8
 8015090:	f6ff af6f 	blt.w	8014f72 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8015094:	f11c 0801 	adds.w	r8, ip, #1
 8015098:	f53f af6b 	bmi.w	8014f72 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801509c:	45c6      	cmp	lr, r8
 801509e:	f6ff af68 	blt.w	8014f72 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80150a2:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80150a4:	b200      	sxth	r0, r0
 80150a6:	9302      	str	r3, [sp, #8]
 80150a8:	fa0f f38e 	sxth.w	r3, lr
 80150ac:	9000      	str	r0, [sp, #0]
 80150ae:	9301      	str	r3, [sp, #4]
 80150b0:	4633      	mov	r3, r6
 80150b2:	981d      	ldr	r0, [sp, #116]	; 0x74
 80150b4:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80150b8:	e9cd c203 	strd	ip, r2, [sp, #12]
 80150bc:	4639      	mov	r1, r7
 80150be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80150c0:	f7ff fc60 	bl	8014984 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 80150c4:	e755      	b.n	8014f72 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80150c6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80150c8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80150cc:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80150ce:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80150d2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80150d4:	1427      	asrs	r7, r4, #16
 80150d6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80150d8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80150dc:	142b      	asrs	r3, r5, #16
 80150de:	fb01 7303 	mla	r3, r1, r3, r7
 80150e2:	18e7      	adds	r7, r4, r3
 80150e4:	5ce3      	ldrb	r3, [r4, r3]
 80150e6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80150ea:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80150ee:	2a00      	cmp	r2, #0
 80150f0:	f000 812e 	beq.w	8015350 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>
 80150f4:	f897 8001 	ldrb.w	r8, [r7, #1]
 80150f8:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 80150fc:	9410      	str	r4, [sp, #64]	; 0x40
 80150fe:	0e24      	lsrs	r4, r4, #24
 8015100:	9417      	str	r4, [sp, #92]	; 0x5c
 8015102:	b170      	cbz	r0, 8015122 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8015104:	eb07 0801 	add.w	r8, r7, r1
 8015108:	5c79      	ldrb	r1, [r7, r1]
 801510a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801510e:	910b      	str	r1, [sp, #44]	; 0x2c
 8015110:	0e09      	lsrs	r1, r1, #24
 8015112:	9114      	str	r1, [sp, #80]	; 0x50
 8015114:	f898 1001 	ldrb.w	r1, [r8, #1]
 8015118:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801511c:	9111      	str	r1, [sp, #68]	; 0x44
 801511e:	0e09      	lsrs	r1, r1, #24
 8015120:	9118      	str	r1, [sp, #96]	; 0x60
 8015122:	b292      	uxth	r2, r2
 8015124:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8015126:	b280      	uxth	r0, r0
 8015128:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801512a:	fb02 f900 	mul.w	r9, r2, r0
 801512e:	0112      	lsls	r2, r2, #4
 8015130:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8015134:	eba2 0809 	sub.w	r8, r2, r9
 8015138:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801513c:	b280      	uxth	r0, r0
 801513e:	fa1f f888 	uxth.w	r8, r8
 8015142:	1a12      	subs	r2, r2, r0
 8015144:	fb08 f101 	mul.w	r1, r8, r1
 8015148:	b292      	uxth	r2, r2
 801514a:	fb02 110c 	mla	r1, r2, ip, r1
 801514e:	fb00 1104 	mla	r1, r0, r4, r1
 8015152:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8015154:	fb09 1104 	mla	r1, r9, r4, r1
 8015158:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801515c:	2900      	cmp	r1, #0
 801515e:	f000 80ec 	beq.w	801533a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 8015162:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8015166:	d019      	beq.n	801519c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 8015168:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801516c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015170:	fb0c fa0a 	mul.w	sl, ip, sl
 8015174:	fb0c fc03 	mul.w	ip, ip, r3
 8015178:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801517c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8015180:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8015184:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8015188:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801518c:	4453      	add	r3, sl
 801518e:	0a3f      	lsrs	r7, r7, #8
 8015190:	0a1b      	lsrs	r3, r3, #8
 8015192:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8015196:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801519a:	433b      	orrs	r3, r7
 801519c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801519e:	2cff      	cmp	r4, #255	; 0xff
 80151a0:	d020      	beq.n	80151e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e0>
 80151a2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80151a4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80151a8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80151aa:	4367      	muls	r7, r4
 80151ac:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80151ae:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80151b2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80151b6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80151b8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80151bc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80151c0:	fb04 fa0a 	mul.w	sl, r4, sl
 80151c4:	44bc      	add	ip, r7
 80151c6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80151ca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80151ce:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80151d2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80151d6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80151da:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80151de:	ea4c 040a 	orr.w	r4, ip, sl
 80151e2:	9410      	str	r4, [sp, #64]	; 0x40
 80151e4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80151e6:	2cff      	cmp	r4, #255	; 0xff
 80151e8:	d020      	beq.n	801522c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 80151ea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80151ec:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80151f0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80151f2:	4367      	muls	r7, r4
 80151f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80151f6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80151fa:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80151fe:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015200:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8015204:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015208:	fb04 fa0a 	mul.w	sl, r4, sl
 801520c:	44bc      	add	ip, r7
 801520e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8015212:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015216:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801521a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801521e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015222:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015226:	ea4c 040a 	orr.w	r4, ip, sl
 801522a:	940b      	str	r4, [sp, #44]	; 0x2c
 801522c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801522e:	2cff      	cmp	r4, #255	; 0xff
 8015230:	d020      	beq.n	8015274 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8015232:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8015234:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8015238:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801523a:	4367      	muls	r7, r4
 801523c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801523e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8015242:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8015246:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8015248:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801524c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015250:	fb04 fa0a 	mul.w	sl, r4, sl
 8015254:	44bc      	add	ip, r7
 8015256:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801525a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801525e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8015262:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015266:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801526a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801526e:	ea4c 040a 	orr.w	r4, ip, sl
 8015272:	9411      	str	r4, [sp, #68]	; 0x44
 8015274:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8015276:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801527a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801527e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8015282:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8015284:	fb08 f707 	mul.w	r7, r8, r7
 8015288:	fb02 770c 	mla	r7, r2, ip, r7
 801528c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8015290:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8015292:	fb00 770c 	mla	r7, r0, ip, r7
 8015296:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801529a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801529c:	fb09 770c 	mla	r7, r9, ip, r7
 80152a0:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80152a4:	fb08 f80c 	mul.w	r8, r8, ip
 80152a8:	0a3f      	lsrs	r7, r7, #8
 80152aa:	fb02 8303 	mla	r3, r2, r3, r8
 80152ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80152b0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80152b4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80152b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80152ba:	fb00 330a 	mla	r3, r0, sl, r3
 80152be:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80152c2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80152c4:	fb09 3c0c 	mla	ip, r9, ip, r3
 80152c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80152ca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80152ce:	434b      	muls	r3, r1
 80152d0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80152d4:	1c59      	adds	r1, r3, #1
 80152d6:	ea47 070c 	orr.w	r7, r7, ip
 80152da:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80152de:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80152e2:	b2fa      	uxtb	r2, r7
 80152e4:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80152e8:	fb12 f200 	smulbb	r2, r2, r0
 80152ec:	b2c9      	uxtb	r1, r1
 80152ee:	fb03 2301 	mla	r3, r3, r1, r2
 80152f2:	b29b      	uxth	r3, r3
 80152f4:	1c5a      	adds	r2, r3, #1
 80152f6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80152fa:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80152fe:	fb12 f201 	smulbb	r2, r2, r1
 8015302:	121b      	asrs	r3, r3, #8
 8015304:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8015308:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801530c:	0c3f      	lsrs	r7, r7, #16
 801530e:	fb03 2300 	mla	r3, r3, r0, r2
 8015312:	b29b      	uxth	r3, r3
 8015314:	1c5a      	adds	r2, r3, #1
 8015316:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801531a:	121b      	asrs	r3, r3, #8
 801531c:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8015320:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8015324:	fb13 f101 	smulbb	r1, r3, r1
 8015328:	fb07 1700 	mla	r7, r7, r0, r1
 801532c:	b2bf      	uxth	r7, r7
 801532e:	1c7b      	adds	r3, r7, #1
 8015330:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8015334:	123f      	asrs	r7, r7, #8
 8015336:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801533a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801533c:	f10e 0e03 	add.w	lr, lr, #3
 8015340:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8015342:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015346:	441a      	add	r2, r3
 8015348:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801534a:	9231      	str	r2, [sp, #196]	; 0xc4
 801534c:	441d      	add	r5, r3
 801534e:	e645      	b.n	8014fdc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 8015350:	2800      	cmp	r0, #0
 8015352:	f43f aee6 	beq.w	8015122 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8015356:	5c79      	ldrb	r1, [r7, r1]
 8015358:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801535c:	910b      	str	r1, [sp, #44]	; 0x2c
 801535e:	0e09      	lsrs	r1, r1, #24
 8015360:	9114      	str	r1, [sp, #80]	; 0x50
 8015362:	e6de      	b.n	8015122 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8015364:	b01f      	add	sp, #124	; 0x7c
 8015366:	ecbd 8b08 	vpop	{d8-d11}
 801536a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08015370 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8015370:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015374:	e9dd 040e 	ldrd	r0, r4, [sp, #56]	; 0x38
 8015378:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801537c:	2c00      	cmp	r4, #0
 801537e:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8015382:	fb04 060c 	mla	r6, r4, ip, r0
 8015386:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 801538a:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 801538e:	eb02 0e06 	add.w	lr, r2, r6
 8015392:	db3d      	blt.n	8015410 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 8015394:	45a0      	cmp	r8, r4
 8015396:	dd3b      	ble.n	8015410 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 8015398:	2800      	cmp	r0, #0
 801539a:	db37      	blt.n	801540c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801539c:	4584      	cmp	ip, r0
 801539e:	dd35      	ble.n	801540c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80153a0:	5d92      	ldrb	r2, [r2, r6]
 80153a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80153a6:	1c46      	adds	r6, r0, #1
 80153a8:	d435      	bmi.n	8015416 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 80153aa:	45b4      	cmp	ip, r6
 80153ac:	dd33      	ble.n	8015416 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 80153ae:	b3a5      	cbz	r5, 801541a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xaa>
 80153b0:	f89e 6001 	ldrb.w	r6, [lr, #1]
 80153b4:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80153b8:	3401      	adds	r4, #1
 80153ba:	d432      	bmi.n	8015422 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 80153bc:	45a0      	cmp	r8, r4
 80153be:	dd30      	ble.n	8015422 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 80153c0:	b397      	cbz	r7, 8015428 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb8>
 80153c2:	2800      	cmp	r0, #0
 80153c4:	db2b      	blt.n	801541e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 80153c6:	4584      	cmp	ip, r0
 80153c8:	dd29      	ble.n	801541e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 80153ca:	f81e 400c 	ldrb.w	r4, [lr, ip]
 80153ce:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80153d2:	3001      	adds	r0, #1
 80153d4:	d42b      	bmi.n	801542e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 80153d6:	4584      	cmp	ip, r0
 80153d8:	dd29      	ble.n	801542e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 80153da:	b355      	cbz	r5, 8015432 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc2>
 80153dc:	44f4      	add	ip, lr
 80153de:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80153e2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80153e6:	2d0f      	cmp	r5, #15
 80153e8:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80153ec:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80153f0:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80153f4:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80153f8:	d801      	bhi.n	80153fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x8e>
 80153fa:	2f0f      	cmp	r7, #15
 80153fc:	d91b      	bls.n	8015436 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc6>
 80153fe:	4b7f      	ldr	r3, [pc, #508]	; (80155fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 8015400:	f240 1157 	movw	r1, #343	; 0x157
 8015404:	4a7e      	ldr	r2, [pc, #504]	; (8015600 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 8015406:	487f      	ldr	r0, [pc, #508]	; (8015604 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 8015408:	f003 fd38 	bl	8018e7c <__assert_func>
 801540c:	2200      	movs	r2, #0
 801540e:	e7ca      	b.n	80153a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x36>
 8015410:	2600      	movs	r6, #0
 8015412:	4632      	mov	r2, r6
 8015414:	e7d0      	b.n	80153b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8015416:	2600      	movs	r6, #0
 8015418:	e7ce      	b.n	80153b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 801541a:	462e      	mov	r6, r5
 801541c:	e7cc      	b.n	80153b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 801541e:	2400      	movs	r4, #0
 8015420:	e7d7      	b.n	80153d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x62>
 8015422:	2300      	movs	r3, #0
 8015424:	461c      	mov	r4, r3
 8015426:	e7de      	b.n	80153e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8015428:	463b      	mov	r3, r7
 801542a:	463c      	mov	r4, r7
 801542c:	e7db      	b.n	80153e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 801542e:	2300      	movs	r3, #0
 8015430:	e7d9      	b.n	80153e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8015432:	462b      	mov	r3, r5
 8015434:	e7d7      	b.n	80153e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8015436:	b2a8      	uxth	r0, r5
 8015438:	b2bf      	uxth	r7, r7
 801543a:	fb07 fe00 	mul.w	lr, r7, r0
 801543e:	0100      	lsls	r0, r0, #4
 8015440:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8015444:	eba0 0c0e 	sub.w	ip, r0, lr
 8015448:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801544c:	b2bf      	uxth	r7, r7
 801544e:	fa1f fc8c 	uxth.w	ip, ip
 8015452:	1bc5      	subs	r5, r0, r7
 8015454:	fb0c f00a 	mul.w	r0, ip, sl
 8015458:	b2ad      	uxth	r5, r5
 801545a:	fb05 000b 	mla	r0, r5, fp, r0
 801545e:	fb07 0009 	mla	r0, r7, r9, r0
 8015462:	fb0e 0008 	mla	r0, lr, r8, r0
 8015466:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801546a:	9001      	str	r0, [sp, #4]
 801546c:	2800      	cmp	r0, #0
 801546e:	f000 80c2 	beq.w	80155f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x286>
 8015472:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8015476:	d018      	beq.n	80154aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x13a>
 8015478:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801547c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8015480:	fb0b f000 	mul.w	r0, fp, r0
 8015484:	fb0b fb02 	mul.w	fp, fp, r2
 8015488:	0a02      	lsrs	r2, r0, #8
 801548a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801548e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8015492:	4402      	add	r2, r0
 8015494:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8015498:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801549c:	0a12      	lsrs	r2, r2, #8
 801549e:	0a00      	lsrs	r0, r0, #8
 80154a0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80154a4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80154a8:	4302      	orrs	r2, r0
 80154aa:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80154ae:	d01a      	beq.n	80154e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x176>
 80154b0:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80154b4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80154b8:	fb0a f000 	mul.w	r0, sl, r0
 80154bc:	fb0a fa06 	mul.w	sl, sl, r6
 80154c0:	0a06      	lsrs	r6, r0, #8
 80154c2:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80154c6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80154ca:	4406      	add	r6, r0
 80154cc:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80154d0:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80154d4:	0a36      	lsrs	r6, r6, #8
 80154d6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80154da:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80154de:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80154e2:	ea46 060a 	orr.w	r6, r6, sl
 80154e6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80154ea:	d01b      	beq.n	8015524 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1b4>
 80154ec:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80154f0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80154f4:	fb09 fa0a 	mul.w	sl, r9, sl
 80154f8:	fb09 f004 	mul.w	r0, r9, r4
 80154fc:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8015500:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8015504:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8015508:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801550c:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8015510:	4454      	add	r4, sl
 8015512:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8015516:	0a24      	lsrs	r4, r4, #8
 8015518:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801551c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8015520:	ea44 0409 	orr.w	r4, r4, r9
 8015524:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8015528:	d01b      	beq.n	8015562 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f2>
 801552a:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 801552e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015532:	fb08 f909 	mul.w	r9, r8, r9
 8015536:	fb08 f003 	mul.w	r0, r8, r3
 801553a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801553e:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8015542:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8015546:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801554a:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 801554e:	444b      	add	r3, r9
 8015550:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8015554:	0a1b      	lsrs	r3, r3, #8
 8015556:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801555a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801555e:	ea43 0308 	orr.w	r3, r3, r8
 8015562:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8015566:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801556a:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 801556e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8015572:	fb0c f000 	mul.w	r0, ip, r0
 8015576:	fb0c f606 	mul.w	r6, ip, r6
 801557a:	fb05 0808 	mla	r8, r5, r8, r0
 801557e:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8015582:	fb05 6502 	mla	r5, r5, r2, r6
 8015586:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801558a:	fb07 8800 	mla	r8, r7, r0, r8
 801558e:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8015592:	fb07 5704 	mla	r7, r7, r4, r5
 8015596:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801559a:	fb0e 8000 	mla	r0, lr, r0, r8
 801559e:	780a      	ldrb	r2, [r1, #0]
 80155a0:	fb0e 7e03 	mla	lr, lr, r3, r7
 80155a4:	9b01      	ldr	r3, [sp, #4]
 80155a6:	0a00      	lsrs	r0, r0, #8
 80155a8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80155ac:	43db      	mvns	r3, r3
 80155ae:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80155b2:	b2db      	uxtb	r3, r3
 80155b4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80155b8:	ea40 0e0e 	orr.w	lr, r0, lr
 80155bc:	fb02 f003 	mul.w	r0, r2, r3
 80155c0:	1c42      	adds	r2, r0, #1
 80155c2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80155c6:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80155ca:	700a      	strb	r2, [r1, #0]
 80155cc:	784a      	ldrb	r2, [r1, #1]
 80155ce:	435a      	muls	r2, r3
 80155d0:	1c50      	adds	r0, r2, #1
 80155d2:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80155d6:	ea4f 221e 	mov.w	r2, lr, lsr #8
 80155da:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80155de:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80155e2:	704a      	strb	r2, [r1, #1]
 80155e4:	788a      	ldrb	r2, [r1, #2]
 80155e6:	4353      	muls	r3, r2
 80155e8:	1c5a      	adds	r2, r3, #1
 80155ea:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80155ee:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 80155f2:	f881 e002 	strb.w	lr, [r1, #2]
 80155f6:	b003      	add	sp, #12
 80155f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155fc:	0801cf27 	.word	0x0801cf27
 8015600:	0801d3de 	.word	0x0801d3de
 8015604:	0801cfaf 	.word	0x0801cfaf

08015608 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801560c:	ed2d 8b0a 	vpush	{d8-d12}
 8015610:	b09b      	sub	sp, #108	; 0x6c
 8015612:	eeb0 aa40 	vmov.f32	s20, s0
 8015616:	eef0 9a60 	vmov.f32	s19, s1
 801561a:	9218      	str	r2, [sp, #96]	; 0x60
 801561c:	eeb0 9a41 	vmov.f32	s18, s2
 8015620:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8015622:	eeb0 8a62 	vmov.f32	s16, s5
 8015626:	9019      	str	r0, [sp, #100]	; 0x64
 8015628:	eef0 8a43 	vmov.f32	s17, s6
 801562c:	6850      	ldr	r0, [r2, #4]
 801562e:	eeb0 ca44 	vmov.f32	s24, s8
 8015632:	9116      	str	r1, [sp, #88]	; 0x58
 8015634:	eef0 ba64 	vmov.f32	s23, s9
 8015638:	9307      	str	r3, [sp, #28]
 801563a:	eeb0 ba45 	vmov.f32	s22, s10
 801563e:	6812      	ldr	r2, [r2, #0]
 8015640:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8015644:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 8015646:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 801564a:	fb00 1303 	mla	r3, r0, r3, r1
 801564e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015652:	18d3      	adds	r3, r2, r3
 8015654:	930a      	str	r3, [sp, #40]	; 0x28
 8015656:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	930f      	str	r3, [sp, #60]	; 0x3c
 801565c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801565e:	685e      	ldr	r6, [r3, #4]
 8015660:	3604      	adds	r6, #4
 8015662:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015664:	2b00      	cmp	r3, #0
 8015666:	dc03      	bgt.n	8015670 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8015668:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801566a:	2b00      	cmp	r3, #0
 801566c:	f340 834f 	ble.w	8015d0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8015670:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8015672:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8015676:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801567a:	1e48      	subs	r0, r1, #1
 801567c:	1e57      	subs	r7, r2, #1
 801567e:	9b07      	ldr	r3, [sp, #28]
 8015680:	2b00      	cmp	r3, #0
 8015682:	f340 8178 	ble.w	8015976 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8015686:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8015688:	142b      	asrs	r3, r5, #16
 801568a:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801568e:	d406      	bmi.n	801569e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8015690:	4584      	cmp	ip, r0
 8015692:	da04      	bge.n	801569e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8015694:	2b00      	cmp	r3, #0
 8015696:	db02      	blt.n	801569e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8015698:	42bb      	cmp	r3, r7
 801569a:	f2c0 816d 	blt.w	8015978 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801569e:	f11c 0c01 	adds.w	ip, ip, #1
 80156a2:	f100 815b 	bmi.w	801595c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80156a6:	4561      	cmp	r1, ip
 80156a8:	f2c0 8158 	blt.w	801595c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80156ac:	3301      	adds	r3, #1
 80156ae:	f100 8155 	bmi.w	801595c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80156b2:	429a      	cmp	r2, r3
 80156b4:	f2c0 8152 	blt.w	801595c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80156b8:	9b07      	ldr	r3, [sp, #28]
 80156ba:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80156bc:	9317      	str	r3, [sp, #92]	; 0x5c
 80156be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	f340 8178 	ble.w	80159b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80156c6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80156c8:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80156cc:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80156d0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80156d4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80156d6:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 80156da:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80156dc:	141b      	asrs	r3, r3, #16
 80156de:	f100 81ba 	bmi.w	8015a56 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80156e2:	f101 38ff 	add.w	r8, r1, #4294967295
 80156e6:	4543      	cmp	r3, r8
 80156e8:	f280 81b5 	bge.w	8015a56 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80156ec:	f1bc 0f00 	cmp.w	ip, #0
 80156f0:	f2c0 81b1 	blt.w	8015a56 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80156f4:	f10e 38ff 	add.w	r8, lr, #4294967295
 80156f8:	45c4      	cmp	ip, r8
 80156fa:	f280 81ac 	bge.w	8015a56 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80156fe:	b209      	sxth	r1, r1
 8015700:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8015702:	fb0c 3301 	mla	r3, ip, r1, r3
 8015706:	eb04 0803 	add.w	r8, r4, r3
 801570a:	5ce3      	ldrb	r3, [r4, r3]
 801570c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8015710:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8015714:	2a00      	cmp	r2, #0
 8015716:	f000 8193 	beq.w	8015a40 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801571a:	f898 c001 	ldrb.w	ip, [r8, #1]
 801571e:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8015722:	940b      	str	r4, [sp, #44]	; 0x2c
 8015724:	0e24      	lsrs	r4, r4, #24
 8015726:	9412      	str	r4, [sp, #72]	; 0x48
 8015728:	b178      	cbz	r0, 801574a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801572a:	eb08 0c01 	add.w	ip, r8, r1
 801572e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8015732:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8015736:	9108      	str	r1, [sp, #32]
 8015738:	0e09      	lsrs	r1, r1, #24
 801573a:	9110      	str	r1, [sp, #64]	; 0x40
 801573c:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8015740:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8015744:	910c      	str	r1, [sp, #48]	; 0x30
 8015746:	0e09      	lsrs	r1, r1, #24
 8015748:	9113      	str	r1, [sp, #76]	; 0x4c
 801574a:	b292      	uxth	r2, r2
 801574c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801574e:	b280      	uxth	r0, r0
 8015750:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8015752:	fb02 f900 	mul.w	r9, r2, r0
 8015756:	0112      	lsls	r2, r2, #4
 8015758:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801575c:	eba2 0809 	sub.w	r8, r2, r9
 8015760:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8015764:	b280      	uxth	r0, r0
 8015766:	fa1f f888 	uxth.w	r8, r8
 801576a:	1a12      	subs	r2, r2, r0
 801576c:	fb08 f101 	mul.w	r1, r8, r1
 8015770:	b292      	uxth	r2, r2
 8015772:	fb02 110e 	mla	r1, r2, lr, r1
 8015776:	fb00 1104 	mla	r1, r0, r4, r1
 801577a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801577c:	fb09 1104 	mla	r1, r9, r4, r1
 8015780:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8015784:	2900      	cmp	r1, #0
 8015786:	f000 80de 	beq.w	8015946 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801578a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801578e:	d01b      	beq.n	80157c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8015790:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8015794:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015798:	fb0e fa0a 	mul.w	sl, lr, sl
 801579c:	fb0e fe03 	mul.w	lr, lr, r3
 80157a0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80157a4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80157a8:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80157ac:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80157b0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80157b4:	4453      	add	r3, sl
 80157b6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80157ba:	0a1b      	lsrs	r3, r3, #8
 80157bc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80157c0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80157c4:	ea43 030c 	orr.w	r3, r3, ip
 80157c8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80157ca:	2cff      	cmp	r4, #255	; 0xff
 80157cc:	d021      	beq.n	8015812 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80157ce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80157d0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80157d4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80157d6:	fb04 fb0b 	mul.w	fp, r4, fp
 80157da:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80157dc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80157e0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80157e2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80157e6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80157ea:	fb04 fa0a 	mul.w	sl, r4, sl
 80157ee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80157f2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80157f6:	44de      	add	lr, fp
 80157f8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80157fc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015800:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015804:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015808:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801580c:	ea4e 040a 	orr.w	r4, lr, sl
 8015810:	940b      	str	r4, [sp, #44]	; 0x2c
 8015812:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8015814:	2cff      	cmp	r4, #255	; 0xff
 8015816:	d021      	beq.n	801585c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8015818:	9c08      	ldr	r4, [sp, #32]
 801581a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801581e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8015820:	fb04 fb0b 	mul.w	fp, r4, fp
 8015824:	9c08      	ldr	r4, [sp, #32]
 8015826:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801582a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801582c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8015830:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8015834:	fb04 fa0a 	mul.w	sl, r4, sl
 8015838:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801583c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8015840:	44de      	add	lr, fp
 8015842:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8015846:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801584a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801584e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015852:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015856:	ea4e 040a 	orr.w	r4, lr, sl
 801585a:	9408      	str	r4, [sp, #32]
 801585c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801585e:	2cff      	cmp	r4, #255	; 0xff
 8015860:	d021      	beq.n	80158a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8015862:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015864:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8015868:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801586a:	fb04 fb0b 	mul.w	fp, r4, fp
 801586e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015870:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8015874:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015876:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801587a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801587e:	fb04 fa0a 	mul.w	sl, r4, sl
 8015882:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8015886:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801588a:	44de      	add	lr, fp
 801588c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8015890:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8015894:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015898:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801589c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80158a0:	ea4e 040a 	orr.w	r4, lr, sl
 80158a4:	940c      	str	r4, [sp, #48]	; 0x30
 80158a6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80158a8:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80158ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80158b0:	43c9      	mvns	r1, r1
 80158b2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80158b6:	9c08      	ldr	r4, [sp, #32]
 80158b8:	b2c9      	uxtb	r1, r1
 80158ba:	fb08 fc0c 	mul.w	ip, r8, ip
 80158be:	fb02 cc0e 	mla	ip, r2, lr, ip
 80158c2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80158c6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80158c8:	fb00 cc0e 	mla	ip, r0, lr, ip
 80158cc:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80158d0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80158d2:	fb09 cc0e 	mla	ip, r9, lr, ip
 80158d6:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80158da:	fb08 f80e 	mul.w	r8, r8, lr
 80158de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80158e2:	fb02 8303 	mla	r3, r2, r3, r8
 80158e6:	9a08      	ldr	r2, [sp, #32]
 80158e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80158ec:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80158f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80158f2:	fb00 330a 	mla	r3, r0, sl, r3
 80158f6:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80158fa:	fb09 3900 	mla	r9, r9, r0, r3
 80158fe:	783b      	ldrb	r3, [r7, #0]
 8015900:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8015904:	fb03 f201 	mul.w	r2, r3, r1
 8015908:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801590c:	1c53      	adds	r3, r2, #1
 801590e:	ea4c 0c09 	orr.w	ip, ip, r9
 8015912:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8015916:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801591a:	703b      	strb	r3, [r7, #0]
 801591c:	787b      	ldrb	r3, [r7, #1]
 801591e:	434b      	muls	r3, r1
 8015920:	1c5a      	adds	r2, r3, #1
 8015922:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8015926:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801592a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801592e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8015932:	707b      	strb	r3, [r7, #1]
 8015934:	78bb      	ldrb	r3, [r7, #2]
 8015936:	4359      	muls	r1, r3
 8015938:	1c4b      	adds	r3, r1, #1
 801593a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801593e:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8015942:	f887 c002 	strb.w	ip, [r7, #2]
 8015946:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8015948:	3703      	adds	r7, #3
 801594a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801594c:	441a      	add	r2, r3
 801594e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8015950:	441d      	add	r5, r3
 8015952:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015954:	922f      	str	r2, [sp, #188]	; 0xbc
 8015956:	3b01      	subs	r3, #1
 8015958:	9317      	str	r3, [sp, #92]	; 0x5c
 801595a:	e6b0      	b.n	80156be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801595c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801595e:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8015960:	441c      	add	r4, r3
 8015962:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8015964:	441d      	add	r5, r3
 8015966:	9b07      	ldr	r3, [sp, #28]
 8015968:	942f      	str	r4, [sp, #188]	; 0xbc
 801596a:	3b01      	subs	r3, #1
 801596c:	9307      	str	r3, [sp, #28]
 801596e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015970:	3303      	adds	r3, #3
 8015972:	930a      	str	r3, [sp, #40]	; 0x28
 8015974:	e683      	b.n	801567e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8015976:	d026      	beq.n	80159c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8015978:	9b07      	ldr	r3, [sp, #28]
 801597a:	9831      	ldr	r0, [sp, #196]	; 0xc4
 801597c:	3b01      	subs	r3, #1
 801597e:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8015980:	fb00 4003 	mla	r0, r0, r3, r4
 8015984:	1400      	asrs	r0, r0, #16
 8015986:	f53f ae97 	bmi.w	80156b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801598a:	3901      	subs	r1, #1
 801598c:	4288      	cmp	r0, r1
 801598e:	f6bf ae93 	bge.w	80156b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8015992:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8015994:	fb01 5303 	mla	r3, r1, r3, r5
 8015998:	141b      	asrs	r3, r3, #16
 801599a:	f53f ae8d 	bmi.w	80156b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801599e:	3a01      	subs	r2, #1
 80159a0:	4293      	cmp	r3, r2
 80159a2:	f6bf ae89 	bge.w	80156b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80159a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159a8:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80159ac:	f103 0e03 	add.w	lr, r3, #3
 80159b0:	f1bb 0f00 	cmp.w	fp, #0
 80159b4:	dc6d      	bgt.n	8015a92 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 80159b6:	9b07      	ldr	r3, [sp, #28]
 80159b8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80159bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159be:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80159c2:	4423      	add	r3, r4
 80159c4:	930a      	str	r3, [sp, #40]	; 0x28
 80159c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	f340 81a0 	ble.w	8015d0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 80159ce:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80159d2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80159d4:	ee79 9aab 	vadd.f32	s19, s19, s23
 80159d8:	eef0 6a48 	vmov.f32	s13, s16
 80159dc:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80159e0:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80159e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80159e8:	edcd 6a2f 	vstr	s13, [sp, #188]	; 0xbc
 80159ec:	eef0 6a68 	vmov.f32	s13, s17
 80159f0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80159f4:	ee16 5a90 	vmov	r5, s13
 80159f8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80159fc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8015a00:	ee37 8a48 	vsub.f32	s16, s14, s16
 8015a04:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8015a08:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8015a0c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8015a10:	ee18 2a10 	vmov	r2, s16
 8015a14:	eeb0 8a47 	vmov.f32	s16, s14
 8015a18:	fb92 f3f3 	sdiv	r3, r2, r3
 8015a1c:	ee18 2a90 	vmov	r2, s17
 8015a20:	9331      	str	r3, [sp, #196]	; 0xc4
 8015a22:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015a24:	eef0 8a67 	vmov.f32	s17, s15
 8015a28:	fb92 f3f3 	sdiv	r3, r2, r3
 8015a2c:	9332      	str	r3, [sp, #200]	; 0xc8
 8015a2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015a30:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015a32:	3b01      	subs	r3, #1
 8015a34:	9316      	str	r3, [sp, #88]	; 0x58
 8015a36:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015a38:	bf08      	it	eq
 8015a3a:	4613      	moveq	r3, r2
 8015a3c:	9307      	str	r3, [sp, #28]
 8015a3e:	e610      	b.n	8015662 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8015a40:	2800      	cmp	r0, #0
 8015a42:	f43f ae82 	beq.w	801574a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8015a46:	f818 1001 	ldrb.w	r1, [r8, r1]
 8015a4a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8015a4e:	9108      	str	r1, [sp, #32]
 8015a50:	0e09      	lsrs	r1, r1, #24
 8015a52:	9110      	str	r1, [sp, #64]	; 0x40
 8015a54:	e679      	b.n	801574a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8015a56:	f113 0801 	adds.w	r8, r3, #1
 8015a5a:	f53f af74 	bmi.w	8015946 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8015a5e:	4541      	cmp	r1, r8
 8015a60:	f6ff af71 	blt.w	8015946 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8015a64:	f11c 0801 	adds.w	r8, ip, #1
 8015a68:	f53f af6d 	bmi.w	8015946 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8015a6c:	45c6      	cmp	lr, r8
 8015a6e:	f6ff af6a 	blt.w	8015946 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8015a72:	b209      	sxth	r1, r1
 8015a74:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8015a78:	fa0f f38e 	sxth.w	r3, lr
 8015a7c:	9100      	str	r1, [sp, #0]
 8015a7e:	4639      	mov	r1, r7
 8015a80:	9301      	str	r3, [sp, #4]
 8015a82:	4633      	mov	r3, r6
 8015a84:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8015a88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015a8a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8015a8c:	f7ff fc70 	bl	8015370 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8015a90:	e759      	b.n	8015946 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8015a92:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8015a94:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8015a98:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8015a9a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8015a9e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8015aa0:	1427      	asrs	r7, r4, #16
 8015aa2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8015aa4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8015aa8:	142b      	asrs	r3, r5, #16
 8015aaa:	fb01 7303 	mla	r3, r1, r3, r7
 8015aae:	18e7      	adds	r7, r4, r3
 8015ab0:	5ce3      	ldrb	r3, [r4, r3]
 8015ab2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8015ab6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8015aba:	2a00      	cmp	r2, #0
 8015abc:	f000 811d 	beq.w	8015cfa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8015ac0:	f897 8001 	ldrb.w	r8, [r7, #1]
 8015ac4:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8015ac8:	940d      	str	r4, [sp, #52]	; 0x34
 8015aca:	0e24      	lsrs	r4, r4, #24
 8015acc:	9414      	str	r4, [sp, #80]	; 0x50
 8015ace:	b170      	cbz	r0, 8015aee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8015ad0:	eb07 0801 	add.w	r8, r7, r1
 8015ad4:	5c79      	ldrb	r1, [r7, r1]
 8015ad6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8015ada:	9109      	str	r1, [sp, #36]	; 0x24
 8015adc:	0e09      	lsrs	r1, r1, #24
 8015ade:	9111      	str	r1, [sp, #68]	; 0x44
 8015ae0:	f898 1001 	ldrb.w	r1, [r8, #1]
 8015ae4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8015ae8:	910e      	str	r1, [sp, #56]	; 0x38
 8015aea:	0e09      	lsrs	r1, r1, #24
 8015aec:	9115      	str	r1, [sp, #84]	; 0x54
 8015aee:	b292      	uxth	r2, r2
 8015af0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8015af2:	b280      	uxth	r0, r0
 8015af4:	fb02 f900 	mul.w	r9, r2, r0
 8015af8:	0112      	lsls	r2, r2, #4
 8015afa:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8015afe:	eba2 0809 	sub.w	r8, r2, r9
 8015b02:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8015b06:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015b08:	b280      	uxth	r0, r0
 8015b0a:	fa1f f888 	uxth.w	r8, r8
 8015b0e:	1a09      	subs	r1, r1, r0
 8015b10:	fb08 f202 	mul.w	r2, r8, r2
 8015b14:	b289      	uxth	r1, r1
 8015b16:	fb01 220c 	mla	r2, r1, ip, r2
 8015b1a:	fb00 2204 	mla	r2, r0, r4, r2
 8015b1e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8015b20:	fb09 2204 	mla	r2, r9, r4, r2
 8015b24:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8015b28:	2a00      	cmp	r2, #0
 8015b2a:	f000 80db 	beq.w	8015ce4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8015b2e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8015b32:	d019      	beq.n	8015b68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x560>
 8015b34:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8015b38:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015b3c:	fb0c fa0a 	mul.w	sl, ip, sl
 8015b40:	fb0c fc03 	mul.w	ip, ip, r3
 8015b44:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8015b48:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8015b4c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8015b50:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8015b54:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8015b58:	4453      	add	r3, sl
 8015b5a:	0a3f      	lsrs	r7, r7, #8
 8015b5c:	0a1b      	lsrs	r3, r3, #8
 8015b5e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8015b62:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8015b66:	433b      	orrs	r3, r7
 8015b68:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015b6a:	2cff      	cmp	r4, #255	; 0xff
 8015b6c:	d020      	beq.n	8015bb0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a8>
 8015b6e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015b70:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8015b74:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015b76:	4367      	muls	r7, r4
 8015b78:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015b7a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8015b7e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8015b82:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015b84:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8015b88:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015b8c:	fb04 fa0a 	mul.w	sl, r4, sl
 8015b90:	44bc      	add	ip, r7
 8015b92:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8015b96:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015b9a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8015b9e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015ba2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015ba6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015baa:	ea4c 040a 	orr.w	r4, ip, sl
 8015bae:	940d      	str	r4, [sp, #52]	; 0x34
 8015bb0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8015bb2:	2cff      	cmp	r4, #255	; 0xff
 8015bb4:	d020      	beq.n	8015bf8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f0>
 8015bb6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8015bb8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8015bbc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8015bbe:	4367      	muls	r7, r4
 8015bc0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8015bc2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8015bc6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8015bca:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8015bcc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8015bd0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015bd4:	fb04 fa0a 	mul.w	sl, r4, sl
 8015bd8:	44bc      	add	ip, r7
 8015bda:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8015bde:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015be2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8015be6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015bea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015bee:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015bf2:	ea4c 040a 	orr.w	r4, ip, sl
 8015bf6:	9409      	str	r4, [sp, #36]	; 0x24
 8015bf8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8015bfa:	2cff      	cmp	r4, #255	; 0xff
 8015bfc:	d020      	beq.n	8015c40 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x638>
 8015bfe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015c00:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8015c04:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8015c06:	4367      	muls	r7, r4
 8015c08:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015c0a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8015c0e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8015c12:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8015c14:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8015c18:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015c1c:	fb04 fa0a 	mul.w	sl, r4, sl
 8015c20:	44bc      	add	ip, r7
 8015c22:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8015c26:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015c2a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8015c2e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8015c32:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8015c36:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8015c3a:	ea4c 040a 	orr.w	r4, ip, sl
 8015c3e:	940e      	str	r4, [sp, #56]	; 0x38
 8015c40:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015c42:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8015c46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015c4a:	43d2      	mvns	r2, r2
 8015c4c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8015c50:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8015c52:	b2d2      	uxtb	r2, r2
 8015c54:	fb08 f707 	mul.w	r7, r8, r7
 8015c58:	fb01 770c 	mla	r7, r1, ip, r7
 8015c5c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8015c60:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015c62:	fb00 770c 	mla	r7, r0, ip, r7
 8015c66:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8015c6a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015c6c:	fb09 770c 	mla	r7, r9, ip, r7
 8015c70:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8015c74:	fb08 f80c 	mul.w	r8, r8, ip
 8015c78:	0a3f      	lsrs	r7, r7, #8
 8015c7a:	fb01 8303 	mla	r3, r1, r3, r8
 8015c7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015c80:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8015c84:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8015c88:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015c8a:	fb00 330a 	mla	r3, r0, sl, r3
 8015c8e:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8015c92:	fb09 3c0c 	mla	ip, r9, ip, r3
 8015c96:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8015c9a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8015c9e:	fb03 f102 	mul.w	r1, r3, r2
 8015ca2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8015ca6:	1c4b      	adds	r3, r1, #1
 8015ca8:	ea47 070c 	orr.w	r7, r7, ip
 8015cac:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8015cb0:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8015cb4:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8015cb8:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8015cbc:	4353      	muls	r3, r2
 8015cbe:	1c59      	adds	r1, r3, #1
 8015cc0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8015cc4:	0a3b      	lsrs	r3, r7, #8
 8015cc6:	0c3f      	lsrs	r7, r7, #16
 8015cc8:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8015ccc:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8015cd0:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8015cd4:	435a      	muls	r2, r3
 8015cd6:	1c53      	adds	r3, r2, #1
 8015cd8:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8015cdc:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8015ce0:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8015ce4:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8015ce6:	f10e 0e03 	add.w	lr, lr, #3
 8015cea:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8015cec:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015cf0:	441a      	add	r2, r3
 8015cf2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8015cf4:	922f      	str	r2, [sp, #188]	; 0xbc
 8015cf6:	441d      	add	r5, r3
 8015cf8:	e65a      	b.n	80159b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8015cfa:	2800      	cmp	r0, #0
 8015cfc:	f43f aef7 	beq.w	8015aee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8015d00:	5c79      	ldrb	r1, [r7, r1]
 8015d02:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8015d06:	9109      	str	r1, [sp, #36]	; 0x24
 8015d08:	0e09      	lsrs	r1, r1, #24
 8015d0a:	9111      	str	r1, [sp, #68]	; 0x44
 8015d0c:	e6ef      	b.n	8015aee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8015d0e:	b01b      	add	sp, #108	; 0x6c
 8015d10:	ecbd 8b0a 	vpop	{d8-d12}
 8015d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015d18 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8015d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d1c:	b08d      	sub	sp, #52	; 0x34
 8015d1e:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8015d22:	9103      	str	r1, [sp, #12]
 8015d24:	fb07 5803 	mla	r8, r7, r3, r5
 8015d28:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8015d2c:	9803      	ldr	r0, [sp, #12]
 8015d2e:	2f00      	cmp	r7, #0
 8015d30:	910b      	str	r1, [sp, #44]	; 0x2c
 8015d32:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8015d36:	9903      	ldr	r1, [sp, #12]
 8015d38:	9c03      	ldr	r4, [sp, #12]
 8015d3a:	eb02 0608 	add.w	r6, r2, r8
 8015d3e:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8015d42:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 8015d46:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8015d4a:	7809      	ldrb	r1, [r1, #0]
 8015d4c:	7840      	ldrb	r0, [r0, #1]
 8015d4e:	78a4      	ldrb	r4, [r4, #2]
 8015d50:	db51      	blt.n	8015df6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8015d52:	45be      	cmp	lr, r7
 8015d54:	dd4f      	ble.n	8015df6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8015d56:	2d00      	cmp	r5, #0
 8015d58:	db49      	blt.n	8015dee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8015d5a:	42ab      	cmp	r3, r5
 8015d5c:	dd47      	ble.n	8015dee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8015d5e:	f812 2008 	ldrb.w	r2, [r2, r8]
 8015d62:	9204      	str	r2, [sp, #16]
 8015d64:	7872      	ldrb	r2, [r6, #1]
 8015d66:	9205      	str	r2, [sp, #20]
 8015d68:	78b2      	ldrb	r2, [r6, #2]
 8015d6a:	9206      	str	r2, [sp, #24]
 8015d6c:	1c6a      	adds	r2, r5, #1
 8015d6e:	d449      	bmi.n	8015e04 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8015d70:	4293      	cmp	r3, r2
 8015d72:	dd47      	ble.n	8015e04 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8015d74:	f1bc 0f00 	cmp.w	ip, #0
 8015d78:	d044      	beq.n	8015e04 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8015d7a:	7972      	ldrb	r2, [r6, #5]
 8015d7c:	f896 b003 	ldrb.w	fp, [r6, #3]
 8015d80:	f896 a004 	ldrb.w	sl, [r6, #4]
 8015d84:	9201      	str	r2, [sp, #4]
 8015d86:	3701      	adds	r7, #1
 8015d88:	d444      	bmi.n	8015e14 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8015d8a:	45be      	cmp	lr, r7
 8015d8c:	dd42      	ble.n	8015e14 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8015d8e:	f1b9 0f00 	cmp.w	r9, #0
 8015d92:	f000 80c1 	beq.w	8015f18 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 8015d96:	2d00      	cmp	r5, #0
 8015d98:	db38      	blt.n	8015e0c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8015d9a:	42ab      	cmp	r3, r5
 8015d9c:	dd36      	ble.n	8015e0c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8015d9e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8015da2:	f816 8002 	ldrb.w	r8, [r6, r2]
 8015da6:	2203      	movs	r2, #3
 8015da8:	fb03 6702 	mla	r7, r3, r2, r6
 8015dac:	fb03 6202 	mla	r2, r3, r2, r6
 8015db0:	787f      	ldrb	r7, [r7, #1]
 8015db2:	f892 e002 	ldrb.w	lr, [r2, #2]
 8015db6:	9702      	str	r7, [sp, #8]
 8015db8:	3501      	adds	r5, #1
 8015dba:	d432      	bmi.n	8015e22 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8015dbc:	42ab      	cmp	r3, r5
 8015dbe:	dd30      	ble.n	8015e22 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8015dc0:	f1bc 0f00 	cmp.w	ip, #0
 8015dc4:	d031      	beq.n	8015e2a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8015dc6:	2703      	movs	r7, #3
 8015dc8:	fb13 7207 	smlabb	r2, r3, r7, r7
 8015dcc:	5cb5      	ldrb	r5, [r6, r2]
 8015dce:	fb03 6207 	mla	r2, r3, r7, r6
 8015dd2:	fb03 6307 	mla	r3, r3, r7, r6
 8015dd6:	7912      	ldrb	r2, [r2, #4]
 8015dd8:	795e      	ldrb	r6, [r3, #5]
 8015dda:	f1bc 0f0f 	cmp.w	ip, #15
 8015dde:	d927      	bls.n	8015e30 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8015de0:	4b53      	ldr	r3, [pc, #332]	; (8015f30 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 8015de2:	f240 1157 	movw	r1, #343	; 0x157
 8015de6:	4a53      	ldr	r2, [pc, #332]	; (8015f34 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8015de8:	4853      	ldr	r0, [pc, #332]	; (8015f38 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 8015dea:	f003 f847 	bl	8018e7c <__assert_func>
 8015dee:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8015df2:	9104      	str	r1, [sp, #16]
 8015df4:	e7ba      	b.n	8015d6c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 8015df6:	9401      	str	r4, [sp, #4]
 8015df8:	4682      	mov	sl, r0
 8015dfa:	468b      	mov	fp, r1
 8015dfc:	9104      	str	r1, [sp, #16]
 8015dfe:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8015e02:	e7c0      	b.n	8015d86 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8015e04:	9401      	str	r4, [sp, #4]
 8015e06:	4682      	mov	sl, r0
 8015e08:	468b      	mov	fp, r1
 8015e0a:	e7bc      	b.n	8015d86 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8015e0c:	46a6      	mov	lr, r4
 8015e0e:	9002      	str	r0, [sp, #8]
 8015e10:	4688      	mov	r8, r1
 8015e12:	e7d1      	b.n	8015db8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8015e14:	4626      	mov	r6, r4
 8015e16:	4602      	mov	r2, r0
 8015e18:	460d      	mov	r5, r1
 8015e1a:	46a6      	mov	lr, r4
 8015e1c:	9002      	str	r0, [sp, #8]
 8015e1e:	4688      	mov	r8, r1
 8015e20:	e7db      	b.n	8015dda <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8015e22:	4626      	mov	r6, r4
 8015e24:	4602      	mov	r2, r0
 8015e26:	460d      	mov	r5, r1
 8015e28:	e7d7      	b.n	8015dda <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8015e2a:	4626      	mov	r6, r4
 8015e2c:	4602      	mov	r2, r0
 8015e2e:	460d      	mov	r5, r1
 8015e30:	f1b9 0f0f 	cmp.w	r9, #15
 8015e34:	d8d4      	bhi.n	8015de0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8015e36:	fa1f f38c 	uxth.w	r3, ip
 8015e3a:	fa1f fc89 	uxth.w	ip, r9
 8015e3e:	fb03 f70c 	mul.w	r7, r3, ip
 8015e42:	011b      	lsls	r3, r3, #4
 8015e44:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8015e48:	9707      	str	r7, [sp, #28]
 8015e4a:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8015e4e:	fa1f fc8c 	uxth.w	ip, ip
 8015e52:	eba7 070c 	sub.w	r7, r7, ip
 8015e56:	b2bf      	uxth	r7, r7
 8015e58:	9709      	str	r7, [sp, #36]	; 0x24
 8015e5a:	9f07      	ldr	r7, [sp, #28]
 8015e5c:	1bdb      	subs	r3, r3, r7
 8015e5e:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8015e62:	b29b      	uxth	r3, r3
 8015e64:	9708      	str	r7, [sp, #32]
 8015e66:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8015e68:	930a      	str	r3, [sp, #40]	; 0x28
 8015e6a:	ea6f 0907 	mvn.w	r9, r7
 8015e6e:	fb03 fb0b 	mul.w	fp, r3, fp
 8015e72:	9f04      	ldr	r7, [sp, #16]
 8015e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e76:	fa5f f989 	uxtb.w	r9, r9
 8015e7a:	fb03 bb07 	mla	fp, r3, r7, fp
 8015e7e:	9f07      	ldr	r7, [sp, #28]
 8015e80:	fb11 f109 	smulbb	r1, r1, r9
 8015e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e86:	fb0c b808 	mla	r8, ip, r8, fp
 8015e8a:	fb10 f009 	smulbb	r0, r0, r9
 8015e8e:	fb14 f409 	smulbb	r4, r4, r9
 8015e92:	fb07 8805 	mla	r8, r7, r5, r8
 8015e96:	9d08      	ldr	r5, [sp, #32]
 8015e98:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015e9a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8015e9e:	fb08 1805 	mla	r8, r8, r5, r1
 8015ea2:	9d05      	ldr	r5, [sp, #20]
 8015ea4:	fa1f f888 	uxth.w	r8, r8
 8015ea8:	f108 0101 	add.w	r1, r8, #1
 8015eac:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8015eb0:	9903      	ldr	r1, [sp, #12]
 8015eb2:	ea4f 2828 	mov.w	r8, r8, asr #8
 8015eb6:	f881 8000 	strb.w	r8, [r1]
 8015eba:	fb03 f10a 	mul.w	r1, r3, sl
 8015ebe:	fb07 1105 	mla	r1, r7, r5, r1
 8015ec2:	9d02      	ldr	r5, [sp, #8]
 8015ec4:	fb0c 1105 	mla	r1, ip, r5, r1
 8015ec8:	9d07      	ldr	r5, [sp, #28]
 8015eca:	fb05 1102 	mla	r1, r5, r2, r1
 8015ece:	9a08      	ldr	r2, [sp, #32]
 8015ed0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8015ed4:	fb01 0102 	mla	r1, r1, r2, r0
 8015ed8:	9a03      	ldr	r2, [sp, #12]
 8015eda:	b289      	uxth	r1, r1
 8015edc:	1c48      	adds	r0, r1, #1
 8015ede:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8015ee2:	1209      	asrs	r1, r1, #8
 8015ee4:	7051      	strb	r1, [r2, #1]
 8015ee6:	9a01      	ldr	r2, [sp, #4]
 8015ee8:	4353      	muls	r3, r2
 8015eea:	9a06      	ldr	r2, [sp, #24]
 8015eec:	fb07 3702 	mla	r7, r7, r2, r3
 8015ef0:	9b08      	ldr	r3, [sp, #32]
 8015ef2:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8015ef6:	fb05 c606 	mla	r6, r5, r6, ip
 8015efa:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8015efe:	fb06 4603 	mla	r6, r6, r3, r4
 8015f02:	9b03      	ldr	r3, [sp, #12]
 8015f04:	b2b6      	uxth	r6, r6
 8015f06:	f106 0e01 	add.w	lr, r6, #1
 8015f0a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8015f0e:	1236      	asrs	r6, r6, #8
 8015f10:	709e      	strb	r6, [r3, #2]
 8015f12:	b00d      	add	sp, #52	; 0x34
 8015f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f18:	f1bc 0f0f 	cmp.w	ip, #15
 8015f1c:	f63f af60 	bhi.w	8015de0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8015f20:	4626      	mov	r6, r4
 8015f22:	4602      	mov	r2, r0
 8015f24:	460d      	mov	r5, r1
 8015f26:	46a6      	mov	lr, r4
 8015f28:	9002      	str	r0, [sp, #8]
 8015f2a:	4688      	mov	r8, r1
 8015f2c:	e783      	b.n	8015e36 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 8015f2e:	bf00      	nop
 8015f30:	0801cf27 	.word	0x0801cf27
 8015f34:	0801d3de 	.word	0x0801d3de
 8015f38:	0801cfaf 	.word	0x0801cfaf

08015f3c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f40:	ed2d 8b08 	vpush	{d8-d11}
 8015f44:	b09f      	sub	sp, #124	; 0x7c
 8015f46:	eeb0 aa40 	vmov.f32	s20, s0
 8015f4a:	eef0 9a60 	vmov.f32	s19, s1
 8015f4e:	920e      	str	r2, [sp, #56]	; 0x38
 8015f50:	eeb0 9a41 	vmov.f32	s18, s2
 8015f54:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8015f56:	eeb0 8a62 	vmov.f32	s16, s5
 8015f5a:	9307      	str	r3, [sp, #28]
 8015f5c:	eef0 8a43 	vmov.f32	s17, s6
 8015f60:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8015f64:	eef0 ba44 	vmov.f32	s23, s8
 8015f68:	901d      	str	r0, [sp, #116]	; 0x74
 8015f6a:	eeb0 ba64 	vmov.f32	s22, s9
 8015f6e:	930c      	str	r3, [sp, #48]	; 0x30
 8015f70:	eef0 aa45 	vmov.f32	s21, s10
 8015f74:	6850      	ldr	r0, [r2, #4]
 8015f76:	910b      	str	r1, [sp, #44]	; 0x2c
 8015f78:	6812      	ldr	r2, [r2, #0]
 8015f7a:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8015f7e:	e9dd a831 	ldrd	sl, r8, [sp, #196]	; 0xc4
 8015f82:	fb00 1303 	mla	r3, r0, r3, r1
 8015f86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015f8a:	18d3      	adds	r3, r2, r3
 8015f8c:	9308      	str	r3, [sp, #32]
 8015f8e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	930a      	str	r3, [sp, #40]	; 0x28
 8015f94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f96:	43db      	mvns	r3, r3
 8015f98:	b2db      	uxtb	r3, r3
 8015f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8015f9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	dc03      	bgt.n	8015faa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8015fa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	f340 81f5 	ble.w	8016394 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 8015faa:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8015fac:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8015fb0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8015fb4:	1e48      	subs	r0, r1, #1
 8015fb6:	1e54      	subs	r4, r2, #1
 8015fb8:	9b07      	ldr	r3, [sp, #28]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	f340 80d5 	ble.w	801616a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8015fc0:	ea5f 452a 	movs.w	r5, sl, asr #16
 8015fc4:	ea4f 4328 	mov.w	r3, r8, asr #16
 8015fc8:	d406      	bmi.n	8015fd8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8015fca:	4285      	cmp	r5, r0
 8015fcc:	da04      	bge.n	8015fd8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	db02      	blt.n	8015fd8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8015fd2:	42a3      	cmp	r3, r4
 8015fd4:	f2c0 80ca 	blt.w	801616c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8015fd8:	3501      	adds	r5, #1
 8015fda:	f100 80bb 	bmi.w	8016154 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8015fde:	42a9      	cmp	r1, r5
 8015fe0:	f2c0 80b8 	blt.w	8016154 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8015fe4:	3301      	adds	r3, #1
 8015fe6:	f100 80b5 	bmi.w	8016154 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8015fea:	429a      	cmp	r2, r3
 8015fec:	f2c0 80b2 	blt.w	8016154 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8015ff0:	9b07      	ldr	r3, [sp, #28]
 8015ff2:	9d08      	ldr	r5, [sp, #32]
 8015ff4:	930d      	str	r3, [sp, #52]	; 0x34
 8015ff6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	f340 80d6 	ble.w	80161aa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8015ffe:	9838      	ldr	r0, [sp, #224]	; 0xe0
 8016000:	ea4f 4428 	mov.w	r4, r8, asr #16
 8016004:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8016006:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801600a:	68c6      	ldr	r6, [r0, #12]
 801600c:	ea5f 402a 	movs.w	r0, sl, asr #16
 8016010:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8016014:	689b      	ldr	r3, [r3, #8]
 8016016:	f100 810f 	bmi.w	8016238 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 801601a:	1e5f      	subs	r7, r3, #1
 801601c:	42b8      	cmp	r0, r7
 801601e:	f280 810b 	bge.w	8016238 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8016022:	2c00      	cmp	r4, #0
 8016024:	f2c0 8108 	blt.w	8016238 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8016028:	1e77      	subs	r7, r6, #1
 801602a:	42bc      	cmp	r4, r7
 801602c:	f280 8104 	bge.w	8016238 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8016030:	b21b      	sxth	r3, r3
 8016032:	fb04 0003 	mla	r0, r4, r3, r0
 8016036:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016038:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801603c:	1826      	adds	r6, r4, r0
 801603e:	5c24      	ldrb	r4, [r4, r0]
 8016040:	78b7      	ldrb	r7, [r6, #2]
 8016042:	7870      	ldrb	r0, [r6, #1]
 8016044:	970f      	str	r7, [sp, #60]	; 0x3c
 8016046:	7977      	ldrb	r7, [r6, #5]
 8016048:	f896 e003 	ldrb.w	lr, [r6, #3]
 801604c:	f896 c004 	ldrb.w	ip, [r6, #4]
 8016050:	9710      	str	r7, [sp, #64]	; 0x40
 8016052:	b1c9      	cbz	r1, 8016088 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8016054:	f04f 0b03 	mov.w	fp, #3
 8016058:	f06f 0904 	mvn.w	r9, #4
 801605c:	3605      	adds	r6, #5
 801605e:	fb13 930b 	smlabb	r3, r3, fp, r9
 8016062:	eb06 0b03 	add.w	fp, r6, r3
 8016066:	5cf3      	ldrb	r3, [r6, r3]
 8016068:	9311      	str	r3, [sp, #68]	; 0x44
 801606a:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801606e:	9313      	str	r3, [sp, #76]	; 0x4c
 8016070:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8016074:	9315      	str	r3, [sp, #84]	; 0x54
 8016076:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801607a:	9312      	str	r3, [sp, #72]	; 0x48
 801607c:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8016080:	9314      	str	r3, [sp, #80]	; 0x50
 8016082:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8016086:	9316      	str	r3, [sp, #88]	; 0x58
 8016088:	b292      	uxth	r2, r2
 801608a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801608c:	b289      	uxth	r1, r1
 801608e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8016092:	fb02 f601 	mul.w	r6, r2, r1
 8016096:	0112      	lsls	r2, r2, #4
 8016098:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801609c:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 80160a0:	1b92      	subs	r2, r2, r6
 80160a2:	b289      	uxth	r1, r1
 80160a4:	b292      	uxth	r2, r2
 80160a6:	eba9 0901 	sub.w	r9, r9, r1
 80160aa:	fb02 fe0e 	mul.w	lr, r2, lr
 80160ae:	fa1f f989 	uxth.w	r9, r9
 80160b2:	fb02 fc0c 	mul.w	ip, r2, ip
 80160b6:	fb09 e404 	mla	r4, r9, r4, lr
 80160ba:	f895 e000 	ldrb.w	lr, [r5]
 80160be:	fb09 c000 	mla	r0, r9, r0, ip
 80160c2:	fb01 4407 	mla	r4, r1, r7, r4
 80160c6:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80160c8:	fb06 4407 	mla	r4, r6, r7, r4
 80160cc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80160ce:	fb1e fe07 	smulbb	lr, lr, r7
 80160d2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80160d6:	fb04 e403 	mla	r4, r4, r3, lr
 80160da:	b2a4      	uxth	r4, r4
 80160dc:	f104 0e01 	add.w	lr, r4, #1
 80160e0:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 80160e4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80160e6:	fb01 0004 	mla	r0, r1, r4, r0
 80160ea:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80160ec:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80160f0:	fb06 0004 	mla	r0, r6, r4, r0
 80160f4:	786c      	ldrb	r4, [r5, #1]
 80160f6:	f885 e000 	strb.w	lr, [r5]
 80160fa:	fb14 f407 	smulbb	r4, r4, r7
 80160fe:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8016102:	fb00 4003 	mla	r0, r0, r3, r4
 8016106:	b280      	uxth	r0, r0
 8016108:	1c44      	adds	r4, r0, #1
 801610a:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801610e:	1200      	asrs	r0, r0, #8
 8016110:	7068      	strb	r0, [r5, #1]
 8016112:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016114:	4342      	muls	r2, r0
 8016116:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8016118:	fb09 2200 	mla	r2, r9, r0, r2
 801611c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801611e:	fb01 2100 	mla	r1, r1, r0, r2
 8016122:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016124:	fb06 1602 	mla	r6, r6, r2, r1
 8016128:	78a9      	ldrb	r1, [r5, #2]
 801612a:	fb11 f107 	smulbb	r1, r1, r7
 801612e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8016132:	fb06 1303 	mla	r3, r6, r3, r1
 8016136:	b29b      	uxth	r3, r3
 8016138:	1c5e      	adds	r6, r3, #1
 801613a:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801613e:	121b      	asrs	r3, r3, #8
 8016140:	70ab      	strb	r3, [r5, #2]
 8016142:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8016144:	3503      	adds	r5, #3
 8016146:	449a      	add	sl, r3
 8016148:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801614a:	4498      	add	r8, r3
 801614c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801614e:	3b01      	subs	r3, #1
 8016150:	930d      	str	r3, [sp, #52]	; 0x34
 8016152:	e750      	b.n	8015ff6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8016154:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8016156:	449a      	add	sl, r3
 8016158:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801615a:	4498      	add	r8, r3
 801615c:	9b07      	ldr	r3, [sp, #28]
 801615e:	3b01      	subs	r3, #1
 8016160:	9307      	str	r3, [sp, #28]
 8016162:	9b08      	ldr	r3, [sp, #32]
 8016164:	3303      	adds	r3, #3
 8016166:	9308      	str	r3, [sp, #32]
 8016168:	e726      	b.n	8015fb8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801616a:	d026      	beq.n	80161ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801616c:	9b07      	ldr	r3, [sp, #28]
 801616e:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8016170:	3b01      	subs	r3, #1
 8016172:	fb00 a003 	mla	r0, r0, r3, sl
 8016176:	1400      	asrs	r0, r0, #16
 8016178:	f53f af3a 	bmi.w	8015ff0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801617c:	3901      	subs	r1, #1
 801617e:	4288      	cmp	r0, r1
 8016180:	f6bf af36 	bge.w	8015ff0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8016184:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8016186:	fb01 8303 	mla	r3, r1, r3, r8
 801618a:	141b      	asrs	r3, r3, #16
 801618c:	f53f af30 	bmi.w	8015ff0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8016190:	3a01      	subs	r2, #1
 8016192:	4293      	cmp	r3, r2
 8016194:	f6bf af2c 	bge.w	8015ff0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8016198:	9b08      	ldr	r3, [sp, #32]
 801619a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801619e:	1cdd      	adds	r5, r3, #3
 80161a0:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 80161a4:	f1bc 0f00 	cmp.w	ip, #0
 80161a8:	dc5f      	bgt.n	801626a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 80161aa:	9b07      	ldr	r3, [sp, #28]
 80161ac:	9a08      	ldr	r2, [sp, #32]
 80161ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80161b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80161b6:	441a      	add	r2, r3
 80161b8:	9208      	str	r2, [sp, #32]
 80161ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80161bc:	2b00      	cmp	r3, #0
 80161be:	f340 80e9 	ble.w	8016394 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 80161c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80161c6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80161c8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80161cc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80161d0:	eef0 6a48 	vmov.f32	s13, s16
 80161d4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80161d8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80161dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80161e0:	ee16 aa90 	vmov	sl, s13
 80161e4:	eef0 6a68 	vmov.f32	s13, s17
 80161e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80161ec:	ee16 8a90 	vmov	r8, s13
 80161f0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80161f4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80161f8:	ee37 8a48 	vsub.f32	s16, s14, s16
 80161fc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8016200:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8016204:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8016208:	ee18 2a10 	vmov	r2, s16
 801620c:	eeb0 8a47 	vmov.f32	s16, s14
 8016210:	fb92 f3f3 	sdiv	r3, r2, r3
 8016214:	ee18 2a90 	vmov	r2, s17
 8016218:	9333      	str	r3, [sp, #204]	; 0xcc
 801621a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801621c:	eef0 8a67 	vmov.f32	s17, s15
 8016220:	fb92 f3f3 	sdiv	r3, r2, r3
 8016224:	9334      	str	r3, [sp, #208]	; 0xd0
 8016226:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016228:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801622a:	3b01      	subs	r3, #1
 801622c:	930b      	str	r3, [sp, #44]	; 0x2c
 801622e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8016230:	bf08      	it	eq
 8016232:	4613      	moveq	r3, r2
 8016234:	9307      	str	r3, [sp, #28]
 8016236:	e6b1      	b.n	8015f9c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8016238:	1c47      	adds	r7, r0, #1
 801623a:	d482      	bmi.n	8016142 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801623c:	42bb      	cmp	r3, r7
 801623e:	db80      	blt.n	8016142 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8016240:	1c67      	adds	r7, r4, #1
 8016242:	f53f af7e 	bmi.w	8016142 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8016246:	42be      	cmp	r6, r7
 8016248:	f6ff af7b 	blt.w	8016142 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801624c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801624e:	b236      	sxth	r6, r6
 8016250:	9001      	str	r0, [sp, #4]
 8016252:	b21b      	sxth	r3, r3
 8016254:	9600      	str	r6, [sp, #0]
 8016256:	981d      	ldr	r0, [sp, #116]	; 0x74
 8016258:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801625c:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8016260:	4629      	mov	r1, r5
 8016262:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016264:	f7ff fd58 	bl	8015d18 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8016268:	e76b      	b.n	8016142 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801626a:	9938      	ldr	r1, [sp, #224]	; 0xe0
 801626c:	ea4f 402a 	mov.w	r0, sl, asr #16
 8016270:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8016274:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8016278:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801627c:	ea4f 4128 	mov.w	r1, r8, asr #16
 8016280:	fb07 0101 	mla	r1, r7, r1, r0
 8016284:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016286:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801628a:	1844      	adds	r4, r0, r1
 801628c:	5c40      	ldrb	r0, [r0, r1]
 801628e:	78a6      	ldrb	r6, [r4, #2]
 8016290:	7861      	ldrb	r1, [r4, #1]
 8016292:	960f      	str	r6, [sp, #60]	; 0x3c
 8016294:	78e6      	ldrb	r6, [r4, #3]
 8016296:	910d      	str	r1, [sp, #52]	; 0x34
 8016298:	9610      	str	r6, [sp, #64]	; 0x40
 801629a:	f894 9004 	ldrb.w	r9, [r4, #4]
 801629e:	f894 b005 	ldrb.w	fp, [r4, #5]
 80162a2:	b192      	cbz	r2, 80162ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80162a4:	f06f 0604 	mvn.w	r6, #4
 80162a8:	2103      	movs	r1, #3
 80162aa:	3405      	adds	r4, #5
 80162ac:	fb17 6701 	smlabb	r7, r7, r1, r6
 80162b0:	19e6      	adds	r6, r4, r7
 80162b2:	5de4      	ldrb	r4, [r4, r7]
 80162b4:	9417      	str	r4, [sp, #92]	; 0x5c
 80162b6:	7874      	ldrb	r4, [r6, #1]
 80162b8:	9419      	str	r4, [sp, #100]	; 0x64
 80162ba:	78b4      	ldrb	r4, [r6, #2]
 80162bc:	941b      	str	r4, [sp, #108]	; 0x6c
 80162be:	78f4      	ldrb	r4, [r6, #3]
 80162c0:	9418      	str	r4, [sp, #96]	; 0x60
 80162c2:	7934      	ldrb	r4, [r6, #4]
 80162c4:	941a      	str	r4, [sp, #104]	; 0x68
 80162c6:	7974      	ldrb	r4, [r6, #5]
 80162c8:	941c      	str	r4, [sp, #112]	; 0x70
 80162ca:	b29b      	uxth	r3, r3
 80162cc:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80162ce:	b292      	uxth	r2, r2
 80162d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80162d2:	3503      	adds	r5, #3
 80162d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80162d8:	fb03 f402 	mul.w	r4, r3, r2
 80162dc:	011b      	lsls	r3, r3, #4
 80162de:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 80162e2:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 80162e6:	1b1b      	subs	r3, r3, r4
 80162e8:	b292      	uxth	r2, r2
 80162ea:	b29b      	uxth	r3, r3
 80162ec:	1ab6      	subs	r6, r6, r2
 80162ee:	435f      	muls	r7, r3
 80162f0:	b2b6      	uxth	r6, r6
 80162f2:	fb03 f909 	mul.w	r9, r3, r9
 80162f6:	fb03 fb0b 	mul.w	fp, r3, fp
 80162fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80162fc:	fb06 7000 	mla	r0, r6, r0, r7
 8016300:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8016302:	fb06 bb03 	mla	fp, r6, r3, fp
 8016306:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016308:	fb02 0007 	mla	r0, r2, r7, r0
 801630c:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801630e:	fb02 bb03 	mla	fp, r2, r3, fp
 8016312:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016314:	fb04 0007 	mla	r0, r4, r7, r0
 8016318:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801631c:	fb17 f701 	smulbb	r7, r7, r1
 8016320:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8016324:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016326:	fb00 700e 	mla	r0, r0, lr, r7
 801632a:	fb06 9101 	mla	r1, r6, r1, r9
 801632e:	b280      	uxth	r0, r0
 8016330:	1c47      	adds	r7, r0, #1
 8016332:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8016336:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8016338:	1200      	asrs	r0, r0, #8
 801633a:	f805 0c06 	strb.w	r0, [r5, #-6]
 801633e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8016340:	fb02 1100 	mla	r1, r2, r0, r1
 8016344:	981a      	ldr	r0, [sp, #104]	; 0x68
 8016346:	fb04 1100 	mla	r1, r4, r0, r1
 801634a:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801634e:	fb04 b403 	mla	r4, r4, r3, fp
 8016352:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8016356:	fb10 f007 	smulbb	r0, r0, r7
 801635a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801635e:	fb13 f307 	smulbb	r3, r3, r7
 8016362:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8016366:	fb01 010e 	mla	r1, r1, lr, r0
 801636a:	fb04 340e 	mla	r4, r4, lr, r3
 801636e:	b289      	uxth	r1, r1
 8016370:	b2a4      	uxth	r4, r4
 8016372:	1c48      	adds	r0, r1, #1
 8016374:	1c63      	adds	r3, r4, #1
 8016376:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801637a:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801637e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8016380:	1209      	asrs	r1, r1, #8
 8016382:	1224      	asrs	r4, r4, #8
 8016384:	449a      	add	sl, r3
 8016386:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8016388:	f805 1c05 	strb.w	r1, [r5, #-5]
 801638c:	f805 4c04 	strb.w	r4, [r5, #-4]
 8016390:	4498      	add	r8, r3
 8016392:	e707      	b.n	80161a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8016394:	b01f      	add	sp, #124	; 0x7c
 8016396:	ecbd 8b08 	vpop	{d8-d11}
 801639a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080163a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 80163a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163a4:	b085      	sub	sp, #20
 80163a6:	784d      	ldrb	r5, [r1, #1]
 80163a8:	788e      	ldrb	r6, [r1, #2]
 80163aa:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80163ae:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 80163b2:	9403      	str	r4, [sp, #12]
 80163b4:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80163b8:	780c      	ldrb	r4, [r1, #0]
 80163ba:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 80163be:	fb07 ce03 	mla	lr, r7, r3, ip
 80163c2:	2f00      	cmp	r7, #0
 80163c4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80163c8:	eb02 0b0e 	add.w	fp, r2, lr
 80163cc:	db56      	blt.n	801647c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80163ce:	45b9      	cmp	r9, r7
 80163d0:	dd54      	ble.n	801647c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80163d2:	f1bc 0f00 	cmp.w	ip, #0
 80163d6:	db4d      	blt.n	8016474 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80163d8:	4563      	cmp	r3, ip
 80163da:	dd4b      	ble.n	8016474 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80163dc:	f812 200e 	ldrb.w	r2, [r2, lr]
 80163e0:	9200      	str	r2, [sp, #0]
 80163e2:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80163e6:	9201      	str	r2, [sp, #4]
 80163e8:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80163ec:	9202      	str	r2, [sp, #8]
 80163ee:	f11c 0201 	adds.w	r2, ip, #1
 80163f2:	d44a      	bmi.n	801648a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80163f4:	4293      	cmp	r3, r2
 80163f6:	dd48      	ble.n	801648a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80163f8:	2800      	cmp	r0, #0
 80163fa:	d046      	beq.n	801648a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80163fc:	f89b e003 	ldrb.w	lr, [fp, #3]
 8016400:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8016404:	f89b a005 	ldrb.w	sl, [fp, #5]
 8016408:	3701      	adds	r7, #1
 801640a:	d446      	bmi.n	801649a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 801640c:	45b9      	cmp	r9, r7
 801640e:	dd44      	ble.n	801649a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8016410:	9a03      	ldr	r2, [sp, #12]
 8016412:	2a00      	cmp	r2, #0
 8016414:	d045      	beq.n	80164a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 8016416:	f1bc 0f00 	cmp.w	ip, #0
 801641a:	db3a      	blt.n	8016492 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 801641c:	4563      	cmp	r3, ip
 801641e:	dd38      	ble.n	8016492 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8016420:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8016424:	f04f 0903 	mov.w	r9, #3
 8016428:	f81b 7002 	ldrb.w	r7, [fp, r2]
 801642c:	fb03 b209 	mla	r2, r3, r9, fp
 8016430:	fb03 b909 	mla	r9, r3, r9, fp
 8016434:	7852      	ldrb	r2, [r2, #1]
 8016436:	f899 9002 	ldrb.w	r9, [r9, #2]
 801643a:	f11c 0c01 	adds.w	ip, ip, #1
 801643e:	d40d      	bmi.n	801645c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8016440:	4563      	cmp	r3, ip
 8016442:	dd0b      	ble.n	801645c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8016444:	b160      	cbz	r0, 8016460 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 8016446:	2603      	movs	r6, #3
 8016448:	fb13 6406 	smlabb	r4, r3, r6, r6
 801644c:	fb03 b506 	mla	r5, r3, r6, fp
 8016450:	fb03 b306 	mla	r3, r3, r6, fp
 8016454:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8016458:	792d      	ldrb	r5, [r5, #4]
 801645a:	795e      	ldrb	r6, [r3, #5]
 801645c:	280f      	cmp	r0, #15
 801645e:	d802      	bhi.n	8016466 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8016460:	9b03      	ldr	r3, [sp, #12]
 8016462:	2b0f      	cmp	r3, #15
 8016464:	d922      	bls.n	80164ac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 8016466:	4b2f      	ldr	r3, [pc, #188]	; (8016524 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8016468:	f240 1157 	movw	r1, #343	; 0x157
 801646c:	4a2e      	ldr	r2, [pc, #184]	; (8016528 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 801646e:	482f      	ldr	r0, [pc, #188]	; (801652c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8016470:	f002 fd04 	bl	8018e7c <__assert_func>
 8016474:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8016478:	9400      	str	r4, [sp, #0]
 801647a:	e7b8      	b.n	80163ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 801647c:	46b2      	mov	sl, r6
 801647e:	46a8      	mov	r8, r5
 8016480:	46a6      	mov	lr, r4
 8016482:	9400      	str	r4, [sp, #0]
 8016484:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8016488:	e7be      	b.n	8016408 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 801648a:	46b2      	mov	sl, r6
 801648c:	46a8      	mov	r8, r5
 801648e:	46a6      	mov	lr, r4
 8016490:	e7ba      	b.n	8016408 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8016492:	46b1      	mov	r9, r6
 8016494:	462a      	mov	r2, r5
 8016496:	4627      	mov	r7, r4
 8016498:	e7cf      	b.n	801643a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801649a:	46b1      	mov	r9, r6
 801649c:	462a      	mov	r2, r5
 801649e:	4627      	mov	r7, r4
 80164a0:	e7dc      	b.n	801645c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80164a2:	280f      	cmp	r0, #15
 80164a4:	d8df      	bhi.n	8016466 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 80164a6:	46b1      	mov	r9, r6
 80164a8:	462a      	mov	r2, r5
 80164aa:	4627      	mov	r7, r4
 80164ac:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 80164b0:	b280      	uxth	r0, r0
 80164b2:	fb00 f30b 	mul.w	r3, r0, fp
 80164b6:	0100      	lsls	r0, r0, #4
 80164b8:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 80164bc:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 80164c0:	1ac0      	subs	r0, r0, r3
 80164c2:	fa1f fb8b 	uxth.w	fp, fp
 80164c6:	b280      	uxth	r0, r0
 80164c8:	ebac 0c0b 	sub.w	ip, ip, fp
 80164cc:	9003      	str	r0, [sp, #12]
 80164ce:	fa1f fc8c 	uxth.w	ip, ip
 80164d2:	fb00 fe0e 	mul.w	lr, r0, lr
 80164d6:	9800      	ldr	r0, [sp, #0]
 80164d8:	fb0c ee00 	mla	lr, ip, r0, lr
 80164dc:	9803      	ldr	r0, [sp, #12]
 80164de:	fb00 f808 	mul.w	r8, r0, r8
 80164e2:	9801      	ldr	r0, [sp, #4]
 80164e4:	fb0b ee07 	mla	lr, fp, r7, lr
 80164e8:	fb0c 8800 	mla	r8, ip, r0, r8
 80164ec:	fb03 ee04 	mla	lr, r3, r4, lr
 80164f0:	fb0b 8202 	mla	r2, fp, r2, r8
 80164f4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80164f8:	fb03 2505 	mla	r5, r3, r5, r2
 80164fc:	9a03      	ldr	r2, [sp, #12]
 80164fe:	f881 e000 	strb.w	lr, [r1]
 8016502:	fb02 f00a 	mul.w	r0, r2, sl
 8016506:	9a02      	ldr	r2, [sp, #8]
 8016508:	122d      	asrs	r5, r5, #8
 801650a:	fb0c 0c02 	mla	ip, ip, r2, r0
 801650e:	704d      	strb	r5, [r1, #1]
 8016510:	fb0b c909 	mla	r9, fp, r9, ip
 8016514:	fb03 9606 	mla	r6, r3, r6, r9
 8016518:	1236      	asrs	r6, r6, #8
 801651a:	708e      	strb	r6, [r1, #2]
 801651c:	b005      	add	sp, #20
 801651e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016522:	bf00      	nop
 8016524:	0801cf27 	.word	0x0801cf27
 8016528:	0801d3de 	.word	0x0801d3de
 801652c:	0801cfaf 	.word	0x0801cfaf

08016530 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016534:	ed2d 8b08 	vpush	{d8-d11}
 8016538:	b09b      	sub	sp, #108	; 0x6c
 801653a:	eeb0 aa40 	vmov.f32	s20, s0
 801653e:	eef0 9a60 	vmov.f32	s19, s1
 8016542:	920b      	str	r2, [sp, #44]	; 0x2c
 8016544:	eeb0 9a41 	vmov.f32	s18, s2
 8016548:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801654a:	eeb0 8a62 	vmov.f32	s16, s5
 801654e:	9019      	str	r0, [sp, #100]	; 0x64
 8016550:	eef0 8a43 	vmov.f32	s17, s6
 8016554:	6850      	ldr	r0, [r2, #4]
 8016556:	eef0 ba44 	vmov.f32	s23, s8
 801655a:	9109      	str	r1, [sp, #36]	; 0x24
 801655c:	eeb0 ba64 	vmov.f32	s22, s9
 8016560:	9306      	str	r3, [sp, #24]
 8016562:	eef0 aa45 	vmov.f32	s21, s10
 8016566:	6812      	ldr	r2, [r2, #0]
 8016568:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801656c:	e9dd b42d 	ldrd	fp, r4, [sp, #180]	; 0xb4
 8016570:	fb00 1303 	mla	r3, r0, r3, r1
 8016574:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016578:	18d3      	adds	r3, r2, r3
 801657a:	9307      	str	r3, [sp, #28]
 801657c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	9308      	str	r3, [sp, #32]
 8016582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016584:	2b00      	cmp	r3, #0
 8016586:	dc03      	bgt.n	8016590 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8016588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801658a:	2b00      	cmp	r3, #0
 801658c:	f340 81ab 	ble.w	80168e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8016590:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8016592:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8016596:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801659a:	1e48      	subs	r0, r1, #1
 801659c:	1e55      	subs	r5, r2, #1
 801659e:	9b06      	ldr	r3, [sp, #24]
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	f340 80b1 	ble.w	8016708 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80165a6:	ea5f 462b 	movs.w	r6, fp, asr #16
 80165aa:	ea4f 4324 	mov.w	r3, r4, asr #16
 80165ae:	d406      	bmi.n	80165be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80165b0:	4286      	cmp	r6, r0
 80165b2:	da04      	bge.n	80165be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	db02      	blt.n	80165be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80165b8:	42ab      	cmp	r3, r5
 80165ba:	f2c0 80a6 	blt.w	801670a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80165be:	3601      	adds	r6, #1
 80165c0:	f100 8097 	bmi.w	80166f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80165c4:	42b1      	cmp	r1, r6
 80165c6:	f2c0 8094 	blt.w	80166f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80165ca:	3301      	adds	r3, #1
 80165cc:	f100 8091 	bmi.w	80166f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80165d0:	429a      	cmp	r2, r3
 80165d2:	f2c0 808e 	blt.w	80166f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80165d6:	9b06      	ldr	r3, [sp, #24]
 80165d8:	9e07      	ldr	r6, [sp, #28]
 80165da:	930a      	str	r3, [sp, #40]	; 0x28
 80165dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165de:	2b00      	cmp	r3, #0
 80165e0:	f340 80b0 	ble.w	8016744 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80165e4:	9834      	ldr	r0, [sp, #208]	; 0xd0
 80165e6:	1425      	asrs	r5, r4, #16
 80165e8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80165ea:	f3cb 3203 	ubfx	r2, fp, #12, #4
 80165ee:	68c7      	ldr	r7, [r0, #12]
 80165f0:	ea5f 402b 	movs.w	r0, fp, asr #16
 80165f4:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80165f8:	689b      	ldr	r3, [r3, #8]
 80165fa:	f100 80ea 	bmi.w	80167d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80165fe:	f103 3cff 	add.w	ip, r3, #4294967295
 8016602:	4560      	cmp	r0, ip
 8016604:	f280 80e5 	bge.w	80167d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8016608:	2d00      	cmp	r5, #0
 801660a:	f2c0 80e2 	blt.w	80167d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801660e:	f107 3cff 	add.w	ip, r7, #4294967295
 8016612:	4565      	cmp	r5, ip
 8016614:	f280 80dd 	bge.w	80167d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8016618:	b21b      	sxth	r3, r3
 801661a:	fb05 0003 	mla	r0, r5, r3, r0
 801661e:	9d08      	ldr	r5, [sp, #32]
 8016620:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016624:	182f      	adds	r7, r5, r0
 8016626:	5c2d      	ldrb	r5, [r5, r0]
 8016628:	7878      	ldrb	r0, [r7, #1]
 801662a:	f897 e002 	ldrb.w	lr, [r7, #2]
 801662e:	900c      	str	r0, [sp, #48]	; 0x30
 8016630:	f897 9003 	ldrb.w	r9, [r7, #3]
 8016634:	f897 8004 	ldrb.w	r8, [r7, #4]
 8016638:	f897 a005 	ldrb.w	sl, [r7, #5]
 801663c:	b1c9      	cbz	r1, 8016672 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801663e:	f04f 0c03 	mov.w	ip, #3
 8016642:	f06f 0004 	mvn.w	r0, #4
 8016646:	3705      	adds	r7, #5
 8016648:	fb13 030c 	smlabb	r3, r3, ip, r0
 801664c:	eb07 0c03 	add.w	ip, r7, r3
 8016650:	5cfb      	ldrb	r3, [r7, r3]
 8016652:	930d      	str	r3, [sp, #52]	; 0x34
 8016654:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8016658:	930f      	str	r3, [sp, #60]	; 0x3c
 801665a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801665e:	9311      	str	r3, [sp, #68]	; 0x44
 8016660:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8016664:	930e      	str	r3, [sp, #56]	; 0x38
 8016666:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801666a:	9310      	str	r3, [sp, #64]	; 0x40
 801666c:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8016670:	9312      	str	r3, [sp, #72]	; 0x48
 8016672:	b292      	uxth	r2, r2
 8016674:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016676:	b289      	uxth	r1, r1
 8016678:	fb02 f301 	mul.w	r3, r2, r1
 801667c:	0112      	lsls	r2, r2, #4
 801667e:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8016682:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8016686:	1ad2      	subs	r2, r2, r3
 8016688:	b289      	uxth	r1, r1
 801668a:	b292      	uxth	r2, r2
 801668c:	1a7f      	subs	r7, r7, r1
 801668e:	fb02 f909 	mul.w	r9, r2, r9
 8016692:	b2bf      	uxth	r7, r7
 8016694:	fb02 f808 	mul.w	r8, r2, r8
 8016698:	fb02 fa0a 	mul.w	sl, r2, sl
 801669c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801669e:	fb07 9905 	mla	r9, r7, r5, r9
 80166a2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80166a4:	fb07 8800 	mla	r8, r7, r0, r8
 80166a8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80166aa:	fb07 aa0e 	mla	sl, r7, lr, sl
 80166ae:	fb01 9905 	mla	r9, r1, r5, r9
 80166b2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80166b4:	fb01 8800 	mla	r8, r1, r0, r8
 80166b8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80166ba:	fb01 a102 	mla	r1, r1, r2, sl
 80166be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80166c0:	fb03 9905 	mla	r9, r3, r5, r9
 80166c4:	fb03 8800 	mla	r8, r3, r0, r8
 80166c8:	fb03 1302 	mla	r3, r3, r2, r1
 80166cc:	ea4f 2929 	mov.w	r9, r9, asr #8
 80166d0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80166d4:	121b      	asrs	r3, r3, #8
 80166d6:	f886 9000 	strb.w	r9, [r6]
 80166da:	f886 8001 	strb.w	r8, [r6, #1]
 80166de:	70b3      	strb	r3, [r6, #2]
 80166e0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80166e2:	3603      	adds	r6, #3
 80166e4:	449b      	add	fp, r3
 80166e6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80166e8:	441c      	add	r4, r3
 80166ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80166ec:	3b01      	subs	r3, #1
 80166ee:	930a      	str	r3, [sp, #40]	; 0x28
 80166f0:	e774      	b.n	80165dc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 80166f2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80166f4:	449b      	add	fp, r3
 80166f6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80166f8:	441c      	add	r4, r3
 80166fa:	9b06      	ldr	r3, [sp, #24]
 80166fc:	3b01      	subs	r3, #1
 80166fe:	9306      	str	r3, [sp, #24]
 8016700:	9b07      	ldr	r3, [sp, #28]
 8016702:	3303      	adds	r3, #3
 8016704:	9307      	str	r3, [sp, #28]
 8016706:	e74a      	b.n	801659e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8016708:	d024      	beq.n	8016754 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801670a:	9b06      	ldr	r3, [sp, #24]
 801670c:	982f      	ldr	r0, [sp, #188]	; 0xbc
 801670e:	3b01      	subs	r3, #1
 8016710:	fb00 b003 	mla	r0, r0, r3, fp
 8016714:	1400      	asrs	r0, r0, #16
 8016716:	f53f af5e 	bmi.w	80165d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801671a:	3901      	subs	r1, #1
 801671c:	4288      	cmp	r0, r1
 801671e:	f6bf af5a 	bge.w	80165d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8016722:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8016724:	fb01 4303 	mla	r3, r1, r3, r4
 8016728:	141b      	asrs	r3, r3, #16
 801672a:	f53f af54 	bmi.w	80165d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801672e:	3a01      	subs	r2, #1
 8016730:	4293      	cmp	r3, r2
 8016732:	f6bf af50 	bge.w	80165d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8016736:	9b07      	ldr	r3, [sp, #28]
 8016738:	f8dd e018 	ldr.w	lr, [sp, #24]
 801673c:	1cde      	adds	r6, r3, #3
 801673e:	f1be 0f00 	cmp.w	lr, #0
 8016742:	dc5f      	bgt.n	8016804 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8016744:	9b06      	ldr	r3, [sp, #24]
 8016746:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801674a:	9b07      	ldr	r3, [sp, #28]
 801674c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016750:	4423      	add	r3, r4
 8016752:	9307      	str	r3, [sp, #28]
 8016754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016756:	2b00      	cmp	r3, #0
 8016758:	f340 80c5 	ble.w	80168e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 801675c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016760:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8016762:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8016766:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801676a:	eef0 6a48 	vmov.f32	s13, s16
 801676e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8016772:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8016776:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801677a:	ee16 ba90 	vmov	fp, s13
 801677e:	eef0 6a68 	vmov.f32	s13, s17
 8016782:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016786:	ee16 4a90 	vmov	r4, s13
 801678a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801678e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8016792:	ee37 8a48 	vsub.f32	s16, s14, s16
 8016796:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801679a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801679e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80167a2:	ee18 2a10 	vmov	r2, s16
 80167a6:	eeb0 8a47 	vmov.f32	s16, s14
 80167aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80167ae:	ee18 2a90 	vmov	r2, s17
 80167b2:	932f      	str	r3, [sp, #188]	; 0xbc
 80167b4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80167b6:	eef0 8a67 	vmov.f32	s17, s15
 80167ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80167be:	9330      	str	r3, [sp, #192]	; 0xc0
 80167c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80167c4:	3b01      	subs	r3, #1
 80167c6:	9309      	str	r3, [sp, #36]	; 0x24
 80167c8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80167ca:	bf08      	it	eq
 80167cc:	4613      	moveq	r3, r2
 80167ce:	9306      	str	r3, [sp, #24]
 80167d0:	e6d7      	b.n	8016582 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80167d2:	f110 0c01 	adds.w	ip, r0, #1
 80167d6:	d483      	bmi.n	80166e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80167d8:	4563      	cmp	r3, ip
 80167da:	db81      	blt.n	80166e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80167dc:	f115 0c01 	adds.w	ip, r5, #1
 80167e0:	f53f af7e 	bmi.w	80166e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80167e4:	4567      	cmp	r7, ip
 80167e6:	f6ff af7b 	blt.w	80166e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80167ea:	b23f      	sxth	r7, r7
 80167ec:	b21b      	sxth	r3, r3
 80167ee:	9700      	str	r7, [sp, #0]
 80167f0:	e9cd 2103 	strd	r2, r1, [sp, #12]
 80167f4:	e9cd 0501 	strd	r0, r5, [sp, #4]
 80167f8:	9a08      	ldr	r2, [sp, #32]
 80167fa:	4631      	mov	r1, r6
 80167fc:	9819      	ldr	r0, [sp, #100]	; 0x64
 80167fe:	f7ff fdcf 	bl	80163a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8016802:	e76d      	b.n	80166e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8016804:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8016806:	ea4f 402b 	mov.w	r0, fp, asr #16
 801680a:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801680e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8016812:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8016816:	1421      	asrs	r1, r4, #16
 8016818:	930a      	str	r3, [sp, #40]	; 0x28
 801681a:	fb0c 0101 	mla	r1, ip, r1, r0
 801681e:	9808      	ldr	r0, [sp, #32]
 8016820:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8016824:	1845      	adds	r5, r0, r1
 8016826:	5c40      	ldrb	r0, [r0, r1]
 8016828:	796f      	ldrb	r7, [r5, #5]
 801682a:	7869      	ldrb	r1, [r5, #1]
 801682c:	f895 8002 	ldrb.w	r8, [r5, #2]
 8016830:	f895 a003 	ldrb.w	sl, [r5, #3]
 8016834:	f895 9004 	ldrb.w	r9, [r5, #4]
 8016838:	970c      	str	r7, [sp, #48]	; 0x30
 801683a:	b1a2      	cbz	r2, 8016866 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 801683c:	2703      	movs	r7, #3
 801683e:	f06f 0304 	mvn.w	r3, #4
 8016842:	3505      	adds	r5, #5
 8016844:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8016848:	eb05 070c 	add.w	r7, r5, ip
 801684c:	f815 500c 	ldrb.w	r5, [r5, ip]
 8016850:	9513      	str	r5, [sp, #76]	; 0x4c
 8016852:	787d      	ldrb	r5, [r7, #1]
 8016854:	9515      	str	r5, [sp, #84]	; 0x54
 8016856:	78bd      	ldrb	r5, [r7, #2]
 8016858:	9517      	str	r5, [sp, #92]	; 0x5c
 801685a:	78fd      	ldrb	r5, [r7, #3]
 801685c:	9514      	str	r5, [sp, #80]	; 0x50
 801685e:	793d      	ldrb	r5, [r7, #4]
 8016860:	9516      	str	r5, [sp, #88]	; 0x58
 8016862:	797d      	ldrb	r5, [r7, #5]
 8016864:	9518      	str	r5, [sp, #96]	; 0x60
 8016866:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801686a:	b292      	uxth	r2, r2
 801686c:	3603      	adds	r6, #3
 801686e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016872:	fb03 f502 	mul.w	r5, r3, r2
 8016876:	011b      	lsls	r3, r3, #4
 8016878:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801687c:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8016880:	1b5b      	subs	r3, r3, r5
 8016882:	b292      	uxth	r2, r2
 8016884:	b29b      	uxth	r3, r3
 8016886:	1abf      	subs	r7, r7, r2
 8016888:	fb03 f909 	mul.w	r9, r3, r9
 801688c:	b2bf      	uxth	r7, r7
 801688e:	fb03 fa0a 	mul.w	sl, r3, sl
 8016892:	fb07 9901 	mla	r9, r7, r1, r9
 8016896:	9915      	ldr	r1, [sp, #84]	; 0x54
 8016898:	fb07 aa00 	mla	sl, r7, r0, sl
 801689c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801689e:	fb02 9901 	mla	r9, r2, r1, r9
 80168a2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80168a4:	fb02 aa00 	mla	sl, r2, r0, sl
 80168a8:	9814      	ldr	r0, [sp, #80]	; 0x50
 80168aa:	fb05 9901 	mla	r9, r5, r1, r9
 80168ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80168b0:	fb05 aa00 	mla	sl, r5, r0, sl
 80168b4:	434b      	muls	r3, r1
 80168b6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80168b8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80168bc:	fb07 3308 	mla	r3, r7, r8, r3
 80168c0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80168c4:	f806 ac06 	strb.w	sl, [r6, #-6]
 80168c8:	fb02 3201 	mla	r2, r2, r1, r3
 80168cc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80168ce:	f806 9c05 	strb.w	r9, [r6, #-5]
 80168d2:	fb05 2503 	mla	r5, r5, r3, r2
 80168d6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80168d8:	122d      	asrs	r5, r5, #8
 80168da:	449b      	add	fp, r3
 80168dc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80168de:	f806 5c04 	strb.w	r5, [r6, #-4]
 80168e2:	441c      	add	r4, r3
 80168e4:	e72b      	b.n	801673e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80168e6:	b01b      	add	sp, #108	; 0x6c
 80168e8:	ecbd 8b08 	vpop	{d8-d11}
 80168ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080168f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 80168f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168f4:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 80168f8:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80168fc:	fb04 5603 	mla	r6, r4, r3, r5
 8016900:	2c00      	cmp	r4, #0
 8016902:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8016906:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 801690a:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 801690e:	db36      	blt.n	801697e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8016910:	45a6      	cmp	lr, r4
 8016912:	dd34      	ble.n	801697e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8016914:	2d00      	cmp	r5, #0
 8016916:	db30      	blt.n	801697a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8016918:	42ab      	cmp	r3, r5
 801691a:	dd2e      	ble.n	801697a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 801691c:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8016920:	1c6e      	adds	r6, r5, #1
 8016922:	d42f      	bmi.n	8016984 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 8016924:	42b3      	cmp	r3, r6
 8016926:	dd2d      	ble.n	8016984 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 8016928:	b370      	cbz	r0, 8016988 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x98>
 801692a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801692e:	3401      	adds	r4, #1
 8016930:	d42e      	bmi.n	8016990 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 8016932:	45a6      	cmp	lr, r4
 8016934:	dd2c      	ble.n	8016990 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 8016936:	b377      	cbz	r7, 8016996 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa6>
 8016938:	2d00      	cmp	r5, #0
 801693a:	db27      	blt.n	801698c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 801693c:	42ab      	cmp	r3, r5
 801693e:	dd25      	ble.n	801698c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8016940:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8016944:	3501      	adds	r5, #1
 8016946:	d429      	bmi.n	801699c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8016948:	42ab      	cmp	r3, r5
 801694a:	dd27      	ble.n	801699c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 801694c:	b340      	cbz	r0, 80169a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb0>
 801694e:	3301      	adds	r3, #1
 8016950:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8016954:	280f      	cmp	r0, #15
 8016956:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801695a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801695e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8016962:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8016966:	d801      	bhi.n	801696c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7c>
 8016968:	2f0f      	cmp	r7, #15
 801696a:	d91b      	bls.n	80169a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb4>
 801696c:	4b89      	ldr	r3, [pc, #548]	; (8016b94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a4>)
 801696e:	f240 1157 	movw	r1, #343	; 0x157
 8016972:	4a89      	ldr	r2, [pc, #548]	; (8016b98 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8016974:	4889      	ldr	r0, [pc, #548]	; (8016b9c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8016976:	f002 fa81 	bl	8018e7c <__assert_func>
 801697a:	2200      	movs	r2, #0
 801697c:	e7d0      	b.n	8016920 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x30>
 801697e:	2600      	movs	r6, #0
 8016980:	4632      	mov	r2, r6
 8016982:	e7d4      	b.n	801692e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8016984:	2600      	movs	r6, #0
 8016986:	e7d2      	b.n	801692e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8016988:	4606      	mov	r6, r0
 801698a:	e7d0      	b.n	801692e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 801698c:	2400      	movs	r4, #0
 801698e:	e7d9      	b.n	8016944 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x54>
 8016990:	2300      	movs	r3, #0
 8016992:	461c      	mov	r4, r3
 8016994:	e7de      	b.n	8016954 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8016996:	463b      	mov	r3, r7
 8016998:	463c      	mov	r4, r7
 801699a:	e7db      	b.n	8016954 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 801699c:	2300      	movs	r3, #0
 801699e:	e7d9      	b.n	8016954 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 80169a0:	4603      	mov	r3, r0
 80169a2:	e7d7      	b.n	8016954 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 80169a4:	b280      	uxth	r0, r0
 80169a6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80169aa:	b2bf      	uxth	r7, r7
 80169ac:	fb00 fe07 	mul.w	lr, r0, r7
 80169b0:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80169b4:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80169b8:	eba0 0c0e 	sub.w	ip, r0, lr
 80169bc:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 80169c0:	b2bf      	uxth	r7, r7
 80169c2:	fa1f fc8c 	uxth.w	ip, ip
 80169c6:	eba5 0507 	sub.w	r5, r5, r7
 80169ca:	fb0c f00a 	mul.w	r0, ip, sl
 80169ce:	b2ad      	uxth	r5, r5
 80169d0:	fb05 000b 	mla	r0, r5, fp, r0
 80169d4:	fb07 0009 	mla	r0, r7, r9, r0
 80169d8:	fb0e 0008 	mla	r0, lr, r8, r0
 80169dc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80169e0:	9001      	str	r0, [sp, #4]
 80169e2:	d018      	beq.n	8016a16 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x126>
 80169e4:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80169e8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80169ec:	fb0b f000 	mul.w	r0, fp, r0
 80169f0:	fb0b fb02 	mul.w	fp, fp, r2
 80169f4:	0a02      	lsrs	r2, r0, #8
 80169f6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80169fa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80169fe:	4402      	add	r2, r0
 8016a00:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8016a04:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8016a08:	0a12      	lsrs	r2, r2, #8
 8016a0a:	0a00      	lsrs	r0, r0, #8
 8016a0c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8016a10:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8016a14:	4302      	orrs	r2, r0
 8016a16:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8016a1a:	d01a      	beq.n	8016a52 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x162>
 8016a1c:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8016a20:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8016a24:	fb0a f000 	mul.w	r0, sl, r0
 8016a28:	fb0a fa06 	mul.w	sl, sl, r6
 8016a2c:	0a06      	lsrs	r6, r0, #8
 8016a2e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8016a32:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8016a36:	4406      	add	r6, r0
 8016a38:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8016a3c:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8016a40:	0a36      	lsrs	r6, r6, #8
 8016a42:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016a46:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8016a4a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016a4e:	ea46 060a 	orr.w	r6, r6, sl
 8016a52:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8016a56:	d01b      	beq.n	8016a90 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1a0>
 8016a58:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8016a5c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8016a60:	fb09 fa0a 	mul.w	sl, r9, sl
 8016a64:	fb09 f004 	mul.w	r0, r9, r4
 8016a68:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8016a6c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8016a70:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8016a74:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8016a78:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8016a7c:	4454      	add	r4, sl
 8016a7e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8016a82:	0a24      	lsrs	r4, r4, #8
 8016a84:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8016a88:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8016a8c:	ea44 0409 	orr.w	r4, r4, r9
 8016a90:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8016a94:	d01b      	beq.n	8016ace <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1de>
 8016a96:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8016a9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016a9e:	fb08 f909 	mul.w	r9, r8, r9
 8016aa2:	fb08 f003 	mul.w	r0, r8, r3
 8016aa6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8016aaa:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8016aae:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8016ab2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8016ab6:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8016aba:	444b      	add	r3, r9
 8016abc:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8016ac0:	0a1b      	lsrs	r3, r3, #8
 8016ac2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8016ac6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8016aca:	ea43 0308 	orr.w	r3, r3, r8
 8016ace:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8016ad2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8016ad6:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8016ada:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8016ade:	fb0c f000 	mul.w	r0, ip, r0
 8016ae2:	fb0c f606 	mul.w	r6, ip, r6
 8016ae6:	fb05 0808 	mla	r8, r5, r8, r0
 8016aea:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8016aee:	fb05 6502 	mla	r5, r5, r2, r6
 8016af2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8016af6:	fb07 8800 	mla	r8, r7, r0, r8
 8016afa:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8016afe:	fb07 5704 	mla	r7, r7, r4, r5
 8016b02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016b06:	fb0e 8000 	mla	r0, lr, r0, r8
 8016b0a:	fb0e 7e03 	mla	lr, lr, r3, r7
 8016b0e:	9b01      	ldr	r3, [sp, #4]
 8016b10:	0a00      	lsrs	r0, r0, #8
 8016b12:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016b16:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8016b1a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8016b1e:	ea40 0e0e 	orr.w	lr, r0, lr
 8016b22:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8016b26:	b280      	uxth	r0, r0
 8016b28:	fa5f f48e 	uxtb.w	r4, lr
 8016b2c:	4343      	muls	r3, r0
 8016b2e:	fb14 f400 	smulbb	r4, r4, r0
 8016b32:	1c5a      	adds	r2, r3, #1
 8016b34:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8016b38:	780b      	ldrb	r3, [r1, #0]
 8016b3a:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8016b3e:	b2d2      	uxtb	r2, r2
 8016b40:	fb03 4302 	mla	r3, r3, r2, r4
 8016b44:	b29b      	uxth	r3, r3
 8016b46:	1c5c      	adds	r4, r3, #1
 8016b48:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8016b4c:	784c      	ldrb	r4, [r1, #1]
 8016b4e:	fb14 f402 	smulbb	r4, r4, r2
 8016b52:	121b      	asrs	r3, r3, #8
 8016b54:	700b      	strb	r3, [r1, #0]
 8016b56:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8016b5a:	fb03 4300 	mla	r3, r3, r0, r4
 8016b5e:	b29b      	uxth	r3, r3
 8016b60:	1c5c      	adds	r4, r3, #1
 8016b62:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8016b66:	121b      	asrs	r3, r3, #8
 8016b68:	704b      	strb	r3, [r1, #1]
 8016b6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8016b6e:	f891 e002 	ldrb.w	lr, [r1, #2]
 8016b72:	fb1e fe02 	smulbb	lr, lr, r2
 8016b76:	fb03 ee00 	mla	lr, r3, r0, lr
 8016b7a:	fa1f fe8e 	uxth.w	lr, lr
 8016b7e:	f10e 0301 	add.w	r3, lr, #1
 8016b82:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8016b86:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8016b8a:	f881 e002 	strb.w	lr, [r1, #2]
 8016b8e:	b003      	add	sp, #12
 8016b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b94:	0801cf27 	.word	0x0801cf27
 8016b98:	0801d3de 	.word	0x0801d3de
 8016b9c:	0801cfaf 	.word	0x0801cfaf

08016ba0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ba4:	ed2d 8b08 	vpush	{d8-d11}
 8016ba8:	b09d      	sub	sp, #116	; 0x74
 8016baa:	eeb0 aa40 	vmov.f32	s20, s0
 8016bae:	eef0 9a60 	vmov.f32	s19, s1
 8016bb2:	9219      	str	r2, [sp, #100]	; 0x64
 8016bb4:	eeb0 9a41 	vmov.f32	s18, s2
 8016bb8:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8016bba:	eeb0 8a62 	vmov.f32	s16, s5
 8016bbe:	9307      	str	r3, [sp, #28]
 8016bc0:	eef0 8a43 	vmov.f32	s17, s6
 8016bc4:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8016bc8:	eef0 ba44 	vmov.f32	s23, s8
 8016bcc:	901b      	str	r0, [sp, #108]	; 0x6c
 8016bce:	eeb0 ba64 	vmov.f32	s22, s9
 8016bd2:	931a      	str	r3, [sp, #104]	; 0x68
 8016bd4:	eef0 aa45 	vmov.f32	s21, s10
 8016bd8:	6850      	ldr	r0, [r2, #4]
 8016bda:	9117      	str	r1, [sp, #92]	; 0x5c
 8016bdc:	6812      	ldr	r2, [r2, #0]
 8016bde:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8016be2:	e9dd 562f 	ldrd	r5, r6, [sp, #188]	; 0xbc
 8016be6:	fb00 1303 	mla	r3, r0, r3, r1
 8016bea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016bee:	18d3      	adds	r3, r2, r3
 8016bf0:	930a      	str	r3, [sp, #40]	; 0x28
 8016bf2:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8016bf4:	681b      	ldr	r3, [r3, #0]
 8016bf6:	9310      	str	r3, [sp, #64]	; 0x40
 8016bf8:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8016bfc:	930b      	str	r3, [sp, #44]	; 0x2c
 8016bfe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	dc03      	bgt.n	8016c0c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8016c04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	f340 8368 	ble.w	80172dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8016c0c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8016c0e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8016c12:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8016c16:	1e48      	subs	r0, r1, #1
 8016c18:	1e57      	subs	r7, r2, #1
 8016c1a:	9b07      	ldr	r3, [sp, #28]
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	f340 8187 	ble.w	8016f30 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8016c22:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8016c26:	ea4f 4326 	mov.w	r3, r6, asr #16
 8016c2a:	d406      	bmi.n	8016c3a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8016c2c:	4584      	cmp	ip, r0
 8016c2e:	da04      	bge.n	8016c3a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	db02      	blt.n	8016c3a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8016c34:	42bb      	cmp	r3, r7
 8016c36:	f2c0 817c 	blt.w	8016f32 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8016c3a:	f11c 0c01 	adds.w	ip, ip, #1
 8016c3e:	f100 816c 	bmi.w	8016f1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8016c42:	4561      	cmp	r1, ip
 8016c44:	f2c0 8169 	blt.w	8016f1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8016c48:	3301      	adds	r3, #1
 8016c4a:	f100 8166 	bmi.w	8016f1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8016c4e:	429a      	cmp	r2, r3
 8016c50:	f2c0 8163 	blt.w	8016f1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8016c54:	9b07      	ldr	r3, [sp, #28]
 8016c56:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8016c58:	9318      	str	r3, [sp, #96]	; 0x60
 8016c5a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	f340 8186 	ble.w	8016f6e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8016c62:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8016c64:	142a      	asrs	r2, r5, #16
 8016c66:	ea4f 4026 	mov.w	r0, r6, asr #16
 8016c6a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8016c6e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8016c72:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8016c76:	f100 81cb 	bmi.w	8017010 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8016c7a:	f10e 38ff 	add.w	r8, lr, #4294967295
 8016c7e:	4542      	cmp	r2, r8
 8016c80:	f280 81c6 	bge.w	8017010 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8016c84:	2800      	cmp	r0, #0
 8016c86:	f2c0 81c3 	blt.w	8017010 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8016c8a:	f103 38ff 	add.w	r8, r3, #4294967295
 8016c8e:	4540      	cmp	r0, r8
 8016c90:	f280 81be 	bge.w	8017010 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8016c94:	fa0f f38e 	sxth.w	r3, lr
 8016c98:	fb00 2203 	mla	r2, r0, r3, r2
 8016c9c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016c9e:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8016ca2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8016ca6:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8016caa:	2900      	cmp	r1, #0
 8016cac:	f000 81a6 	beq.w	8016ffc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45c>
 8016cb0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016cb4:	900c      	str	r0, [sp, #48]	; 0x30
 8016cb6:	0e00      	lsrs	r0, r0, #24
 8016cb8:	9013      	str	r0, [sp, #76]	; 0x4c
 8016cba:	f1bc 0f00 	cmp.w	ip, #0
 8016cbe:	d00f      	beq.n	8016ce0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8016cc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016cc4:	3b01      	subs	r3, #1
 8016cc6:	009b      	lsls	r3, r3, #2
 8016cc8:	3304      	adds	r3, #4
 8016cca:	eb08 0003 	add.w	r0, r8, r3
 8016cce:	f858 3003 	ldr.w	r3, [r8, r3]
 8016cd2:	9308      	str	r3, [sp, #32]
 8016cd4:	0e1b      	lsrs	r3, r3, #24
 8016cd6:	9311      	str	r3, [sp, #68]	; 0x44
 8016cd8:	6843      	ldr	r3, [r0, #4]
 8016cda:	930d      	str	r3, [sp, #52]	; 0x34
 8016cdc:	0e1b      	lsrs	r3, r3, #24
 8016cde:	9314      	str	r3, [sp, #80]	; 0x50
 8016ce0:	b289      	uxth	r1, r1
 8016ce2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016ce4:	fa1f fc8c 	uxth.w	ip, ip
 8016ce8:	0108      	lsls	r0, r1, #4
 8016cea:	fb01 f90c 	mul.w	r9, r1, ip
 8016cee:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8016cf2:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 8016cf6:	eba0 0809 	sub.w	r8, r0, r9
 8016cfa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016cfc:	fa1f f18c 	uxth.w	r1, ip
 8016d00:	fa1f f888 	uxth.w	r8, r8
 8016d04:	1a5b      	subs	r3, r3, r1
 8016d06:	fb08 f000 	mul.w	r0, r8, r0
 8016d0a:	b29b      	uxth	r3, r3
 8016d0c:	fb03 000e 	mla	r0, r3, lr, r0
 8016d10:	fb01 0004 	mla	r0, r1, r4, r0
 8016d14:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016d16:	fb09 0004 	mla	r0, r9, r4, r0
 8016d1a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8016d1e:	2800      	cmp	r0, #0
 8016d20:	f000 80f2 	beq.w	8016f08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8016d24:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8016d28:	d01b      	beq.n	8016d62 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8016d2a:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8016d2e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8016d32:	fb0e fa0a 	mul.w	sl, lr, sl
 8016d36:	fb0e fe02 	mul.w	lr, lr, r2
 8016d3a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8016d3e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8016d42:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8016d46:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8016d4a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8016d4e:	4452      	add	r2, sl
 8016d50:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016d54:	0a12      	lsrs	r2, r2, #8
 8016d56:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8016d5a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8016d5e:	ea42 020c 	orr.w	r2, r2, ip
 8016d62:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016d64:	2cff      	cmp	r4, #255	; 0xff
 8016d66:	d021      	beq.n	8016dac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8016d68:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016d6a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8016d6e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016d70:	fb04 fb0b 	mul.w	fp, r4, fp
 8016d74:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016d76:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8016d7a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016d7c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8016d80:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8016d84:	fb04 fa0a 	mul.w	sl, r4, sl
 8016d88:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016d8c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8016d90:	44de      	add	lr, fp
 8016d92:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8016d96:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016d9a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016d9e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016da2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016da6:	ea4e 040a 	orr.w	r4, lr, sl
 8016daa:	940c      	str	r4, [sp, #48]	; 0x30
 8016dac:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016dae:	2cff      	cmp	r4, #255	; 0xff
 8016db0:	d021      	beq.n	8016df6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 8016db2:	9c08      	ldr	r4, [sp, #32]
 8016db4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8016db8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016dba:	fb04 fb0b 	mul.w	fp, r4, fp
 8016dbe:	9c08      	ldr	r4, [sp, #32]
 8016dc0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8016dc4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016dc6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8016dca:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8016dce:	fb04 fa0a 	mul.w	sl, r4, sl
 8016dd2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016dd6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8016dda:	44de      	add	lr, fp
 8016ddc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8016de0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016de4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016de8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016dec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016df0:	ea4e 040a 	orr.w	r4, lr, sl
 8016df4:	9408      	str	r4, [sp, #32]
 8016df6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016df8:	2cff      	cmp	r4, #255	; 0xff
 8016dfa:	d021      	beq.n	8016e40 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8016dfc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016dfe:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8016e02:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016e04:	fb04 fb0b 	mul.w	fp, r4, fp
 8016e08:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016e0a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8016e0e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016e10:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8016e14:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8016e18:	fb04 fa0a 	mul.w	sl, r4, sl
 8016e1c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016e20:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8016e24:	44de      	add	lr, fp
 8016e26:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8016e2a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8016e2e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8016e32:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8016e36:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8016e3a:	ea4e 040a 	orr.w	r4, lr, sl
 8016e3e:	940d      	str	r4, [sp, #52]	; 0x34
 8016e40:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016e42:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8016e46:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8016e4a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8016e4e:	9c08      	ldr	r4, [sp, #32]
 8016e50:	fb08 fc0c 	mul.w	ip, r8, ip
 8016e54:	fb03 cc0e 	mla	ip, r3, lr, ip
 8016e58:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8016e5c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8016e5e:	fb01 cc0e 	mla	ip, r1, lr, ip
 8016e62:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8016e66:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016e68:	fb09 cc0e 	mla	ip, r9, lr, ip
 8016e6c:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8016e70:	fb08 f80e 	mul.w	r8, r8, lr
 8016e74:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8016e78:	fb03 8202 	mla	r2, r3, r2, r8
 8016e7c:	9b08      	ldr	r3, [sp, #32]
 8016e7e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8016e82:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8016e86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016e88:	fb01 220a 	mla	r2, r1, sl, r2
 8016e8c:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8016e90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016e92:	fb09 2901 	mla	r9, r9, r1, r2
 8016e96:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016e98:	4343      	muls	r3, r0
 8016e9a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8016e9e:	1c58      	adds	r0, r3, #1
 8016ea0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8016ea4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8016ea8:	783b      	ldrb	r3, [r7, #0]
 8016eaa:	ea4c 0c09 	orr.w	ip, ip, r9
 8016eae:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8016eb2:	fa5f f28c 	uxtb.w	r2, ip
 8016eb6:	b2c0      	uxtb	r0, r0
 8016eb8:	fb12 f201 	smulbb	r2, r2, r1
 8016ebc:	fb03 2300 	mla	r3, r3, r0, r2
 8016ec0:	b29b      	uxth	r3, r3
 8016ec2:	1c5a      	adds	r2, r3, #1
 8016ec4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8016ec8:	787a      	ldrb	r2, [r7, #1]
 8016eca:	fb12 f200 	smulbb	r2, r2, r0
 8016ece:	121b      	asrs	r3, r3, #8
 8016ed0:	703b      	strb	r3, [r7, #0]
 8016ed2:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8016ed6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8016eda:	fb03 2301 	mla	r3, r3, r1, r2
 8016ede:	b29b      	uxth	r3, r3
 8016ee0:	1c5a      	adds	r2, r3, #1
 8016ee2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8016ee6:	121b      	asrs	r3, r3, #8
 8016ee8:	707b      	strb	r3, [r7, #1]
 8016eea:	78bb      	ldrb	r3, [r7, #2]
 8016eec:	fb13 f000 	smulbb	r0, r3, r0
 8016ef0:	fb0c 0c01 	mla	ip, ip, r1, r0
 8016ef4:	fa1f fc8c 	uxth.w	ip, ip
 8016ef8:	f10c 0301 	add.w	r3, ip, #1
 8016efc:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8016f00:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8016f04:	f887 c002 	strb.w	ip, [r7, #2]
 8016f08:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8016f0a:	3703      	adds	r7, #3
 8016f0c:	441d      	add	r5, r3
 8016f0e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8016f10:	441e      	add	r6, r3
 8016f12:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016f14:	3b01      	subs	r3, #1
 8016f16:	9318      	str	r3, [sp, #96]	; 0x60
 8016f18:	e69f      	b.n	8016c5a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8016f1a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8016f1c:	441d      	add	r5, r3
 8016f1e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8016f20:	441e      	add	r6, r3
 8016f22:	9b07      	ldr	r3, [sp, #28]
 8016f24:	3b01      	subs	r3, #1
 8016f26:	9307      	str	r3, [sp, #28]
 8016f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f2a:	3303      	adds	r3, #3
 8016f2c:	930a      	str	r3, [sp, #40]	; 0x28
 8016f2e:	e674      	b.n	8016c1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8016f30:	d025      	beq.n	8016f7e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8016f32:	9b07      	ldr	r3, [sp, #28]
 8016f34:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8016f36:	3b01      	subs	r3, #1
 8016f38:	fb00 5003 	mla	r0, r0, r3, r5
 8016f3c:	1400      	asrs	r0, r0, #16
 8016f3e:	f53f ae89 	bmi.w	8016c54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8016f42:	3901      	subs	r1, #1
 8016f44:	4288      	cmp	r0, r1
 8016f46:	f6bf ae85 	bge.w	8016c54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8016f4a:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8016f4c:	fb01 6303 	mla	r3, r1, r3, r6
 8016f50:	141b      	asrs	r3, r3, #16
 8016f52:	f53f ae7f 	bmi.w	8016c54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8016f56:	3a01      	subs	r2, #1
 8016f58:	4293      	cmp	r3, r2
 8016f5a:	f6bf ae7b 	bge.w	8016c54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8016f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f60:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8016f64:	f103 0e03 	add.w	lr, r3, #3
 8016f68:	f1bb 0f00 	cmp.w	fp, #0
 8016f6c:	dc6e      	bgt.n	801704c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8016f6e:	9b07      	ldr	r3, [sp, #28]
 8016f70:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8016f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f76:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016f7a:	4423      	add	r3, r4
 8016f7c:	930a      	str	r3, [sp, #40]	; 0x28
 8016f7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	f340 81ab 	ble.w	80172dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8016f86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016f8a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016f8c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8016f90:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8016f94:	eef0 6a48 	vmov.f32	s13, s16
 8016f98:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8016f9c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8016fa0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016fa4:	ee16 5a90 	vmov	r5, s13
 8016fa8:	eef0 6a68 	vmov.f32	s13, s17
 8016fac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016fb0:	ee16 6a90 	vmov	r6, s13
 8016fb4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8016fb8:	ee69 7a27 	vmul.f32	s15, s18, s15
 8016fbc:	ee37 8a48 	vsub.f32	s16, s14, s16
 8016fc0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8016fc4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8016fc8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8016fcc:	ee18 2a10 	vmov	r2, s16
 8016fd0:	eeb0 8a47 	vmov.f32	s16, s14
 8016fd4:	fb92 f3f3 	sdiv	r3, r2, r3
 8016fd8:	ee18 2a90 	vmov	r2, s17
 8016fdc:	9331      	str	r3, [sp, #196]	; 0xc4
 8016fde:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016fe0:	eef0 8a67 	vmov.f32	s17, s15
 8016fe4:	fb92 f3f3 	sdiv	r3, r2, r3
 8016fe8:	9332      	str	r3, [sp, #200]	; 0xc8
 8016fea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016fec:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016fee:	3b01      	subs	r3, #1
 8016ff0:	9317      	str	r3, [sp, #92]	; 0x5c
 8016ff2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016ff4:	bf08      	it	eq
 8016ff6:	4613      	moveq	r3, r2
 8016ff8:	9307      	str	r3, [sp, #28]
 8016ffa:	e600      	b.n	8016bfe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8016ffc:	f1bc 0f00 	cmp.w	ip, #0
 8017000:	f43f ae6e 	beq.w	8016ce0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8017004:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8017008:	9308      	str	r3, [sp, #32]
 801700a:	0e1b      	lsrs	r3, r3, #24
 801700c:	9311      	str	r3, [sp, #68]	; 0x44
 801700e:	e667      	b.n	8016ce0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8017010:	f112 0801 	adds.w	r8, r2, #1
 8017014:	f53f af78 	bmi.w	8016f08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8017018:	45c6      	cmp	lr, r8
 801701a:	f6ff af75 	blt.w	8016f08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801701e:	f110 0801 	adds.w	r8, r0, #1
 8017022:	f53f af71 	bmi.w	8016f08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8017026:	4543      	cmp	r3, r8
 8017028:	f6ff af6e 	blt.w	8016f08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801702c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801702e:	b21b      	sxth	r3, r3
 8017030:	9201      	str	r2, [sp, #4]
 8017032:	9300      	str	r3, [sp, #0]
 8017034:	fa0f f38e 	sxth.w	r3, lr
 8017038:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801703a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801703e:	e9cd c404 	strd	ip, r4, [sp, #16]
 8017042:	4639      	mov	r1, r7
 8017044:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8017046:	f7ff fc53 	bl	80168f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801704a:	e75d      	b.n	8016f08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801704c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801704e:	142f      	asrs	r7, r5, #16
 8017050:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017052:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8017056:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801705a:	1433      	asrs	r3, r6, #16
 801705c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8017060:	fb02 7303 	mla	r3, r2, r3, r7
 8017064:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8017068:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801706c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8017070:	2900      	cmp	r1, #0
 8017072:	f000 812a 	beq.w	80172ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72a>
 8017076:	687c      	ldr	r4, [r7, #4]
 8017078:	940e      	str	r4, [sp, #56]	; 0x38
 801707a:	0e24      	lsrs	r4, r4, #24
 801707c:	9415      	str	r4, [sp, #84]	; 0x54
 801707e:	b178      	cbz	r0, 80170a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8017080:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8017084:	3a01      	subs	r2, #1
 8017086:	0092      	lsls	r2, r2, #2
 8017088:	3204      	adds	r2, #4
 801708a:	eb07 0802 	add.w	r8, r7, r2
 801708e:	58ba      	ldr	r2, [r7, r2]
 8017090:	9209      	str	r2, [sp, #36]	; 0x24
 8017092:	0e12      	lsrs	r2, r2, #24
 8017094:	9212      	str	r2, [sp, #72]	; 0x48
 8017096:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801709a:	920f      	str	r2, [sp, #60]	; 0x3c
 801709c:	0e12      	lsrs	r2, r2, #24
 801709e:	9216      	str	r2, [sp, #88]	; 0x58
 80170a0:	b289      	uxth	r1, r1
 80170a2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80170a4:	b280      	uxth	r0, r0
 80170a6:	fb01 f900 	mul.w	r9, r1, r0
 80170aa:	0109      	lsls	r1, r1, #4
 80170ac:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80170b0:	eba1 0809 	sub.w	r8, r1, r9
 80170b4:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80170b8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80170ba:	b280      	uxth	r0, r0
 80170bc:	fa1f f888 	uxth.w	r8, r8
 80170c0:	1a12      	subs	r2, r2, r0
 80170c2:	fb08 f101 	mul.w	r1, r8, r1
 80170c6:	b292      	uxth	r2, r2
 80170c8:	fb02 110c 	mla	r1, r2, ip, r1
 80170cc:	fb00 1104 	mla	r1, r0, r4, r1
 80170d0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80170d2:	fb09 1104 	mla	r1, r9, r4, r1
 80170d6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80170da:	2900      	cmp	r1, #0
 80170dc:	f000 80ec 	beq.w	80172b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80170e0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80170e4:	d019      	beq.n	801711a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 80170e6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80170ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80170ee:	fb0c fa0a 	mul.w	sl, ip, sl
 80170f2:	fb0c fc03 	mul.w	ip, ip, r3
 80170f6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80170fa:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80170fe:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8017102:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017106:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801710a:	4453      	add	r3, sl
 801710c:	0a3f      	lsrs	r7, r7, #8
 801710e:	0a1b      	lsrs	r3, r3, #8
 8017110:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8017114:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017118:	433b      	orrs	r3, r7
 801711a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801711c:	2cff      	cmp	r4, #255	; 0xff
 801711e:	d020      	beq.n	8017162 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c2>
 8017120:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017122:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8017126:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017128:	4367      	muls	r7, r4
 801712a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801712c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8017130:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017134:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017136:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801713a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801713e:	fb04 fa0a 	mul.w	sl, r4, sl
 8017142:	44bc      	add	ip, r7
 8017144:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8017148:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801714c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017150:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017154:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017158:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801715c:	ea4c 040a 	orr.w	r4, ip, sl
 8017160:	940e      	str	r4, [sp, #56]	; 0x38
 8017162:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017164:	2cff      	cmp	r4, #255	; 0xff
 8017166:	d020      	beq.n	80171aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 8017168:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801716a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801716e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017170:	4367      	muls	r7, r4
 8017172:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8017174:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8017178:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801717c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801717e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8017182:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017186:	fb04 fa0a 	mul.w	sl, r4, sl
 801718a:	44bc      	add	ip, r7
 801718c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8017190:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017194:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017198:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801719c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80171a0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80171a4:	ea4c 040a 	orr.w	r4, ip, sl
 80171a8:	9409      	str	r4, [sp, #36]	; 0x24
 80171aa:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80171ac:	2cff      	cmp	r4, #255	; 0xff
 80171ae:	d020      	beq.n	80171f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x652>
 80171b0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80171b2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80171b6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80171b8:	4367      	muls	r7, r4
 80171ba:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80171bc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80171c0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80171c4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80171c6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80171ca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80171ce:	fb04 fa0a 	mul.w	sl, r4, sl
 80171d2:	44bc      	add	ip, r7
 80171d4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80171d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80171dc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80171e0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80171e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80171e8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80171ec:	ea4c 040a 	orr.w	r4, ip, sl
 80171f0:	940f      	str	r4, [sp, #60]	; 0x3c
 80171f2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80171f4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80171f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80171fc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8017200:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8017202:	fb08 f707 	mul.w	r7, r8, r7
 8017206:	fb02 770c 	mla	r7, r2, ip, r7
 801720a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801720e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8017210:	fb00 770c 	mla	r7, r0, ip, r7
 8017214:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017218:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801721a:	fb09 770c 	mla	r7, r9, ip, r7
 801721e:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8017222:	fb08 f80c 	mul.w	r8, r8, ip
 8017226:	0a3f      	lsrs	r7, r7, #8
 8017228:	fb02 8303 	mla	r3, r2, r3, r8
 801722c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801722e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8017232:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8017236:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017238:	fb00 330a 	mla	r3, r0, sl, r3
 801723c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8017240:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8017242:	fb09 3c0c 	mla	ip, r9, ip, r3
 8017246:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017248:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801724c:	434b      	muls	r3, r1
 801724e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8017252:	1c59      	adds	r1, r3, #1
 8017254:	ea47 070c 	orr.w	r7, r7, ip
 8017258:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801725c:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8017260:	b2fa      	uxtb	r2, r7
 8017262:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8017266:	fb12 f200 	smulbb	r2, r2, r0
 801726a:	b2c9      	uxtb	r1, r1
 801726c:	fb03 2301 	mla	r3, r3, r1, r2
 8017270:	b29b      	uxth	r3, r3
 8017272:	1c5a      	adds	r2, r3, #1
 8017274:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017278:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801727c:	fb12 f201 	smulbb	r2, r2, r1
 8017280:	121b      	asrs	r3, r3, #8
 8017282:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8017286:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801728a:	0c3f      	lsrs	r7, r7, #16
 801728c:	fb03 2300 	mla	r3, r3, r0, r2
 8017290:	b29b      	uxth	r3, r3
 8017292:	1c5a      	adds	r2, r3, #1
 8017294:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017298:	121b      	asrs	r3, r3, #8
 801729a:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801729e:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80172a2:	fb13 f101 	smulbb	r1, r3, r1
 80172a6:	fb07 1700 	mla	r7, r7, r0, r1
 80172aa:	b2bf      	uxth	r7, r7
 80172ac:	1c79      	adds	r1, r7, #1
 80172ae:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80172b2:	123f      	asrs	r7, r7, #8
 80172b4:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80172b8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80172ba:	f10e 0e03 	add.w	lr, lr, #3
 80172be:	f10b 3bff 	add.w	fp, fp, #4294967295
 80172c2:	441d      	add	r5, r3
 80172c4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80172c6:	441e      	add	r6, r3
 80172c8:	e64e      	b.n	8016f68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 80172ca:	2800      	cmp	r0, #0
 80172cc:	f43f aee8 	beq.w	80170a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 80172d0:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80172d4:	9209      	str	r2, [sp, #36]	; 0x24
 80172d6:	0e12      	lsrs	r2, r2, #24
 80172d8:	9212      	str	r2, [sp, #72]	; 0x48
 80172da:	e6e1      	b.n	80170a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 80172dc:	b01d      	add	sp, #116	; 0x74
 80172de:	ecbd 8b08 	vpop	{d8-d11}
 80172e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080172e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80172e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172ec:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 80172f0:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80172f4:	fb04 5603 	mla	r6, r4, r3, r5
 80172f8:	2c00      	cmp	r4, #0
 80172fa:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80172fe:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8017302:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8017306:	db36      	blt.n	8017376 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 8017308:	45a6      	cmp	lr, r4
 801730a:	dd34      	ble.n	8017376 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 801730c:	2d00      	cmp	r5, #0
 801730e:	db30      	blt.n	8017372 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 8017310:	42ab      	cmp	r3, r5
 8017312:	dd2e      	ble.n	8017372 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 8017314:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8017318:	1c6e      	adds	r6, r5, #1
 801731a:	d42f      	bmi.n	801737c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 801731c:	42b3      	cmp	r3, r6
 801731e:	dd2d      	ble.n	801737c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 8017320:	b370      	cbz	r0, 8017380 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x98>
 8017322:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8017326:	3401      	adds	r4, #1
 8017328:	d42e      	bmi.n	8017388 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 801732a:	45a6      	cmp	lr, r4
 801732c:	dd2c      	ble.n	8017388 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 801732e:	b377      	cbz	r7, 801738e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa6>
 8017330:	2d00      	cmp	r5, #0
 8017332:	db27      	blt.n	8017384 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 8017334:	42ab      	cmp	r3, r5
 8017336:	dd25      	ble.n	8017384 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 8017338:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 801733c:	3501      	adds	r5, #1
 801733e:	d429      	bmi.n	8017394 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 8017340:	42ab      	cmp	r3, r5
 8017342:	dd27      	ble.n	8017394 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 8017344:	b340      	cbz	r0, 8017398 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb0>
 8017346:	3301      	adds	r3, #1
 8017348:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 801734c:	280f      	cmp	r0, #15
 801734e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8017352:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8017356:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801735a:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801735e:	d801      	bhi.n	8017364 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7c>
 8017360:	2f0f      	cmp	r7, #15
 8017362:	d91b      	bls.n	801739c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb4>
 8017364:	4b7e      	ldr	r3, [pc, #504]	; (8017560 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x278>)
 8017366:	f240 1157 	movw	r1, #343	; 0x157
 801736a:	4a7e      	ldr	r2, [pc, #504]	; (8017564 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x27c>)
 801736c:	487e      	ldr	r0, [pc, #504]	; (8017568 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x280>)
 801736e:	f001 fd85 	bl	8018e7c <__assert_func>
 8017372:	2200      	movs	r2, #0
 8017374:	e7d0      	b.n	8017318 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x30>
 8017376:	2600      	movs	r6, #0
 8017378:	4632      	mov	r2, r6
 801737a:	e7d4      	b.n	8017326 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 801737c:	2600      	movs	r6, #0
 801737e:	e7d2      	b.n	8017326 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8017380:	4606      	mov	r6, r0
 8017382:	e7d0      	b.n	8017326 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8017384:	2400      	movs	r4, #0
 8017386:	e7d9      	b.n	801733c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x54>
 8017388:	2300      	movs	r3, #0
 801738a:	461c      	mov	r4, r3
 801738c:	e7de      	b.n	801734c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801738e:	463b      	mov	r3, r7
 8017390:	463c      	mov	r4, r7
 8017392:	e7db      	b.n	801734c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8017394:	2300      	movs	r3, #0
 8017396:	e7d9      	b.n	801734c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8017398:	4603      	mov	r3, r0
 801739a:	e7d7      	b.n	801734c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801739c:	b280      	uxth	r0, r0
 801739e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80173a2:	b2bf      	uxth	r7, r7
 80173a4:	fb00 fe07 	mul.w	lr, r0, r7
 80173a8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80173ac:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80173b0:	eba0 0c0e 	sub.w	ip, r0, lr
 80173b4:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80173b8:	b2bf      	uxth	r7, r7
 80173ba:	fa1f fc8c 	uxth.w	ip, ip
 80173be:	eba0 0507 	sub.w	r5, r0, r7
 80173c2:	fb0c f00a 	mul.w	r0, ip, sl
 80173c6:	b2ad      	uxth	r5, r5
 80173c8:	fb05 000b 	mla	r0, r5, fp, r0
 80173cc:	fb07 0009 	mla	r0, r7, r9, r0
 80173d0:	fb0e 0008 	mla	r0, lr, r8, r0
 80173d4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80173d8:	9001      	str	r0, [sp, #4]
 80173da:	d018      	beq.n	801740e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x126>
 80173dc:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80173e0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80173e4:	fb0b f000 	mul.w	r0, fp, r0
 80173e8:	fb0b fb02 	mul.w	fp, fp, r2
 80173ec:	0a02      	lsrs	r2, r0, #8
 80173ee:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80173f2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80173f6:	4402      	add	r2, r0
 80173f8:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80173fc:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8017400:	0a12      	lsrs	r2, r2, #8
 8017402:	0a00      	lsrs	r0, r0, #8
 8017404:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8017408:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801740c:	4302      	orrs	r2, r0
 801740e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8017412:	d01a      	beq.n	801744a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x162>
 8017414:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8017418:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801741c:	fb0a f000 	mul.w	r0, sl, r0
 8017420:	fb0a fa06 	mul.w	sl, sl, r6
 8017424:	0a06      	lsrs	r6, r0, #8
 8017426:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801742a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801742e:	4406      	add	r6, r0
 8017430:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8017434:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8017438:	0a36      	lsrs	r6, r6, #8
 801743a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801743e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8017442:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017446:	ea46 060a 	orr.w	r6, r6, sl
 801744a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801744e:	d01b      	beq.n	8017488 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1a0>
 8017450:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8017454:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8017458:	fb09 fa0a 	mul.w	sl, r9, sl
 801745c:	fb09 f004 	mul.w	r0, r9, r4
 8017460:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8017464:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8017468:	f500 7980 	add.w	r9, r0, #256	; 0x100
 801746c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8017470:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8017474:	4454      	add	r4, sl
 8017476:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801747a:	0a24      	lsrs	r4, r4, #8
 801747c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8017480:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8017484:	ea44 0409 	orr.w	r4, r4, r9
 8017488:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801748c:	d01b      	beq.n	80174c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1de>
 801748e:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8017492:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017496:	fb08 f909 	mul.w	r9, r8, r9
 801749a:	fb08 f003 	mul.w	r0, r8, r3
 801749e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80174a2:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80174a6:	f500 7880 	add.w	r8, r0, #256	; 0x100
 80174aa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80174ae:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 80174b2:	444b      	add	r3, r9
 80174b4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80174b8:	0a1b      	lsrs	r3, r3, #8
 80174ba:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80174be:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80174c2:	ea43 0308 	orr.w	r3, r3, r8
 80174c6:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80174ca:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80174ce:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 80174d2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80174d6:	fb0c f000 	mul.w	r0, ip, r0
 80174da:	fb0c f606 	mul.w	r6, ip, r6
 80174de:	fb05 0808 	mla	r8, r5, r8, r0
 80174e2:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80174e6:	fb05 6502 	mla	r5, r5, r2, r6
 80174ea:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80174ee:	fb07 8800 	mla	r8, r7, r0, r8
 80174f2:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 80174f6:	fb07 5704 	mla	r7, r7, r4, r5
 80174fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80174fe:	fb0e 8000 	mla	r0, lr, r0, r8
 8017502:	780a      	ldrb	r2, [r1, #0]
 8017504:	fb0e 7e03 	mla	lr, lr, r3, r7
 8017508:	9b01      	ldr	r3, [sp, #4]
 801750a:	0a00      	lsrs	r0, r0, #8
 801750c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017510:	43db      	mvns	r3, r3
 8017512:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8017516:	b2db      	uxtb	r3, r3
 8017518:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801751c:	ea40 0e0e 	orr.w	lr, r0, lr
 8017520:	fb02 f003 	mul.w	r0, r2, r3
 8017524:	1c42      	adds	r2, r0, #1
 8017526:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801752a:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801752e:	700a      	strb	r2, [r1, #0]
 8017530:	784a      	ldrb	r2, [r1, #1]
 8017532:	435a      	muls	r2, r3
 8017534:	1c50      	adds	r0, r2, #1
 8017536:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801753a:	ea4f 221e 	mov.w	r2, lr, lsr #8
 801753e:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8017542:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8017546:	704a      	strb	r2, [r1, #1]
 8017548:	788a      	ldrb	r2, [r1, #2]
 801754a:	4353      	muls	r3, r2
 801754c:	1c5a      	adds	r2, r3, #1
 801754e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017552:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8017556:	f881 e002 	strb.w	lr, [r1, #2]
 801755a:	b003      	add	sp, #12
 801755c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017560:	0801cf27 	.word	0x0801cf27
 8017564:	0801d3de 	.word	0x0801d3de
 8017568:	0801cfaf 	.word	0x0801cfaf

0801756c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801756c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017570:	ed2d 8b08 	vpush	{d8-d11}
 8017574:	b099      	sub	sp, #100	; 0x64
 8017576:	eeb0 aa40 	vmov.f32	s20, s0
 801757a:	eef0 9a60 	vmov.f32	s19, s1
 801757e:	9017      	str	r0, [sp, #92]	; 0x5c
 8017580:	eeb0 9a41 	vmov.f32	s18, s2
 8017584:	9306      	str	r3, [sp, #24]
 8017586:	eeb0 8a62 	vmov.f32	s16, s5
 801758a:	eef0 8a43 	vmov.f32	s17, s6
 801758e:	eef0 ba44 	vmov.f32	s23, s8
 8017592:	eeb0 ba64 	vmov.f32	s22, s9
 8017596:	eef0 aa45 	vmov.f32	s21, s10
 801759a:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 801759e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80175a0:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 80175a4:	6850      	ldr	r0, [r2, #4]
 80175a6:	6812      	ldr	r2, [r2, #0]
 80175a8:	fb00 1303 	mla	r3, r0, r3, r1
 80175ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80175b0:	18d3      	adds	r3, r2, r3
 80175b2:	9309      	str	r3, [sp, #36]	; 0x24
 80175b4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80175b6:	e9dd 562b 	ldrd	r5, r6, [sp, #172]	; 0xac
 80175ba:	681b      	ldr	r3, [r3, #0]
 80175bc:	930e      	str	r3, [sp, #56]	; 0x38
 80175be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	dc03      	bgt.n	80175cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80175c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	f340 8360 	ble.w	8017c8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 80175cc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80175ce:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80175d2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80175d6:	1e48      	subs	r0, r1, #1
 80175d8:	1e57      	subs	r7, r2, #1
 80175da:	9b06      	ldr	r3, [sp, #24]
 80175dc:	2b00      	cmp	r3, #0
 80175de:	f340 817b 	ble.w	80178d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80175e2:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80175e6:	ea4f 4326 	mov.w	r3, r6, asr #16
 80175ea:	d406      	bmi.n	80175fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80175ec:	4584      	cmp	ip, r0
 80175ee:	da04      	bge.n	80175fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	db02      	blt.n	80175fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80175f4:	42bb      	cmp	r3, r7
 80175f6:	f2c0 8170 	blt.w	80178da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80175fa:	f11c 0c01 	adds.w	ip, ip, #1
 80175fe:	f100 8160 	bmi.w	80178c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8017602:	4561      	cmp	r1, ip
 8017604:	f2c0 815d 	blt.w	80178c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8017608:	3301      	adds	r3, #1
 801760a:	f100 815a 	bmi.w	80178c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801760e:	429a      	cmp	r2, r3
 8017610:	f2c0 8157 	blt.w	80178c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8017614:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8017618:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801761a:	f1b8 0f00 	cmp.w	r8, #0
 801761e:	f340 8179 	ble.w	8017914 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8017622:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8017624:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8017628:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801762a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801762e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8017632:	142a      	asrs	r2, r5, #16
 8017634:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8017638:	689b      	ldr	r3, [r3, #8]
 801763a:	f100 81be 	bmi.w	80179ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801763e:	f103 39ff 	add.w	r9, r3, #4294967295
 8017642:	454a      	cmp	r2, r9
 8017644:	f280 81b9 	bge.w	80179ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8017648:	f1bc 0f00 	cmp.w	ip, #0
 801764c:	f2c0 81b5 	blt.w	80179ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8017650:	f10e 39ff 	add.w	r9, lr, #4294967295
 8017654:	45cc      	cmp	ip, r9
 8017656:	f280 81b0 	bge.w	80179ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801765a:	b21b      	sxth	r3, r3
 801765c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801765e:	fb0c 2203 	mla	r2, ip, r3, r2
 8017662:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8017666:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801766a:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801766e:	2900      	cmp	r1, #0
 8017670:	f000 8197 	beq.w	80179a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x436>
 8017674:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8017678:	940a      	str	r4, [sp, #40]	; 0x28
 801767a:	0e24      	lsrs	r4, r4, #24
 801767c:	9411      	str	r4, [sp, #68]	; 0x44
 801767e:	b180      	cbz	r0, 80176a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8017680:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8017684:	3b01      	subs	r3, #1
 8017686:	009b      	lsls	r3, r3, #2
 8017688:	3304      	adds	r3, #4
 801768a:	eb09 0c03 	add.w	ip, r9, r3
 801768e:	f859 3003 	ldr.w	r3, [r9, r3]
 8017692:	9307      	str	r3, [sp, #28]
 8017694:	0e1b      	lsrs	r3, r3, #24
 8017696:	930f      	str	r3, [sp, #60]	; 0x3c
 8017698:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801769c:	930b      	str	r3, [sp, #44]	; 0x2c
 801769e:	0e1b      	lsrs	r3, r3, #24
 80176a0:	9312      	str	r3, [sp, #72]	; 0x48
 80176a2:	b289      	uxth	r1, r1
 80176a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80176a6:	b280      	uxth	r0, r0
 80176a8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80176aa:	fb01 fa00 	mul.w	sl, r1, r0
 80176ae:	0109      	lsls	r1, r1, #4
 80176b0:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80176b4:	eba1 090a 	sub.w	r9, r1, sl
 80176b8:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80176bc:	b280      	uxth	r0, r0
 80176be:	fa1f f989 	uxth.w	r9, r9
 80176c2:	1a09      	subs	r1, r1, r0
 80176c4:	fb09 f303 	mul.w	r3, r9, r3
 80176c8:	b289      	uxth	r1, r1
 80176ca:	fb01 330e 	mla	r3, r1, lr, r3
 80176ce:	fb00 3304 	mla	r3, r0, r4, r3
 80176d2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80176d4:	fb0a 3304 	mla	r3, sl, r4, r3
 80176d8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80176dc:	2b00      	cmp	r3, #0
 80176de:	f000 80e8 	beq.w	80178b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80176e2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80176e6:	d01b      	beq.n	8017720 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80176e8:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 80176ec:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80176f0:	fb0e fb0b 	mul.w	fp, lr, fp
 80176f4:	fb0e fe02 	mul.w	lr, lr, r2
 80176f8:	ea4f 221b 	mov.w	r2, fp, lsr #8
 80176fc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017700:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8017704:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8017708:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801770c:	445a      	add	r2, fp
 801770e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017712:	0a12      	lsrs	r2, r2, #8
 8017714:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8017718:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801771c:	ea42 020c 	orr.w	r2, r2, ip
 8017720:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017722:	2cff      	cmp	r4, #255	; 0xff
 8017724:	d021      	beq.n	801776a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8017726:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017728:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801772c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801772e:	fb04 fc0c 	mul.w	ip, r4, ip
 8017732:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017734:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8017738:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801773c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801773e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8017742:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017746:	fb04 fb0b 	mul.w	fp, r4, fp
 801774a:	44e6      	add	lr, ip
 801774c:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8017750:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017754:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8017758:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801775c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8017760:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8017764:	ea4e 040b 	orr.w	r4, lr, fp
 8017768:	940a      	str	r4, [sp, #40]	; 0x28
 801776a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801776c:	2cff      	cmp	r4, #255	; 0xff
 801776e:	d021      	beq.n	80177b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8017770:	9c07      	ldr	r4, [sp, #28]
 8017772:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017776:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8017778:	fb04 fc0c 	mul.w	ip, r4, ip
 801777c:	9c07      	ldr	r4, [sp, #28]
 801777e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8017782:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8017786:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8017788:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801778c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017790:	fb04 fb0b 	mul.w	fp, r4, fp
 8017794:	44e6      	add	lr, ip
 8017796:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801779a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801779e:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80177a2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80177a6:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80177aa:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80177ae:	ea4e 040b 	orr.w	r4, lr, fp
 80177b2:	9407      	str	r4, [sp, #28]
 80177b4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80177b6:	2cff      	cmp	r4, #255	; 0xff
 80177b8:	d021      	beq.n	80177fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 80177ba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80177bc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80177c0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80177c2:	fb04 fc0c 	mul.w	ip, r4, ip
 80177c6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80177c8:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80177cc:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80177d0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80177d2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80177d6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80177da:	fb04 fb0b 	mul.w	fp, r4, fp
 80177de:	44e6      	add	lr, ip
 80177e0:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80177e4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80177e8:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80177ec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80177f0:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80177f4:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80177f8:	ea4e 040b 	orr.w	r4, lr, fp
 80177fc:	940b      	str	r4, [sp, #44]	; 0x2c
 80177fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017800:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8017804:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8017808:	2bff      	cmp	r3, #255	; 0xff
 801780a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801780e:	9c07      	ldr	r4, [sp, #28]
 8017810:	fb09 fc0c 	mul.w	ip, r9, ip
 8017814:	fb01 cc0e 	mla	ip, r1, lr, ip
 8017818:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801781c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801781e:	fb00 cc0e 	mla	ip, r0, lr, ip
 8017822:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8017826:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017828:	fb0a cc0e 	mla	ip, sl, lr, ip
 801782c:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8017830:	fb09 f90e 	mul.w	r9, r9, lr
 8017834:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017838:	fb01 9202 	mla	r2, r1, r2, r9
 801783c:	9907      	ldr	r1, [sp, #28]
 801783e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017842:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 8017846:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017848:	fb00 220b 	mla	r2, r0, fp, r2
 801784c:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8017850:	fb0a 2a00 	mla	sl, sl, r0, r2
 8017854:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017858:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801785c:	ea4c 0c0a 	orr.w	ip, ip, sl
 8017860:	fa5f f08c 	uxtb.w	r0, ip
 8017864:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8017868:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801786c:	f000 80a2 	beq.w	80179b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8017870:	43db      	mvns	r3, r3
 8017872:	783a      	ldrb	r2, [r7, #0]
 8017874:	f897 a002 	ldrb.w	sl, [r7, #2]
 8017878:	b2db      	uxtb	r3, r3
 801787a:	fb02 fe03 	mul.w	lr, r2, r3
 801787e:	fb0a fa03 	mul.w	sl, sl, r3
 8017882:	f10e 0201 	add.w	r2, lr, #1
 8017886:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801788a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801788e:	703a      	strb	r2, [r7, #0]
 8017890:	787a      	ldrb	r2, [r7, #1]
 8017892:	fb02 f003 	mul.w	r0, r2, r3
 8017896:	f10a 0301 	add.w	r3, sl, #1
 801789a:	1c42      	adds	r2, r0, #1
 801789c:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80178a0:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80178a4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80178a8:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80178ac:	707a      	strb	r2, [r7, #1]
 80178ae:	f887 c002 	strb.w	ip, [r7, #2]
 80178b2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80178b4:	3703      	adds	r7, #3
 80178b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80178ba:	441d      	add	r5, r3
 80178bc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80178be:	441e      	add	r6, r3
 80178c0:	e6ab      	b.n	801761a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80178c2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80178c4:	441d      	add	r5, r3
 80178c6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80178c8:	441e      	add	r6, r3
 80178ca:	9b06      	ldr	r3, [sp, #24]
 80178cc:	3b01      	subs	r3, #1
 80178ce:	9306      	str	r3, [sp, #24]
 80178d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178d2:	3303      	adds	r3, #3
 80178d4:	9309      	str	r3, [sp, #36]	; 0x24
 80178d6:	e680      	b.n	80175da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80178d8:	d024      	beq.n	8017924 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 80178da:	9b06      	ldr	r3, [sp, #24]
 80178dc:	982d      	ldr	r0, [sp, #180]	; 0xb4
 80178de:	3b01      	subs	r3, #1
 80178e0:	fb00 5003 	mla	r0, r0, r3, r5
 80178e4:	1400      	asrs	r0, r0, #16
 80178e6:	f53f ae95 	bmi.w	8017614 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80178ea:	3901      	subs	r1, #1
 80178ec:	4288      	cmp	r0, r1
 80178ee:	f6bf ae91 	bge.w	8017614 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80178f2:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80178f4:	fb01 6303 	mla	r3, r1, r3, r6
 80178f8:	141b      	asrs	r3, r3, #16
 80178fa:	f53f ae8b 	bmi.w	8017614 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80178fe:	3a01      	subs	r2, #1
 8017900:	4293      	cmp	r3, r2
 8017902:	f6bf ae87 	bge.w	8017614 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8017906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017908:	f8dd b018 	ldr.w	fp, [sp, #24]
 801790c:	1cdf      	adds	r7, r3, #3
 801790e:	f1bb 0f00 	cmp.w	fp, #0
 8017912:	dc6e      	bgt.n	80179f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8017914:	9b06      	ldr	r3, [sp, #24]
 8017916:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801791a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801791c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017920:	4423      	add	r3, r4
 8017922:	9309      	str	r3, [sp, #36]	; 0x24
 8017924:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017926:	2b00      	cmp	r3, #0
 8017928:	f340 81b0 	ble.w	8017c8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 801792c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017930:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8017932:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8017936:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801793a:	eef0 6a48 	vmov.f32	s13, s16
 801793e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8017942:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8017946:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801794a:	ee16 5a90 	vmov	r5, s13
 801794e:	eef0 6a68 	vmov.f32	s13, s17
 8017952:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017956:	ee16 6a90 	vmov	r6, s13
 801795a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801795e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8017962:	ee37 8a48 	vsub.f32	s16, s14, s16
 8017966:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801796a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801796e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8017972:	ee18 2a10 	vmov	r2, s16
 8017976:	eeb0 8a47 	vmov.f32	s16, s14
 801797a:	fb92 f3f3 	sdiv	r3, r2, r3
 801797e:	ee18 2a90 	vmov	r2, s17
 8017982:	932d      	str	r3, [sp, #180]	; 0xb4
 8017984:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8017986:	eef0 8a67 	vmov.f32	s17, s15
 801798a:	fb92 f3f3 	sdiv	r3, r2, r3
 801798e:	932e      	str	r3, [sp, #184]	; 0xb8
 8017990:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017992:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017994:	3b01      	subs	r3, #1
 8017996:	9315      	str	r3, [sp, #84]	; 0x54
 8017998:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801799a:	bf08      	it	eq
 801799c:	4613      	moveq	r3, r2
 801799e:	9306      	str	r3, [sp, #24]
 80179a0:	e60d      	b.n	80175be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80179a2:	2800      	cmp	r0, #0
 80179a4:	f43f ae7d 	beq.w	80176a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80179a8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80179ac:	9307      	str	r3, [sp, #28]
 80179ae:	0e1b      	lsrs	r3, r3, #24
 80179b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80179b2:	e676      	b.n	80176a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80179b4:	7038      	strb	r0, [r7, #0]
 80179b6:	7079      	strb	r1, [r7, #1]
 80179b8:	e779      	b.n	80178ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80179ba:	f112 0901 	adds.w	r9, r2, #1
 80179be:	f53f af78 	bmi.w	80178b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80179c2:	454b      	cmp	r3, r9
 80179c4:	f6ff af75 	blt.w	80178b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80179c8:	f11c 0901 	adds.w	r9, ip, #1
 80179cc:	f53f af71 	bmi.w	80178b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80179d0:	45ce      	cmp	lr, r9
 80179d2:	f6ff af6e 	blt.w	80178b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80179d6:	b21b      	sxth	r3, r3
 80179d8:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80179dc:	fa0f f28e 	sxth.w	r2, lr
 80179e0:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80179e4:	9200      	str	r2, [sp, #0]
 80179e6:	4639      	mov	r1, r7
 80179e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80179ea:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80179ec:	f7ff fc7c 	bl	80172e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 80179f0:	e75f      	b.n	80178b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80179f2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80179f4:	1429      	asrs	r1, r5, #16
 80179f6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80179f8:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80179fc:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8017a00:	1433      	asrs	r3, r6, #16
 8017a02:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8017a06:	fb0c 1303 	mla	r3, ip, r3, r1
 8017a0a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8017a0c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8017a10:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8017a14:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8017a18:	2a00      	cmp	r2, #0
 8017a1a:	f000 8129 	beq.w	8017c70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8017a1e:	684c      	ldr	r4, [r1, #4]
 8017a20:	940c      	str	r4, [sp, #48]	; 0x30
 8017a22:	0e24      	lsrs	r4, r4, #24
 8017a24:	9413      	str	r4, [sp, #76]	; 0x4c
 8017a26:	b198      	cbz	r0, 8017a50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8017a28:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 8017a2c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017a30:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8017a34:	f10c 0c04 	add.w	ip, ip, #4
 8017a38:	eb01 080c 	add.w	r8, r1, ip
 8017a3c:	f851 100c 	ldr.w	r1, [r1, ip]
 8017a40:	9108      	str	r1, [sp, #32]
 8017a42:	0e09      	lsrs	r1, r1, #24
 8017a44:	9110      	str	r1, [sp, #64]	; 0x40
 8017a46:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017a4a:	910d      	str	r1, [sp, #52]	; 0x34
 8017a4c:	0e09      	lsrs	r1, r1, #24
 8017a4e:	9114      	str	r1, [sp, #80]	; 0x50
 8017a50:	b292      	uxth	r2, r2
 8017a52:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017a54:	b280      	uxth	r0, r0
 8017a56:	fb02 f900 	mul.w	r9, r2, r0
 8017a5a:	0112      	lsls	r2, r2, #4
 8017a5c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8017a60:	eba2 0809 	sub.w	r8, r2, r9
 8017a64:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8017a68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017a6a:	b280      	uxth	r0, r0
 8017a6c:	fa1f f888 	uxth.w	r8, r8
 8017a70:	1a09      	subs	r1, r1, r0
 8017a72:	fb08 f202 	mul.w	r2, r8, r2
 8017a76:	b289      	uxth	r1, r1
 8017a78:	fb01 220e 	mla	r2, r1, lr, r2
 8017a7c:	fb00 2204 	mla	r2, r0, r4, r2
 8017a80:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017a82:	fb09 2204 	mla	r2, r9, r4, r2
 8017a86:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8017a8a:	2a00      	cmp	r2, #0
 8017a8c:	f000 80e8 	beq.w	8017c60 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8017a90:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8017a94:	d01b      	beq.n	8017ace <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 8017a96:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8017a9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017a9e:	fb0e fa0a 	mul.w	sl, lr, sl
 8017aa2:	fb0e fe03 	mul.w	lr, lr, r3
 8017aa6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8017aaa:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8017aae:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8017ab2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017ab6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8017aba:	4453      	add	r3, sl
 8017abc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017ac0:	0a1b      	lsrs	r3, r3, #8
 8017ac2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8017ac6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017aca:	ea43 030c 	orr.w	r3, r3, ip
 8017ace:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017ad0:	2cff      	cmp	r4, #255	; 0xff
 8017ad2:	d021      	beq.n	8017b18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 8017ad4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017ad6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017ada:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017adc:	fb04 fc0c 	mul.w	ip, r4, ip
 8017ae0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017ae2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8017ae6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017aea:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017aec:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8017af0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017af4:	fb04 fa0a 	mul.w	sl, r4, sl
 8017af8:	44e6      	add	lr, ip
 8017afa:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8017afe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017b02:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8017b06:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017b0a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017b0e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017b12:	ea4e 040a 	orr.w	r4, lr, sl
 8017b16:	940c      	str	r4, [sp, #48]	; 0x30
 8017b18:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017b1a:	2cff      	cmp	r4, #255	; 0xff
 8017b1c:	d021      	beq.n	8017b62 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 8017b1e:	9c08      	ldr	r4, [sp, #32]
 8017b20:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017b24:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017b26:	fb04 fc0c 	mul.w	ip, r4, ip
 8017b2a:	9c08      	ldr	r4, [sp, #32]
 8017b2c:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8017b30:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017b32:	fb04 fa0e 	mul.w	sl, r4, lr
 8017b36:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8017b3a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8017b3e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017b42:	44e6      	add	lr, ip
 8017b44:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8017b48:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8017b4c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017b50:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017b54:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017b58:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017b5c:	ea4e 040a 	orr.w	r4, lr, sl
 8017b60:	9408      	str	r4, [sp, #32]
 8017b62:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017b64:	2cff      	cmp	r4, #255	; 0xff
 8017b66:	d021      	beq.n	8017bac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x640>
 8017b68:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017b6a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017b6e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017b70:	fb04 fc0c 	mul.w	ip, r4, ip
 8017b74:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017b76:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8017b7a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017b7e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017b80:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8017b84:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017b88:	fb04 fa0a 	mul.w	sl, r4, sl
 8017b8c:	44e6      	add	lr, ip
 8017b8e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8017b92:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017b96:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8017b9a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017b9e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017ba2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017ba6:	ea4e 040a 	orr.w	r4, lr, sl
 8017baa:	940d      	str	r4, [sp, #52]	; 0x34
 8017bac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017bae:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8017bb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017bb6:	2aff      	cmp	r2, #255	; 0xff
 8017bb8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017bbc:	9c08      	ldr	r4, [sp, #32]
 8017bbe:	fb08 fc0c 	mul.w	ip, r8, ip
 8017bc2:	fb01 cc0e 	mla	ip, r1, lr, ip
 8017bc6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8017bca:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017bcc:	fb00 cc0e 	mla	ip, r0, lr, ip
 8017bd0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8017bd4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017bd6:	fb09 cc0e 	mla	ip, r9, lr, ip
 8017bda:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8017bde:	fb08 f80e 	mul.w	r8, r8, lr
 8017be2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017be6:	fb01 8303 	mla	r3, r1, r3, r8
 8017bea:	9908      	ldr	r1, [sp, #32]
 8017bec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017bf0:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8017bf4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017bf6:	fb00 330a 	mla	r3, r0, sl, r3
 8017bfa:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8017bfe:	fb09 3e0e 	mla	lr, r9, lr, r3
 8017c02:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017c06:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8017c0a:	ea4c 0c0e 	orr.w	ip, ip, lr
 8017c0e:	fa5f f08c 	uxtb.w	r0, ip
 8017c12:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8017c16:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8017c1a:	d032      	beq.n	8017c82 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
 8017c1c:	43d2      	mvns	r2, r2
 8017c1e:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8017c22:	b2d2      	uxtb	r2, r2
 8017c24:	fb0e fe02 	mul.w	lr, lr, r2
 8017c28:	f10e 0301 	add.w	r3, lr, #1
 8017c2c:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8017c30:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8017c34:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8017c38:	4350      	muls	r0, r2
 8017c3a:	f807 3c03 	strb.w	r3, [r7, #-3]
 8017c3e:	1c43      	adds	r3, r0, #1
 8017c40:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8017c44:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8017c48:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8017c4c:	4353      	muls	r3, r2
 8017c4e:	f807 1c02 	strb.w	r1, [r7, #-2]
 8017c52:	1c5a      	adds	r2, r3, #1
 8017c54:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8017c58:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8017c5c:	f807 cc01 	strb.w	ip, [r7, #-1]
 8017c60:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017c62:	3703      	adds	r7, #3
 8017c64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017c68:	441d      	add	r5, r3
 8017c6a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017c6c:	441e      	add	r6, r3
 8017c6e:	e64e      	b.n	801790e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 8017c70:	2800      	cmp	r0, #0
 8017c72:	f43f aeed 	beq.w	8017a50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8017c76:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8017c7a:	9108      	str	r1, [sp, #32]
 8017c7c:	0e09      	lsrs	r1, r1, #24
 8017c7e:	9110      	str	r1, [sp, #64]	; 0x40
 8017c80:	e6e6      	b.n	8017a50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8017c82:	f807 0c03 	strb.w	r0, [r7, #-3]
 8017c86:	f807 1c02 	strb.w	r1, [r7, #-2]
 8017c8a:	e7e7      	b.n	8017c5c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f0>
 8017c8c:	b019      	add	sp, #100	; 0x64
 8017c8e:	ecbd 8b08 	vpop	{d8-d11}
 8017c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08017c98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8017c98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c9c:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8017ca0:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8017ca4:	2800      	cmp	r0, #0
 8017ca6:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8017caa:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8017cae:	fb0c 0e03 	mla	lr, ip, r3, r0
 8017cb2:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8017cb6:	db6b      	blt.n	8017d90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8017cb8:	4580      	cmp	r8, r0
 8017cba:	dd69      	ble.n	8017d90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8017cbc:	f1bc 0f00 	cmp.w	ip, #0
 8017cc0:	db66      	blt.n	8017d90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8017cc2:	45e1      	cmp	r9, ip
 8017cc4:	dd64      	ble.n	8017d90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8017cc6:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8017cca:	f01e 0f01 	tst.w	lr, #1
 8017cce:	5d16      	ldrb	r6, [r2, r4]
 8017cd0:	bf0c      	ite	eq
 8017cd2:	f006 060f 	andeq.w	r6, r6, #15
 8017cd6:	1136      	asrne	r6, r6, #4
 8017cd8:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8017cdc:	b2f6      	uxtb	r6, r6
 8017cde:	f110 0a01 	adds.w	sl, r0, #1
 8017ce2:	d457      	bmi.n	8017d94 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8017ce4:	45d0      	cmp	r8, sl
 8017ce6:	dd55      	ble.n	8017d94 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8017ce8:	f1bc 0f00 	cmp.w	ip, #0
 8017cec:	db52      	blt.n	8017d94 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8017cee:	45e1      	cmp	r9, ip
 8017cf0:	dd50      	ble.n	8017d94 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8017cf2:	2f00      	cmp	r7, #0
 8017cf4:	f000 80ac 	beq.w	8017e50 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8017cf8:	f10e 0b01 	add.w	fp, lr, #1
 8017cfc:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8017d00:	f01b 0f01 	tst.w	fp, #1
 8017d04:	5d14      	ldrb	r4, [r2, r4]
 8017d06:	bf0c      	ite	eq
 8017d08:	f004 040f 	andeq.w	r4, r4, #15
 8017d0c:	1124      	asrne	r4, r4, #4
 8017d0e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8017d12:	b2e4      	uxtb	r4, r4
 8017d14:	2d00      	cmp	r5, #0
 8017d16:	f000 8096 	beq.w	8017e46 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8017d1a:	2800      	cmp	r0, #0
 8017d1c:	f10c 0c01 	add.w	ip, ip, #1
 8017d20:	db3c      	blt.n	8017d9c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8017d22:	4580      	cmp	r8, r0
 8017d24:	dd3a      	ble.n	8017d9c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8017d26:	f1bc 0f00 	cmp.w	ip, #0
 8017d2a:	db37      	blt.n	8017d9c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8017d2c:	45e1      	cmp	r9, ip
 8017d2e:	dd35      	ble.n	8017d9c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8017d30:	eb03 0b0e 	add.w	fp, r3, lr
 8017d34:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8017d38:	f01b 0f01 	tst.w	fp, #1
 8017d3c:	5c10      	ldrb	r0, [r2, r0]
 8017d3e:	bf0c      	ite	eq
 8017d40:	f000 000f 	andeq.w	r0, r0, #15
 8017d44:	1100      	asrne	r0, r0, #4
 8017d46:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8017d4a:	b2c0      	uxtb	r0, r0
 8017d4c:	f1ba 0f00 	cmp.w	sl, #0
 8017d50:	db26      	blt.n	8017da0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8017d52:	45d0      	cmp	r8, sl
 8017d54:	dd24      	ble.n	8017da0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8017d56:	f1bc 0f00 	cmp.w	ip, #0
 8017d5a:	db21      	blt.n	8017da0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8017d5c:	45e1      	cmp	r9, ip
 8017d5e:	dd1f      	ble.n	8017da0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8017d60:	b307      	cbz	r7, 8017da4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 8017d62:	3301      	adds	r3, #1
 8017d64:	449e      	add	lr, r3
 8017d66:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8017d6a:	f01e 0f01 	tst.w	lr, #1
 8017d6e:	5cd3      	ldrb	r3, [r2, r3]
 8017d70:	bf0c      	ite	eq
 8017d72:	f003 030f 	andeq.w	r3, r3, #15
 8017d76:	111b      	asrne	r3, r3, #4
 8017d78:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8017d7c:	b2db      	uxtb	r3, r3
 8017d7e:	2f0f      	cmp	r7, #15
 8017d80:	d911      	bls.n	8017da6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 8017d82:	4b35      	ldr	r3, [pc, #212]	; (8017e58 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8017d84:	f240 1157 	movw	r1, #343	; 0x157
 8017d88:	4a34      	ldr	r2, [pc, #208]	; (8017e5c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8017d8a:	4835      	ldr	r0, [pc, #212]	; (8017e60 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8017d8c:	f001 f876 	bl	8018e7c <__assert_func>
 8017d90:	2600      	movs	r6, #0
 8017d92:	e7a4      	b.n	8017cde <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8017d94:	2400      	movs	r4, #0
 8017d96:	e7bd      	b.n	8017d14 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8017d98:	463c      	mov	r4, r7
 8017d9a:	e7be      	b.n	8017d1a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8017d9c:	2000      	movs	r0, #0
 8017d9e:	e7d5      	b.n	8017d4c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8017da0:	2300      	movs	r3, #0
 8017da2:	e7ec      	b.n	8017d7e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8017da4:	463b      	mov	r3, r7
 8017da6:	2d0f      	cmp	r5, #15
 8017da8:	d8eb      	bhi.n	8017d82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8017daa:	b2bf      	uxth	r7, r7
 8017dac:	b2ad      	uxth	r5, r5
 8017dae:	fb07 f205 	mul.w	r2, r7, r5
 8017db2:	013f      	lsls	r7, r7, #4
 8017db4:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8017db8:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8017dbc:	1abf      	subs	r7, r7, r2
 8017dbe:	b2ad      	uxth	r5, r5
 8017dc0:	b2bf      	uxth	r7, r7
 8017dc2:	ebac 0c05 	sub.w	ip, ip, r5
 8017dc6:	437c      	muls	r4, r7
 8017dc8:	fa1f fc8c 	uxth.w	ip, ip
 8017dcc:	fb06 440c 	mla	r4, r6, ip, r4
 8017dd0:	fb05 4400 	mla	r4, r5, r0, r4
 8017dd4:	fb02 4203 	mla	r2, r2, r3, r4
 8017dd8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8017ddc:	b38a      	cbz	r2, 8017e42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8017dde:	4b21      	ldr	r3, [pc, #132]	; (8017e64 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8017de0:	681c      	ldr	r4, [r3, #0]
 8017de2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8017de6:	b2e5      	uxtb	r5, r4
 8017de8:	4353      	muls	r3, r2
 8017dea:	1c5a      	adds	r2, r3, #1
 8017dec:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8017df0:	1212      	asrs	r2, r2, #8
 8017df2:	b290      	uxth	r0, r2
 8017df4:	43d2      	mvns	r2, r2
 8017df6:	fb15 f500 	smulbb	r5, r5, r0
 8017dfa:	b2d3      	uxtb	r3, r2
 8017dfc:	780a      	ldrb	r2, [r1, #0]
 8017dfe:	fb02 5203 	mla	r2, r2, r3, r5
 8017e02:	b292      	uxth	r2, r2
 8017e04:	1c55      	adds	r5, r2, #1
 8017e06:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8017e0a:	784d      	ldrb	r5, [r1, #1]
 8017e0c:	fb15 f503 	smulbb	r5, r5, r3
 8017e10:	1212      	asrs	r2, r2, #8
 8017e12:	700a      	strb	r2, [r1, #0]
 8017e14:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8017e18:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8017e1c:	fb02 5200 	mla	r2, r2, r0, r5
 8017e20:	b292      	uxth	r2, r2
 8017e22:	1c55      	adds	r5, r2, #1
 8017e24:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8017e28:	1212      	asrs	r2, r2, #8
 8017e2a:	704a      	strb	r2, [r1, #1]
 8017e2c:	788a      	ldrb	r2, [r1, #2]
 8017e2e:	fb12 f303 	smulbb	r3, r2, r3
 8017e32:	fb04 3300 	mla	r3, r4, r0, r3
 8017e36:	b29b      	uxth	r3, r3
 8017e38:	1c5a      	adds	r2, r3, #1
 8017e3a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017e3e:	121b      	asrs	r3, r3, #8
 8017e40:	708b      	strb	r3, [r1, #2]
 8017e42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e46:	2f0f      	cmp	r7, #15
 8017e48:	d89b      	bhi.n	8017d82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8017e4a:	462b      	mov	r3, r5
 8017e4c:	4628      	mov	r0, r5
 8017e4e:	e7ac      	b.n	8017daa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8017e50:	2d00      	cmp	r5, #0
 8017e52:	d1a1      	bne.n	8017d98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 8017e54:	462c      	mov	r4, r5
 8017e56:	e7f8      	b.n	8017e4a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8017e58:	0801cf27 	.word	0x0801cf27
 8017e5c:	0801d3de 	.word	0x0801d3de
 8017e60:	0801cfaf 	.word	0x0801cfaf
 8017e64:	2400689c 	.word	0x2400689c

08017e68 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e6c:	ed2d 8b08 	vpush	{d8-d11}
 8017e70:	b097      	sub	sp, #92	; 0x5c
 8017e72:	eeb0 aa40 	vmov.f32	s20, s0
 8017e76:	eef0 9a60 	vmov.f32	s19, s1
 8017e7a:	9214      	str	r2, [sp, #80]	; 0x50
 8017e7c:	eeb0 9a41 	vmov.f32	s18, s2
 8017e80:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8017e82:	eeb0 8a62 	vmov.f32	s16, s5
 8017e86:	9309      	str	r3, [sp, #36]	; 0x24
 8017e88:	eef0 8a43 	vmov.f32	s17, s6
 8017e8c:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8017e90:	eef0 ba44 	vmov.f32	s23, s8
 8017e94:	9015      	str	r0, [sp, #84]	; 0x54
 8017e96:	eeb0 ba64 	vmov.f32	s22, s9
 8017e9a:	6850      	ldr	r0, [r2, #4]
 8017e9c:	eef0 aa45 	vmov.f32	s21, s10
 8017ea0:	910c      	str	r1, [sp, #48]	; 0x30
 8017ea2:	930e      	str	r3, [sp, #56]	; 0x38
 8017ea4:	6812      	ldr	r2, [r2, #0]
 8017ea6:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8017eaa:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 8017eae:	fb00 1303 	mla	r3, r0, r3, r1
 8017eb2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017eb6:	eb02 0a03 	add.w	sl, r2, r3
 8017eba:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8017ebc:	689b      	ldr	r3, [r3, #8]
 8017ebe:	3301      	adds	r3, #1
 8017ec0:	f023 0301 	bic.w	r3, r3, #1
 8017ec4:	930f      	str	r3, [sp, #60]	; 0x3c
 8017ec6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8017ec8:	681f      	ldr	r7, [r3, #0]
 8017eca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017ecc:	2b00      	cmp	r3, #0
 8017ece:	dc03      	bgt.n	8017ed8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017ed0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	f340 8247 	ble.w	8018366 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 8017ed8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8017eda:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8017ede:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8017ee2:	1e48      	subs	r0, r1, #1
 8017ee4:	f102 3cff 	add.w	ip, r2, #4294967295
 8017ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	f340 80e5 	ble.w	80180ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8017ef0:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8017ef4:	ea4f 4326 	mov.w	r3, r6, asr #16
 8017ef8:	d406      	bmi.n	8017f08 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8017efa:	4586      	cmp	lr, r0
 8017efc:	da04      	bge.n	8017f08 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8017efe:	2b00      	cmp	r3, #0
 8017f00:	db02      	blt.n	8017f08 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8017f02:	4563      	cmp	r3, ip
 8017f04:	f2c0 80da 	blt.w	80180bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8017f08:	f11e 0e01 	adds.w	lr, lr, #1
 8017f0c:	f100 80cb 	bmi.w	80180a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8017f10:	4571      	cmp	r1, lr
 8017f12:	f2c0 80c8 	blt.w	80180a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8017f16:	3301      	adds	r3, #1
 8017f18:	f100 80c5 	bmi.w	80180a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8017f1c:	429a      	cmp	r2, r3
 8017f1e:	f2c0 80c2 	blt.w	80180a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8017f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f24:	46d0      	mov	r8, sl
 8017f26:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8017f2a:	930d      	str	r3, [sp, #52]	; 0x34
 8017f2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	f340 80e3 	ble.w	80180fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8017f34:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8017f36:	1430      	asrs	r0, r6, #16
 8017f38:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8017f3c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8017f40:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8017f44:	142b      	asrs	r3, r5, #16
 8017f46:	f100 812e 	bmi.w	80181a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8017f4a:	f10c 3bff 	add.w	fp, ip, #4294967295
 8017f4e:	455b      	cmp	r3, fp
 8017f50:	f280 8129 	bge.w	80181a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8017f54:	2800      	cmp	r0, #0
 8017f56:	f2c0 8126 	blt.w	80181a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8017f5a:	f10e 3bff 	add.w	fp, lr, #4294967295
 8017f5e:	4558      	cmp	r0, fp
 8017f60:	f280 8121 	bge.w	80181a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8017f64:	fb00 3309 	mla	r3, r0, r9, r3
 8017f68:	0858      	lsrs	r0, r3, #1
 8017f6a:	07dc      	lsls	r4, r3, #31
 8017f6c:	f817 c000 	ldrb.w	ip, [r7, r0]
 8017f70:	bf54      	ite	pl
 8017f72:	f00c 0c0f 	andpl.w	ip, ip, #15
 8017f76:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8017f7a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8017f7e:	fa5f fc8c 	uxtb.w	ip, ip
 8017f82:	2a00      	cmp	r2, #0
 8017f84:	f000 80fe 	beq.w	8018184 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8017f88:	1c58      	adds	r0, r3, #1
 8017f8a:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8017f8e:	07c0      	lsls	r0, r0, #31
 8017f90:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8017f94:	bf54      	ite	pl
 8017f96:	f00e 0e0f 	andpl.w	lr, lr, #15
 8017f9a:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8017f9e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8017fa2:	fa5f f08e 	uxtb.w	r0, lr
 8017fa6:	9010      	str	r0, [sp, #64]	; 0x40
 8017fa8:	b1d9      	cbz	r1, 8017fe2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8017faa:	444b      	add	r3, r9
 8017fac:	0858      	lsrs	r0, r3, #1
 8017fae:	07dc      	lsls	r4, r3, #31
 8017fb0:	f103 0301 	add.w	r3, r3, #1
 8017fb4:	5c38      	ldrb	r0, [r7, r0]
 8017fb6:	bf54      	ite	pl
 8017fb8:	f000 000f 	andpl.w	r0, r0, #15
 8017fbc:	1100      	asrmi	r0, r0, #4
 8017fbe:	07dc      	lsls	r4, r3, #31
 8017fc0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8017fc4:	b2c0      	uxtb	r0, r0
 8017fc6:	900a      	str	r0, [sp, #40]	; 0x28
 8017fc8:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8017fcc:	f817 e000 	ldrb.w	lr, [r7, r0]
 8017fd0:	bf54      	ite	pl
 8017fd2:	f00e 030f 	andpl.w	r3, lr, #15
 8017fd6:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8017fda:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8017fde:	b2db      	uxtb	r3, r3
 8017fe0:	9311      	str	r3, [sp, #68]	; 0x44
 8017fe2:	b292      	uxth	r2, r2
 8017fe4:	b289      	uxth	r1, r1
 8017fe6:	0113      	lsls	r3, r2, #4
 8017fe8:	fb02 f001 	mul.w	r0, r2, r1
 8017fec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017fee:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8017ff2:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8017ff6:	1a1b      	subs	r3, r3, r0
 8017ff8:	b289      	uxth	r1, r1
 8017ffa:	b29b      	uxth	r3, r3
 8017ffc:	ebae 0e01 	sub.w	lr, lr, r1
 8018000:	4353      	muls	r3, r2
 8018002:	fa1f fe8e 	uxth.w	lr, lr
 8018006:	fb0c 320e 	mla	r2, ip, lr, r3
 801800a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801800c:	fb01 2203 	mla	r2, r1, r3, r2
 8018010:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018012:	fb00 2203 	mla	r2, r0, r3, r2
 8018016:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801801a:	2a00      	cmp	r2, #0
 801801c:	d039      	beq.n	8018092 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801801e:	4bc7      	ldr	r3, [pc, #796]	; (801833c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8018020:	6819      	ldr	r1, [r3, #0]
 8018022:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018024:	fa5f fc81 	uxtb.w	ip, r1
 8018028:	435a      	muls	r2, r3
 801802a:	1c53      	adds	r3, r2, #1
 801802c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8018030:	1212      	asrs	r2, r2, #8
 8018032:	b290      	uxth	r0, r2
 8018034:	43d2      	mvns	r2, r2
 8018036:	fb1c fc00 	smulbb	ip, ip, r0
 801803a:	b2d3      	uxtb	r3, r2
 801803c:	f898 2000 	ldrb.w	r2, [r8]
 8018040:	fb02 c203 	mla	r2, r2, r3, ip
 8018044:	b292      	uxth	r2, r2
 8018046:	f102 0c01 	add.w	ip, r2, #1
 801804a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801804e:	f898 c001 	ldrb.w	ip, [r8, #1]
 8018052:	fb1c fc03 	smulbb	ip, ip, r3
 8018056:	1212      	asrs	r2, r2, #8
 8018058:	f888 2000 	strb.w	r2, [r8]
 801805c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8018060:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8018064:	fb02 c200 	mla	r2, r2, r0, ip
 8018068:	b292      	uxth	r2, r2
 801806a:	f102 0c01 	add.w	ip, r2, #1
 801806e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8018072:	1212      	asrs	r2, r2, #8
 8018074:	f888 2001 	strb.w	r2, [r8, #1]
 8018078:	f898 2002 	ldrb.w	r2, [r8, #2]
 801807c:	fb12 f303 	smulbb	r3, r2, r3
 8018080:	fb01 3300 	mla	r3, r1, r0, r3
 8018084:	b29b      	uxth	r3, r3
 8018086:	1c5a      	adds	r2, r3, #1
 8018088:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801808c:	121b      	asrs	r3, r3, #8
 801808e:	f888 3002 	strb.w	r3, [r8, #2]
 8018092:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018094:	f108 0803 	add.w	r8, r8, #3
 8018098:	441d      	add	r5, r3
 801809a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801809c:	441e      	add	r6, r3
 801809e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80180a0:	3b01      	subs	r3, #1
 80180a2:	930d      	str	r3, [sp, #52]	; 0x34
 80180a4:	e742      	b.n	8017f2c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 80180a6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80180a8:	f10a 0a03 	add.w	sl, sl, #3
 80180ac:	441d      	add	r5, r3
 80180ae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80180b0:	441e      	add	r6, r3
 80180b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180b4:	3b01      	subs	r3, #1
 80180b6:	9309      	str	r3, [sp, #36]	; 0x24
 80180b8:	e716      	b.n	8017ee8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80180ba:	d024      	beq.n	8018106 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80180bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180be:	982b      	ldr	r0, [sp, #172]	; 0xac
 80180c0:	3b01      	subs	r3, #1
 80180c2:	fb00 5003 	mla	r0, r0, r3, r5
 80180c6:	1400      	asrs	r0, r0, #16
 80180c8:	f53f af2b 	bmi.w	8017f22 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80180cc:	3901      	subs	r1, #1
 80180ce:	4288      	cmp	r0, r1
 80180d0:	f6bf af27 	bge.w	8017f22 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80180d4:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80180d6:	fb01 6303 	mla	r3, r1, r3, r6
 80180da:	141b      	asrs	r3, r3, #16
 80180dc:	f53f af21 	bmi.w	8017f22 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80180e0:	3a01      	subs	r2, #1
 80180e2:	4293      	cmp	r3, r2
 80180e4:	f6bf af1d 	bge.w	8017f22 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80180e8:	f10a 0e03 	add.w	lr, sl, #3
 80180ec:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80180f0:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 80180f4:	f1b8 0f00 	cmp.w	r8, #0
 80180f8:	dc76      	bgt.n	80181e8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 80180fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180fc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8018100:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018104:	44a2      	add	sl, r4
 8018106:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018108:	2b00      	cmp	r3, #0
 801810a:	f340 812c 	ble.w	8018366 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 801810e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018112:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018114:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8018118:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801811c:	eef0 6a48 	vmov.f32	s13, s16
 8018120:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8018124:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8018128:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801812c:	ee16 5a90 	vmov	r5, s13
 8018130:	eef0 6a68 	vmov.f32	s13, s17
 8018134:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018138:	ee16 6a90 	vmov	r6, s13
 801813c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8018140:	ee69 7a27 	vmul.f32	s15, s18, s15
 8018144:	ee37 8a48 	vsub.f32	s16, s14, s16
 8018148:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801814c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8018150:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8018154:	ee18 2a10 	vmov	r2, s16
 8018158:	eeb0 8a47 	vmov.f32	s16, s14
 801815c:	fb92 f3f3 	sdiv	r3, r2, r3
 8018160:	ee18 2a90 	vmov	r2, s17
 8018164:	932b      	str	r3, [sp, #172]	; 0xac
 8018166:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018168:	eef0 8a67 	vmov.f32	s17, s15
 801816c:	fb92 f3f3 	sdiv	r3, r2, r3
 8018170:	932c      	str	r3, [sp, #176]	; 0xb0
 8018172:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018174:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018176:	3b01      	subs	r3, #1
 8018178:	930c      	str	r3, [sp, #48]	; 0x30
 801817a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801817c:	bf08      	it	eq
 801817e:	4613      	moveq	r3, r2
 8018180:	9309      	str	r3, [sp, #36]	; 0x24
 8018182:	e6a2      	b.n	8017eca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8018184:	2900      	cmp	r1, #0
 8018186:	f43f af2c 	beq.w	8017fe2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801818a:	eb09 0003 	add.w	r0, r9, r3
 801818e:	0843      	lsrs	r3, r0, #1
 8018190:	07c0      	lsls	r0, r0, #31
 8018192:	5cfb      	ldrb	r3, [r7, r3]
 8018194:	bf54      	ite	pl
 8018196:	f003 030f 	andpl.w	r3, r3, #15
 801819a:	111b      	asrmi	r3, r3, #4
 801819c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80181a0:	b2db      	uxtb	r3, r3
 80181a2:	930a      	str	r3, [sp, #40]	; 0x28
 80181a4:	e71d      	b.n	8017fe2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 80181a6:	f113 0b01 	adds.w	fp, r3, #1
 80181aa:	f53f af72 	bmi.w	8018092 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80181ae:	45dc      	cmp	ip, fp
 80181b0:	f6ff af6f 	blt.w	8018092 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80181b4:	f110 0b01 	adds.w	fp, r0, #1
 80181b8:	f53f af6b 	bmi.w	8018092 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80181bc:	45de      	cmp	lr, fp
 80181be:	f6ff af68 	blt.w	8018092 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80181c2:	9302      	str	r3, [sp, #8]
 80181c4:	fa0f f38e 	sxth.w	r3, lr
 80181c8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80181ca:	9301      	str	r3, [sp, #4]
 80181cc:	fa0f f38c 	sxth.w	r3, ip
 80181d0:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80181d4:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80181d8:	9300      	str	r3, [sp, #0]
 80181da:	463a      	mov	r2, r7
 80181dc:	464b      	mov	r3, r9
 80181de:	4641      	mov	r1, r8
 80181e0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80181e2:	f7ff fd59 	bl	8017c98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 80181e6:	e754      	b.n	8018092 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80181e8:	142a      	asrs	r2, r5, #16
 80181ea:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80181ee:	1433      	asrs	r3, r6, #16
 80181f0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80181f4:	fb09 2303 	mla	r3, r9, r3, r2
 80181f8:	085a      	lsrs	r2, r3, #1
 80181fa:	07dc      	lsls	r4, r3, #31
 80181fc:	5cba      	ldrb	r2, [r7, r2]
 80181fe:	bf54      	ite	pl
 8018200:	f002 020f 	andpl.w	r2, r2, #15
 8018204:	1112      	asrmi	r2, r2, #4
 8018206:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801820a:	b2d2      	uxtb	r2, r2
 801820c:	2900      	cmp	r1, #0
 801820e:	f000 8097 	beq.w	8018340 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8018212:	f103 0b01 	add.w	fp, r3, #1
 8018216:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801821a:	f01b 0f01 	tst.w	fp, #1
 801821e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8018222:	bf0c      	ite	eq
 8018224:	f00c 0c0f 	andeq.w	ip, ip, #15
 8018228:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801822c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8018230:	fa5f f48c 	uxtb.w	r4, ip
 8018234:	9412      	str	r4, [sp, #72]	; 0x48
 8018236:	b300      	cbz	r0, 801827a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8018238:	444b      	add	r3, r9
 801823a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801823e:	07dc      	lsls	r4, r3, #31
 8018240:	f103 0301 	add.w	r3, r3, #1
 8018244:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8018248:	bf54      	ite	pl
 801824a:	f00c 0c0f 	andpl.w	ip, ip, #15
 801824e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8018252:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8018256:	fa5f f48c 	uxtb.w	r4, ip
 801825a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801825e:	940b      	str	r4, [sp, #44]	; 0x2c
 8018260:	07dc      	lsls	r4, r3, #31
 8018262:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8018266:	bf54      	ite	pl
 8018268:	f00c 0c0f 	andpl.w	ip, ip, #15
 801826c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8018270:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8018274:	fa5f f38c 	uxtb.w	r3, ip
 8018278:	9313      	str	r3, [sp, #76]	; 0x4c
 801827a:	b289      	uxth	r1, r1
 801827c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801827e:	b280      	uxth	r0, r0
 8018280:	fb01 f300 	mul.w	r3, r1, r0
 8018284:	0109      	lsls	r1, r1, #4
 8018286:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801828a:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801828e:	1ac9      	subs	r1, r1, r3
 8018290:	b280      	uxth	r0, r0
 8018292:	b289      	uxth	r1, r1
 8018294:	ebac 0c00 	sub.w	ip, ip, r0
 8018298:	4361      	muls	r1, r4
 801829a:	fa1f fc8c 	uxth.w	ip, ip
 801829e:	fb02 120c 	mla	r2, r2, ip, r1
 80182a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80182a4:	fb00 2001 	mla	r0, r0, r1, r2
 80182a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80182aa:	fb03 0302 	mla	r3, r3, r2, r0
 80182ae:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	d039      	beq.n	801832a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80182b6:	4a21      	ldr	r2, [pc, #132]	; (801833c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 80182b8:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 80182bc:	6810      	ldr	r0, [r2, #0]
 80182be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80182c0:	fa5f fc80 	uxtb.w	ip, r0
 80182c4:	4353      	muls	r3, r2
 80182c6:	1c5a      	adds	r2, r3, #1
 80182c8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80182cc:	121b      	asrs	r3, r3, #8
 80182ce:	b29a      	uxth	r2, r3
 80182d0:	43db      	mvns	r3, r3
 80182d2:	fb1c fc02 	smulbb	ip, ip, r2
 80182d6:	b2db      	uxtb	r3, r3
 80182d8:	fb01 c103 	mla	r1, r1, r3, ip
 80182dc:	b289      	uxth	r1, r1
 80182de:	f101 0c01 	add.w	ip, r1, #1
 80182e2:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80182e6:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 80182ea:	fb1c fc03 	smulbb	ip, ip, r3
 80182ee:	1209      	asrs	r1, r1, #8
 80182f0:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80182f4:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80182f8:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80182fc:	fb01 c102 	mla	r1, r1, r2, ip
 8018300:	b289      	uxth	r1, r1
 8018302:	f101 0c01 	add.w	ip, r1, #1
 8018306:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801830a:	1209      	asrs	r1, r1, #8
 801830c:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8018310:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8018314:	fb11 f303 	smulbb	r3, r1, r3
 8018318:	fb00 3002 	mla	r0, r0, r2, r3
 801831c:	b280      	uxth	r0, r0
 801831e:	1c42      	adds	r2, r0, #1
 8018320:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8018324:	1200      	asrs	r0, r0, #8
 8018326:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801832a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801832c:	f10e 0e03 	add.w	lr, lr, #3
 8018330:	f108 38ff 	add.w	r8, r8, #4294967295
 8018334:	441d      	add	r5, r3
 8018336:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018338:	441e      	add	r6, r3
 801833a:	e6db      	b.n	80180f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801833c:	2400689c 	.word	0x2400689c
 8018340:	2800      	cmp	r0, #0
 8018342:	d09a      	beq.n	801827a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8018344:	444b      	add	r3, r9
 8018346:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801834a:	07db      	lsls	r3, r3, #31
 801834c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8018350:	bf54      	ite	pl
 8018352:	f00c 0c0f 	andpl.w	ip, ip, #15
 8018356:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801835a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801835e:	fa5f f38c 	uxtb.w	r3, ip
 8018362:	930b      	str	r3, [sp, #44]	; 0x2c
 8018364:	e789      	b.n	801827a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8018366:	b017      	add	sp, #92	; 0x5c
 8018368:	ecbd 8b08 	vpop	{d8-d11}
 801836c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018370 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8018370:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018374:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8018378:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801837c:	2800      	cmp	r0, #0
 801837e:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8018382:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8018386:	fb0c 0e03 	mla	lr, ip, r3, r0
 801838a:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 801838e:	db6b      	blt.n	8018468 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8018390:	4580      	cmp	r8, r0
 8018392:	dd69      	ble.n	8018468 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8018394:	f1bc 0f00 	cmp.w	ip, #0
 8018398:	db66      	blt.n	8018468 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801839a:	45e1      	cmp	r9, ip
 801839c:	dd64      	ble.n	8018468 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801839e:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80183a2:	f01e 0f01 	tst.w	lr, #1
 80183a6:	5d16      	ldrb	r6, [r2, r4]
 80183a8:	bf0c      	ite	eq
 80183aa:	f006 060f 	andeq.w	r6, r6, #15
 80183ae:	1136      	asrne	r6, r6, #4
 80183b0:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80183b4:	b2f6      	uxtb	r6, r6
 80183b6:	f110 0a01 	adds.w	sl, r0, #1
 80183ba:	d457      	bmi.n	801846c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80183bc:	45d0      	cmp	r8, sl
 80183be:	dd55      	ble.n	801846c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80183c0:	f1bc 0f00 	cmp.w	ip, #0
 80183c4:	db52      	blt.n	801846c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80183c6:	45e1      	cmp	r9, ip
 80183c8:	dd50      	ble.n	801846c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80183ca:	2f00      	cmp	r7, #0
 80183cc:	f000 80a5 	beq.w	801851a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 80183d0:	f10e 0b01 	add.w	fp, lr, #1
 80183d4:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80183d8:	f01b 0f01 	tst.w	fp, #1
 80183dc:	5d14      	ldrb	r4, [r2, r4]
 80183de:	bf0c      	ite	eq
 80183e0:	f004 040f 	andeq.w	r4, r4, #15
 80183e4:	1124      	asrne	r4, r4, #4
 80183e6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80183ea:	b2e4      	uxtb	r4, r4
 80183ec:	2d00      	cmp	r5, #0
 80183ee:	f000 808f 	beq.w	8018510 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 80183f2:	2800      	cmp	r0, #0
 80183f4:	f10c 0c01 	add.w	ip, ip, #1
 80183f8:	db3c      	blt.n	8018474 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80183fa:	4580      	cmp	r8, r0
 80183fc:	dd3a      	ble.n	8018474 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 80183fe:	f1bc 0f00 	cmp.w	ip, #0
 8018402:	db37      	blt.n	8018474 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8018404:	45e1      	cmp	r9, ip
 8018406:	dd35      	ble.n	8018474 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8018408:	eb03 0b0e 	add.w	fp, r3, lr
 801840c:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8018410:	f01b 0f01 	tst.w	fp, #1
 8018414:	5c10      	ldrb	r0, [r2, r0]
 8018416:	bf0c      	ite	eq
 8018418:	f000 000f 	andeq.w	r0, r0, #15
 801841c:	1100      	asrne	r0, r0, #4
 801841e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8018422:	b2c0      	uxtb	r0, r0
 8018424:	f1ba 0f00 	cmp.w	sl, #0
 8018428:	db26      	blt.n	8018478 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801842a:	45d0      	cmp	r8, sl
 801842c:	dd24      	ble.n	8018478 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801842e:	f1bc 0f00 	cmp.w	ip, #0
 8018432:	db21      	blt.n	8018478 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8018434:	45e1      	cmp	r9, ip
 8018436:	dd1f      	ble.n	8018478 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8018438:	b307      	cbz	r7, 801847c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 801843a:	3301      	adds	r3, #1
 801843c:	449e      	add	lr, r3
 801843e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8018442:	f01e 0f01 	tst.w	lr, #1
 8018446:	5cd3      	ldrb	r3, [r2, r3]
 8018448:	bf0c      	ite	eq
 801844a:	f003 030f 	andeq.w	r3, r3, #15
 801844e:	111b      	asrne	r3, r3, #4
 8018450:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8018454:	b2db      	uxtb	r3, r3
 8018456:	2f0f      	cmp	r7, #15
 8018458:	d911      	bls.n	801847e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 801845a:	4b32      	ldr	r3, [pc, #200]	; (8018524 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 801845c:	f240 1157 	movw	r1, #343	; 0x157
 8018460:	4a31      	ldr	r2, [pc, #196]	; (8018528 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 8018462:	4832      	ldr	r0, [pc, #200]	; (801852c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 8018464:	f000 fd0a 	bl	8018e7c <__assert_func>
 8018468:	2600      	movs	r6, #0
 801846a:	e7a4      	b.n	80183b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 801846c:	2400      	movs	r4, #0
 801846e:	e7bd      	b.n	80183ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8018470:	463c      	mov	r4, r7
 8018472:	e7be      	b.n	80183f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 8018474:	2000      	movs	r0, #0
 8018476:	e7d5      	b.n	8018424 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 8018478:	2300      	movs	r3, #0
 801847a:	e7ec      	b.n	8018456 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 801847c:	463b      	mov	r3, r7
 801847e:	2d0f      	cmp	r5, #15
 8018480:	d8eb      	bhi.n	801845a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8018482:	b2bf      	uxth	r7, r7
 8018484:	b2ad      	uxth	r5, r5
 8018486:	fb07 f205 	mul.w	r2, r7, r5
 801848a:	013f      	lsls	r7, r7, #4
 801848c:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8018490:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8018494:	1abf      	subs	r7, r7, r2
 8018496:	b2ad      	uxth	r5, r5
 8018498:	b2bf      	uxth	r7, r7
 801849a:	ebac 0c05 	sub.w	ip, ip, r5
 801849e:	437c      	muls	r4, r7
 80184a0:	fa1f fc8c 	uxth.w	ip, ip
 80184a4:	fb06 440c 	mla	r4, r6, ip, r4
 80184a8:	fb05 4400 	mla	r4, r5, r0, r4
 80184ac:	fb02 4303 	mla	r3, r2, r3, r4
 80184b0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80184b4:	b353      	cbz	r3, 801850c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 80184b6:	4a1e      	ldr	r2, [pc, #120]	; (8018530 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 80184b8:	7808      	ldrb	r0, [r1, #0]
 80184ba:	6814      	ldr	r4, [r2, #0]
 80184bc:	b29a      	uxth	r2, r3
 80184be:	43db      	mvns	r3, r3
 80184c0:	b2e5      	uxtb	r5, r4
 80184c2:	b2db      	uxtb	r3, r3
 80184c4:	fb15 f502 	smulbb	r5, r5, r2
 80184c8:	fb00 5003 	mla	r0, r0, r3, r5
 80184cc:	b280      	uxth	r0, r0
 80184ce:	1c45      	adds	r5, r0, #1
 80184d0:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80184d4:	784d      	ldrb	r5, [r1, #1]
 80184d6:	fb15 f503 	smulbb	r5, r5, r3
 80184da:	1200      	asrs	r0, r0, #8
 80184dc:	7008      	strb	r0, [r1, #0]
 80184de:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80184e2:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80184e6:	fb00 5002 	mla	r0, r0, r2, r5
 80184ea:	b280      	uxth	r0, r0
 80184ec:	1c45      	adds	r5, r0, #1
 80184ee:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80184f2:	1200      	asrs	r0, r0, #8
 80184f4:	7048      	strb	r0, [r1, #1]
 80184f6:	7888      	ldrb	r0, [r1, #2]
 80184f8:	fb10 f303 	smulbb	r3, r0, r3
 80184fc:	fb04 3202 	mla	r2, r4, r2, r3
 8018500:	b292      	uxth	r2, r2
 8018502:	1c53      	adds	r3, r2, #1
 8018504:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8018508:	1212      	asrs	r2, r2, #8
 801850a:	708a      	strb	r2, [r1, #2]
 801850c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018510:	2f0f      	cmp	r7, #15
 8018512:	d8a2      	bhi.n	801845a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8018514:	462b      	mov	r3, r5
 8018516:	4628      	mov	r0, r5
 8018518:	e7b3      	b.n	8018482 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 801851a:	2d00      	cmp	r5, #0
 801851c:	d1a8      	bne.n	8018470 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 801851e:	462c      	mov	r4, r5
 8018520:	e7f8      	b.n	8018514 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 8018522:	bf00      	nop
 8018524:	0801cf27 	.word	0x0801cf27
 8018528:	0801d3de 	.word	0x0801d3de
 801852c:	0801cfaf 	.word	0x0801cfaf
 8018530:	2400689c 	.word	0x2400689c

08018534 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018538:	ed2d 8b08 	vpush	{d8-d11}
 801853c:	b093      	sub	sp, #76	; 0x4c
 801853e:	461c      	mov	r4, r3
 8018540:	eeb0 aa40 	vmov.f32	s20, s0
 8018544:	920c      	str	r2, [sp, #48]	; 0x30
 8018546:	eef0 9a60 	vmov.f32	s19, s1
 801854a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801854c:	eeb0 9a41 	vmov.f32	s18, s2
 8018550:	9011      	str	r0, [sp, #68]	; 0x44
 8018552:	eeb0 8a62 	vmov.f32	s16, s5
 8018556:	6850      	ldr	r0, [r2, #4]
 8018558:	eef0 8a43 	vmov.f32	s17, s6
 801855c:	9107      	str	r1, [sp, #28]
 801855e:	eef0 ba44 	vmov.f32	s23, s8
 8018562:	6812      	ldr	r2, [r2, #0]
 8018564:	eeb0 ba64 	vmov.f32	s22, s9
 8018568:	eef0 aa45 	vmov.f32	s21, s10
 801856c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8018570:	e9dd 5625 	ldrd	r5, r6, [sp, #148]	; 0x94
 8018574:	fb00 1303 	mla	r3, r0, r3, r1
 8018578:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801857c:	eb02 0b03 	add.w	fp, r2, r3
 8018580:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018582:	689b      	ldr	r3, [r3, #8]
 8018584:	3301      	adds	r3, #1
 8018586:	f023 0301 	bic.w	r3, r3, #1
 801858a:	9309      	str	r3, [sp, #36]	; 0x24
 801858c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801858e:	f8d3 8000 	ldr.w	r8, [r3]
 8018592:	9b07      	ldr	r3, [sp, #28]
 8018594:	2b00      	cmp	r3, #0
 8018596:	dc03      	bgt.n	80185a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8018598:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801859a:	2b00      	cmp	r3, #0
 801859c:	f340 822b 	ble.w	80189f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80185a0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80185a2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80185a6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80185aa:	1e48      	subs	r0, r1, #1
 80185ac:	1e57      	subs	r7, r2, #1
 80185ae:	2c00      	cmp	r4, #0
 80185b0:	f340 80d7 	ble.w	8018762 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80185b4:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80185b8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80185bc:	d406      	bmi.n	80185cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80185be:	4584      	cmp	ip, r0
 80185c0:	da04      	bge.n	80185cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	db02      	blt.n	80185cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80185c6:	42bb      	cmp	r3, r7
 80185c8:	f2c0 80cc 	blt.w	8018764 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80185cc:	f11c 0c01 	adds.w	ip, ip, #1
 80185d0:	f100 80bf 	bmi.w	8018752 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 80185d4:	4561      	cmp	r1, ip
 80185d6:	f2c0 80bc 	blt.w	8018752 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 80185da:	3301      	adds	r3, #1
 80185dc:	f100 80b9 	bmi.w	8018752 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 80185e0:	429a      	cmp	r2, r3
 80185e2:	f2c0 80b6 	blt.w	8018752 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 80185e6:	46a2      	mov	sl, r4
 80185e8:	465f      	mov	r7, fp
 80185ea:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80185ee:	f1ba 0f00 	cmp.w	sl, #0
 80185f2:	f340 80d4 	ble.w	801879e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80185f6:	f3c5 3303 	ubfx	r3, r5, #12, #4
 80185fa:	1430      	asrs	r0, r6, #16
 80185fc:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8018600:	9308      	str	r3, [sp, #32]
 8018602:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018604:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8018608:	142b      	asrs	r3, r5, #16
 801860a:	f100 8124 	bmi.w	8018856 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801860e:	f10c 32ff 	add.w	r2, ip, #4294967295
 8018612:	4293      	cmp	r3, r2
 8018614:	f280 811f 	bge.w	8018856 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8018618:	2800      	cmp	r0, #0
 801861a:	f2c0 811c 	blt.w	8018856 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801861e:	f10e 32ff 	add.w	r2, lr, #4294967295
 8018622:	4290      	cmp	r0, r2
 8018624:	f280 8117 	bge.w	8018856 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8018628:	fb00 3309 	mla	r3, r0, r9, r3
 801862c:	0858      	lsrs	r0, r3, #1
 801862e:	07da      	lsls	r2, r3, #31
 8018630:	9a08      	ldr	r2, [sp, #32]
 8018632:	f818 c000 	ldrb.w	ip, [r8, r0]
 8018636:	bf54      	ite	pl
 8018638:	f00c 0c0f 	andpl.w	ip, ip, #15
 801863c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8018640:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8018644:	fa5f fc8c 	uxtb.w	ip, ip
 8018648:	2a00      	cmp	r2, #0
 801864a:	f000 80ed 	beq.w	8018828 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801864e:	1c58      	adds	r0, r3, #1
 8018650:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8018654:	07c0      	lsls	r0, r0, #31
 8018656:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801865a:	bf54      	ite	pl
 801865c:	f00e 0e0f 	andpl.w	lr, lr, #15
 8018660:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8018664:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8018668:	fa5f fe8e 	uxtb.w	lr, lr
 801866c:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8018670:	b1c9      	cbz	r1, 80186a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 8018672:	444b      	add	r3, r9
 8018674:	0858      	lsrs	r0, r3, #1
 8018676:	07da      	lsls	r2, r3, #31
 8018678:	f818 0000 	ldrb.w	r0, [r8, r0]
 801867c:	bf54      	ite	pl
 801867e:	f000 000f 	andpl.w	r0, r0, #15
 8018682:	1100      	asrmi	r0, r0, #4
 8018684:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8018688:	b2c0      	uxtb	r0, r0
 801868a:	900a      	str	r0, [sp, #40]	; 0x28
 801868c:	1c58      	adds	r0, r3, #1
 801868e:	0843      	lsrs	r3, r0, #1
 8018690:	07c2      	lsls	r2, r0, #31
 8018692:	f818 3003 	ldrb.w	r3, [r8, r3]
 8018696:	bf54      	ite	pl
 8018698:	f003 030f 	andpl.w	r3, r3, #15
 801869c:	111b      	asrmi	r3, r3, #4
 801869e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80186a2:	b2db      	uxtb	r3, r3
 80186a4:	930e      	str	r3, [sp, #56]	; 0x38
 80186a6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80186aa:	b289      	uxth	r1, r1
 80186ac:	fb02 f301 	mul.w	r3, r2, r1
 80186b0:	0112      	lsls	r2, r2, #4
 80186b2:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80186b6:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80186ba:	1ad2      	subs	r2, r2, r3
 80186bc:	b289      	uxth	r1, r1
 80186be:	b292      	uxth	r2, r2
 80186c0:	1a40      	subs	r0, r0, r1
 80186c2:	fa1f fe80 	uxth.w	lr, r0
 80186c6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80186c8:	4342      	muls	r2, r0
 80186ca:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80186ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80186d0:	fb01 c102 	mla	r1, r1, r2, ip
 80186d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80186d6:	fb03 1302 	mla	r3, r3, r2, r1
 80186da:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80186de:	b383      	cbz	r3, 8018742 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80186e0:	4ac7      	ldr	r2, [pc, #796]	; (8018a00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 80186e2:	2bff      	cmp	r3, #255	; 0xff
 80186e4:	6812      	ldr	r2, [r2, #0]
 80186e6:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 80186ea:	f3c2 2007 	ubfx	r0, r2, #8, #8
 80186ee:	b2d2      	uxtb	r2, r2
 80186f0:	f000 80ac 	beq.w	801884c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80186f4:	b299      	uxth	r1, r3
 80186f6:	43db      	mvns	r3, r3
 80186f8:	f897 c000 	ldrb.w	ip, [r7]
 80186fc:	fb12 f201 	smulbb	r2, r2, r1
 8018700:	b2db      	uxtb	r3, r3
 8018702:	fb10 f001 	smulbb	r0, r0, r1
 8018706:	fb0c 2203 	mla	r2, ip, r3, r2
 801870a:	fb1e f101 	smulbb	r1, lr, r1
 801870e:	b292      	uxth	r2, r2
 8018710:	f102 0c01 	add.w	ip, r2, #1
 8018714:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8018718:	1212      	asrs	r2, r2, #8
 801871a:	703a      	strb	r2, [r7, #0]
 801871c:	787a      	ldrb	r2, [r7, #1]
 801871e:	fb02 0003 	mla	r0, r2, r3, r0
 8018722:	b280      	uxth	r0, r0
 8018724:	1c42      	adds	r2, r0, #1
 8018726:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801872a:	78ba      	ldrb	r2, [r7, #2]
 801872c:	fb02 1303 	mla	r3, r2, r3, r1
 8018730:	1200      	asrs	r0, r0, #8
 8018732:	b29b      	uxth	r3, r3
 8018734:	7078      	strb	r0, [r7, #1]
 8018736:	f103 0e01 	add.w	lr, r3, #1
 801873a:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801873e:	121b      	asrs	r3, r3, #8
 8018740:	70bb      	strb	r3, [r7, #2]
 8018742:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018744:	3703      	adds	r7, #3
 8018746:	f10a 3aff 	add.w	sl, sl, #4294967295
 801874a:	441d      	add	r5, r3
 801874c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801874e:	441e      	add	r6, r3
 8018750:	e74d      	b.n	80185ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8018752:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018754:	3c01      	subs	r4, #1
 8018756:	f10b 0b03 	add.w	fp, fp, #3
 801875a:	441d      	add	r5, r3
 801875c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801875e:	441e      	add	r6, r3
 8018760:	e725      	b.n	80185ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8018762:	d021      	beq.n	80187a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8018764:	1e63      	subs	r3, r4, #1
 8018766:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8018768:	fb00 5003 	mla	r0, r0, r3, r5
 801876c:	1400      	asrs	r0, r0, #16
 801876e:	f53f af3a 	bmi.w	80185e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8018772:	3901      	subs	r1, #1
 8018774:	4288      	cmp	r0, r1
 8018776:	f6bf af36 	bge.w	80185e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801877a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801877c:	fb01 6303 	mla	r3, r1, r3, r6
 8018780:	141b      	asrs	r3, r3, #16
 8018782:	f53f af30 	bmi.w	80185e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8018786:	3a01      	subs	r2, #1
 8018788:	4293      	cmp	r3, r2
 801878a:	f6bf af2c 	bge.w	80185e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801878e:	f10b 0c03 	add.w	ip, fp, #3
 8018792:	46a6      	mov	lr, r4
 8018794:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8018798:	f1be 0f00 	cmp.w	lr, #0
 801879c:	dc79      	bgt.n	8018892 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 801879e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80187a2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80187a6:	44a3      	add	fp, r4
 80187a8:	9b07      	ldr	r3, [sp, #28]
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	f340 8123 	ble.w	80189f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80187b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80187b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80187b6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80187ba:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80187be:	eef0 6a48 	vmov.f32	s13, s16
 80187c2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80187c6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80187ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80187ce:	ee16 5a90 	vmov	r5, s13
 80187d2:	eef0 6a68 	vmov.f32	s13, s17
 80187d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80187da:	ee16 6a90 	vmov	r6, s13
 80187de:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80187e2:	ee69 7a27 	vmul.f32	s15, s18, s15
 80187e6:	ee37 8a48 	vsub.f32	s16, s14, s16
 80187ea:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80187ee:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80187f2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80187f6:	ee18 2a10 	vmov	r2, s16
 80187fa:	eeb0 8a47 	vmov.f32	s16, s14
 80187fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8018802:	ee18 2a90 	vmov	r2, s17
 8018806:	9327      	str	r3, [sp, #156]	; 0x9c
 8018808:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801880a:	eef0 8a67 	vmov.f32	s17, s15
 801880e:	fb92 f3f3 	sdiv	r3, r2, r3
 8018812:	9328      	str	r3, [sp, #160]	; 0xa0
 8018814:	9b07      	ldr	r3, [sp, #28]
 8018816:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018818:	3b01      	subs	r3, #1
 801881a:	9307      	str	r3, [sp, #28]
 801881c:	bf08      	it	eq
 801881e:	4614      	moveq	r4, r2
 8018820:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018822:	bf18      	it	ne
 8018824:	461c      	movne	r4, r3
 8018826:	e6b4      	b.n	8018592 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8018828:	2900      	cmp	r1, #0
 801882a:	f43f af3c 	beq.w	80186a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 801882e:	eb09 0003 	add.w	r0, r9, r3
 8018832:	0843      	lsrs	r3, r0, #1
 8018834:	07c0      	lsls	r0, r0, #31
 8018836:	f818 3003 	ldrb.w	r3, [r8, r3]
 801883a:	bf54      	ite	pl
 801883c:	f003 030f 	andpl.w	r3, r3, #15
 8018840:	111b      	asrmi	r3, r3, #4
 8018842:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8018846:	b2db      	uxtb	r3, r3
 8018848:	930a      	str	r3, [sp, #40]	; 0x28
 801884a:	e72c      	b.n	80186a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 801884c:	703a      	strb	r2, [r7, #0]
 801884e:	7078      	strb	r0, [r7, #1]
 8018850:	f887 e002 	strb.w	lr, [r7, #2]
 8018854:	e775      	b.n	8018742 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8018856:	1c5a      	adds	r2, r3, #1
 8018858:	f53f af73 	bmi.w	8018742 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801885c:	4594      	cmp	ip, r2
 801885e:	f6ff af70 	blt.w	8018742 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8018862:	1c42      	adds	r2, r0, #1
 8018864:	f53f af6d 	bmi.w	8018742 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8018868:	4596      	cmp	lr, r2
 801886a:	f6ff af6a 	blt.w	8018742 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801886e:	9302      	str	r3, [sp, #8]
 8018870:	fa0f f38e 	sxth.w	r3, lr
 8018874:	9a08      	ldr	r2, [sp, #32]
 8018876:	9301      	str	r3, [sp, #4]
 8018878:	fa0f f38c 	sxth.w	r3, ip
 801887c:	9105      	str	r1, [sp, #20]
 801887e:	4639      	mov	r1, r7
 8018880:	9300      	str	r3, [sp, #0]
 8018882:	464b      	mov	r3, r9
 8018884:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8018888:	4642      	mov	r2, r8
 801888a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801888c:	f7ff fd70 	bl	8018370 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8018890:	e757      	b.n	8018742 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8018892:	142a      	asrs	r2, r5, #16
 8018894:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8018898:	1433      	asrs	r3, r6, #16
 801889a:	f3c6 3703 	ubfx	r7, r6, #12, #4
 801889e:	fb09 2303 	mla	r3, r9, r3, r2
 80188a2:	085a      	lsrs	r2, r3, #1
 80188a4:	07d9      	lsls	r1, r3, #31
 80188a6:	f818 2002 	ldrb.w	r2, [r8, r2]
 80188aa:	bf54      	ite	pl
 80188ac:	f002 020f 	andpl.w	r2, r2, #15
 80188b0:	1112      	asrmi	r2, r2, #4
 80188b2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80188b6:	b2d2      	uxtb	r2, r2
 80188b8:	2800      	cmp	r0, #0
 80188ba:	f000 8085 	beq.w	80189c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80188be:	f103 0a01 	add.w	sl, r3, #1
 80188c2:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80188c6:	f01a 0f01 	tst.w	sl, #1
 80188ca:	f818 1001 	ldrb.w	r1, [r8, r1]
 80188ce:	bf0c      	ite	eq
 80188d0:	f001 010f 	andeq.w	r1, r1, #15
 80188d4:	1109      	asrne	r1, r1, #4
 80188d6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80188da:	b2c9      	uxtb	r1, r1
 80188dc:	910f      	str	r1, [sp, #60]	; 0x3c
 80188de:	b1df      	cbz	r7, 8018918 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 80188e0:	444b      	add	r3, r9
 80188e2:	0859      	lsrs	r1, r3, #1
 80188e4:	f013 0f01 	tst.w	r3, #1
 80188e8:	f103 0301 	add.w	r3, r3, #1
 80188ec:	f818 1001 	ldrb.w	r1, [r8, r1]
 80188f0:	bf0c      	ite	eq
 80188f2:	f001 010f 	andeq.w	r1, r1, #15
 80188f6:	1109      	asrne	r1, r1, #4
 80188f8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80188fc:	b2c9      	uxtb	r1, r1
 80188fe:	910b      	str	r1, [sp, #44]	; 0x2c
 8018900:	0859      	lsrs	r1, r3, #1
 8018902:	07db      	lsls	r3, r3, #31
 8018904:	f818 1001 	ldrb.w	r1, [r8, r1]
 8018908:	bf54      	ite	pl
 801890a:	f001 010f 	andpl.w	r1, r1, #15
 801890e:	1109      	asrmi	r1, r1, #4
 8018910:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8018914:	b2c9      	uxtb	r1, r1
 8018916:	9110      	str	r1, [sp, #64]	; 0x40
 8018918:	b280      	uxth	r0, r0
 801891a:	b2bf      	uxth	r7, r7
 801891c:	fb00 f307 	mul.w	r3, r0, r7
 8018920:	0100      	lsls	r0, r0, #4
 8018922:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8018926:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801892a:	1ac0      	subs	r0, r0, r3
 801892c:	b2bf      	uxth	r7, r7
 801892e:	b280      	uxth	r0, r0
 8018930:	1bc9      	subs	r1, r1, r7
 8018932:	fa1f fa81 	uxth.w	sl, r1
 8018936:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8018938:	4348      	muls	r0, r1
 801893a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801893c:	fb02 020a 	mla	r2, r2, sl, r0
 8018940:	fb07 2701 	mla	r7, r7, r1, r2
 8018944:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018946:	fb03 7302 	mla	r3, r3, r2, r7
 801894a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801894e:	b393      	cbz	r3, 80189b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8018950:	4a2b      	ldr	r2, [pc, #172]	; (8018a00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 8018952:	2bff      	cmp	r3, #255	; 0xff
 8018954:	6811      	ldr	r1, [r2, #0]
 8018956:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 801895a:	f3c1 2707 	ubfx	r7, r1, #8, #8
 801895e:	b2c9      	uxtb	r1, r1
 8018960:	d042      	beq.n	80189e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8018962:	b298      	uxth	r0, r3
 8018964:	43db      	mvns	r3, r3
 8018966:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 801896a:	fb11 f100 	smulbb	r1, r1, r0
 801896e:	b2db      	uxtb	r3, r3
 8018970:	fb17 f700 	smulbb	r7, r7, r0
 8018974:	fb02 1103 	mla	r1, r2, r3, r1
 8018978:	fb1a f000 	smulbb	r0, sl, r0
 801897c:	b289      	uxth	r1, r1
 801897e:	1c4a      	adds	r2, r1, #1
 8018980:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8018984:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8018988:	fb02 7703 	mla	r7, r2, r3, r7
 801898c:	1209      	asrs	r1, r1, #8
 801898e:	b2bf      	uxth	r7, r7
 8018990:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8018994:	1c7a      	adds	r2, r7, #1
 8018996:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801899a:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 801899e:	fb02 0303 	mla	r3, r2, r3, r0
 80189a2:	123f      	asrs	r7, r7, #8
 80189a4:	b29b      	uxth	r3, r3
 80189a6:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80189aa:	1c5a      	adds	r2, r3, #1
 80189ac:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80189b0:	121b      	asrs	r3, r3, #8
 80189b2:	f80c 3c01 	strb.w	r3, [ip, #-1]
 80189b6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80189b8:	f10c 0c03 	add.w	ip, ip, #3
 80189bc:	f10e 3eff 	add.w	lr, lr, #4294967295
 80189c0:	441d      	add	r5, r3
 80189c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80189c4:	441e      	add	r6, r3
 80189c6:	e6e7      	b.n	8018798 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 80189c8:	2f00      	cmp	r7, #0
 80189ca:	d0a5      	beq.n	8018918 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 80189cc:	444b      	add	r3, r9
 80189ce:	0859      	lsrs	r1, r3, #1
 80189d0:	07db      	lsls	r3, r3, #31
 80189d2:	f818 1001 	ldrb.w	r1, [r8, r1]
 80189d6:	bf54      	ite	pl
 80189d8:	f001 010f 	andpl.w	r1, r1, #15
 80189dc:	1109      	asrmi	r1, r1, #4
 80189de:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80189e2:	b2c9      	uxtb	r1, r1
 80189e4:	910b      	str	r1, [sp, #44]	; 0x2c
 80189e6:	e797      	b.n	8018918 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 80189e8:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80189ec:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80189f0:	f80c ac01 	strb.w	sl, [ip, #-1]
 80189f4:	e7df      	b.n	80189b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80189f6:	b013      	add	sp, #76	; 0x4c
 80189f8:	ecbd 8b08 	vpop	{d8-d11}
 80189fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a00:	2400689c 	.word	0x2400689c

08018a04 <CRC_Lock>:
 8018a04:	4a20      	ldr	r2, [pc, #128]	; (8018a88 <CRC_Lock+0x84>)
 8018a06:	b530      	push	{r4, r5, lr}
 8018a08:	6813      	ldr	r3, [r2, #0]
 8018a0a:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8018a0e:	f24c 2540 	movw	r5, #49728	; 0xc240
 8018a12:	f023 0301 	bic.w	r3, r3, #1
 8018a16:	6013      	str	r3, [r2, #0]
 8018a18:	4b1c      	ldr	r3, [pc, #112]	; (8018a8c <CRC_Lock+0x88>)
 8018a1a:	681a      	ldr	r2, [r3, #0]
 8018a1c:	4022      	ands	r2, r4
 8018a1e:	42aa      	cmp	r2, r5
 8018a20:	d005      	beq.n	8018a2e <CRC_Lock+0x2a>
 8018a22:	681b      	ldr	r3, [r3, #0]
 8018a24:	f24c 2270 	movw	r2, #49776	; 0xc270
 8018a28:	4023      	ands	r3, r4
 8018a2a:	4293      	cmp	r3, r2
 8018a2c:	d124      	bne.n	8018a78 <CRC_Lock+0x74>
 8018a2e:	4b18      	ldr	r3, [pc, #96]	; (8018a90 <CRC_Lock+0x8c>)
 8018a30:	681b      	ldr	r3, [r3, #0]
 8018a32:	bb0b      	cbnz	r3, 8018a78 <CRC_Lock+0x74>
 8018a34:	4b17      	ldr	r3, [pc, #92]	; (8018a94 <CRC_Lock+0x90>)
 8018a36:	681a      	ldr	r2, [r3, #0]
 8018a38:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8018a3c:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8018a40:	d00d      	beq.n	8018a5e <CRC_Lock+0x5a>
 8018a42:	681a      	ldr	r2, [r3, #0]
 8018a44:	f240 4483 	movw	r4, #1155	; 0x483
 8018a48:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8018a4c:	42a2      	cmp	r2, r4
 8018a4e:	d006      	beq.n	8018a5e <CRC_Lock+0x5a>
 8018a50:	681b      	ldr	r3, [r3, #0]
 8018a52:	f240 4285 	movw	r2, #1157	; 0x485
 8018a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8018a5a:	4293      	cmp	r3, r2
 8018a5c:	d10c      	bne.n	8018a78 <CRC_Lock+0x74>
 8018a5e:	4b0e      	ldr	r3, [pc, #56]	; (8018a98 <CRC_Lock+0x94>)
 8018a60:	2201      	movs	r2, #1
 8018a62:	601a      	str	r2, [r3, #0]
 8018a64:	681a      	ldr	r2, [r3, #0]
 8018a66:	2a00      	cmp	r2, #0
 8018a68:	d1fc      	bne.n	8018a64 <CRC_Lock+0x60>
 8018a6a:	4b0c      	ldr	r3, [pc, #48]	; (8018a9c <CRC_Lock+0x98>)
 8018a6c:	6018      	str	r0, [r3, #0]
 8018a6e:	6818      	ldr	r0, [r3, #0]
 8018a70:	1a43      	subs	r3, r0, r1
 8018a72:	4258      	negs	r0, r3
 8018a74:	4158      	adcs	r0, r3
 8018a76:	bd30      	pop	{r4, r5, pc}
 8018a78:	4b09      	ldr	r3, [pc, #36]	; (8018aa0 <CRC_Lock+0x9c>)
 8018a7a:	2201      	movs	r2, #1
 8018a7c:	601a      	str	r2, [r3, #0]
 8018a7e:	681a      	ldr	r2, [r3, #0]
 8018a80:	2a00      	cmp	r2, #0
 8018a82:	d1fc      	bne.n	8018a7e <CRC_Lock+0x7a>
 8018a84:	4b07      	ldr	r3, [pc, #28]	; (8018aa4 <CRC_Lock+0xa0>)
 8018a86:	e7f1      	b.n	8018a6c <CRC_Lock+0x68>
 8018a88:	e0002000 	.word	0xe0002000
 8018a8c:	e000ed00 	.word	0xe000ed00
 8018a90:	e0042000 	.word	0xe0042000
 8018a94:	5c001000 	.word	0x5c001000
 8018a98:	58024c08 	.word	0x58024c08
 8018a9c:	58024c00 	.word	0x58024c00
 8018aa0:	40023008 	.word	0x40023008
 8018aa4:	40023000 	.word	0x40023000

08018aa8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8018aa8:	6101      	str	r1, [r0, #16]
 8018aaa:	4770      	bx	lr

08018aac <_ZN8touchgfx8Gestures4tickEv>:
 8018aac:	7b83      	ldrb	r3, [r0, #14]
 8018aae:	b14b      	cbz	r3, 8018ac4 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8018ab0:	8903      	ldrh	r3, [r0, #8]
 8018ab2:	3301      	adds	r3, #1
 8018ab4:	b29b      	uxth	r3, r3
 8018ab6:	2b07      	cmp	r3, #7
 8018ab8:	8103      	strh	r3, [r0, #8]
 8018aba:	bf81      	itttt	hi
 8018abc:	2300      	movhi	r3, #0
 8018abe:	8143      	strhhi	r3, [r0, #10]
 8018ac0:	8183      	strhhi	r3, [r0, #12]
 8018ac2:	7383      	strbhi	r3, [r0, #14]
 8018ac4:	4770      	bx	lr
	...

08018ac8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8018ac8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8018acc:	4604      	mov	r4, r0
 8018ace:	4698      	mov	r8, r3
 8018ad0:	8880      	ldrh	r0, [r0, #4]
 8018ad2:	4617      	mov	r7, r2
 8018ad4:	4b1d      	ldr	r3, [pc, #116]	; (8018b4c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8018ad6:	460e      	mov	r6, r1
 8018ad8:	f8ad 0006 	strh.w	r0, [sp, #6]
 8018adc:	eba8 0000 	sub.w	r0, r8, r0
 8018ae0:	9300      	str	r3, [sp, #0]
 8018ae2:	2300      	movs	r3, #0
 8018ae4:	b280      	uxth	r0, r0
 8018ae6:	8aa2      	ldrh	r2, [r4, #20]
 8018ae8:	f88d 3004 	strb.w	r3, [sp, #4]
 8018aec:	b203      	sxth	r3, r0
 8018aee:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8018af2:	88e1      	ldrh	r1, [r4, #6]
 8018af4:	2b00      	cmp	r3, #0
 8018af6:	f8ad 800a 	strh.w	r8, [sp, #10]
 8018afa:	f8ad 1008 	strh.w	r1, [sp, #8]
 8018afe:	bfb8      	it	lt
 8018b00:	4240      	neglt	r0, r0
 8018b02:	f8ad 500c 	strh.w	r5, [sp, #12]
 8018b06:	bfb8      	it	lt
 8018b08:	b203      	sxthlt	r3, r0
 8018b0a:	4293      	cmp	r3, r2
 8018b0c:	dc08      	bgt.n	8018b20 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8018b0e:	1a69      	subs	r1, r5, r1
 8018b10:	b289      	uxth	r1, r1
 8018b12:	b20b      	sxth	r3, r1
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	bfbc      	itt	lt
 8018b18:	4249      	neglt	r1, r1
 8018b1a:	b20b      	sxthlt	r3, r1
 8018b1c:	429a      	cmp	r2, r3
 8018b1e:	da13      	bge.n	8018b48 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8018b20:	6920      	ldr	r0, [r4, #16]
 8018b22:	4669      	mov	r1, sp
 8018b24:	eba8 0606 	sub.w	r6, r8, r6
 8018b28:	1bef      	subs	r7, r5, r7
 8018b2a:	6803      	ldr	r3, [r0, #0]
 8018b2c:	685b      	ldr	r3, [r3, #4]
 8018b2e:	4798      	blx	r3
 8018b30:	2300      	movs	r3, #0
 8018b32:	2001      	movs	r0, #1
 8018b34:	8166      	strh	r6, [r4, #10]
 8018b36:	8123      	strh	r3, [r4, #8]
 8018b38:	81a7      	strh	r7, [r4, #12]
 8018b3a:	f8a4 8004 	strh.w	r8, [r4, #4]
 8018b3e:	80e5      	strh	r5, [r4, #6]
 8018b40:	73a0      	strb	r0, [r4, #14]
 8018b42:	b004      	add	sp, #16
 8018b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b48:	2000      	movs	r0, #0
 8018b4a:	e7fa      	b.n	8018b42 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8018b4c:	0801c3a4 	.word	0x0801c3a4

08018b50 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8018b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b52:	461e      	mov	r6, r3
 8018b54:	1e4b      	subs	r3, r1, #1
 8018b56:	b085      	sub	sp, #20
 8018b58:	4604      	mov	r4, r0
 8018b5a:	2b01      	cmp	r3, #1
 8018b5c:	460d      	mov	r5, r1
 8018b5e:	4617      	mov	r7, r2
 8018b60:	d84b      	bhi.n	8018bfa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8018b62:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018b66:	1cd3      	adds	r3, r2, #3
 8018b68:	b29b      	uxth	r3, r3
 8018b6a:	2b06      	cmp	r3, #6
 8018b6c:	d916      	bls.n	8018b9c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8018b6e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8018c10 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8018b72:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8018b76:	f8cd c004 	str.w	ip, [sp, #4]
 8018b7a:	f04f 0c00 	mov.w	ip, #0
 8018b7e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8018b82:	6900      	ldr	r0, [r0, #16]
 8018b84:	f8ad 100c 	strh.w	r1, [sp, #12]
 8018b88:	a901      	add	r1, sp, #4
 8018b8a:	f88d c008 	strb.w	ip, [sp, #8]
 8018b8e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8018b92:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018b96:	6803      	ldr	r3, [r0, #0]
 8018b98:	689b      	ldr	r3, [r3, #8]
 8018b9a:	4798      	blx	r3
 8018b9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018ba0:	1cd3      	adds	r3, r2, #3
 8018ba2:	b29b      	uxth	r3, r3
 8018ba4:	2b06      	cmp	r3, #6
 8018ba6:	d916      	bls.n	8018bd6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8018ba8:	f8df c064 	ldr.w	ip, [pc, #100]	; 8018c10 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8018bac:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8018bb0:	f8cd c004 	str.w	ip, [sp, #4]
 8018bb4:	f04f 0c01 	mov.w	ip, #1
 8018bb8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8018bbc:	6920      	ldr	r0, [r4, #16]
 8018bbe:	f8ad 100c 	strh.w	r1, [sp, #12]
 8018bc2:	a901      	add	r1, sp, #4
 8018bc4:	f88d c008 	strb.w	ip, [sp, #8]
 8018bc8:	f8ad 200a 	strh.w	r2, [sp, #10]
 8018bcc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018bd0:	6803      	ldr	r3, [r0, #0]
 8018bd2:	689b      	ldr	r3, [r3, #8]
 8018bd4:	4798      	blx	r3
 8018bd6:	4b0d      	ldr	r3, [pc, #52]	; (8018c0c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8018bd8:	a901      	add	r1, sp, #4
 8018bda:	6920      	ldr	r0, [r4, #16]
 8018bdc:	9301      	str	r3, [sp, #4]
 8018bde:	2300      	movs	r3, #0
 8018be0:	f88d 5008 	strb.w	r5, [sp, #8]
 8018be4:	f8ad 700a 	strh.w	r7, [sp, #10]
 8018be8:	f8ad 600c 	strh.w	r6, [sp, #12]
 8018bec:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018bf0:	6803      	ldr	r3, [r0, #0]
 8018bf2:	681b      	ldr	r3, [r3, #0]
 8018bf4:	4798      	blx	r3
 8018bf6:	b005      	add	sp, #20
 8018bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018bfa:	2900      	cmp	r1, #0
 8018bfc:	d1eb      	bne.n	8018bd6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8018bfe:	80a2      	strh	r2, [r4, #4]
 8018c00:	80c6      	strh	r6, [r0, #6]
 8018c02:	60a1      	str	r1, [r4, #8]
 8018c04:	81a1      	strh	r1, [r4, #12]
 8018c06:	73a1      	strb	r1, [r4, #14]
 8018c08:	e7e5      	b.n	8018bd6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8018c0a:	bf00      	nop
 8018c0c:	0801be80 	.word	0x0801be80
 8018c10:	0801c3b8 	.word	0x0801c3b8

08018c14 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
 8018c14:	4770      	bx	lr
	...

08018c18 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8018c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018c1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018c1e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018c20:	4606      	mov	r6, r0
 8018c22:	4299      	cmp	r1, r3
 8018c24:	d02a      	beq.n	8018c7c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 8018c26:	4b16      	ldr	r3, [pc, #88]	; (8018c80 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 8018c28:	681b      	ldr	r3, [r3, #0]
 8018c2a:	b92b      	cbnz	r3, 8018c38 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 8018c2c:	4b15      	ldr	r3, [pc, #84]	; (8018c84 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 8018c2e:	21ae      	movs	r1, #174	; 0xae
 8018c30:	4a15      	ldr	r2, [pc, #84]	; (8018c88 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8018c32:	4816      	ldr	r0, [pc, #88]	; (8018c8c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 8018c34:	f000 f922 	bl	8018e7c <__assert_func>
 8018c38:	4a15      	ldr	r2, [pc, #84]	; (8018c90 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 8018c3a:	8812      	ldrh	r2, [r2, #0]
 8018c3c:	428a      	cmp	r2, r1
 8018c3e:	d803      	bhi.n	8018c48 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 8018c40:	4b14      	ldr	r3, [pc, #80]	; (8018c94 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 8018c42:	21af      	movs	r1, #175	; 0xaf
 8018c44:	4a10      	ldr	r2, [pc, #64]	; (8018c88 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8018c46:	e7f4      	b.n	8018c32 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 8018c48:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8018c4c:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8018c50:	4b11      	ldr	r3, [pc, #68]	; (8018c98 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 8018c52:	7854      	ldrb	r4, [r2, #1]
 8018c54:	681b      	ldr	r3, [r3, #0]
 8018c56:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8018c5a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8018c5e:	682b      	ldr	r3, [r5, #0]
 8018c60:	69df      	ldr	r7, [r3, #28]
 8018c62:	4b0e      	ldr	r3, [pc, #56]	; (8018c9c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 8018c64:	6818      	ldr	r0, [r3, #0]
 8018c66:	f7e9 fcdb 	bl	8002620 <_ZNK8touchgfx5Texts7getTextEt>
 8018c6a:	2300      	movs	r3, #0
 8018c6c:	4602      	mov	r2, r0
 8018c6e:	4621      	mov	r1, r4
 8018c70:	9300      	str	r3, [sp, #0]
 8018c72:	4628      	mov	r0, r5
 8018c74:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8018c76:	47b8      	blx	r7
 8018c78:	b003      	add	sp, #12
 8018c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c7c:	2000      	movs	r0, #0
 8018c7e:	e7fb      	b.n	8018c78 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 8018c80:	240068e4 	.word	0x240068e4
 8018c84:	0801bc44 	.word	0x0801bc44
 8018c88:	0801d6c8 	.word	0x0801d6c8
 8018c8c:	0801bc86 	.word	0x0801bc86
 8018c90:	240068e8 	.word	0x240068e8
 8018c94:	0801bcaf 	.word	0x0801bcaf
 8018c98:	240068ec 	.word	0x240068ec
 8018c9c:	240068f0 	.word	0x240068f0

08018ca0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8018ca0:	b570      	push	{r4, r5, r6, lr}
 8018ca2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018ca6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018ca8:	4604      	mov	r4, r0
 8018caa:	4299      	cmp	r1, r3
 8018cac:	d01e      	beq.n	8018cec <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 8018cae:	6803      	ldr	r3, [r0, #0]
 8018cb0:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8018cb2:	4b0f      	ldr	r3, [pc, #60]	; (8018cf0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 8018cb4:	681b      	ldr	r3, [r3, #0]
 8018cb6:	b92b      	cbnz	r3, 8018cc4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 8018cb8:	4b0e      	ldr	r3, [pc, #56]	; (8018cf4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 8018cba:	21ae      	movs	r1, #174	; 0xae
 8018cbc:	4a0e      	ldr	r2, [pc, #56]	; (8018cf8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8018cbe:	480f      	ldr	r0, [pc, #60]	; (8018cfc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 8018cc0:	f000 f8dc 	bl	8018e7c <__assert_func>
 8018cc4:	4b0e      	ldr	r3, [pc, #56]	; (8018d00 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 8018cc6:	881b      	ldrh	r3, [r3, #0]
 8018cc8:	428b      	cmp	r3, r1
 8018cca:	d803      	bhi.n	8018cd4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 8018ccc:	4b0d      	ldr	r3, [pc, #52]	; (8018d04 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 8018cce:	21af      	movs	r1, #175	; 0xaf
 8018cd0:	4a09      	ldr	r2, [pc, #36]	; (8018cf8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8018cd2:	e7f4      	b.n	8018cbe <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 8018cd4:	4b0c      	ldr	r3, [pc, #48]	; (8018d08 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 8018cd6:	6818      	ldr	r0, [r3, #0]
 8018cd8:	f7e9 fca2 	bl	8002620 <_ZNK8touchgfx5Texts7getTextEt>
 8018cdc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8018cde:	4601      	mov	r1, r0
 8018ce0:	46ac      	mov	ip, r5
 8018ce2:	4620      	mov	r0, r4
 8018ce4:	2300      	movs	r3, #0
 8018ce6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018cea:	4760      	bx	ip
 8018cec:	2000      	movs	r0, #0
 8018cee:	bd70      	pop	{r4, r5, r6, pc}
 8018cf0:	240068e4 	.word	0x240068e4
 8018cf4:	0801bc44 	.word	0x0801bc44
 8018cf8:	0801d6c8 	.word	0x0801d6c8
 8018cfc:	0801bc86 	.word	0x0801bc86
 8018d00:	240068e8 	.word	0x240068e8
 8018d04:	0801bcaf 	.word	0x0801bcaf
 8018d08:	240068f0 	.word	0x240068f0

08018d0c <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8018d0c:	b510      	push	{r4, lr}
 8018d0e:	4604      	mov	r4, r0
 8018d10:	2140      	movs	r1, #64	; 0x40
 8018d12:	f000 f884 	bl	8018e1e <_ZdlPvj>
 8018d16:	4620      	mov	r0, r4
 8018d18:	bd10      	pop	{r4, pc}
	...

08018d1c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8018d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018d24:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8018d26:	b08c      	sub	sp, #48	; 0x30
 8018d28:	4604      	mov	r4, r0
 8018d2a:	4293      	cmp	r3, r2
 8018d2c:	460e      	mov	r6, r1
 8018d2e:	d05d      	beq.n	8018dec <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8018d30:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8018e10 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 8018d34:	f8d8 2000 	ldr.w	r2, [r8]
 8018d38:	b92a      	cbnz	r2, 8018d46 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 8018d3a:	4b2e      	ldr	r3, [pc, #184]	; (8018df4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 8018d3c:	21ae      	movs	r1, #174	; 0xae
 8018d3e:	4a2e      	ldr	r2, [pc, #184]	; (8018df8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8018d40:	482e      	ldr	r0, [pc, #184]	; (8018dfc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 8018d42:	f000 f89b 	bl	8018e7c <__assert_func>
 8018d46:	4f2e      	ldr	r7, [pc, #184]	; (8018e00 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 8018d48:	8839      	ldrh	r1, [r7, #0]
 8018d4a:	4299      	cmp	r1, r3
 8018d4c:	d803      	bhi.n	8018d56 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 8018d4e:	4b2d      	ldr	r3, [pc, #180]	; (8018e04 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 8018d50:	21af      	movs	r1, #175	; 0xaf
 8018d52:	4a29      	ldr	r2, [pc, #164]	; (8018df8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8018d54:	e7f4      	b.n	8018d40 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 8018d56:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8018d5a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8018d5e:	4b2a      	ldr	r3, [pc, #168]	; (8018e08 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 8018d60:	681b      	ldr	r3, [r3, #0]
 8018d62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8018d66:	2a00      	cmp	r2, #0
 8018d68:	d040      	beq.n	8018dec <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8018d6a:	784b      	ldrb	r3, [r1, #1]
 8018d6c:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 8018d70:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8018d74:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8018d78:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 8018d7c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018d80:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 8018d84:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 8018d88:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8018d8c:	ad05      	add	r5, sp, #20
 8018d8e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8018d90:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8018d94:	9207      	str	r2, [sp, #28]
 8018d96:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 8018d9a:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 8018d9e:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 8018da2:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8018da6:	f88d a020 	strb.w	sl, [sp, #32]
 8018daa:	9009      	str	r0, [sp, #36]	; 0x24
 8018dac:	f7f1 fca8 	bl	800a700 <_ZN8touchgfx3HAL3lcdEv>
 8018db0:	4621      	mov	r1, r4
 8018db2:	4681      	mov	r9, r0
 8018db4:	4628      	mov	r0, r5
 8018db6:	f7f5 ffeb 	bl	800ed90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018dba:	f8d8 3000 	ldr.w	r3, [r8]
 8018dbe:	2b00      	cmp	r3, #0
 8018dc0:	d0bb      	beq.n	8018d3a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 8018dc2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8018dc4:	883b      	ldrh	r3, [r7, #0]
 8018dc6:	428b      	cmp	r3, r1
 8018dc8:	d9c1      	bls.n	8018d4e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 8018dca:	4b10      	ldr	r3, [pc, #64]	; (8018e0c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 8018dcc:	6818      	ldr	r0, [r3, #0]
 8018dce:	f7e9 fc27 	bl	8002620 <_ZNK8touchgfx5Texts7getTextEt>
 8018dd2:	2300      	movs	r3, #0
 8018dd4:	9303      	str	r3, [sp, #12]
 8018dd6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018dd8:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8018ddc:	ab07      	add	r3, sp, #28
 8018dde:	4648      	mov	r0, r9
 8018de0:	9300      	str	r3, [sp, #0]
 8018de2:	4633      	mov	r3, r6
 8018de4:	e895 0006 	ldmia.w	r5, {r1, r2}
 8018de8:	f7e9 fbcc 	bl	8002584 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8018dec:	b00c      	add	sp, #48	; 0x30
 8018dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018df2:	bf00      	nop
 8018df4:	0801bc44 	.word	0x0801bc44
 8018df8:	0801d6c8 	.word	0x0801d6c8
 8018dfc:	0801bc86 	.word	0x0801bc86
 8018e00:	240068e8 	.word	0x240068e8
 8018e04:	0801bcaf 	.word	0x0801bcaf
 8018e08:	240068ec 	.word	0x240068ec
 8018e0c:	240068f0 	.word	0x240068f0
 8018e10:	240068e4 	.word	0x240068e4

08018e14 <__aeabi_atexit>:
 8018e14:	460b      	mov	r3, r1
 8018e16:	4601      	mov	r1, r0
 8018e18:	4618      	mov	r0, r3
 8018e1a:	f000 b853 	b.w	8018ec4 <__cxa_atexit>

08018e1e <_ZdlPvj>:
 8018e1e:	f000 b812 	b.w	8018e46 <_ZdlPv>

08018e22 <__cxa_guard_acquire>:
 8018e22:	6803      	ldr	r3, [r0, #0]
 8018e24:	07db      	lsls	r3, r3, #31
 8018e26:	d406      	bmi.n	8018e36 <__cxa_guard_acquire+0x14>
 8018e28:	7843      	ldrb	r3, [r0, #1]
 8018e2a:	b103      	cbz	r3, 8018e2e <__cxa_guard_acquire+0xc>
 8018e2c:	deff      	udf	#255	; 0xff
 8018e2e:	2301      	movs	r3, #1
 8018e30:	7043      	strb	r3, [r0, #1]
 8018e32:	4618      	mov	r0, r3
 8018e34:	4770      	bx	lr
 8018e36:	2000      	movs	r0, #0
 8018e38:	4770      	bx	lr

08018e3a <__cxa_guard_release>:
 8018e3a:	2301      	movs	r3, #1
 8018e3c:	6003      	str	r3, [r0, #0]
 8018e3e:	4770      	bx	lr

08018e40 <__cxa_pure_virtual>:
 8018e40:	b508      	push	{r3, lr}
 8018e42:	f000 f80f 	bl	8018e64 <_ZSt9terminatev>

08018e46 <_ZdlPv>:
 8018e46:	f000 b88f 	b.w	8018f68 <free>

08018e4a <_ZN10__cxxabiv111__terminateEPFvvE>:
 8018e4a:	b508      	push	{r3, lr}
 8018e4c:	4780      	blx	r0
 8018e4e:	f000 f80e 	bl	8018e6e <abort>
	...

08018e54 <_ZSt13get_terminatev>:
 8018e54:	4b02      	ldr	r3, [pc, #8]	; (8018e60 <_ZSt13get_terminatev+0xc>)
 8018e56:	6818      	ldr	r0, [r3, #0]
 8018e58:	f3bf 8f5b 	dmb	ish
 8018e5c:	4770      	bx	lr
 8018e5e:	bf00      	nop
 8018e60:	240000d4 	.word	0x240000d4

08018e64 <_ZSt9terminatev>:
 8018e64:	b508      	push	{r3, lr}
 8018e66:	f7ff fff5 	bl	8018e54 <_ZSt13get_terminatev>
 8018e6a:	f7ff ffee 	bl	8018e4a <_ZN10__cxxabiv111__terminateEPFvvE>

08018e6e <abort>:
 8018e6e:	b508      	push	{r3, lr}
 8018e70:	2006      	movs	r0, #6
 8018e72:	f000 fc67 	bl	8019744 <raise>
 8018e76:	2001      	movs	r0, #1
 8018e78:	f7e8 f8f8 	bl	800106c <_exit>

08018e7c <__assert_func>:
 8018e7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018e7e:	4614      	mov	r4, r2
 8018e80:	461a      	mov	r2, r3
 8018e82:	4b09      	ldr	r3, [pc, #36]	; (8018ea8 <__assert_func+0x2c>)
 8018e84:	681b      	ldr	r3, [r3, #0]
 8018e86:	4605      	mov	r5, r0
 8018e88:	68d8      	ldr	r0, [r3, #12]
 8018e8a:	b14c      	cbz	r4, 8018ea0 <__assert_func+0x24>
 8018e8c:	4b07      	ldr	r3, [pc, #28]	; (8018eac <__assert_func+0x30>)
 8018e8e:	9100      	str	r1, [sp, #0]
 8018e90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018e94:	4906      	ldr	r1, [pc, #24]	; (8018eb0 <__assert_func+0x34>)
 8018e96:	462b      	mov	r3, r5
 8018e98:	f000 f828 	bl	8018eec <fiprintf>
 8018e9c:	f7ff ffe7 	bl	8018e6e <abort>
 8018ea0:	4b04      	ldr	r3, [pc, #16]	; (8018eb4 <__assert_func+0x38>)
 8018ea2:	461c      	mov	r4, r3
 8018ea4:	e7f3      	b.n	8018e8e <__assert_func+0x12>
 8018ea6:	bf00      	nop
 8018ea8:	240000d8 	.word	0x240000d8
 8018eac:	0801d6f6 	.word	0x0801d6f6
 8018eb0:	0801d703 	.word	0x0801d703
 8018eb4:	0801d731 	.word	0x0801d731

08018eb8 <atexit>:
 8018eb8:	2300      	movs	r3, #0
 8018eba:	4601      	mov	r1, r0
 8018ebc:	461a      	mov	r2, r3
 8018ebe:	4618      	mov	r0, r3
 8018ec0:	f000 bd1c 	b.w	80198fc <__register_exitproc>

08018ec4 <__cxa_atexit>:
 8018ec4:	b510      	push	{r4, lr}
 8018ec6:	4c05      	ldr	r4, [pc, #20]	; (8018edc <__cxa_atexit+0x18>)
 8018ec8:	4613      	mov	r3, r2
 8018eca:	b12c      	cbz	r4, 8018ed8 <__cxa_atexit+0x14>
 8018ecc:	460a      	mov	r2, r1
 8018ece:	4601      	mov	r1, r0
 8018ed0:	2002      	movs	r0, #2
 8018ed2:	f000 fd13 	bl	80198fc <__register_exitproc>
 8018ed6:	bd10      	pop	{r4, pc}
 8018ed8:	4620      	mov	r0, r4
 8018eda:	e7fc      	b.n	8018ed6 <__cxa_atexit+0x12>
 8018edc:	080198fd 	.word	0x080198fd

08018ee0 <__errno>:
 8018ee0:	4b01      	ldr	r3, [pc, #4]	; (8018ee8 <__errno+0x8>)
 8018ee2:	6818      	ldr	r0, [r3, #0]
 8018ee4:	4770      	bx	lr
 8018ee6:	bf00      	nop
 8018ee8:	240000d8 	.word	0x240000d8

08018eec <fiprintf>:
 8018eec:	b40e      	push	{r1, r2, r3}
 8018eee:	b503      	push	{r0, r1, lr}
 8018ef0:	4601      	mov	r1, r0
 8018ef2:	ab03      	add	r3, sp, #12
 8018ef4:	4805      	ldr	r0, [pc, #20]	; (8018f0c <fiprintf+0x20>)
 8018ef6:	f853 2b04 	ldr.w	r2, [r3], #4
 8018efa:	6800      	ldr	r0, [r0, #0]
 8018efc:	9301      	str	r3, [sp, #4]
 8018efe:	f000 f925 	bl	801914c <_vfiprintf_r>
 8018f02:	b002      	add	sp, #8
 8018f04:	f85d eb04 	ldr.w	lr, [sp], #4
 8018f08:	b003      	add	sp, #12
 8018f0a:	4770      	bx	lr
 8018f0c:	240000d8 	.word	0x240000d8

08018f10 <__libc_init_array>:
 8018f10:	b570      	push	{r4, r5, r6, lr}
 8018f12:	4d0d      	ldr	r5, [pc, #52]	; (8018f48 <__libc_init_array+0x38>)
 8018f14:	4c0d      	ldr	r4, [pc, #52]	; (8018f4c <__libc_init_array+0x3c>)
 8018f16:	1b64      	subs	r4, r4, r5
 8018f18:	10a4      	asrs	r4, r4, #2
 8018f1a:	2600      	movs	r6, #0
 8018f1c:	42a6      	cmp	r6, r4
 8018f1e:	d109      	bne.n	8018f34 <__libc_init_array+0x24>
 8018f20:	4d0b      	ldr	r5, [pc, #44]	; (8018f50 <__libc_init_array+0x40>)
 8018f22:	4c0c      	ldr	r4, [pc, #48]	; (8018f54 <__libc_init_array+0x44>)
 8018f24:	f001 f824 	bl	8019f70 <_init>
 8018f28:	1b64      	subs	r4, r4, r5
 8018f2a:	10a4      	asrs	r4, r4, #2
 8018f2c:	2600      	movs	r6, #0
 8018f2e:	42a6      	cmp	r6, r4
 8018f30:	d105      	bne.n	8018f3e <__libc_init_array+0x2e>
 8018f32:	bd70      	pop	{r4, r5, r6, pc}
 8018f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8018f38:	4798      	blx	r3
 8018f3a:	3601      	adds	r6, #1
 8018f3c:	e7ee      	b.n	8018f1c <__libc_init_array+0xc>
 8018f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8018f42:	4798      	blx	r3
 8018f44:	3601      	adds	r6, #1
 8018f46:	e7f2      	b.n	8018f2e <__libc_init_array+0x1e>
 8018f48:	08023178 	.word	0x08023178
 8018f4c:	08023178 	.word	0x08023178
 8018f50:	08023178 	.word	0x08023178
 8018f54:	08023190 	.word	0x08023190

08018f58 <malloc>:
 8018f58:	4b02      	ldr	r3, [pc, #8]	; (8018f64 <malloc+0xc>)
 8018f5a:	4601      	mov	r1, r0
 8018f5c:	6818      	ldr	r0, [r3, #0]
 8018f5e:	f000 b871 	b.w	8019044 <_malloc_r>
 8018f62:	bf00      	nop
 8018f64:	240000d8 	.word	0x240000d8

08018f68 <free>:
 8018f68:	4b02      	ldr	r3, [pc, #8]	; (8018f74 <free+0xc>)
 8018f6a:	4601      	mov	r1, r0
 8018f6c:	6818      	ldr	r0, [r3, #0]
 8018f6e:	f000 b819 	b.w	8018fa4 <_free_r>
 8018f72:	bf00      	nop
 8018f74:	240000d8 	.word	0x240000d8

08018f78 <memcpy>:
 8018f78:	440a      	add	r2, r1
 8018f7a:	4291      	cmp	r1, r2
 8018f7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8018f80:	d100      	bne.n	8018f84 <memcpy+0xc>
 8018f82:	4770      	bx	lr
 8018f84:	b510      	push	{r4, lr}
 8018f86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018f8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018f8e:	4291      	cmp	r1, r2
 8018f90:	d1f9      	bne.n	8018f86 <memcpy+0xe>
 8018f92:	bd10      	pop	{r4, pc}

08018f94 <memset>:
 8018f94:	4402      	add	r2, r0
 8018f96:	4603      	mov	r3, r0
 8018f98:	4293      	cmp	r3, r2
 8018f9a:	d100      	bne.n	8018f9e <memset+0xa>
 8018f9c:	4770      	bx	lr
 8018f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8018fa2:	e7f9      	b.n	8018f98 <memset+0x4>

08018fa4 <_free_r>:
 8018fa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018fa6:	2900      	cmp	r1, #0
 8018fa8:	d048      	beq.n	801903c <_free_r+0x98>
 8018faa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018fae:	9001      	str	r0, [sp, #4]
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	f1a1 0404 	sub.w	r4, r1, #4
 8018fb6:	bfb8      	it	lt
 8018fb8:	18e4      	addlt	r4, r4, r3
 8018fba:	f000 ff21 	bl	8019e00 <__malloc_lock>
 8018fbe:	4a20      	ldr	r2, [pc, #128]	; (8019040 <_free_r+0x9c>)
 8018fc0:	9801      	ldr	r0, [sp, #4]
 8018fc2:	6813      	ldr	r3, [r2, #0]
 8018fc4:	4615      	mov	r5, r2
 8018fc6:	b933      	cbnz	r3, 8018fd6 <_free_r+0x32>
 8018fc8:	6063      	str	r3, [r4, #4]
 8018fca:	6014      	str	r4, [r2, #0]
 8018fcc:	b003      	add	sp, #12
 8018fce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018fd2:	f000 bf1b 	b.w	8019e0c <__malloc_unlock>
 8018fd6:	42a3      	cmp	r3, r4
 8018fd8:	d90b      	bls.n	8018ff2 <_free_r+0x4e>
 8018fda:	6821      	ldr	r1, [r4, #0]
 8018fdc:	1862      	adds	r2, r4, r1
 8018fde:	4293      	cmp	r3, r2
 8018fe0:	bf04      	itt	eq
 8018fe2:	681a      	ldreq	r2, [r3, #0]
 8018fe4:	685b      	ldreq	r3, [r3, #4]
 8018fe6:	6063      	str	r3, [r4, #4]
 8018fe8:	bf04      	itt	eq
 8018fea:	1852      	addeq	r2, r2, r1
 8018fec:	6022      	streq	r2, [r4, #0]
 8018fee:	602c      	str	r4, [r5, #0]
 8018ff0:	e7ec      	b.n	8018fcc <_free_r+0x28>
 8018ff2:	461a      	mov	r2, r3
 8018ff4:	685b      	ldr	r3, [r3, #4]
 8018ff6:	b10b      	cbz	r3, 8018ffc <_free_r+0x58>
 8018ff8:	42a3      	cmp	r3, r4
 8018ffa:	d9fa      	bls.n	8018ff2 <_free_r+0x4e>
 8018ffc:	6811      	ldr	r1, [r2, #0]
 8018ffe:	1855      	adds	r5, r2, r1
 8019000:	42a5      	cmp	r5, r4
 8019002:	d10b      	bne.n	801901c <_free_r+0x78>
 8019004:	6824      	ldr	r4, [r4, #0]
 8019006:	4421      	add	r1, r4
 8019008:	1854      	adds	r4, r2, r1
 801900a:	42a3      	cmp	r3, r4
 801900c:	6011      	str	r1, [r2, #0]
 801900e:	d1dd      	bne.n	8018fcc <_free_r+0x28>
 8019010:	681c      	ldr	r4, [r3, #0]
 8019012:	685b      	ldr	r3, [r3, #4]
 8019014:	6053      	str	r3, [r2, #4]
 8019016:	4421      	add	r1, r4
 8019018:	6011      	str	r1, [r2, #0]
 801901a:	e7d7      	b.n	8018fcc <_free_r+0x28>
 801901c:	d902      	bls.n	8019024 <_free_r+0x80>
 801901e:	230c      	movs	r3, #12
 8019020:	6003      	str	r3, [r0, #0]
 8019022:	e7d3      	b.n	8018fcc <_free_r+0x28>
 8019024:	6825      	ldr	r5, [r4, #0]
 8019026:	1961      	adds	r1, r4, r5
 8019028:	428b      	cmp	r3, r1
 801902a:	bf04      	itt	eq
 801902c:	6819      	ldreq	r1, [r3, #0]
 801902e:	685b      	ldreq	r3, [r3, #4]
 8019030:	6063      	str	r3, [r4, #4]
 8019032:	bf04      	itt	eq
 8019034:	1949      	addeq	r1, r1, r5
 8019036:	6021      	streq	r1, [r4, #0]
 8019038:	6054      	str	r4, [r2, #4]
 801903a:	e7c7      	b.n	8018fcc <_free_r+0x28>
 801903c:	b003      	add	sp, #12
 801903e:	bd30      	pop	{r4, r5, pc}
 8019040:	24006970 	.word	0x24006970

08019044 <_malloc_r>:
 8019044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019046:	1ccd      	adds	r5, r1, #3
 8019048:	f025 0503 	bic.w	r5, r5, #3
 801904c:	3508      	adds	r5, #8
 801904e:	2d0c      	cmp	r5, #12
 8019050:	bf38      	it	cc
 8019052:	250c      	movcc	r5, #12
 8019054:	2d00      	cmp	r5, #0
 8019056:	4606      	mov	r6, r0
 8019058:	db01      	blt.n	801905e <_malloc_r+0x1a>
 801905a:	42a9      	cmp	r1, r5
 801905c:	d903      	bls.n	8019066 <_malloc_r+0x22>
 801905e:	230c      	movs	r3, #12
 8019060:	6033      	str	r3, [r6, #0]
 8019062:	2000      	movs	r0, #0
 8019064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019066:	f000 fecb 	bl	8019e00 <__malloc_lock>
 801906a:	4921      	ldr	r1, [pc, #132]	; (80190f0 <_malloc_r+0xac>)
 801906c:	680a      	ldr	r2, [r1, #0]
 801906e:	4614      	mov	r4, r2
 8019070:	b99c      	cbnz	r4, 801909a <_malloc_r+0x56>
 8019072:	4f20      	ldr	r7, [pc, #128]	; (80190f4 <_malloc_r+0xb0>)
 8019074:	683b      	ldr	r3, [r7, #0]
 8019076:	b923      	cbnz	r3, 8019082 <_malloc_r+0x3e>
 8019078:	4621      	mov	r1, r4
 801907a:	4630      	mov	r0, r6
 801907c:	f000 fb2a 	bl	80196d4 <_sbrk_r>
 8019080:	6038      	str	r0, [r7, #0]
 8019082:	4629      	mov	r1, r5
 8019084:	4630      	mov	r0, r6
 8019086:	f000 fb25 	bl	80196d4 <_sbrk_r>
 801908a:	1c43      	adds	r3, r0, #1
 801908c:	d123      	bne.n	80190d6 <_malloc_r+0x92>
 801908e:	230c      	movs	r3, #12
 8019090:	6033      	str	r3, [r6, #0]
 8019092:	4630      	mov	r0, r6
 8019094:	f000 feba 	bl	8019e0c <__malloc_unlock>
 8019098:	e7e3      	b.n	8019062 <_malloc_r+0x1e>
 801909a:	6823      	ldr	r3, [r4, #0]
 801909c:	1b5b      	subs	r3, r3, r5
 801909e:	d417      	bmi.n	80190d0 <_malloc_r+0x8c>
 80190a0:	2b0b      	cmp	r3, #11
 80190a2:	d903      	bls.n	80190ac <_malloc_r+0x68>
 80190a4:	6023      	str	r3, [r4, #0]
 80190a6:	441c      	add	r4, r3
 80190a8:	6025      	str	r5, [r4, #0]
 80190aa:	e004      	b.n	80190b6 <_malloc_r+0x72>
 80190ac:	6863      	ldr	r3, [r4, #4]
 80190ae:	42a2      	cmp	r2, r4
 80190b0:	bf0c      	ite	eq
 80190b2:	600b      	streq	r3, [r1, #0]
 80190b4:	6053      	strne	r3, [r2, #4]
 80190b6:	4630      	mov	r0, r6
 80190b8:	f000 fea8 	bl	8019e0c <__malloc_unlock>
 80190bc:	f104 000b 	add.w	r0, r4, #11
 80190c0:	1d23      	adds	r3, r4, #4
 80190c2:	f020 0007 	bic.w	r0, r0, #7
 80190c6:	1ac2      	subs	r2, r0, r3
 80190c8:	d0cc      	beq.n	8019064 <_malloc_r+0x20>
 80190ca:	1a1b      	subs	r3, r3, r0
 80190cc:	50a3      	str	r3, [r4, r2]
 80190ce:	e7c9      	b.n	8019064 <_malloc_r+0x20>
 80190d0:	4622      	mov	r2, r4
 80190d2:	6864      	ldr	r4, [r4, #4]
 80190d4:	e7cc      	b.n	8019070 <_malloc_r+0x2c>
 80190d6:	1cc4      	adds	r4, r0, #3
 80190d8:	f024 0403 	bic.w	r4, r4, #3
 80190dc:	42a0      	cmp	r0, r4
 80190de:	d0e3      	beq.n	80190a8 <_malloc_r+0x64>
 80190e0:	1a21      	subs	r1, r4, r0
 80190e2:	4630      	mov	r0, r6
 80190e4:	f000 faf6 	bl	80196d4 <_sbrk_r>
 80190e8:	3001      	adds	r0, #1
 80190ea:	d1dd      	bne.n	80190a8 <_malloc_r+0x64>
 80190ec:	e7cf      	b.n	801908e <_malloc_r+0x4a>
 80190ee:	bf00      	nop
 80190f0:	24006970 	.word	0x24006970
 80190f4:	24006974 	.word	0x24006974

080190f8 <__sfputc_r>:
 80190f8:	6893      	ldr	r3, [r2, #8]
 80190fa:	3b01      	subs	r3, #1
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	b410      	push	{r4}
 8019100:	6093      	str	r3, [r2, #8]
 8019102:	da08      	bge.n	8019116 <__sfputc_r+0x1e>
 8019104:	6994      	ldr	r4, [r2, #24]
 8019106:	42a3      	cmp	r3, r4
 8019108:	db01      	blt.n	801910e <__sfputc_r+0x16>
 801910a:	290a      	cmp	r1, #10
 801910c:	d103      	bne.n	8019116 <__sfputc_r+0x1e>
 801910e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019112:	f000 bb33 	b.w	801977c <__swbuf_r>
 8019116:	6813      	ldr	r3, [r2, #0]
 8019118:	1c58      	adds	r0, r3, #1
 801911a:	6010      	str	r0, [r2, #0]
 801911c:	7019      	strb	r1, [r3, #0]
 801911e:	4608      	mov	r0, r1
 8019120:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019124:	4770      	bx	lr

08019126 <__sfputs_r>:
 8019126:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019128:	4606      	mov	r6, r0
 801912a:	460f      	mov	r7, r1
 801912c:	4614      	mov	r4, r2
 801912e:	18d5      	adds	r5, r2, r3
 8019130:	42ac      	cmp	r4, r5
 8019132:	d101      	bne.n	8019138 <__sfputs_r+0x12>
 8019134:	2000      	movs	r0, #0
 8019136:	e007      	b.n	8019148 <__sfputs_r+0x22>
 8019138:	f814 1b01 	ldrb.w	r1, [r4], #1
 801913c:	463a      	mov	r2, r7
 801913e:	4630      	mov	r0, r6
 8019140:	f7ff ffda 	bl	80190f8 <__sfputc_r>
 8019144:	1c43      	adds	r3, r0, #1
 8019146:	d1f3      	bne.n	8019130 <__sfputs_r+0xa>
 8019148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801914c <_vfiprintf_r>:
 801914c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019150:	460d      	mov	r5, r1
 8019152:	b09d      	sub	sp, #116	; 0x74
 8019154:	4614      	mov	r4, r2
 8019156:	4698      	mov	r8, r3
 8019158:	4606      	mov	r6, r0
 801915a:	b118      	cbz	r0, 8019164 <_vfiprintf_r+0x18>
 801915c:	6983      	ldr	r3, [r0, #24]
 801915e:	b90b      	cbnz	r3, 8019164 <_vfiprintf_r+0x18>
 8019160:	f000 fd48 	bl	8019bf4 <__sinit>
 8019164:	4b89      	ldr	r3, [pc, #548]	; (801938c <_vfiprintf_r+0x240>)
 8019166:	429d      	cmp	r5, r3
 8019168:	d11b      	bne.n	80191a2 <_vfiprintf_r+0x56>
 801916a:	6875      	ldr	r5, [r6, #4]
 801916c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801916e:	07d9      	lsls	r1, r3, #31
 8019170:	d405      	bmi.n	801917e <_vfiprintf_r+0x32>
 8019172:	89ab      	ldrh	r3, [r5, #12]
 8019174:	059a      	lsls	r2, r3, #22
 8019176:	d402      	bmi.n	801917e <_vfiprintf_r+0x32>
 8019178:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801917a:	f000 fdd9 	bl	8019d30 <__retarget_lock_acquire_recursive>
 801917e:	89ab      	ldrh	r3, [r5, #12]
 8019180:	071b      	lsls	r3, r3, #28
 8019182:	d501      	bpl.n	8019188 <_vfiprintf_r+0x3c>
 8019184:	692b      	ldr	r3, [r5, #16]
 8019186:	b9eb      	cbnz	r3, 80191c4 <_vfiprintf_r+0x78>
 8019188:	4629      	mov	r1, r5
 801918a:	4630      	mov	r0, r6
 801918c:	f000 fb48 	bl	8019820 <__swsetup_r>
 8019190:	b1c0      	cbz	r0, 80191c4 <_vfiprintf_r+0x78>
 8019192:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019194:	07dc      	lsls	r4, r3, #31
 8019196:	d50e      	bpl.n	80191b6 <_vfiprintf_r+0x6a>
 8019198:	f04f 30ff 	mov.w	r0, #4294967295
 801919c:	b01d      	add	sp, #116	; 0x74
 801919e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191a2:	4b7b      	ldr	r3, [pc, #492]	; (8019390 <_vfiprintf_r+0x244>)
 80191a4:	429d      	cmp	r5, r3
 80191a6:	d101      	bne.n	80191ac <_vfiprintf_r+0x60>
 80191a8:	68b5      	ldr	r5, [r6, #8]
 80191aa:	e7df      	b.n	801916c <_vfiprintf_r+0x20>
 80191ac:	4b79      	ldr	r3, [pc, #484]	; (8019394 <_vfiprintf_r+0x248>)
 80191ae:	429d      	cmp	r5, r3
 80191b0:	bf08      	it	eq
 80191b2:	68f5      	ldreq	r5, [r6, #12]
 80191b4:	e7da      	b.n	801916c <_vfiprintf_r+0x20>
 80191b6:	89ab      	ldrh	r3, [r5, #12]
 80191b8:	0598      	lsls	r0, r3, #22
 80191ba:	d4ed      	bmi.n	8019198 <_vfiprintf_r+0x4c>
 80191bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80191be:	f000 fdb9 	bl	8019d34 <__retarget_lock_release_recursive>
 80191c2:	e7e9      	b.n	8019198 <_vfiprintf_r+0x4c>
 80191c4:	2300      	movs	r3, #0
 80191c6:	9309      	str	r3, [sp, #36]	; 0x24
 80191c8:	2320      	movs	r3, #32
 80191ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80191ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80191d2:	2330      	movs	r3, #48	; 0x30
 80191d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019398 <_vfiprintf_r+0x24c>
 80191d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80191dc:	f04f 0901 	mov.w	r9, #1
 80191e0:	4623      	mov	r3, r4
 80191e2:	469a      	mov	sl, r3
 80191e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80191e8:	b10a      	cbz	r2, 80191ee <_vfiprintf_r+0xa2>
 80191ea:	2a25      	cmp	r2, #37	; 0x25
 80191ec:	d1f9      	bne.n	80191e2 <_vfiprintf_r+0x96>
 80191ee:	ebba 0b04 	subs.w	fp, sl, r4
 80191f2:	d00b      	beq.n	801920c <_vfiprintf_r+0xc0>
 80191f4:	465b      	mov	r3, fp
 80191f6:	4622      	mov	r2, r4
 80191f8:	4629      	mov	r1, r5
 80191fa:	4630      	mov	r0, r6
 80191fc:	f7ff ff93 	bl	8019126 <__sfputs_r>
 8019200:	3001      	adds	r0, #1
 8019202:	f000 80aa 	beq.w	801935a <_vfiprintf_r+0x20e>
 8019206:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019208:	445a      	add	r2, fp
 801920a:	9209      	str	r2, [sp, #36]	; 0x24
 801920c:	f89a 3000 	ldrb.w	r3, [sl]
 8019210:	2b00      	cmp	r3, #0
 8019212:	f000 80a2 	beq.w	801935a <_vfiprintf_r+0x20e>
 8019216:	2300      	movs	r3, #0
 8019218:	f04f 32ff 	mov.w	r2, #4294967295
 801921c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019220:	f10a 0a01 	add.w	sl, sl, #1
 8019224:	9304      	str	r3, [sp, #16]
 8019226:	9307      	str	r3, [sp, #28]
 8019228:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801922c:	931a      	str	r3, [sp, #104]	; 0x68
 801922e:	4654      	mov	r4, sl
 8019230:	2205      	movs	r2, #5
 8019232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019236:	4858      	ldr	r0, [pc, #352]	; (8019398 <_vfiprintf_r+0x24c>)
 8019238:	f7e7 f86a 	bl	8000310 <memchr>
 801923c:	9a04      	ldr	r2, [sp, #16]
 801923e:	b9d8      	cbnz	r0, 8019278 <_vfiprintf_r+0x12c>
 8019240:	06d1      	lsls	r1, r2, #27
 8019242:	bf44      	itt	mi
 8019244:	2320      	movmi	r3, #32
 8019246:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801924a:	0713      	lsls	r3, r2, #28
 801924c:	bf44      	itt	mi
 801924e:	232b      	movmi	r3, #43	; 0x2b
 8019250:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019254:	f89a 3000 	ldrb.w	r3, [sl]
 8019258:	2b2a      	cmp	r3, #42	; 0x2a
 801925a:	d015      	beq.n	8019288 <_vfiprintf_r+0x13c>
 801925c:	9a07      	ldr	r2, [sp, #28]
 801925e:	4654      	mov	r4, sl
 8019260:	2000      	movs	r0, #0
 8019262:	f04f 0c0a 	mov.w	ip, #10
 8019266:	4621      	mov	r1, r4
 8019268:	f811 3b01 	ldrb.w	r3, [r1], #1
 801926c:	3b30      	subs	r3, #48	; 0x30
 801926e:	2b09      	cmp	r3, #9
 8019270:	d94e      	bls.n	8019310 <_vfiprintf_r+0x1c4>
 8019272:	b1b0      	cbz	r0, 80192a2 <_vfiprintf_r+0x156>
 8019274:	9207      	str	r2, [sp, #28]
 8019276:	e014      	b.n	80192a2 <_vfiprintf_r+0x156>
 8019278:	eba0 0308 	sub.w	r3, r0, r8
 801927c:	fa09 f303 	lsl.w	r3, r9, r3
 8019280:	4313      	orrs	r3, r2
 8019282:	9304      	str	r3, [sp, #16]
 8019284:	46a2      	mov	sl, r4
 8019286:	e7d2      	b.n	801922e <_vfiprintf_r+0xe2>
 8019288:	9b03      	ldr	r3, [sp, #12]
 801928a:	1d19      	adds	r1, r3, #4
 801928c:	681b      	ldr	r3, [r3, #0]
 801928e:	9103      	str	r1, [sp, #12]
 8019290:	2b00      	cmp	r3, #0
 8019292:	bfbb      	ittet	lt
 8019294:	425b      	neglt	r3, r3
 8019296:	f042 0202 	orrlt.w	r2, r2, #2
 801929a:	9307      	strge	r3, [sp, #28]
 801929c:	9307      	strlt	r3, [sp, #28]
 801929e:	bfb8      	it	lt
 80192a0:	9204      	strlt	r2, [sp, #16]
 80192a2:	7823      	ldrb	r3, [r4, #0]
 80192a4:	2b2e      	cmp	r3, #46	; 0x2e
 80192a6:	d10c      	bne.n	80192c2 <_vfiprintf_r+0x176>
 80192a8:	7863      	ldrb	r3, [r4, #1]
 80192aa:	2b2a      	cmp	r3, #42	; 0x2a
 80192ac:	d135      	bne.n	801931a <_vfiprintf_r+0x1ce>
 80192ae:	9b03      	ldr	r3, [sp, #12]
 80192b0:	1d1a      	adds	r2, r3, #4
 80192b2:	681b      	ldr	r3, [r3, #0]
 80192b4:	9203      	str	r2, [sp, #12]
 80192b6:	2b00      	cmp	r3, #0
 80192b8:	bfb8      	it	lt
 80192ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80192be:	3402      	adds	r4, #2
 80192c0:	9305      	str	r3, [sp, #20]
 80192c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80193a8 <_vfiprintf_r+0x25c>
 80192c6:	7821      	ldrb	r1, [r4, #0]
 80192c8:	2203      	movs	r2, #3
 80192ca:	4650      	mov	r0, sl
 80192cc:	f7e7 f820 	bl	8000310 <memchr>
 80192d0:	b140      	cbz	r0, 80192e4 <_vfiprintf_r+0x198>
 80192d2:	2340      	movs	r3, #64	; 0x40
 80192d4:	eba0 000a 	sub.w	r0, r0, sl
 80192d8:	fa03 f000 	lsl.w	r0, r3, r0
 80192dc:	9b04      	ldr	r3, [sp, #16]
 80192de:	4303      	orrs	r3, r0
 80192e0:	3401      	adds	r4, #1
 80192e2:	9304      	str	r3, [sp, #16]
 80192e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80192e8:	482c      	ldr	r0, [pc, #176]	; (801939c <_vfiprintf_r+0x250>)
 80192ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80192ee:	2206      	movs	r2, #6
 80192f0:	f7e7 f80e 	bl	8000310 <memchr>
 80192f4:	2800      	cmp	r0, #0
 80192f6:	d03f      	beq.n	8019378 <_vfiprintf_r+0x22c>
 80192f8:	4b29      	ldr	r3, [pc, #164]	; (80193a0 <_vfiprintf_r+0x254>)
 80192fa:	bb1b      	cbnz	r3, 8019344 <_vfiprintf_r+0x1f8>
 80192fc:	9b03      	ldr	r3, [sp, #12]
 80192fe:	3307      	adds	r3, #7
 8019300:	f023 0307 	bic.w	r3, r3, #7
 8019304:	3308      	adds	r3, #8
 8019306:	9303      	str	r3, [sp, #12]
 8019308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801930a:	443b      	add	r3, r7
 801930c:	9309      	str	r3, [sp, #36]	; 0x24
 801930e:	e767      	b.n	80191e0 <_vfiprintf_r+0x94>
 8019310:	fb0c 3202 	mla	r2, ip, r2, r3
 8019314:	460c      	mov	r4, r1
 8019316:	2001      	movs	r0, #1
 8019318:	e7a5      	b.n	8019266 <_vfiprintf_r+0x11a>
 801931a:	2300      	movs	r3, #0
 801931c:	3401      	adds	r4, #1
 801931e:	9305      	str	r3, [sp, #20]
 8019320:	4619      	mov	r1, r3
 8019322:	f04f 0c0a 	mov.w	ip, #10
 8019326:	4620      	mov	r0, r4
 8019328:	f810 2b01 	ldrb.w	r2, [r0], #1
 801932c:	3a30      	subs	r2, #48	; 0x30
 801932e:	2a09      	cmp	r2, #9
 8019330:	d903      	bls.n	801933a <_vfiprintf_r+0x1ee>
 8019332:	2b00      	cmp	r3, #0
 8019334:	d0c5      	beq.n	80192c2 <_vfiprintf_r+0x176>
 8019336:	9105      	str	r1, [sp, #20]
 8019338:	e7c3      	b.n	80192c2 <_vfiprintf_r+0x176>
 801933a:	fb0c 2101 	mla	r1, ip, r1, r2
 801933e:	4604      	mov	r4, r0
 8019340:	2301      	movs	r3, #1
 8019342:	e7f0      	b.n	8019326 <_vfiprintf_r+0x1da>
 8019344:	ab03      	add	r3, sp, #12
 8019346:	9300      	str	r3, [sp, #0]
 8019348:	462a      	mov	r2, r5
 801934a:	4b16      	ldr	r3, [pc, #88]	; (80193a4 <_vfiprintf_r+0x258>)
 801934c:	a904      	add	r1, sp, #16
 801934e:	4630      	mov	r0, r6
 8019350:	f3af 8000 	nop.w
 8019354:	4607      	mov	r7, r0
 8019356:	1c78      	adds	r0, r7, #1
 8019358:	d1d6      	bne.n	8019308 <_vfiprintf_r+0x1bc>
 801935a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801935c:	07d9      	lsls	r1, r3, #31
 801935e:	d405      	bmi.n	801936c <_vfiprintf_r+0x220>
 8019360:	89ab      	ldrh	r3, [r5, #12]
 8019362:	059a      	lsls	r2, r3, #22
 8019364:	d402      	bmi.n	801936c <_vfiprintf_r+0x220>
 8019366:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019368:	f000 fce4 	bl	8019d34 <__retarget_lock_release_recursive>
 801936c:	89ab      	ldrh	r3, [r5, #12]
 801936e:	065b      	lsls	r3, r3, #25
 8019370:	f53f af12 	bmi.w	8019198 <_vfiprintf_r+0x4c>
 8019374:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019376:	e711      	b.n	801919c <_vfiprintf_r+0x50>
 8019378:	ab03      	add	r3, sp, #12
 801937a:	9300      	str	r3, [sp, #0]
 801937c:	462a      	mov	r2, r5
 801937e:	4b09      	ldr	r3, [pc, #36]	; (80193a4 <_vfiprintf_r+0x258>)
 8019380:	a904      	add	r1, sp, #16
 8019382:	4630      	mov	r0, r6
 8019384:	f000 f880 	bl	8019488 <_printf_i>
 8019388:	e7e4      	b.n	8019354 <_vfiprintf_r+0x208>
 801938a:	bf00      	nop
 801938c:	0801d790 	.word	0x0801d790
 8019390:	0801d7b0 	.word	0x0801d7b0
 8019394:	0801d770 	.word	0x0801d770
 8019398:	0801d738 	.word	0x0801d738
 801939c:	0801d742 	.word	0x0801d742
 80193a0:	00000000 	.word	0x00000000
 80193a4:	08019127 	.word	0x08019127
 80193a8:	0801d73e 	.word	0x0801d73e

080193ac <_printf_common>:
 80193ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80193b0:	4616      	mov	r6, r2
 80193b2:	4699      	mov	r9, r3
 80193b4:	688a      	ldr	r2, [r1, #8]
 80193b6:	690b      	ldr	r3, [r1, #16]
 80193b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80193bc:	4293      	cmp	r3, r2
 80193be:	bfb8      	it	lt
 80193c0:	4613      	movlt	r3, r2
 80193c2:	6033      	str	r3, [r6, #0]
 80193c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80193c8:	4607      	mov	r7, r0
 80193ca:	460c      	mov	r4, r1
 80193cc:	b10a      	cbz	r2, 80193d2 <_printf_common+0x26>
 80193ce:	3301      	adds	r3, #1
 80193d0:	6033      	str	r3, [r6, #0]
 80193d2:	6823      	ldr	r3, [r4, #0]
 80193d4:	0699      	lsls	r1, r3, #26
 80193d6:	bf42      	ittt	mi
 80193d8:	6833      	ldrmi	r3, [r6, #0]
 80193da:	3302      	addmi	r3, #2
 80193dc:	6033      	strmi	r3, [r6, #0]
 80193de:	6825      	ldr	r5, [r4, #0]
 80193e0:	f015 0506 	ands.w	r5, r5, #6
 80193e4:	d106      	bne.n	80193f4 <_printf_common+0x48>
 80193e6:	f104 0a19 	add.w	sl, r4, #25
 80193ea:	68e3      	ldr	r3, [r4, #12]
 80193ec:	6832      	ldr	r2, [r6, #0]
 80193ee:	1a9b      	subs	r3, r3, r2
 80193f0:	42ab      	cmp	r3, r5
 80193f2:	dc26      	bgt.n	8019442 <_printf_common+0x96>
 80193f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80193f8:	1e13      	subs	r3, r2, #0
 80193fa:	6822      	ldr	r2, [r4, #0]
 80193fc:	bf18      	it	ne
 80193fe:	2301      	movne	r3, #1
 8019400:	0692      	lsls	r2, r2, #26
 8019402:	d42b      	bmi.n	801945c <_printf_common+0xb0>
 8019404:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019408:	4649      	mov	r1, r9
 801940a:	4638      	mov	r0, r7
 801940c:	47c0      	blx	r8
 801940e:	3001      	adds	r0, #1
 8019410:	d01e      	beq.n	8019450 <_printf_common+0xa4>
 8019412:	6823      	ldr	r3, [r4, #0]
 8019414:	68e5      	ldr	r5, [r4, #12]
 8019416:	6832      	ldr	r2, [r6, #0]
 8019418:	f003 0306 	and.w	r3, r3, #6
 801941c:	2b04      	cmp	r3, #4
 801941e:	bf08      	it	eq
 8019420:	1aad      	subeq	r5, r5, r2
 8019422:	68a3      	ldr	r3, [r4, #8]
 8019424:	6922      	ldr	r2, [r4, #16]
 8019426:	bf0c      	ite	eq
 8019428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801942c:	2500      	movne	r5, #0
 801942e:	4293      	cmp	r3, r2
 8019430:	bfc4      	itt	gt
 8019432:	1a9b      	subgt	r3, r3, r2
 8019434:	18ed      	addgt	r5, r5, r3
 8019436:	2600      	movs	r6, #0
 8019438:	341a      	adds	r4, #26
 801943a:	42b5      	cmp	r5, r6
 801943c:	d11a      	bne.n	8019474 <_printf_common+0xc8>
 801943e:	2000      	movs	r0, #0
 8019440:	e008      	b.n	8019454 <_printf_common+0xa8>
 8019442:	2301      	movs	r3, #1
 8019444:	4652      	mov	r2, sl
 8019446:	4649      	mov	r1, r9
 8019448:	4638      	mov	r0, r7
 801944a:	47c0      	blx	r8
 801944c:	3001      	adds	r0, #1
 801944e:	d103      	bne.n	8019458 <_printf_common+0xac>
 8019450:	f04f 30ff 	mov.w	r0, #4294967295
 8019454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019458:	3501      	adds	r5, #1
 801945a:	e7c6      	b.n	80193ea <_printf_common+0x3e>
 801945c:	18e1      	adds	r1, r4, r3
 801945e:	1c5a      	adds	r2, r3, #1
 8019460:	2030      	movs	r0, #48	; 0x30
 8019462:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019466:	4422      	add	r2, r4
 8019468:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801946c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019470:	3302      	adds	r3, #2
 8019472:	e7c7      	b.n	8019404 <_printf_common+0x58>
 8019474:	2301      	movs	r3, #1
 8019476:	4622      	mov	r2, r4
 8019478:	4649      	mov	r1, r9
 801947a:	4638      	mov	r0, r7
 801947c:	47c0      	blx	r8
 801947e:	3001      	adds	r0, #1
 8019480:	d0e6      	beq.n	8019450 <_printf_common+0xa4>
 8019482:	3601      	adds	r6, #1
 8019484:	e7d9      	b.n	801943a <_printf_common+0x8e>
	...

08019488 <_printf_i>:
 8019488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801948c:	460c      	mov	r4, r1
 801948e:	4691      	mov	r9, r2
 8019490:	7e27      	ldrb	r7, [r4, #24]
 8019492:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019494:	2f78      	cmp	r7, #120	; 0x78
 8019496:	4680      	mov	r8, r0
 8019498:	469a      	mov	sl, r3
 801949a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801949e:	d807      	bhi.n	80194b0 <_printf_i+0x28>
 80194a0:	2f62      	cmp	r7, #98	; 0x62
 80194a2:	d80a      	bhi.n	80194ba <_printf_i+0x32>
 80194a4:	2f00      	cmp	r7, #0
 80194a6:	f000 80d8 	beq.w	801965a <_printf_i+0x1d2>
 80194aa:	2f58      	cmp	r7, #88	; 0x58
 80194ac:	f000 80a3 	beq.w	80195f6 <_printf_i+0x16e>
 80194b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80194b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80194b8:	e03a      	b.n	8019530 <_printf_i+0xa8>
 80194ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80194be:	2b15      	cmp	r3, #21
 80194c0:	d8f6      	bhi.n	80194b0 <_printf_i+0x28>
 80194c2:	a001      	add	r0, pc, #4	; (adr r0, 80194c8 <_printf_i+0x40>)
 80194c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80194c8:	08019521 	.word	0x08019521
 80194cc:	08019535 	.word	0x08019535
 80194d0:	080194b1 	.word	0x080194b1
 80194d4:	080194b1 	.word	0x080194b1
 80194d8:	080194b1 	.word	0x080194b1
 80194dc:	080194b1 	.word	0x080194b1
 80194e0:	08019535 	.word	0x08019535
 80194e4:	080194b1 	.word	0x080194b1
 80194e8:	080194b1 	.word	0x080194b1
 80194ec:	080194b1 	.word	0x080194b1
 80194f0:	080194b1 	.word	0x080194b1
 80194f4:	08019641 	.word	0x08019641
 80194f8:	08019565 	.word	0x08019565
 80194fc:	08019623 	.word	0x08019623
 8019500:	080194b1 	.word	0x080194b1
 8019504:	080194b1 	.word	0x080194b1
 8019508:	08019663 	.word	0x08019663
 801950c:	080194b1 	.word	0x080194b1
 8019510:	08019565 	.word	0x08019565
 8019514:	080194b1 	.word	0x080194b1
 8019518:	080194b1 	.word	0x080194b1
 801951c:	0801962b 	.word	0x0801962b
 8019520:	680b      	ldr	r3, [r1, #0]
 8019522:	1d1a      	adds	r2, r3, #4
 8019524:	681b      	ldr	r3, [r3, #0]
 8019526:	600a      	str	r2, [r1, #0]
 8019528:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801952c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019530:	2301      	movs	r3, #1
 8019532:	e0a3      	b.n	801967c <_printf_i+0x1f4>
 8019534:	6825      	ldr	r5, [r4, #0]
 8019536:	6808      	ldr	r0, [r1, #0]
 8019538:	062e      	lsls	r6, r5, #24
 801953a:	f100 0304 	add.w	r3, r0, #4
 801953e:	d50a      	bpl.n	8019556 <_printf_i+0xce>
 8019540:	6805      	ldr	r5, [r0, #0]
 8019542:	600b      	str	r3, [r1, #0]
 8019544:	2d00      	cmp	r5, #0
 8019546:	da03      	bge.n	8019550 <_printf_i+0xc8>
 8019548:	232d      	movs	r3, #45	; 0x2d
 801954a:	426d      	negs	r5, r5
 801954c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019550:	485e      	ldr	r0, [pc, #376]	; (80196cc <_printf_i+0x244>)
 8019552:	230a      	movs	r3, #10
 8019554:	e019      	b.n	801958a <_printf_i+0x102>
 8019556:	f015 0f40 	tst.w	r5, #64	; 0x40
 801955a:	6805      	ldr	r5, [r0, #0]
 801955c:	600b      	str	r3, [r1, #0]
 801955e:	bf18      	it	ne
 8019560:	b22d      	sxthne	r5, r5
 8019562:	e7ef      	b.n	8019544 <_printf_i+0xbc>
 8019564:	680b      	ldr	r3, [r1, #0]
 8019566:	6825      	ldr	r5, [r4, #0]
 8019568:	1d18      	adds	r0, r3, #4
 801956a:	6008      	str	r0, [r1, #0]
 801956c:	0628      	lsls	r0, r5, #24
 801956e:	d501      	bpl.n	8019574 <_printf_i+0xec>
 8019570:	681d      	ldr	r5, [r3, #0]
 8019572:	e002      	b.n	801957a <_printf_i+0xf2>
 8019574:	0669      	lsls	r1, r5, #25
 8019576:	d5fb      	bpl.n	8019570 <_printf_i+0xe8>
 8019578:	881d      	ldrh	r5, [r3, #0]
 801957a:	4854      	ldr	r0, [pc, #336]	; (80196cc <_printf_i+0x244>)
 801957c:	2f6f      	cmp	r7, #111	; 0x6f
 801957e:	bf0c      	ite	eq
 8019580:	2308      	moveq	r3, #8
 8019582:	230a      	movne	r3, #10
 8019584:	2100      	movs	r1, #0
 8019586:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801958a:	6866      	ldr	r6, [r4, #4]
 801958c:	60a6      	str	r6, [r4, #8]
 801958e:	2e00      	cmp	r6, #0
 8019590:	bfa2      	ittt	ge
 8019592:	6821      	ldrge	r1, [r4, #0]
 8019594:	f021 0104 	bicge.w	r1, r1, #4
 8019598:	6021      	strge	r1, [r4, #0]
 801959a:	b90d      	cbnz	r5, 80195a0 <_printf_i+0x118>
 801959c:	2e00      	cmp	r6, #0
 801959e:	d04d      	beq.n	801963c <_printf_i+0x1b4>
 80195a0:	4616      	mov	r6, r2
 80195a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80195a6:	fb03 5711 	mls	r7, r3, r1, r5
 80195aa:	5dc7      	ldrb	r7, [r0, r7]
 80195ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80195b0:	462f      	mov	r7, r5
 80195b2:	42bb      	cmp	r3, r7
 80195b4:	460d      	mov	r5, r1
 80195b6:	d9f4      	bls.n	80195a2 <_printf_i+0x11a>
 80195b8:	2b08      	cmp	r3, #8
 80195ba:	d10b      	bne.n	80195d4 <_printf_i+0x14c>
 80195bc:	6823      	ldr	r3, [r4, #0]
 80195be:	07df      	lsls	r7, r3, #31
 80195c0:	d508      	bpl.n	80195d4 <_printf_i+0x14c>
 80195c2:	6923      	ldr	r3, [r4, #16]
 80195c4:	6861      	ldr	r1, [r4, #4]
 80195c6:	4299      	cmp	r1, r3
 80195c8:	bfde      	ittt	le
 80195ca:	2330      	movle	r3, #48	; 0x30
 80195cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80195d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80195d4:	1b92      	subs	r2, r2, r6
 80195d6:	6122      	str	r2, [r4, #16]
 80195d8:	f8cd a000 	str.w	sl, [sp]
 80195dc:	464b      	mov	r3, r9
 80195de:	aa03      	add	r2, sp, #12
 80195e0:	4621      	mov	r1, r4
 80195e2:	4640      	mov	r0, r8
 80195e4:	f7ff fee2 	bl	80193ac <_printf_common>
 80195e8:	3001      	adds	r0, #1
 80195ea:	d14c      	bne.n	8019686 <_printf_i+0x1fe>
 80195ec:	f04f 30ff 	mov.w	r0, #4294967295
 80195f0:	b004      	add	sp, #16
 80195f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80195f6:	4835      	ldr	r0, [pc, #212]	; (80196cc <_printf_i+0x244>)
 80195f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80195fc:	6823      	ldr	r3, [r4, #0]
 80195fe:	680e      	ldr	r6, [r1, #0]
 8019600:	061f      	lsls	r7, r3, #24
 8019602:	f856 5b04 	ldr.w	r5, [r6], #4
 8019606:	600e      	str	r6, [r1, #0]
 8019608:	d514      	bpl.n	8019634 <_printf_i+0x1ac>
 801960a:	07d9      	lsls	r1, r3, #31
 801960c:	bf44      	itt	mi
 801960e:	f043 0320 	orrmi.w	r3, r3, #32
 8019612:	6023      	strmi	r3, [r4, #0]
 8019614:	b91d      	cbnz	r5, 801961e <_printf_i+0x196>
 8019616:	6823      	ldr	r3, [r4, #0]
 8019618:	f023 0320 	bic.w	r3, r3, #32
 801961c:	6023      	str	r3, [r4, #0]
 801961e:	2310      	movs	r3, #16
 8019620:	e7b0      	b.n	8019584 <_printf_i+0xfc>
 8019622:	6823      	ldr	r3, [r4, #0]
 8019624:	f043 0320 	orr.w	r3, r3, #32
 8019628:	6023      	str	r3, [r4, #0]
 801962a:	2378      	movs	r3, #120	; 0x78
 801962c:	4828      	ldr	r0, [pc, #160]	; (80196d0 <_printf_i+0x248>)
 801962e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019632:	e7e3      	b.n	80195fc <_printf_i+0x174>
 8019634:	065e      	lsls	r6, r3, #25
 8019636:	bf48      	it	mi
 8019638:	b2ad      	uxthmi	r5, r5
 801963a:	e7e6      	b.n	801960a <_printf_i+0x182>
 801963c:	4616      	mov	r6, r2
 801963e:	e7bb      	b.n	80195b8 <_printf_i+0x130>
 8019640:	680b      	ldr	r3, [r1, #0]
 8019642:	6826      	ldr	r6, [r4, #0]
 8019644:	6960      	ldr	r0, [r4, #20]
 8019646:	1d1d      	adds	r5, r3, #4
 8019648:	600d      	str	r5, [r1, #0]
 801964a:	0635      	lsls	r5, r6, #24
 801964c:	681b      	ldr	r3, [r3, #0]
 801964e:	d501      	bpl.n	8019654 <_printf_i+0x1cc>
 8019650:	6018      	str	r0, [r3, #0]
 8019652:	e002      	b.n	801965a <_printf_i+0x1d2>
 8019654:	0671      	lsls	r1, r6, #25
 8019656:	d5fb      	bpl.n	8019650 <_printf_i+0x1c8>
 8019658:	8018      	strh	r0, [r3, #0]
 801965a:	2300      	movs	r3, #0
 801965c:	6123      	str	r3, [r4, #16]
 801965e:	4616      	mov	r6, r2
 8019660:	e7ba      	b.n	80195d8 <_printf_i+0x150>
 8019662:	680b      	ldr	r3, [r1, #0]
 8019664:	1d1a      	adds	r2, r3, #4
 8019666:	600a      	str	r2, [r1, #0]
 8019668:	681e      	ldr	r6, [r3, #0]
 801966a:	6862      	ldr	r2, [r4, #4]
 801966c:	2100      	movs	r1, #0
 801966e:	4630      	mov	r0, r6
 8019670:	f7e6 fe4e 	bl	8000310 <memchr>
 8019674:	b108      	cbz	r0, 801967a <_printf_i+0x1f2>
 8019676:	1b80      	subs	r0, r0, r6
 8019678:	6060      	str	r0, [r4, #4]
 801967a:	6863      	ldr	r3, [r4, #4]
 801967c:	6123      	str	r3, [r4, #16]
 801967e:	2300      	movs	r3, #0
 8019680:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019684:	e7a8      	b.n	80195d8 <_printf_i+0x150>
 8019686:	6923      	ldr	r3, [r4, #16]
 8019688:	4632      	mov	r2, r6
 801968a:	4649      	mov	r1, r9
 801968c:	4640      	mov	r0, r8
 801968e:	47d0      	blx	sl
 8019690:	3001      	adds	r0, #1
 8019692:	d0ab      	beq.n	80195ec <_printf_i+0x164>
 8019694:	6823      	ldr	r3, [r4, #0]
 8019696:	079b      	lsls	r3, r3, #30
 8019698:	d413      	bmi.n	80196c2 <_printf_i+0x23a>
 801969a:	68e0      	ldr	r0, [r4, #12]
 801969c:	9b03      	ldr	r3, [sp, #12]
 801969e:	4298      	cmp	r0, r3
 80196a0:	bfb8      	it	lt
 80196a2:	4618      	movlt	r0, r3
 80196a4:	e7a4      	b.n	80195f0 <_printf_i+0x168>
 80196a6:	2301      	movs	r3, #1
 80196a8:	4632      	mov	r2, r6
 80196aa:	4649      	mov	r1, r9
 80196ac:	4640      	mov	r0, r8
 80196ae:	47d0      	blx	sl
 80196b0:	3001      	adds	r0, #1
 80196b2:	d09b      	beq.n	80195ec <_printf_i+0x164>
 80196b4:	3501      	adds	r5, #1
 80196b6:	68e3      	ldr	r3, [r4, #12]
 80196b8:	9903      	ldr	r1, [sp, #12]
 80196ba:	1a5b      	subs	r3, r3, r1
 80196bc:	42ab      	cmp	r3, r5
 80196be:	dcf2      	bgt.n	80196a6 <_printf_i+0x21e>
 80196c0:	e7eb      	b.n	801969a <_printf_i+0x212>
 80196c2:	2500      	movs	r5, #0
 80196c4:	f104 0619 	add.w	r6, r4, #25
 80196c8:	e7f5      	b.n	80196b6 <_printf_i+0x22e>
 80196ca:	bf00      	nop
 80196cc:	0801d749 	.word	0x0801d749
 80196d0:	0801d75a 	.word	0x0801d75a

080196d4 <_sbrk_r>:
 80196d4:	b538      	push	{r3, r4, r5, lr}
 80196d6:	4d06      	ldr	r5, [pc, #24]	; (80196f0 <_sbrk_r+0x1c>)
 80196d8:	2300      	movs	r3, #0
 80196da:	4604      	mov	r4, r0
 80196dc:	4608      	mov	r0, r1
 80196de:	602b      	str	r3, [r5, #0]
 80196e0:	f7e7 fcf0 	bl	80010c4 <_sbrk>
 80196e4:	1c43      	adds	r3, r0, #1
 80196e6:	d102      	bne.n	80196ee <_sbrk_r+0x1a>
 80196e8:	682b      	ldr	r3, [r5, #0]
 80196ea:	b103      	cbz	r3, 80196ee <_sbrk_r+0x1a>
 80196ec:	6023      	str	r3, [r4, #0]
 80196ee:	bd38      	pop	{r3, r4, r5, pc}
 80196f0:	24006df4 	.word	0x24006df4

080196f4 <_raise_r>:
 80196f4:	291f      	cmp	r1, #31
 80196f6:	b538      	push	{r3, r4, r5, lr}
 80196f8:	4604      	mov	r4, r0
 80196fa:	460d      	mov	r5, r1
 80196fc:	d904      	bls.n	8019708 <_raise_r+0x14>
 80196fe:	2316      	movs	r3, #22
 8019700:	6003      	str	r3, [r0, #0]
 8019702:	f04f 30ff 	mov.w	r0, #4294967295
 8019706:	bd38      	pop	{r3, r4, r5, pc}
 8019708:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801970a:	b112      	cbz	r2, 8019712 <_raise_r+0x1e>
 801970c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019710:	b94b      	cbnz	r3, 8019726 <_raise_r+0x32>
 8019712:	4620      	mov	r0, r4
 8019714:	f000 f830 	bl	8019778 <_getpid_r>
 8019718:	462a      	mov	r2, r5
 801971a:	4601      	mov	r1, r0
 801971c:	4620      	mov	r0, r4
 801971e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019722:	f000 b817 	b.w	8019754 <_kill_r>
 8019726:	2b01      	cmp	r3, #1
 8019728:	d00a      	beq.n	8019740 <_raise_r+0x4c>
 801972a:	1c59      	adds	r1, r3, #1
 801972c:	d103      	bne.n	8019736 <_raise_r+0x42>
 801972e:	2316      	movs	r3, #22
 8019730:	6003      	str	r3, [r0, #0]
 8019732:	2001      	movs	r0, #1
 8019734:	e7e7      	b.n	8019706 <_raise_r+0x12>
 8019736:	2400      	movs	r4, #0
 8019738:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801973c:	4628      	mov	r0, r5
 801973e:	4798      	blx	r3
 8019740:	2000      	movs	r0, #0
 8019742:	e7e0      	b.n	8019706 <_raise_r+0x12>

08019744 <raise>:
 8019744:	4b02      	ldr	r3, [pc, #8]	; (8019750 <raise+0xc>)
 8019746:	4601      	mov	r1, r0
 8019748:	6818      	ldr	r0, [r3, #0]
 801974a:	f7ff bfd3 	b.w	80196f4 <_raise_r>
 801974e:	bf00      	nop
 8019750:	240000d8 	.word	0x240000d8

08019754 <_kill_r>:
 8019754:	b538      	push	{r3, r4, r5, lr}
 8019756:	4d07      	ldr	r5, [pc, #28]	; (8019774 <_kill_r+0x20>)
 8019758:	2300      	movs	r3, #0
 801975a:	4604      	mov	r4, r0
 801975c:	4608      	mov	r0, r1
 801975e:	4611      	mov	r1, r2
 8019760:	602b      	str	r3, [r5, #0]
 8019762:	f7e7 fc7b 	bl	800105c <_kill>
 8019766:	1c43      	adds	r3, r0, #1
 8019768:	d102      	bne.n	8019770 <_kill_r+0x1c>
 801976a:	682b      	ldr	r3, [r5, #0]
 801976c:	b103      	cbz	r3, 8019770 <_kill_r+0x1c>
 801976e:	6023      	str	r3, [r4, #0]
 8019770:	bd38      	pop	{r3, r4, r5, pc}
 8019772:	bf00      	nop
 8019774:	24006df4 	.word	0x24006df4

08019778 <_getpid_r>:
 8019778:	f7e7 bc6e 	b.w	8001058 <_getpid>

0801977c <__swbuf_r>:
 801977c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801977e:	460e      	mov	r6, r1
 8019780:	4614      	mov	r4, r2
 8019782:	4605      	mov	r5, r0
 8019784:	b118      	cbz	r0, 801978e <__swbuf_r+0x12>
 8019786:	6983      	ldr	r3, [r0, #24]
 8019788:	b90b      	cbnz	r3, 801978e <__swbuf_r+0x12>
 801978a:	f000 fa33 	bl	8019bf4 <__sinit>
 801978e:	4b21      	ldr	r3, [pc, #132]	; (8019814 <__swbuf_r+0x98>)
 8019790:	429c      	cmp	r4, r3
 8019792:	d12b      	bne.n	80197ec <__swbuf_r+0x70>
 8019794:	686c      	ldr	r4, [r5, #4]
 8019796:	69a3      	ldr	r3, [r4, #24]
 8019798:	60a3      	str	r3, [r4, #8]
 801979a:	89a3      	ldrh	r3, [r4, #12]
 801979c:	071a      	lsls	r2, r3, #28
 801979e:	d52f      	bpl.n	8019800 <__swbuf_r+0x84>
 80197a0:	6923      	ldr	r3, [r4, #16]
 80197a2:	b36b      	cbz	r3, 8019800 <__swbuf_r+0x84>
 80197a4:	6923      	ldr	r3, [r4, #16]
 80197a6:	6820      	ldr	r0, [r4, #0]
 80197a8:	1ac0      	subs	r0, r0, r3
 80197aa:	6963      	ldr	r3, [r4, #20]
 80197ac:	b2f6      	uxtb	r6, r6
 80197ae:	4283      	cmp	r3, r0
 80197b0:	4637      	mov	r7, r6
 80197b2:	dc04      	bgt.n	80197be <__swbuf_r+0x42>
 80197b4:	4621      	mov	r1, r4
 80197b6:	4628      	mov	r0, r5
 80197b8:	f000 f988 	bl	8019acc <_fflush_r>
 80197bc:	bb30      	cbnz	r0, 801980c <__swbuf_r+0x90>
 80197be:	68a3      	ldr	r3, [r4, #8]
 80197c0:	3b01      	subs	r3, #1
 80197c2:	60a3      	str	r3, [r4, #8]
 80197c4:	6823      	ldr	r3, [r4, #0]
 80197c6:	1c5a      	adds	r2, r3, #1
 80197c8:	6022      	str	r2, [r4, #0]
 80197ca:	701e      	strb	r6, [r3, #0]
 80197cc:	6963      	ldr	r3, [r4, #20]
 80197ce:	3001      	adds	r0, #1
 80197d0:	4283      	cmp	r3, r0
 80197d2:	d004      	beq.n	80197de <__swbuf_r+0x62>
 80197d4:	89a3      	ldrh	r3, [r4, #12]
 80197d6:	07db      	lsls	r3, r3, #31
 80197d8:	d506      	bpl.n	80197e8 <__swbuf_r+0x6c>
 80197da:	2e0a      	cmp	r6, #10
 80197dc:	d104      	bne.n	80197e8 <__swbuf_r+0x6c>
 80197de:	4621      	mov	r1, r4
 80197e0:	4628      	mov	r0, r5
 80197e2:	f000 f973 	bl	8019acc <_fflush_r>
 80197e6:	b988      	cbnz	r0, 801980c <__swbuf_r+0x90>
 80197e8:	4638      	mov	r0, r7
 80197ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80197ec:	4b0a      	ldr	r3, [pc, #40]	; (8019818 <__swbuf_r+0x9c>)
 80197ee:	429c      	cmp	r4, r3
 80197f0:	d101      	bne.n	80197f6 <__swbuf_r+0x7a>
 80197f2:	68ac      	ldr	r4, [r5, #8]
 80197f4:	e7cf      	b.n	8019796 <__swbuf_r+0x1a>
 80197f6:	4b09      	ldr	r3, [pc, #36]	; (801981c <__swbuf_r+0xa0>)
 80197f8:	429c      	cmp	r4, r3
 80197fa:	bf08      	it	eq
 80197fc:	68ec      	ldreq	r4, [r5, #12]
 80197fe:	e7ca      	b.n	8019796 <__swbuf_r+0x1a>
 8019800:	4621      	mov	r1, r4
 8019802:	4628      	mov	r0, r5
 8019804:	f000 f80c 	bl	8019820 <__swsetup_r>
 8019808:	2800      	cmp	r0, #0
 801980a:	d0cb      	beq.n	80197a4 <__swbuf_r+0x28>
 801980c:	f04f 37ff 	mov.w	r7, #4294967295
 8019810:	e7ea      	b.n	80197e8 <__swbuf_r+0x6c>
 8019812:	bf00      	nop
 8019814:	0801d790 	.word	0x0801d790
 8019818:	0801d7b0 	.word	0x0801d7b0
 801981c:	0801d770 	.word	0x0801d770

08019820 <__swsetup_r>:
 8019820:	4b32      	ldr	r3, [pc, #200]	; (80198ec <__swsetup_r+0xcc>)
 8019822:	b570      	push	{r4, r5, r6, lr}
 8019824:	681d      	ldr	r5, [r3, #0]
 8019826:	4606      	mov	r6, r0
 8019828:	460c      	mov	r4, r1
 801982a:	b125      	cbz	r5, 8019836 <__swsetup_r+0x16>
 801982c:	69ab      	ldr	r3, [r5, #24]
 801982e:	b913      	cbnz	r3, 8019836 <__swsetup_r+0x16>
 8019830:	4628      	mov	r0, r5
 8019832:	f000 f9df 	bl	8019bf4 <__sinit>
 8019836:	4b2e      	ldr	r3, [pc, #184]	; (80198f0 <__swsetup_r+0xd0>)
 8019838:	429c      	cmp	r4, r3
 801983a:	d10f      	bne.n	801985c <__swsetup_r+0x3c>
 801983c:	686c      	ldr	r4, [r5, #4]
 801983e:	89a3      	ldrh	r3, [r4, #12]
 8019840:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019844:	0719      	lsls	r1, r3, #28
 8019846:	d42c      	bmi.n	80198a2 <__swsetup_r+0x82>
 8019848:	06dd      	lsls	r5, r3, #27
 801984a:	d411      	bmi.n	8019870 <__swsetup_r+0x50>
 801984c:	2309      	movs	r3, #9
 801984e:	6033      	str	r3, [r6, #0]
 8019850:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019854:	81a3      	strh	r3, [r4, #12]
 8019856:	f04f 30ff 	mov.w	r0, #4294967295
 801985a:	e03e      	b.n	80198da <__swsetup_r+0xba>
 801985c:	4b25      	ldr	r3, [pc, #148]	; (80198f4 <__swsetup_r+0xd4>)
 801985e:	429c      	cmp	r4, r3
 8019860:	d101      	bne.n	8019866 <__swsetup_r+0x46>
 8019862:	68ac      	ldr	r4, [r5, #8]
 8019864:	e7eb      	b.n	801983e <__swsetup_r+0x1e>
 8019866:	4b24      	ldr	r3, [pc, #144]	; (80198f8 <__swsetup_r+0xd8>)
 8019868:	429c      	cmp	r4, r3
 801986a:	bf08      	it	eq
 801986c:	68ec      	ldreq	r4, [r5, #12]
 801986e:	e7e6      	b.n	801983e <__swsetup_r+0x1e>
 8019870:	0758      	lsls	r0, r3, #29
 8019872:	d512      	bpl.n	801989a <__swsetup_r+0x7a>
 8019874:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019876:	b141      	cbz	r1, 801988a <__swsetup_r+0x6a>
 8019878:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801987c:	4299      	cmp	r1, r3
 801987e:	d002      	beq.n	8019886 <__swsetup_r+0x66>
 8019880:	4630      	mov	r0, r6
 8019882:	f7ff fb8f 	bl	8018fa4 <_free_r>
 8019886:	2300      	movs	r3, #0
 8019888:	6363      	str	r3, [r4, #52]	; 0x34
 801988a:	89a3      	ldrh	r3, [r4, #12]
 801988c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019890:	81a3      	strh	r3, [r4, #12]
 8019892:	2300      	movs	r3, #0
 8019894:	6063      	str	r3, [r4, #4]
 8019896:	6923      	ldr	r3, [r4, #16]
 8019898:	6023      	str	r3, [r4, #0]
 801989a:	89a3      	ldrh	r3, [r4, #12]
 801989c:	f043 0308 	orr.w	r3, r3, #8
 80198a0:	81a3      	strh	r3, [r4, #12]
 80198a2:	6923      	ldr	r3, [r4, #16]
 80198a4:	b94b      	cbnz	r3, 80198ba <__swsetup_r+0x9a>
 80198a6:	89a3      	ldrh	r3, [r4, #12]
 80198a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80198ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80198b0:	d003      	beq.n	80198ba <__swsetup_r+0x9a>
 80198b2:	4621      	mov	r1, r4
 80198b4:	4630      	mov	r0, r6
 80198b6:	f000 fa63 	bl	8019d80 <__smakebuf_r>
 80198ba:	89a0      	ldrh	r0, [r4, #12]
 80198bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80198c0:	f010 0301 	ands.w	r3, r0, #1
 80198c4:	d00a      	beq.n	80198dc <__swsetup_r+0xbc>
 80198c6:	2300      	movs	r3, #0
 80198c8:	60a3      	str	r3, [r4, #8]
 80198ca:	6963      	ldr	r3, [r4, #20]
 80198cc:	425b      	negs	r3, r3
 80198ce:	61a3      	str	r3, [r4, #24]
 80198d0:	6923      	ldr	r3, [r4, #16]
 80198d2:	b943      	cbnz	r3, 80198e6 <__swsetup_r+0xc6>
 80198d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80198d8:	d1ba      	bne.n	8019850 <__swsetup_r+0x30>
 80198da:	bd70      	pop	{r4, r5, r6, pc}
 80198dc:	0781      	lsls	r1, r0, #30
 80198de:	bf58      	it	pl
 80198e0:	6963      	ldrpl	r3, [r4, #20]
 80198e2:	60a3      	str	r3, [r4, #8]
 80198e4:	e7f4      	b.n	80198d0 <__swsetup_r+0xb0>
 80198e6:	2000      	movs	r0, #0
 80198e8:	e7f7      	b.n	80198da <__swsetup_r+0xba>
 80198ea:	bf00      	nop
 80198ec:	240000d8 	.word	0x240000d8
 80198f0:	0801d790 	.word	0x0801d790
 80198f4:	0801d7b0 	.word	0x0801d7b0
 80198f8:	0801d770 	.word	0x0801d770

080198fc <__register_exitproc>:
 80198fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019900:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80199bc <__register_exitproc+0xc0>
 8019904:	4606      	mov	r6, r0
 8019906:	f8d8 0000 	ldr.w	r0, [r8]
 801990a:	461f      	mov	r7, r3
 801990c:	460d      	mov	r5, r1
 801990e:	4691      	mov	r9, r2
 8019910:	f000 fa0e 	bl	8019d30 <__retarget_lock_acquire_recursive>
 8019914:	4b25      	ldr	r3, [pc, #148]	; (80199ac <__register_exitproc+0xb0>)
 8019916:	681c      	ldr	r4, [r3, #0]
 8019918:	b934      	cbnz	r4, 8019928 <__register_exitproc+0x2c>
 801991a:	4c25      	ldr	r4, [pc, #148]	; (80199b0 <__register_exitproc+0xb4>)
 801991c:	601c      	str	r4, [r3, #0]
 801991e:	4b25      	ldr	r3, [pc, #148]	; (80199b4 <__register_exitproc+0xb8>)
 8019920:	b113      	cbz	r3, 8019928 <__register_exitproc+0x2c>
 8019922:	681b      	ldr	r3, [r3, #0]
 8019924:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8019928:	6863      	ldr	r3, [r4, #4]
 801992a:	2b1f      	cmp	r3, #31
 801992c:	dd07      	ble.n	801993e <__register_exitproc+0x42>
 801992e:	f8d8 0000 	ldr.w	r0, [r8]
 8019932:	f000 f9ff 	bl	8019d34 <__retarget_lock_release_recursive>
 8019936:	f04f 30ff 	mov.w	r0, #4294967295
 801993a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801993e:	b34e      	cbz	r6, 8019994 <__register_exitproc+0x98>
 8019940:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8019944:	b988      	cbnz	r0, 801996a <__register_exitproc+0x6e>
 8019946:	4b1c      	ldr	r3, [pc, #112]	; (80199b8 <__register_exitproc+0xbc>)
 8019948:	b923      	cbnz	r3, 8019954 <__register_exitproc+0x58>
 801994a:	f8d8 0000 	ldr.w	r0, [r8]
 801994e:	f000 f9f0 	bl	8019d32 <__retarget_lock_release>
 8019952:	e7f0      	b.n	8019936 <__register_exitproc+0x3a>
 8019954:	f44f 7084 	mov.w	r0, #264	; 0x108
 8019958:	f7ff fafe 	bl	8018f58 <malloc>
 801995c:	2800      	cmp	r0, #0
 801995e:	d0f4      	beq.n	801994a <__register_exitproc+0x4e>
 8019960:	2300      	movs	r3, #0
 8019962:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8019966:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801996a:	6863      	ldr	r3, [r4, #4]
 801996c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8019970:	2201      	movs	r2, #1
 8019972:	409a      	lsls	r2, r3
 8019974:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8019978:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801997c:	4313      	orrs	r3, r2
 801997e:	2e02      	cmp	r6, #2
 8019980:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8019984:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8019988:	bf02      	ittt	eq
 801998a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801998e:	431a      	orreq	r2, r3
 8019990:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8019994:	6863      	ldr	r3, [r4, #4]
 8019996:	f8d8 0000 	ldr.w	r0, [r8]
 801999a:	1c5a      	adds	r2, r3, #1
 801999c:	3302      	adds	r3, #2
 801999e:	6062      	str	r2, [r4, #4]
 80199a0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80199a4:	f000 f9c6 	bl	8019d34 <__retarget_lock_release_recursive>
 80199a8:	2000      	movs	r0, #0
 80199aa:	e7c6      	b.n	801993a <__register_exitproc+0x3e>
 80199ac:	24006b0c 	.word	0x24006b0c
 80199b0:	24006a80 	.word	0x24006a80
 80199b4:	0801d76c 	.word	0x0801d76c
 80199b8:	08018f59 	.word	0x08018f59
 80199bc:	2400013c 	.word	0x2400013c

080199c0 <__sflush_r>:
 80199c0:	898a      	ldrh	r2, [r1, #12]
 80199c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199c6:	4605      	mov	r5, r0
 80199c8:	0710      	lsls	r0, r2, #28
 80199ca:	460c      	mov	r4, r1
 80199cc:	d458      	bmi.n	8019a80 <__sflush_r+0xc0>
 80199ce:	684b      	ldr	r3, [r1, #4]
 80199d0:	2b00      	cmp	r3, #0
 80199d2:	dc05      	bgt.n	80199e0 <__sflush_r+0x20>
 80199d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	dc02      	bgt.n	80199e0 <__sflush_r+0x20>
 80199da:	2000      	movs	r0, #0
 80199dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80199e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80199e2:	2e00      	cmp	r6, #0
 80199e4:	d0f9      	beq.n	80199da <__sflush_r+0x1a>
 80199e6:	2300      	movs	r3, #0
 80199e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80199ec:	682f      	ldr	r7, [r5, #0]
 80199ee:	602b      	str	r3, [r5, #0]
 80199f0:	d032      	beq.n	8019a58 <__sflush_r+0x98>
 80199f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80199f4:	89a3      	ldrh	r3, [r4, #12]
 80199f6:	075a      	lsls	r2, r3, #29
 80199f8:	d505      	bpl.n	8019a06 <__sflush_r+0x46>
 80199fa:	6863      	ldr	r3, [r4, #4]
 80199fc:	1ac0      	subs	r0, r0, r3
 80199fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019a00:	b10b      	cbz	r3, 8019a06 <__sflush_r+0x46>
 8019a02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019a04:	1ac0      	subs	r0, r0, r3
 8019a06:	2300      	movs	r3, #0
 8019a08:	4602      	mov	r2, r0
 8019a0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019a0c:	6a21      	ldr	r1, [r4, #32]
 8019a0e:	4628      	mov	r0, r5
 8019a10:	47b0      	blx	r6
 8019a12:	1c43      	adds	r3, r0, #1
 8019a14:	89a3      	ldrh	r3, [r4, #12]
 8019a16:	d106      	bne.n	8019a26 <__sflush_r+0x66>
 8019a18:	6829      	ldr	r1, [r5, #0]
 8019a1a:	291d      	cmp	r1, #29
 8019a1c:	d82c      	bhi.n	8019a78 <__sflush_r+0xb8>
 8019a1e:	4a2a      	ldr	r2, [pc, #168]	; (8019ac8 <__sflush_r+0x108>)
 8019a20:	40ca      	lsrs	r2, r1
 8019a22:	07d6      	lsls	r6, r2, #31
 8019a24:	d528      	bpl.n	8019a78 <__sflush_r+0xb8>
 8019a26:	2200      	movs	r2, #0
 8019a28:	6062      	str	r2, [r4, #4]
 8019a2a:	04d9      	lsls	r1, r3, #19
 8019a2c:	6922      	ldr	r2, [r4, #16]
 8019a2e:	6022      	str	r2, [r4, #0]
 8019a30:	d504      	bpl.n	8019a3c <__sflush_r+0x7c>
 8019a32:	1c42      	adds	r2, r0, #1
 8019a34:	d101      	bne.n	8019a3a <__sflush_r+0x7a>
 8019a36:	682b      	ldr	r3, [r5, #0]
 8019a38:	b903      	cbnz	r3, 8019a3c <__sflush_r+0x7c>
 8019a3a:	6560      	str	r0, [r4, #84]	; 0x54
 8019a3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019a3e:	602f      	str	r7, [r5, #0]
 8019a40:	2900      	cmp	r1, #0
 8019a42:	d0ca      	beq.n	80199da <__sflush_r+0x1a>
 8019a44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019a48:	4299      	cmp	r1, r3
 8019a4a:	d002      	beq.n	8019a52 <__sflush_r+0x92>
 8019a4c:	4628      	mov	r0, r5
 8019a4e:	f7ff faa9 	bl	8018fa4 <_free_r>
 8019a52:	2000      	movs	r0, #0
 8019a54:	6360      	str	r0, [r4, #52]	; 0x34
 8019a56:	e7c1      	b.n	80199dc <__sflush_r+0x1c>
 8019a58:	6a21      	ldr	r1, [r4, #32]
 8019a5a:	2301      	movs	r3, #1
 8019a5c:	4628      	mov	r0, r5
 8019a5e:	47b0      	blx	r6
 8019a60:	1c41      	adds	r1, r0, #1
 8019a62:	d1c7      	bne.n	80199f4 <__sflush_r+0x34>
 8019a64:	682b      	ldr	r3, [r5, #0]
 8019a66:	2b00      	cmp	r3, #0
 8019a68:	d0c4      	beq.n	80199f4 <__sflush_r+0x34>
 8019a6a:	2b1d      	cmp	r3, #29
 8019a6c:	d001      	beq.n	8019a72 <__sflush_r+0xb2>
 8019a6e:	2b16      	cmp	r3, #22
 8019a70:	d101      	bne.n	8019a76 <__sflush_r+0xb6>
 8019a72:	602f      	str	r7, [r5, #0]
 8019a74:	e7b1      	b.n	80199da <__sflush_r+0x1a>
 8019a76:	89a3      	ldrh	r3, [r4, #12]
 8019a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019a7c:	81a3      	strh	r3, [r4, #12]
 8019a7e:	e7ad      	b.n	80199dc <__sflush_r+0x1c>
 8019a80:	690f      	ldr	r7, [r1, #16]
 8019a82:	2f00      	cmp	r7, #0
 8019a84:	d0a9      	beq.n	80199da <__sflush_r+0x1a>
 8019a86:	0793      	lsls	r3, r2, #30
 8019a88:	680e      	ldr	r6, [r1, #0]
 8019a8a:	bf08      	it	eq
 8019a8c:	694b      	ldreq	r3, [r1, #20]
 8019a8e:	600f      	str	r7, [r1, #0]
 8019a90:	bf18      	it	ne
 8019a92:	2300      	movne	r3, #0
 8019a94:	eba6 0807 	sub.w	r8, r6, r7
 8019a98:	608b      	str	r3, [r1, #8]
 8019a9a:	f1b8 0f00 	cmp.w	r8, #0
 8019a9e:	dd9c      	ble.n	80199da <__sflush_r+0x1a>
 8019aa0:	6a21      	ldr	r1, [r4, #32]
 8019aa2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019aa4:	4643      	mov	r3, r8
 8019aa6:	463a      	mov	r2, r7
 8019aa8:	4628      	mov	r0, r5
 8019aaa:	47b0      	blx	r6
 8019aac:	2800      	cmp	r0, #0
 8019aae:	dc06      	bgt.n	8019abe <__sflush_r+0xfe>
 8019ab0:	89a3      	ldrh	r3, [r4, #12]
 8019ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019ab6:	81a3      	strh	r3, [r4, #12]
 8019ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8019abc:	e78e      	b.n	80199dc <__sflush_r+0x1c>
 8019abe:	4407      	add	r7, r0
 8019ac0:	eba8 0800 	sub.w	r8, r8, r0
 8019ac4:	e7e9      	b.n	8019a9a <__sflush_r+0xda>
 8019ac6:	bf00      	nop
 8019ac8:	20400001 	.word	0x20400001

08019acc <_fflush_r>:
 8019acc:	b538      	push	{r3, r4, r5, lr}
 8019ace:	690b      	ldr	r3, [r1, #16]
 8019ad0:	4605      	mov	r5, r0
 8019ad2:	460c      	mov	r4, r1
 8019ad4:	b913      	cbnz	r3, 8019adc <_fflush_r+0x10>
 8019ad6:	2500      	movs	r5, #0
 8019ad8:	4628      	mov	r0, r5
 8019ada:	bd38      	pop	{r3, r4, r5, pc}
 8019adc:	b118      	cbz	r0, 8019ae6 <_fflush_r+0x1a>
 8019ade:	6983      	ldr	r3, [r0, #24]
 8019ae0:	b90b      	cbnz	r3, 8019ae6 <_fflush_r+0x1a>
 8019ae2:	f000 f887 	bl	8019bf4 <__sinit>
 8019ae6:	4b14      	ldr	r3, [pc, #80]	; (8019b38 <_fflush_r+0x6c>)
 8019ae8:	429c      	cmp	r4, r3
 8019aea:	d11b      	bne.n	8019b24 <_fflush_r+0x58>
 8019aec:	686c      	ldr	r4, [r5, #4]
 8019aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	d0ef      	beq.n	8019ad6 <_fflush_r+0xa>
 8019af6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019af8:	07d0      	lsls	r0, r2, #31
 8019afa:	d404      	bmi.n	8019b06 <_fflush_r+0x3a>
 8019afc:	0599      	lsls	r1, r3, #22
 8019afe:	d402      	bmi.n	8019b06 <_fflush_r+0x3a>
 8019b00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019b02:	f000 f915 	bl	8019d30 <__retarget_lock_acquire_recursive>
 8019b06:	4628      	mov	r0, r5
 8019b08:	4621      	mov	r1, r4
 8019b0a:	f7ff ff59 	bl	80199c0 <__sflush_r>
 8019b0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019b10:	07da      	lsls	r2, r3, #31
 8019b12:	4605      	mov	r5, r0
 8019b14:	d4e0      	bmi.n	8019ad8 <_fflush_r+0xc>
 8019b16:	89a3      	ldrh	r3, [r4, #12]
 8019b18:	059b      	lsls	r3, r3, #22
 8019b1a:	d4dd      	bmi.n	8019ad8 <_fflush_r+0xc>
 8019b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019b1e:	f000 f909 	bl	8019d34 <__retarget_lock_release_recursive>
 8019b22:	e7d9      	b.n	8019ad8 <_fflush_r+0xc>
 8019b24:	4b05      	ldr	r3, [pc, #20]	; (8019b3c <_fflush_r+0x70>)
 8019b26:	429c      	cmp	r4, r3
 8019b28:	d101      	bne.n	8019b2e <_fflush_r+0x62>
 8019b2a:	68ac      	ldr	r4, [r5, #8]
 8019b2c:	e7df      	b.n	8019aee <_fflush_r+0x22>
 8019b2e:	4b04      	ldr	r3, [pc, #16]	; (8019b40 <_fflush_r+0x74>)
 8019b30:	429c      	cmp	r4, r3
 8019b32:	bf08      	it	eq
 8019b34:	68ec      	ldreq	r4, [r5, #12]
 8019b36:	e7da      	b.n	8019aee <_fflush_r+0x22>
 8019b38:	0801d790 	.word	0x0801d790
 8019b3c:	0801d7b0 	.word	0x0801d7b0
 8019b40:	0801d770 	.word	0x0801d770

08019b44 <std>:
 8019b44:	2300      	movs	r3, #0
 8019b46:	b510      	push	{r4, lr}
 8019b48:	4604      	mov	r4, r0
 8019b4a:	e9c0 3300 	strd	r3, r3, [r0]
 8019b4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019b52:	6083      	str	r3, [r0, #8]
 8019b54:	8181      	strh	r1, [r0, #12]
 8019b56:	6643      	str	r3, [r0, #100]	; 0x64
 8019b58:	81c2      	strh	r2, [r0, #14]
 8019b5a:	6183      	str	r3, [r0, #24]
 8019b5c:	4619      	mov	r1, r3
 8019b5e:	2208      	movs	r2, #8
 8019b60:	305c      	adds	r0, #92	; 0x5c
 8019b62:	f7ff fa17 	bl	8018f94 <memset>
 8019b66:	4b05      	ldr	r3, [pc, #20]	; (8019b7c <std+0x38>)
 8019b68:	6263      	str	r3, [r4, #36]	; 0x24
 8019b6a:	4b05      	ldr	r3, [pc, #20]	; (8019b80 <std+0x3c>)
 8019b6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8019b6e:	4b05      	ldr	r3, [pc, #20]	; (8019b84 <std+0x40>)
 8019b70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019b72:	4b05      	ldr	r3, [pc, #20]	; (8019b88 <std+0x44>)
 8019b74:	6224      	str	r4, [r4, #32]
 8019b76:	6323      	str	r3, [r4, #48]	; 0x30
 8019b78:	bd10      	pop	{r4, pc}
 8019b7a:	bf00      	nop
 8019b7c:	08019e19 	.word	0x08019e19
 8019b80:	08019e3b 	.word	0x08019e3b
 8019b84:	08019e73 	.word	0x08019e73
 8019b88:	08019e97 	.word	0x08019e97

08019b8c <_cleanup_r>:
 8019b8c:	4901      	ldr	r1, [pc, #4]	; (8019b94 <_cleanup_r+0x8>)
 8019b8e:	f000 b8af 	b.w	8019cf0 <_fwalk_reent>
 8019b92:	bf00      	nop
 8019b94:	08019acd 	.word	0x08019acd

08019b98 <__sfmoreglue>:
 8019b98:	b570      	push	{r4, r5, r6, lr}
 8019b9a:	1e4a      	subs	r2, r1, #1
 8019b9c:	2568      	movs	r5, #104	; 0x68
 8019b9e:	4355      	muls	r5, r2
 8019ba0:	460e      	mov	r6, r1
 8019ba2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019ba6:	f7ff fa4d 	bl	8019044 <_malloc_r>
 8019baa:	4604      	mov	r4, r0
 8019bac:	b140      	cbz	r0, 8019bc0 <__sfmoreglue+0x28>
 8019bae:	2100      	movs	r1, #0
 8019bb0:	e9c0 1600 	strd	r1, r6, [r0]
 8019bb4:	300c      	adds	r0, #12
 8019bb6:	60a0      	str	r0, [r4, #8]
 8019bb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019bbc:	f7ff f9ea 	bl	8018f94 <memset>
 8019bc0:	4620      	mov	r0, r4
 8019bc2:	bd70      	pop	{r4, r5, r6, pc}

08019bc4 <__sfp_lock_acquire>:
 8019bc4:	4801      	ldr	r0, [pc, #4]	; (8019bcc <__sfp_lock_acquire+0x8>)
 8019bc6:	f000 b8b3 	b.w	8019d30 <__retarget_lock_acquire_recursive>
 8019bca:	bf00      	nop
 8019bcc:	24006df0 	.word	0x24006df0

08019bd0 <__sfp_lock_release>:
 8019bd0:	4801      	ldr	r0, [pc, #4]	; (8019bd8 <__sfp_lock_release+0x8>)
 8019bd2:	f000 b8af 	b.w	8019d34 <__retarget_lock_release_recursive>
 8019bd6:	bf00      	nop
 8019bd8:	24006df0 	.word	0x24006df0

08019bdc <__sinit_lock_acquire>:
 8019bdc:	4801      	ldr	r0, [pc, #4]	; (8019be4 <__sinit_lock_acquire+0x8>)
 8019bde:	f000 b8a7 	b.w	8019d30 <__retarget_lock_acquire_recursive>
 8019be2:	bf00      	nop
 8019be4:	24006deb 	.word	0x24006deb

08019be8 <__sinit_lock_release>:
 8019be8:	4801      	ldr	r0, [pc, #4]	; (8019bf0 <__sinit_lock_release+0x8>)
 8019bea:	f000 b8a3 	b.w	8019d34 <__retarget_lock_release_recursive>
 8019bee:	bf00      	nop
 8019bf0:	24006deb 	.word	0x24006deb

08019bf4 <__sinit>:
 8019bf4:	b510      	push	{r4, lr}
 8019bf6:	4604      	mov	r4, r0
 8019bf8:	f7ff fff0 	bl	8019bdc <__sinit_lock_acquire>
 8019bfc:	69a3      	ldr	r3, [r4, #24]
 8019bfe:	b11b      	cbz	r3, 8019c08 <__sinit+0x14>
 8019c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019c04:	f7ff bff0 	b.w	8019be8 <__sinit_lock_release>
 8019c08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019c0c:	6523      	str	r3, [r4, #80]	; 0x50
 8019c0e:	4b13      	ldr	r3, [pc, #76]	; (8019c5c <__sinit+0x68>)
 8019c10:	4a13      	ldr	r2, [pc, #76]	; (8019c60 <__sinit+0x6c>)
 8019c12:	681b      	ldr	r3, [r3, #0]
 8019c14:	62a2      	str	r2, [r4, #40]	; 0x28
 8019c16:	42a3      	cmp	r3, r4
 8019c18:	bf04      	itt	eq
 8019c1a:	2301      	moveq	r3, #1
 8019c1c:	61a3      	streq	r3, [r4, #24]
 8019c1e:	4620      	mov	r0, r4
 8019c20:	f000 f820 	bl	8019c64 <__sfp>
 8019c24:	6060      	str	r0, [r4, #4]
 8019c26:	4620      	mov	r0, r4
 8019c28:	f000 f81c 	bl	8019c64 <__sfp>
 8019c2c:	60a0      	str	r0, [r4, #8]
 8019c2e:	4620      	mov	r0, r4
 8019c30:	f000 f818 	bl	8019c64 <__sfp>
 8019c34:	2200      	movs	r2, #0
 8019c36:	60e0      	str	r0, [r4, #12]
 8019c38:	2104      	movs	r1, #4
 8019c3a:	6860      	ldr	r0, [r4, #4]
 8019c3c:	f7ff ff82 	bl	8019b44 <std>
 8019c40:	68a0      	ldr	r0, [r4, #8]
 8019c42:	2201      	movs	r2, #1
 8019c44:	2109      	movs	r1, #9
 8019c46:	f7ff ff7d 	bl	8019b44 <std>
 8019c4a:	68e0      	ldr	r0, [r4, #12]
 8019c4c:	2202      	movs	r2, #2
 8019c4e:	2112      	movs	r1, #18
 8019c50:	f7ff ff78 	bl	8019b44 <std>
 8019c54:	2301      	movs	r3, #1
 8019c56:	61a3      	str	r3, [r4, #24]
 8019c58:	e7d2      	b.n	8019c00 <__sinit+0xc>
 8019c5a:	bf00      	nop
 8019c5c:	0801d734 	.word	0x0801d734
 8019c60:	08019b8d 	.word	0x08019b8d

08019c64 <__sfp>:
 8019c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c66:	4607      	mov	r7, r0
 8019c68:	f7ff ffac 	bl	8019bc4 <__sfp_lock_acquire>
 8019c6c:	4b1e      	ldr	r3, [pc, #120]	; (8019ce8 <__sfp+0x84>)
 8019c6e:	681e      	ldr	r6, [r3, #0]
 8019c70:	69b3      	ldr	r3, [r6, #24]
 8019c72:	b913      	cbnz	r3, 8019c7a <__sfp+0x16>
 8019c74:	4630      	mov	r0, r6
 8019c76:	f7ff ffbd 	bl	8019bf4 <__sinit>
 8019c7a:	3648      	adds	r6, #72	; 0x48
 8019c7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019c80:	3b01      	subs	r3, #1
 8019c82:	d503      	bpl.n	8019c8c <__sfp+0x28>
 8019c84:	6833      	ldr	r3, [r6, #0]
 8019c86:	b30b      	cbz	r3, 8019ccc <__sfp+0x68>
 8019c88:	6836      	ldr	r6, [r6, #0]
 8019c8a:	e7f7      	b.n	8019c7c <__sfp+0x18>
 8019c8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019c90:	b9d5      	cbnz	r5, 8019cc8 <__sfp+0x64>
 8019c92:	4b16      	ldr	r3, [pc, #88]	; (8019cec <__sfp+0x88>)
 8019c94:	60e3      	str	r3, [r4, #12]
 8019c96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019c9a:	6665      	str	r5, [r4, #100]	; 0x64
 8019c9c:	f000 f847 	bl	8019d2e <__retarget_lock_init_recursive>
 8019ca0:	f7ff ff96 	bl	8019bd0 <__sfp_lock_release>
 8019ca4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019ca8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019cac:	6025      	str	r5, [r4, #0]
 8019cae:	61a5      	str	r5, [r4, #24]
 8019cb0:	2208      	movs	r2, #8
 8019cb2:	4629      	mov	r1, r5
 8019cb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019cb8:	f7ff f96c 	bl	8018f94 <memset>
 8019cbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019cc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019cc4:	4620      	mov	r0, r4
 8019cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019cc8:	3468      	adds	r4, #104	; 0x68
 8019cca:	e7d9      	b.n	8019c80 <__sfp+0x1c>
 8019ccc:	2104      	movs	r1, #4
 8019cce:	4638      	mov	r0, r7
 8019cd0:	f7ff ff62 	bl	8019b98 <__sfmoreglue>
 8019cd4:	4604      	mov	r4, r0
 8019cd6:	6030      	str	r0, [r6, #0]
 8019cd8:	2800      	cmp	r0, #0
 8019cda:	d1d5      	bne.n	8019c88 <__sfp+0x24>
 8019cdc:	f7ff ff78 	bl	8019bd0 <__sfp_lock_release>
 8019ce0:	230c      	movs	r3, #12
 8019ce2:	603b      	str	r3, [r7, #0]
 8019ce4:	e7ee      	b.n	8019cc4 <__sfp+0x60>
 8019ce6:	bf00      	nop
 8019ce8:	0801d734 	.word	0x0801d734
 8019cec:	ffff0001 	.word	0xffff0001

08019cf0 <_fwalk_reent>:
 8019cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019cf4:	4606      	mov	r6, r0
 8019cf6:	4688      	mov	r8, r1
 8019cf8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019cfc:	2700      	movs	r7, #0
 8019cfe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019d02:	f1b9 0901 	subs.w	r9, r9, #1
 8019d06:	d505      	bpl.n	8019d14 <_fwalk_reent+0x24>
 8019d08:	6824      	ldr	r4, [r4, #0]
 8019d0a:	2c00      	cmp	r4, #0
 8019d0c:	d1f7      	bne.n	8019cfe <_fwalk_reent+0xe>
 8019d0e:	4638      	mov	r0, r7
 8019d10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019d14:	89ab      	ldrh	r3, [r5, #12]
 8019d16:	2b01      	cmp	r3, #1
 8019d18:	d907      	bls.n	8019d2a <_fwalk_reent+0x3a>
 8019d1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019d1e:	3301      	adds	r3, #1
 8019d20:	d003      	beq.n	8019d2a <_fwalk_reent+0x3a>
 8019d22:	4629      	mov	r1, r5
 8019d24:	4630      	mov	r0, r6
 8019d26:	47c0      	blx	r8
 8019d28:	4307      	orrs	r7, r0
 8019d2a:	3568      	adds	r5, #104	; 0x68
 8019d2c:	e7e9      	b.n	8019d02 <_fwalk_reent+0x12>

08019d2e <__retarget_lock_init_recursive>:
 8019d2e:	4770      	bx	lr

08019d30 <__retarget_lock_acquire_recursive>:
 8019d30:	4770      	bx	lr

08019d32 <__retarget_lock_release>:
 8019d32:	4770      	bx	lr

08019d34 <__retarget_lock_release_recursive>:
 8019d34:	4770      	bx	lr

08019d36 <__swhatbuf_r>:
 8019d36:	b570      	push	{r4, r5, r6, lr}
 8019d38:	460e      	mov	r6, r1
 8019d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d3e:	2900      	cmp	r1, #0
 8019d40:	b096      	sub	sp, #88	; 0x58
 8019d42:	4614      	mov	r4, r2
 8019d44:	461d      	mov	r5, r3
 8019d46:	da07      	bge.n	8019d58 <__swhatbuf_r+0x22>
 8019d48:	2300      	movs	r3, #0
 8019d4a:	602b      	str	r3, [r5, #0]
 8019d4c:	89b3      	ldrh	r3, [r6, #12]
 8019d4e:	061a      	lsls	r2, r3, #24
 8019d50:	d410      	bmi.n	8019d74 <__swhatbuf_r+0x3e>
 8019d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019d56:	e00e      	b.n	8019d76 <__swhatbuf_r+0x40>
 8019d58:	466a      	mov	r2, sp
 8019d5a:	f000 f8c3 	bl	8019ee4 <_fstat_r>
 8019d5e:	2800      	cmp	r0, #0
 8019d60:	dbf2      	blt.n	8019d48 <__swhatbuf_r+0x12>
 8019d62:	9a01      	ldr	r2, [sp, #4]
 8019d64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019d68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019d6c:	425a      	negs	r2, r3
 8019d6e:	415a      	adcs	r2, r3
 8019d70:	602a      	str	r2, [r5, #0]
 8019d72:	e7ee      	b.n	8019d52 <__swhatbuf_r+0x1c>
 8019d74:	2340      	movs	r3, #64	; 0x40
 8019d76:	2000      	movs	r0, #0
 8019d78:	6023      	str	r3, [r4, #0]
 8019d7a:	b016      	add	sp, #88	; 0x58
 8019d7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08019d80 <__smakebuf_r>:
 8019d80:	898b      	ldrh	r3, [r1, #12]
 8019d82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019d84:	079d      	lsls	r5, r3, #30
 8019d86:	4606      	mov	r6, r0
 8019d88:	460c      	mov	r4, r1
 8019d8a:	d507      	bpl.n	8019d9c <__smakebuf_r+0x1c>
 8019d8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019d90:	6023      	str	r3, [r4, #0]
 8019d92:	6123      	str	r3, [r4, #16]
 8019d94:	2301      	movs	r3, #1
 8019d96:	6163      	str	r3, [r4, #20]
 8019d98:	b002      	add	sp, #8
 8019d9a:	bd70      	pop	{r4, r5, r6, pc}
 8019d9c:	ab01      	add	r3, sp, #4
 8019d9e:	466a      	mov	r2, sp
 8019da0:	f7ff ffc9 	bl	8019d36 <__swhatbuf_r>
 8019da4:	9900      	ldr	r1, [sp, #0]
 8019da6:	4605      	mov	r5, r0
 8019da8:	4630      	mov	r0, r6
 8019daa:	f7ff f94b 	bl	8019044 <_malloc_r>
 8019dae:	b948      	cbnz	r0, 8019dc4 <__smakebuf_r+0x44>
 8019db0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019db4:	059a      	lsls	r2, r3, #22
 8019db6:	d4ef      	bmi.n	8019d98 <__smakebuf_r+0x18>
 8019db8:	f023 0303 	bic.w	r3, r3, #3
 8019dbc:	f043 0302 	orr.w	r3, r3, #2
 8019dc0:	81a3      	strh	r3, [r4, #12]
 8019dc2:	e7e3      	b.n	8019d8c <__smakebuf_r+0xc>
 8019dc4:	4b0d      	ldr	r3, [pc, #52]	; (8019dfc <__smakebuf_r+0x7c>)
 8019dc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8019dc8:	89a3      	ldrh	r3, [r4, #12]
 8019dca:	6020      	str	r0, [r4, #0]
 8019dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019dd0:	81a3      	strh	r3, [r4, #12]
 8019dd2:	9b00      	ldr	r3, [sp, #0]
 8019dd4:	6163      	str	r3, [r4, #20]
 8019dd6:	9b01      	ldr	r3, [sp, #4]
 8019dd8:	6120      	str	r0, [r4, #16]
 8019dda:	b15b      	cbz	r3, 8019df4 <__smakebuf_r+0x74>
 8019ddc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019de0:	4630      	mov	r0, r6
 8019de2:	f000 f891 	bl	8019f08 <_isatty_r>
 8019de6:	b128      	cbz	r0, 8019df4 <__smakebuf_r+0x74>
 8019de8:	89a3      	ldrh	r3, [r4, #12]
 8019dea:	f023 0303 	bic.w	r3, r3, #3
 8019dee:	f043 0301 	orr.w	r3, r3, #1
 8019df2:	81a3      	strh	r3, [r4, #12]
 8019df4:	89a0      	ldrh	r0, [r4, #12]
 8019df6:	4305      	orrs	r5, r0
 8019df8:	81a5      	strh	r5, [r4, #12]
 8019dfa:	e7cd      	b.n	8019d98 <__smakebuf_r+0x18>
 8019dfc:	08019b8d 	.word	0x08019b8d

08019e00 <__malloc_lock>:
 8019e00:	4801      	ldr	r0, [pc, #4]	; (8019e08 <__malloc_lock+0x8>)
 8019e02:	f7ff bf95 	b.w	8019d30 <__retarget_lock_acquire_recursive>
 8019e06:	bf00      	nop
 8019e08:	24006dec 	.word	0x24006dec

08019e0c <__malloc_unlock>:
 8019e0c:	4801      	ldr	r0, [pc, #4]	; (8019e14 <__malloc_unlock+0x8>)
 8019e0e:	f7ff bf91 	b.w	8019d34 <__retarget_lock_release_recursive>
 8019e12:	bf00      	nop
 8019e14:	24006dec 	.word	0x24006dec

08019e18 <__sread>:
 8019e18:	b510      	push	{r4, lr}
 8019e1a:	460c      	mov	r4, r1
 8019e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019e20:	f000 f894 	bl	8019f4c <_read_r>
 8019e24:	2800      	cmp	r0, #0
 8019e26:	bfab      	itete	ge
 8019e28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019e2a:	89a3      	ldrhlt	r3, [r4, #12]
 8019e2c:	181b      	addge	r3, r3, r0
 8019e2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019e32:	bfac      	ite	ge
 8019e34:	6563      	strge	r3, [r4, #84]	; 0x54
 8019e36:	81a3      	strhlt	r3, [r4, #12]
 8019e38:	bd10      	pop	{r4, pc}

08019e3a <__swrite>:
 8019e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e3e:	461f      	mov	r7, r3
 8019e40:	898b      	ldrh	r3, [r1, #12]
 8019e42:	05db      	lsls	r3, r3, #23
 8019e44:	4605      	mov	r5, r0
 8019e46:	460c      	mov	r4, r1
 8019e48:	4616      	mov	r6, r2
 8019e4a:	d505      	bpl.n	8019e58 <__swrite+0x1e>
 8019e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019e50:	2302      	movs	r3, #2
 8019e52:	2200      	movs	r2, #0
 8019e54:	f000 f868 	bl	8019f28 <_lseek_r>
 8019e58:	89a3      	ldrh	r3, [r4, #12]
 8019e5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019e5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019e62:	81a3      	strh	r3, [r4, #12]
 8019e64:	4632      	mov	r2, r6
 8019e66:	463b      	mov	r3, r7
 8019e68:	4628      	mov	r0, r5
 8019e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019e6e:	f000 b817 	b.w	8019ea0 <_write_r>

08019e72 <__sseek>:
 8019e72:	b510      	push	{r4, lr}
 8019e74:	460c      	mov	r4, r1
 8019e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019e7a:	f000 f855 	bl	8019f28 <_lseek_r>
 8019e7e:	1c43      	adds	r3, r0, #1
 8019e80:	89a3      	ldrh	r3, [r4, #12]
 8019e82:	bf15      	itete	ne
 8019e84:	6560      	strne	r0, [r4, #84]	; 0x54
 8019e86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019e8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019e8e:	81a3      	strheq	r3, [r4, #12]
 8019e90:	bf18      	it	ne
 8019e92:	81a3      	strhne	r3, [r4, #12]
 8019e94:	bd10      	pop	{r4, pc}

08019e96 <__sclose>:
 8019e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019e9a:	f000 b813 	b.w	8019ec4 <_close_r>
	...

08019ea0 <_write_r>:
 8019ea0:	b538      	push	{r3, r4, r5, lr}
 8019ea2:	4d07      	ldr	r5, [pc, #28]	; (8019ec0 <_write_r+0x20>)
 8019ea4:	4604      	mov	r4, r0
 8019ea6:	4608      	mov	r0, r1
 8019ea8:	4611      	mov	r1, r2
 8019eaa:	2200      	movs	r2, #0
 8019eac:	602a      	str	r2, [r5, #0]
 8019eae:	461a      	mov	r2, r3
 8019eb0:	f7e7 f8ef 	bl	8001092 <_write>
 8019eb4:	1c43      	adds	r3, r0, #1
 8019eb6:	d102      	bne.n	8019ebe <_write_r+0x1e>
 8019eb8:	682b      	ldr	r3, [r5, #0]
 8019eba:	b103      	cbz	r3, 8019ebe <_write_r+0x1e>
 8019ebc:	6023      	str	r3, [r4, #0]
 8019ebe:	bd38      	pop	{r3, r4, r5, pc}
 8019ec0:	24006df4 	.word	0x24006df4

08019ec4 <_close_r>:
 8019ec4:	b538      	push	{r3, r4, r5, lr}
 8019ec6:	4d06      	ldr	r5, [pc, #24]	; (8019ee0 <_close_r+0x1c>)
 8019ec8:	2300      	movs	r3, #0
 8019eca:	4604      	mov	r4, r0
 8019ecc:	4608      	mov	r0, r1
 8019ece:	602b      	str	r3, [r5, #0]
 8019ed0:	f7e7 f8ec 	bl	80010ac <_close>
 8019ed4:	1c43      	adds	r3, r0, #1
 8019ed6:	d102      	bne.n	8019ede <_close_r+0x1a>
 8019ed8:	682b      	ldr	r3, [r5, #0]
 8019eda:	b103      	cbz	r3, 8019ede <_close_r+0x1a>
 8019edc:	6023      	str	r3, [r4, #0]
 8019ede:	bd38      	pop	{r3, r4, r5, pc}
 8019ee0:	24006df4 	.word	0x24006df4

08019ee4 <_fstat_r>:
 8019ee4:	b538      	push	{r3, r4, r5, lr}
 8019ee6:	4d07      	ldr	r5, [pc, #28]	; (8019f04 <_fstat_r+0x20>)
 8019ee8:	2300      	movs	r3, #0
 8019eea:	4604      	mov	r4, r0
 8019eec:	4608      	mov	r0, r1
 8019eee:	4611      	mov	r1, r2
 8019ef0:	602b      	str	r3, [r5, #0]
 8019ef2:	f7e7 f8de 	bl	80010b2 <_fstat>
 8019ef6:	1c43      	adds	r3, r0, #1
 8019ef8:	d102      	bne.n	8019f00 <_fstat_r+0x1c>
 8019efa:	682b      	ldr	r3, [r5, #0]
 8019efc:	b103      	cbz	r3, 8019f00 <_fstat_r+0x1c>
 8019efe:	6023      	str	r3, [r4, #0]
 8019f00:	bd38      	pop	{r3, r4, r5, pc}
 8019f02:	bf00      	nop
 8019f04:	24006df4 	.word	0x24006df4

08019f08 <_isatty_r>:
 8019f08:	b538      	push	{r3, r4, r5, lr}
 8019f0a:	4d06      	ldr	r5, [pc, #24]	; (8019f24 <_isatty_r+0x1c>)
 8019f0c:	2300      	movs	r3, #0
 8019f0e:	4604      	mov	r4, r0
 8019f10:	4608      	mov	r0, r1
 8019f12:	602b      	str	r3, [r5, #0]
 8019f14:	f7e7 f8d2 	bl	80010bc <_isatty>
 8019f18:	1c43      	adds	r3, r0, #1
 8019f1a:	d102      	bne.n	8019f22 <_isatty_r+0x1a>
 8019f1c:	682b      	ldr	r3, [r5, #0]
 8019f1e:	b103      	cbz	r3, 8019f22 <_isatty_r+0x1a>
 8019f20:	6023      	str	r3, [r4, #0]
 8019f22:	bd38      	pop	{r3, r4, r5, pc}
 8019f24:	24006df4 	.word	0x24006df4

08019f28 <_lseek_r>:
 8019f28:	b538      	push	{r3, r4, r5, lr}
 8019f2a:	4d07      	ldr	r5, [pc, #28]	; (8019f48 <_lseek_r+0x20>)
 8019f2c:	4604      	mov	r4, r0
 8019f2e:	4608      	mov	r0, r1
 8019f30:	4611      	mov	r1, r2
 8019f32:	2200      	movs	r2, #0
 8019f34:	602a      	str	r2, [r5, #0]
 8019f36:	461a      	mov	r2, r3
 8019f38:	f7e7 f8c2 	bl	80010c0 <_lseek>
 8019f3c:	1c43      	adds	r3, r0, #1
 8019f3e:	d102      	bne.n	8019f46 <_lseek_r+0x1e>
 8019f40:	682b      	ldr	r3, [r5, #0]
 8019f42:	b103      	cbz	r3, 8019f46 <_lseek_r+0x1e>
 8019f44:	6023      	str	r3, [r4, #0]
 8019f46:	bd38      	pop	{r3, r4, r5, pc}
 8019f48:	24006df4 	.word	0x24006df4

08019f4c <_read_r>:
 8019f4c:	b538      	push	{r3, r4, r5, lr}
 8019f4e:	4d07      	ldr	r5, [pc, #28]	; (8019f6c <_read_r+0x20>)
 8019f50:	4604      	mov	r4, r0
 8019f52:	4608      	mov	r0, r1
 8019f54:	4611      	mov	r1, r2
 8019f56:	2200      	movs	r2, #0
 8019f58:	602a      	str	r2, [r5, #0]
 8019f5a:	461a      	mov	r2, r3
 8019f5c:	f7e7 f88c 	bl	8001078 <_read>
 8019f60:	1c43      	adds	r3, r0, #1
 8019f62:	d102      	bne.n	8019f6a <_read_r+0x1e>
 8019f64:	682b      	ldr	r3, [r5, #0]
 8019f66:	b103      	cbz	r3, 8019f6a <_read_r+0x1e>
 8019f68:	6023      	str	r3, [r4, #0]
 8019f6a:	bd38      	pop	{r3, r4, r5, pc}
 8019f6c:	24006df4 	.word	0x24006df4

08019f70 <_init>:
 8019f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f72:	bf00      	nop
 8019f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019f76:	bc08      	pop	{r3}
 8019f78:	469e      	mov	lr, r3
 8019f7a:	4770      	bx	lr

08019f7c <_fini>:
 8019f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f7e:	bf00      	nop
 8019f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019f82:	bc08      	pop	{r3}
 8019f84:	469e      	mov	lr, r3
 8019f86:	4770      	bx	lr
